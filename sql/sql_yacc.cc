
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 25 "/home/buildbot/git/sql/sql_yacc.yy"

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include <my_global.h>
#include "sql_priv.h"
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_show.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "sql_cte.h"
#include "sql_window.h"
#include "item_windowfunc.h"
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"
#include "lex_token.h"
#include "sql_lex.h"
#include "sql_sequence.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(thd, (char*) (A));              \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)                  \
  if (!(A))                                      \
  {                                              \
    thd->parse_error();                          \
    MYSQL_YYABORT;                               \
  }

#define my_yyabort_error(A)                      \
  do { my_error A; MYSQL_YYABORT; } while(0)

#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif


/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use thd->parse_error() or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER_THD(thd, ER_SYNTAX_ERROR);
  thd->parse_error(s, 0);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif


/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int LEX::case_stmt_action_expr(Item* expr)
{
  int case_expr_id= spcont->register_case_expr();
  sp_instr_set_case_expr *i;

  if (spcont->push_case_expr_id(case_expr_id))
    return 1;

  i= new (thd->mem_root)
    sp_instr_set_case_expr(sphead->instructions(), spcont, case_expr_id, expr,
                           this);

  sphead->add_cont_backpatch(i);
  return sphead->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int LEX::case_stmt_action_when(Item *when, bool simple)
{
  uint ip= sphead->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new (thd->mem_root)
         Item_case_expr(thd, spcont->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sphead;
    }
#endif

    expr= new (thd->mem_root) Item_func_eq(thd, var, when);
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, spcont, expr, this);
  }
  else
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, spcont, when, this);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return
    !MY_TEST(i) ||
    sphead->push_backpatch(thd, i, spcont->push_label(thd, empty_lex_str, 0)) ||
    sphead->add_cont_backpatch(i) ||
    sphead->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int LEX::case_stmt_action_then()
{
  uint ip= sphead->instructions();
  sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, spcont);
  if (!MY_TEST(i) || sphead->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sphead->backpatch(spcont->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to after END CASE
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sphead->push_backpatch(thd, i, spcont->last_label());
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

bool
LEX::set_system_variable(struct sys_var_with_base *tmp,
                         enum enum_var_type var_type, Item *val)
{
  set_var *var;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (spcont && tmp->var == Sys_autocommit_ptr)
    sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new (thd->mem_root)
         set_var(thd, var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return var_list.push_back(var, thd->mem_root);
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

bool LEX::set_trigger_new_row(LEX_STRING *name, Item *val)
{
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new (thd->mem_root) Item_null(thd);

  DBUG_ASSERT(trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (trg_chistics.event == TRG_EVENT_INSERT ||
               trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(thd, current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new (thd->mem_root)
        sp_instr_set_trigger_field(sphead->instructions(),
                                   spcont, trg_fld, val, this);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
Item_splocal*
LEX::create_item_for_sp_var(LEX_STRING name, sp_variable *spvar,
                            const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  uint pos_in_q, len_in_q;

  /* If necessary, look for the variable. */
  if (spcont && !spvar)
    spvar= spcont->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spcont && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(thd, name, spvar->offset, spvar->sql_type(),
                 pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(thd, left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(thd, left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(thd, left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select
          statement uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
                       is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool LEX::add_select_to_union_list(bool is_union_distinct,
                                   enum sub_select_type type,
                                   bool is_top_level)
{
  const char *type_name= (type == INTERSECT_TYPE ? "INTERSECT" :
                     (type == EXCEPT_TYPE ? "EXCEPT" : "UNION"));
  /*
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), type_name, "INTO");
    return TRUE;
  }
  if (current_select->order_list.first && !current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), type_name, "ORDER BY");
    return TRUE;
  }

  if (current_select->explicit_limit && !current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), type_name, "LIMIT");
    return TRUE;
  }
  if (current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    thd->parse_error();
    return TRUE;
  }
  if (!is_union_distinct && (type == INTERSECT_TYPE || type == EXCEPT_TYPE))
  {
    my_error(ER_WRONG_USAGE, MYF(0), type_name, "ALL");
    return TRUE;
  }
  /*
    Priority implementation, but also trying to keep things as flat
    as possible */
  if (type == INTERSECT_TYPE &&
      (current_select->linkage != INTERSECT_TYPE &&
       current_select != current_select->master_unit()->first_select()))
  {
    /*
      This and previous SELECTs should go one level down because of
      priority
    */
    SELECT_LEX *prev= exclude_last_select();
    if (add_unit_in_brackets(prev))
      return TRUE;
    return add_select_to_union_list(is_union_distinct, type, 0);
  }
  else
  {
    check_automatic_up(type);
  }
  /* This counter shouldn't be incremented for UNION parts */
  nest_level--;
  if (mysql_new_select(this, 0, NULL))
    return TRUE;
  mysql_init_select(this);
  current_select->linkage= type;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
  {
    current_select->master_unit()->union_distinct=
      current_select;
  }
  else
    DBUG_ASSERT(type == UNION_TYPE);
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    if (no_lookahead)
        lex->sphead->m_tmp_query= lip->get_ptr();
    else
        lex->sphead->m_tmp_query= lip->get_tok_end();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex->spcont, lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}

void LEX::add_key_to_list(LEX_STRING *field_name,
                          enum Key::Keytype type, bool check_exists)
{
  Key *key;
  MEM_ROOT *mem_root= thd->mem_root;
  key= new (mem_root)
        Key(type, null_lex_str, HA_KEY_ALG_UNDEF, false,
             DDL_options(check_exists ?
                         DDL_options::OPT_IF_NOT_EXISTS :
                         DDL_options::OPT_NONE));
  key->columns.push_back(new (mem_root) Key_part_spec(*field_name, 0),
                         mem_root);
  alter_info.key_list.push_back(key, mem_root);
}

void LEX::init_last_field(Column_definition *field, const char *field_name,
         CHARSET_INFO *cs)
{
  last_field= field;

  field->field_name= field_name;

  /* reset LEX fields that are used in Create_field::set_and_check() */
  charset= cs;
}


bool LEX::set_bincmp(CHARSET_INFO *cs, bool bin)
{
  /*
     if charset is NULL - we're parsing a field declaration.
     we cannot call find_bin_collation for a field here, because actual
     field charset is determined in get_sql_field_charset() much later.
     so we only set a flag.
  */
  if (!charset)
  {
    charset= cs;
    last_field->flags|= bin ? BINCMP_FLAG : 0;
    return false;
  }

  charset= bin ? find_bin_collation(cs ? cs : charset)
               :                    cs ? cs : charset;
  return charset == NULL;
}

#define bincmp_collation(X,Y)           \
  do                                    \
  {                                     \
     if (Lex->set_bincmp(X,Y))          \
       MYSQL_YYABORT;                   \
  } while(0)

Virtual_column_info *add_virtual_expression(THD *thd, Item *expr)
{
  Virtual_column_info *v= new (thd->mem_root) Virtual_column_info();
  if (!v)
  {
     mem_alloc_error(sizeof(Virtual_column_info));
     return 0;
   }
   v->expr= expr;
   v->utf8= 0;  /* connection charset */
   return v;
}



/* Line 189 of yacc.c  */
#line 811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADMIN_SYM = 262,
     ADDDATE_SYM = 263,
     AFTER_SYM = 264,
     AGAINST = 265,
     AGGREGATE_SYM = 266,
     ALGORITHM_SYM = 267,
     ALL = 268,
     ALTER = 269,
     ALWAYS_SYM = 270,
     ANALYZE_SYM = 271,
     AND_AND_SYM = 272,
     AND_SYM = 273,
     ANY_SYM = 274,
     AS = 275,
     ASC = 276,
     ASCII_SYM = 277,
     ASENSITIVE_SYM = 278,
     AT_SYM = 279,
     ATOMIC_SYM = 280,
     AUTHORS_SYM = 281,
     AUTOEXTEND_SIZE_SYM = 282,
     AUTO_INC = 283,
     AUTO_SYM = 284,
     AVG_ROW_LENGTH = 285,
     AVG_SYM = 286,
     BACKUP_SYM = 287,
     BEFORE_SYM = 288,
     BEGIN_SYM = 289,
     BETWEEN_SYM = 290,
     BIGINT = 291,
     BINARY = 292,
     BINLOG_SYM = 293,
     BIN_NUM = 294,
     BIT_AND = 295,
     BIT_OR = 296,
     BIT_SYM = 297,
     BIT_XOR = 298,
     BLOB_SYM = 299,
     BLOCK_SYM = 300,
     BOOLEAN_SYM = 301,
     BOOL_SYM = 302,
     BOTH = 303,
     BTREE_SYM = 304,
     BY = 305,
     BYTE_SYM = 306,
     CACHE_SYM = 307,
     CALL_SYM = 308,
     CASCADE = 309,
     CASCADED = 310,
     CASE_SYM = 311,
     CAST_SYM = 312,
     CATALOG_NAME_SYM = 313,
     CHAIN_SYM = 314,
     CHANGE = 315,
     CHANGED = 316,
     CHARSET = 317,
     CHAR_SYM = 318,
     CHECKPOINT_SYM = 319,
     CHECKSUM_SYM = 320,
     CHECK_SYM = 321,
     CIPHER_SYM = 322,
     CLASS_ORIGIN_SYM = 323,
     CLIENT_SYM = 324,
     CLOSE_SYM = 325,
     CLOB = 326,
     COALESCE = 327,
     CODE_SYM = 328,
     COLLATE_SYM = 329,
     COLLATION_SYM = 330,
     COLUMNS = 331,
     COLUMN_ADD_SYM = 332,
     COLUMN_CHECK_SYM = 333,
     COLUMN_CREATE_SYM = 334,
     COLUMN_DELETE_SYM = 335,
     COLUMN_GET_SYM = 336,
     COLUMN_SYM = 337,
     COLUMN_NAME_SYM = 338,
     COMMENT_SYM = 339,
     COMMITTED_SYM = 340,
     COMMIT_SYM = 341,
     COMPACT_SYM = 342,
     COMPLETION_SYM = 343,
     COMPRESSED_SYM = 344,
     CONCURRENT = 345,
     CONDITION_SYM = 346,
     CONNECTION_SYM = 347,
     CONSISTENT_SYM = 348,
     CONSTRAINT = 349,
     CONSTRAINT_CATALOG_SYM = 350,
     CONSTRAINT_NAME_SYM = 351,
     CONSTRAINT_SCHEMA_SYM = 352,
     CONTAINS_SYM = 353,
     CONTEXT_SYM = 354,
     CONTINUE_SYM = 355,
     CONTRIBUTORS_SYM = 356,
     CONVERT_SYM = 357,
     COUNT_SYM = 358,
     CPU_SYM = 359,
     CREATE = 360,
     CROSS = 361,
     CUBE_SYM = 362,
     CUME_DIST_SYM = 363,
     CURDATE = 364,
     CURRENT_SYM = 365,
     CURRENT_USER = 366,
     CURRENT_ROLE = 367,
     CURRENT_POS_SYM = 368,
     CURSOR_SYM = 369,
     CURSOR_NAME_SYM = 370,
     CURTIME = 371,
     CYCLE_SYM = 372,
     DATABASE = 373,
     DATABASES = 374,
     DATAFILE_SYM = 375,
     DATA_SYM = 376,
     DATETIME = 377,
     DATE_ADD_INTERVAL = 378,
     DATE_SUB_INTERVAL = 379,
     DATE_SYM = 380,
     DAY_HOUR_SYM = 381,
     DAY_MICROSECOND_SYM = 382,
     DAY_MINUTE_SYM = 383,
     DAY_SECOND_SYM = 384,
     DAY_SYM = 385,
     DEALLOCATE_SYM = 386,
     DECIMAL_NUM = 387,
     DECIMAL_SYM = 388,
     DECLARE_SYM = 389,
     DECODE_SYM = 390,
     DEFAULT = 391,
     DEFINER_SYM = 392,
     DELAYED_SYM = 393,
     DELAY_KEY_WRITE_SYM = 394,
     DELETE_SYM = 395,
     DENSE_RANK_SYM = 396,
     DESC = 397,
     DESCRIBE = 398,
     DES_KEY_FILE = 399,
     DETERMINISTIC_SYM = 400,
     DIAGNOSTICS_SYM = 401,
     DIRECTORY_SYM = 402,
     DISABLE_SYM = 403,
     DISCARD = 404,
     DISK_SYM = 405,
     DISTINCT = 406,
     DIV_SYM = 407,
     DOUBLE_SYM = 408,
     DO_DOMAIN_IDS_SYM = 409,
     DO_SYM = 410,
     DOT_DOT_SYM = 411,
     DROP = 412,
     DUAL_SYM = 413,
     DUMPFILE = 414,
     DUPLICATE_SYM = 415,
     DYNAMIC_SYM = 416,
     EACH_SYM = 417,
     ELSE = 418,
     ELSEIF_SYM = 419,
     ELSIF_SYM = 420,
     ENABLE_SYM = 421,
     ENCLOSED = 422,
     END = 423,
     ENDS_SYM = 424,
     END_OF_INPUT = 425,
     ENGINES_SYM = 426,
     ENGINE_SYM = 427,
     ENUM = 428,
     EQUAL_SYM = 429,
     ERROR_SYM = 430,
     ERRORS = 431,
     ESCAPED = 432,
     ESCAPE_SYM = 433,
     EVENTS_SYM = 434,
     EVENT_SYM = 435,
     EVERY_SYM = 436,
     EXCHANGE_SYM = 437,
     EXAMINED_SYM = 438,
     EXCEPT_SYM = 439,
     EXCLUDE_SYM = 440,
     EXECUTE_SYM = 441,
     EXCEPTION_SYM = 442,
     EXISTS = 443,
     EXIT_SYM = 444,
     EXPANSION_SYM = 445,
     EXPORT_SYM = 446,
     EXTENDED_SYM = 447,
     EXTENT_SIZE_SYM = 448,
     EXTRACT_SYM = 449,
     FALSE_SYM = 450,
     FAST_SYM = 451,
     FAULTS_SYM = 452,
     FETCH_SYM = 453,
     FILE_SYM = 454,
     FIRST_VALUE_SYM = 455,
     FIRST_SYM = 456,
     FIXED_SYM = 457,
     FLOAT_NUM = 458,
     FLOAT_SYM = 459,
     FLUSH_SYM = 460,
     FOLLOWS_SYM = 461,
     FOLLOWING_SYM = 462,
     FORCE_SYM = 463,
     FOREIGN = 464,
     FOR_SYM = 465,
     FORMAT_SYM = 466,
     FOUND_SYM = 467,
     FROM = 468,
     FULL = 469,
     FULLTEXT_SYM = 470,
     FUNCTION_SYM = 471,
     GE = 472,
     GENERAL = 473,
     GENERATED_SYM = 474,
     GEOMETRYCOLLECTION = 475,
     GEOMETRY_SYM = 476,
     GET_FORMAT = 477,
     GET_SYM = 478,
     GLOBAL_SYM = 479,
     GOTO_SYM = 480,
     GRANT = 481,
     GRANTS = 482,
     GROUP_SYM = 483,
     GROUP_CONCAT_SYM = 484,
     LAG_SYM = 485,
     LEAD_SYM = 486,
     HANDLER_SYM = 487,
     HARD_SYM = 488,
     HASH_SYM = 489,
     HAVING = 490,
     HELP_SYM = 491,
     HEX_NUM = 492,
     HEX_STRING = 493,
     HIGH_PRIORITY = 494,
     HOST_SYM = 495,
     HOSTS_SYM = 496,
     HOUR_MICROSECOND_SYM = 497,
     HOUR_MINUTE_SYM = 498,
     HOUR_SECOND_SYM = 499,
     HOUR_SYM = 500,
     ID_SYM = 501,
     IDENT = 502,
     IDENTIFIED_SYM = 503,
     IDENT_QUOTED = 504,
     IF_SYM = 505,
     IGNORE_DOMAIN_IDS_SYM = 506,
     IGNORE_SYM = 507,
     IGNORE_SERVER_IDS_SYM = 508,
     IMMEDIATE_SYM = 509,
     IMPORT = 510,
     INCREMENT_SYM = 511,
     INDEXES = 512,
     INDEX_SYM = 513,
     INFILE = 514,
     INITIAL_SIZE_SYM = 515,
     INNER_SYM = 516,
     INOUT_SYM = 517,
     INSENSITIVE_SYM = 518,
     INSERT = 519,
     INSERT_METHOD = 520,
     INSTALL_SYM = 521,
     INTERSECT_SYM = 522,
     INTERVAL_SYM = 523,
     INTO = 524,
     INT_SYM = 525,
     INVOKER_SYM = 526,
     IN_SYM = 527,
     IO_SYM = 528,
     IPC_SYM = 529,
     IS = 530,
     ISOLATION = 531,
     ISOPEN_SYM = 532,
     ISSUER_SYM = 533,
     ITERATE_SYM = 534,
     JOIN_SYM = 535,
     JSON_SYM = 536,
     KEYS = 537,
     KEY_BLOCK_SIZE = 538,
     KEY_SYM = 539,
     KILL_SYM = 540,
     LANGUAGE_SYM = 541,
     LAST_SYM = 542,
     LAST_VALUE = 543,
     LASTVAL_SYM = 544,
     LE = 545,
     LEADING = 546,
     LEAVES = 547,
     LEAVE_SYM = 548,
     LEFT = 549,
     LESS_SYM = 550,
     LEVEL_SYM = 551,
     LEX_HOSTNAME = 552,
     LIKE = 553,
     LIMIT = 554,
     LINEAR_SYM = 555,
     LINES = 556,
     LINESTRING = 557,
     LIST_SYM = 558,
     LOAD = 559,
     LOCAL_SYM = 560,
     LOCATOR_SYM = 561,
     LOCKS_SYM = 562,
     LOCK_SYM = 563,
     LOGFILE_SYM = 564,
     LOGS_SYM = 565,
     LONGBLOB = 566,
     LONGTEXT = 567,
     LONG_NUM = 568,
     LONG_SYM = 569,
     LOOP_SYM = 570,
     LOW_PRIORITY = 571,
     MASTER_CONNECT_RETRY_SYM = 572,
     MASTER_DELAY_SYM = 573,
     MASTER_GTID_POS_SYM = 574,
     MASTER_HOST_SYM = 575,
     MASTER_LOG_FILE_SYM = 576,
     MASTER_LOG_POS_SYM = 577,
     MASTER_PASSWORD_SYM = 578,
     MASTER_PORT_SYM = 579,
     MASTER_SERVER_ID_SYM = 580,
     MASTER_SSL_CAPATH_SYM = 581,
     MASTER_SSL_CA_SYM = 582,
     MASTER_SSL_CERT_SYM = 583,
     MASTER_SSL_CIPHER_SYM = 584,
     MASTER_SSL_CRL_SYM = 585,
     MASTER_SSL_CRLPATH_SYM = 586,
     MASTER_SSL_KEY_SYM = 587,
     MASTER_SSL_SYM = 588,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 589,
     MASTER_SYM = 590,
     MASTER_USER_SYM = 591,
     MASTER_USE_GTID_SYM = 592,
     MASTER_HEARTBEAT_PERIOD_SYM = 593,
     MATCH = 594,
     MAX_CONNECTIONS_PER_HOUR = 595,
     MAX_QUERIES_PER_HOUR = 596,
     MAX_ROWS = 597,
     MAX_SIZE_SYM = 598,
     MAX_SYM = 599,
     MAX_UPDATES_PER_HOUR = 600,
     MAX_STATEMENT_TIME_SYM = 601,
     MAX_USER_CONNECTIONS_SYM = 602,
     MAXVALUE_SYM = 603,
     MEDIUMBLOB = 604,
     MEDIUMINT = 605,
     MEDIUMTEXT = 606,
     MEDIUM_SYM = 607,
     MEMORY_SYM = 608,
     MERGE_SYM = 609,
     MESSAGE_TEXT_SYM = 610,
     MICROSECOND_SYM = 611,
     MIGRATE_SYM = 612,
     MINUTE_MICROSECOND_SYM = 613,
     MINUTE_SECOND_SYM = 614,
     MINUTE_SYM = 615,
     MINVALUE_SYM = 616,
     MIN_ROWS = 617,
     MIN_SYM = 618,
     MODE_SYM = 619,
     MODIFIES_SYM = 620,
     MODIFY_SYM = 621,
     MOD_SYM = 622,
     MONTH_SYM = 623,
     MULTILINESTRING = 624,
     MULTIPOINT = 625,
     MULTIPOLYGON = 626,
     MUTEX_SYM = 627,
     MYSQL_SYM = 628,
     MYSQL_ERRNO_SYM = 629,
     NAMES_SYM = 630,
     NAME_SYM = 631,
     NATIONAL_SYM = 632,
     NATURAL = 633,
     NCHAR_STRING = 634,
     NCHAR_SYM = 635,
     NE = 636,
     NEG = 637,
     NEW_SYM = 638,
     NEXT_SYM = 639,
     NEXTVAL_SYM = 640,
     NOCACHE_SYM = 641,
     NOCYCLE_SYM = 642,
     NODEGROUP_SYM = 643,
     NONE_SYM = 644,
     NOT2_SYM = 645,
     NOT_SYM = 646,
     NOTFOUND_SYM = 647,
     NOW_SYM = 648,
     NO_SYM = 649,
     NOMAXVALUE_SYM = 650,
     NOMINVALUE_SYM = 651,
     NO_WAIT_SYM = 652,
     NOWAIT_SYM = 653,
     NO_WRITE_TO_BINLOG = 654,
     NTILE_SYM = 655,
     NULL_SYM = 656,
     NUM = 657,
     NUMBER_SYM = 658,
     NUMERIC_SYM = 659,
     NTH_VALUE_SYM = 660,
     NVARCHAR_SYM = 661,
     OF_SYM = 662,
     OFFSET_SYM = 663,
     OLD_PASSWORD_SYM = 664,
     ON = 665,
     ONE_SYM = 666,
     ONLY_SYM = 667,
     ONLINE_SYM = 668,
     OPEN_SYM = 669,
     OPTIMIZE = 670,
     OPTIONS_SYM = 671,
     OPTION = 672,
     OPTIONALLY = 673,
     OR2_SYM = 674,
     ORDER_SYM = 675,
     OR_OR_SYM = 676,
     OR_SYM = 677,
     OTHERS_SYM = 678,
     OUTER = 679,
     OUTFILE = 680,
     OUT_SYM = 681,
     OVER_SYM = 682,
     OWNER_SYM = 683,
     PACK_KEYS_SYM = 684,
     PAGE_SYM = 685,
     PAGE_CHECKSUM_SYM = 686,
     PARAM_MARKER = 687,
     PARSER_SYM = 688,
     PARSE_VCOL_EXPR_SYM = 689,
     PARTIAL = 690,
     PARTITION_SYM = 691,
     PARTITIONS_SYM = 692,
     PARTITIONING_SYM = 693,
     PASSWORD_SYM = 694,
     PERCENT_RANK_SYM = 695,
     PERSISTENT_SYM = 696,
     PHASE_SYM = 697,
     PLUGINS_SYM = 698,
     PLUGIN_SYM = 699,
     POINT_SYM = 700,
     POLYGON = 701,
     PORT_SYM = 702,
     POSITION_SYM = 703,
     PRECEDES_SYM = 704,
     PRECEDING_SYM = 705,
     PRECISION = 706,
     PREPARE_SYM = 707,
     PRESERVE_SYM = 708,
     PREV_SYM = 709,
     PREVIOUS_SYM = 710,
     PRIMARY_SYM = 711,
     PRIVILEGES = 712,
     PROCEDURE_SYM = 713,
     PROCESS = 714,
     PROCESSLIST_SYM = 715,
     PROFILE_SYM = 716,
     PROFILES_SYM = 717,
     PROXY_SYM = 718,
     PURGE = 719,
     QUARTER_SYM = 720,
     QUERY_SYM = 721,
     QUICK = 722,
     RAISE_SYM = 723,
     RANGE_SYM = 724,
     RANK_SYM = 725,
     RAW = 726,
     READS_SYM = 727,
     READ_ONLY_SYM = 728,
     READ_SYM = 729,
     READ_WRITE_SYM = 730,
     REAL = 731,
     REBUILD_SYM = 732,
     RECOVER_SYM = 733,
     RECURSIVE_SYM = 734,
     REDOFILE_SYM = 735,
     REDO_BUFFER_SIZE_SYM = 736,
     REDUNDANT_SYM = 737,
     REFERENCES = 738,
     REGEXP = 739,
     RELAY = 740,
     RELAYLOG_SYM = 741,
     RELAY_LOG_FILE_SYM = 742,
     RELAY_LOG_POS_SYM = 743,
     RELAY_THREAD = 744,
     RELEASE_SYM = 745,
     RELOAD = 746,
     REMOVE_SYM = 747,
     RENAME = 748,
     REORGANIZE_SYM = 749,
     REPAIR = 750,
     REPEATABLE_SYM = 751,
     REPEAT_SYM = 752,
     REPLACE = 753,
     REPLICATION = 754,
     REQUIRE_SYM = 755,
     RESET_SYM = 756,
     RESIGNAL_SYM = 757,
     RESOURCES = 758,
     RESTORE_SYM = 759,
     RESTRICT = 760,
     RESUME_SYM = 761,
     RETURNED_SQLSTATE_SYM = 762,
     RETURNING_SYM = 763,
     RETURNS_SYM = 764,
     RETURN_SYM = 765,
     REUSE_SYM = 766,
     REVERSE_SYM = 767,
     REVOKE = 768,
     RIGHT = 769,
     ROLE_SYM = 770,
     ROLLBACK_SYM = 771,
     ROLLUP_SYM = 772,
     ROUTINE_SYM = 773,
     ROWCOUNT_SYM = 774,
     ROW_SYM = 775,
     ROWS_SYM = 776,
     ROWTYPE_SYM = 777,
     ROW_COUNT_SYM = 778,
     ROW_FORMAT_SYM = 779,
     ROW_NUMBER_SYM = 780,
     RTREE_SYM = 781,
     SAVEPOINT_SYM = 782,
     SCHEDULE_SYM = 783,
     SCHEMA_NAME_SYM = 784,
     SECOND_MICROSECOND_SYM = 785,
     SECOND_SYM = 786,
     SECURITY_SYM = 787,
     SELECT_SYM = 788,
     SENSITIVE_SYM = 789,
     SEPARATOR_SYM = 790,
     SEQUENCE_SYM = 791,
     SERIALIZABLE_SYM = 792,
     SERIAL_SYM = 793,
     SESSION_SYM = 794,
     SERVER_SYM = 795,
     SERVER_OPTIONS = 796,
     SET = 797,
     SET_VAR = 798,
     SHARE_SYM = 799,
     SHIFT_LEFT = 800,
     SHIFT_RIGHT = 801,
     SHOW = 802,
     SHUTDOWN = 803,
     SIGNAL_SYM = 804,
     SIGNED_SYM = 805,
     SIMPLE_SYM = 806,
     SLAVE = 807,
     SLAVES = 808,
     SLAVE_POS_SYM = 809,
     SLOW = 810,
     SMALLINT = 811,
     SNAPSHOT_SYM = 812,
     SOCKET_SYM = 813,
     SOFT_SYM = 814,
     SONAME_SYM = 815,
     SOUNDS_SYM = 816,
     SOURCE_SYM = 817,
     SPATIAL_SYM = 818,
     SPECIFIC_SYM = 819,
     SQLEXCEPTION_SYM = 820,
     SQLSTATE_SYM = 821,
     SQLWARNING_SYM = 822,
     SQL_BIG_RESULT = 823,
     SQL_BUFFER_RESULT = 824,
     SQL_CACHE_SYM = 825,
     SQL_CALC_FOUND_ROWS = 826,
     SQL_NO_CACHE_SYM = 827,
     SQL_SMALL_RESULT = 828,
     SQL_SYM = 829,
     SQL_THREAD = 830,
     REF_SYSTEM_ID_SYM = 831,
     SSL_SYM = 832,
     STARTING = 833,
     STARTS_SYM = 834,
     START_SYM = 835,
     STATEMENT_SYM = 836,
     STATS_AUTO_RECALC_SYM = 837,
     STATS_PERSISTENT_SYM = 838,
     STATS_SAMPLE_PAGES_SYM = 839,
     STATUS_SYM = 840,
     STDDEV_SAMP_SYM = 841,
     STD_SYM = 842,
     STOP_SYM = 843,
     STORAGE_SYM = 844,
     STORED_SYM = 845,
     STRAIGHT_JOIN = 846,
     STRING_SYM = 847,
     SUBCLASS_ORIGIN_SYM = 848,
     SUBDATE_SYM = 849,
     SUBJECT_SYM = 850,
     SUBPARTITIONS_SYM = 851,
     SUBPARTITION_SYM = 852,
     SUBSTRING = 853,
     SUM_SYM = 854,
     SUPER_SYM = 855,
     SUSPEND_SYM = 856,
     SWAPS_SYM = 857,
     SWITCHES_SYM = 858,
     SYSDATE = 859,
     TABLES = 860,
     TABLESPACE = 861,
     TABLE_REF_PRIORITY = 862,
     TABLE_SYM = 863,
     TABLE_CHECKSUM_SYM = 864,
     TABLE_NAME_SYM = 865,
     TEMPORARY = 866,
     TEMPTABLE_SYM = 867,
     TERMINATED = 868,
     TEXT_STRING = 869,
     TEXT_SYM = 870,
     THAN_SYM = 871,
     THEN_SYM = 872,
     TIES_SYM = 873,
     TIMESTAMP = 874,
     TIMESTAMP_ADD = 875,
     TIMESTAMP_DIFF = 876,
     TIME_SYM = 877,
     TINYBLOB = 878,
     TINYINT = 879,
     TINYTEXT = 880,
     TO_SYM = 881,
     TRAILING = 882,
     TRANSACTION_SYM = 883,
     TRANSACTIONAL_SYM = 884,
     TRIGGERS_SYM = 885,
     TRIGGER_SYM = 886,
     TRIM = 887,
     TRUE_SYM = 888,
     TRUNCATE_SYM = 889,
     TYPES_SYM = 890,
     TYPE_SYM = 891,
     UDF_RETURNS_SYM = 892,
     ULONGLONG_NUM = 893,
     UNBOUNDED_SYM = 894,
     UNCOMMITTED_SYM = 895,
     UNDEFINED_SYM = 896,
     UNDERSCORE_CHARSET = 897,
     UNDOFILE_SYM = 898,
     UNDO_BUFFER_SIZE_SYM = 899,
     UNDO_SYM = 900,
     UNICODE_SYM = 901,
     UNINSTALL_SYM = 902,
     UNION_SYM = 903,
     UNIQUE_SYM = 904,
     UNKNOWN_SYM = 905,
     UNLOCK_SYM = 906,
     UNSIGNED = 907,
     UNTIL_SYM = 908,
     UPDATE_SYM = 909,
     UPGRADE_SYM = 910,
     USAGE = 911,
     USER_SYM = 912,
     USE_FRM = 913,
     USE_SYM = 914,
     USING = 915,
     UTC_DATE_SYM = 916,
     UTC_TIMESTAMP_SYM = 917,
     UTC_TIME_SYM = 918,
     VALUES = 919,
     VALUE_SYM = 920,
     VARBINARY = 921,
     VARCHAR = 922,
     VARCHAR2 = 923,
     VARIABLES = 924,
     VARIANCE_SYM = 925,
     VARYING = 926,
     VAR_SAMP_SYM = 927,
     VIA_SYM = 928,
     VIEW_SYM = 929,
     VIRTUAL_SYM = 930,
     WAIT_SYM = 931,
     WARNINGS = 932,
     WEEK_SYM = 933,
     WEIGHT_STRING_SYM = 934,
     WHEN_SYM = 935,
     WHERE = 936,
     WINDOW_SYM = 937,
     WHILE_SYM = 938,
     WITH = 939,
     WITH_CUBE_SYM = 940,
     WITH_ROLLUP_SYM = 941,
     WORK_SYM = 942,
     WRAPPER_SYM = 943,
     WRITE_SYM = 944,
     X509_SYM = 945,
     XA_SYM = 946,
     XML_SYM = 947,
     XOR = 948,
     YEAR_MONTH_SYM = 949,
     YEAR_SYM = 950,
     ZEROFILL = 951,
     IMPOSSIBLE_ACTION = 952
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define ATOMIC_SYM 280
#define AUTHORS_SYM 281
#define AUTOEXTEND_SIZE_SYM 282
#define AUTO_INC 283
#define AUTO_SYM 284
#define AVG_ROW_LENGTH 285
#define AVG_SYM 286
#define BACKUP_SYM 287
#define BEFORE_SYM 288
#define BEGIN_SYM 289
#define BETWEEN_SYM 290
#define BIGINT 291
#define BINARY 292
#define BINLOG_SYM 293
#define BIN_NUM 294
#define BIT_AND 295
#define BIT_OR 296
#define BIT_SYM 297
#define BIT_XOR 298
#define BLOB_SYM 299
#define BLOCK_SYM 300
#define BOOLEAN_SYM 301
#define BOOL_SYM 302
#define BOTH 303
#define BTREE_SYM 304
#define BY 305
#define BYTE_SYM 306
#define CACHE_SYM 307
#define CALL_SYM 308
#define CASCADE 309
#define CASCADED 310
#define CASE_SYM 311
#define CAST_SYM 312
#define CATALOG_NAME_SYM 313
#define CHAIN_SYM 314
#define CHANGE 315
#define CHANGED 316
#define CHARSET 317
#define CHAR_SYM 318
#define CHECKPOINT_SYM 319
#define CHECKSUM_SYM 320
#define CHECK_SYM 321
#define CIPHER_SYM 322
#define CLASS_ORIGIN_SYM 323
#define CLIENT_SYM 324
#define CLOSE_SYM 325
#define CLOB 326
#define COALESCE 327
#define CODE_SYM 328
#define COLLATE_SYM 329
#define COLLATION_SYM 330
#define COLUMNS 331
#define COLUMN_ADD_SYM 332
#define COLUMN_CHECK_SYM 333
#define COLUMN_CREATE_SYM 334
#define COLUMN_DELETE_SYM 335
#define COLUMN_GET_SYM 336
#define COLUMN_SYM 337
#define COLUMN_NAME_SYM 338
#define COMMENT_SYM 339
#define COMMITTED_SYM 340
#define COMMIT_SYM 341
#define COMPACT_SYM 342
#define COMPLETION_SYM 343
#define COMPRESSED_SYM 344
#define CONCURRENT 345
#define CONDITION_SYM 346
#define CONNECTION_SYM 347
#define CONSISTENT_SYM 348
#define CONSTRAINT 349
#define CONSTRAINT_CATALOG_SYM 350
#define CONSTRAINT_NAME_SYM 351
#define CONSTRAINT_SCHEMA_SYM 352
#define CONTAINS_SYM 353
#define CONTEXT_SYM 354
#define CONTINUE_SYM 355
#define CONTRIBUTORS_SYM 356
#define CONVERT_SYM 357
#define COUNT_SYM 358
#define CPU_SYM 359
#define CREATE 360
#define CROSS 361
#define CUBE_SYM 362
#define CUME_DIST_SYM 363
#define CURDATE 364
#define CURRENT_SYM 365
#define CURRENT_USER 366
#define CURRENT_ROLE 367
#define CURRENT_POS_SYM 368
#define CURSOR_SYM 369
#define CURSOR_NAME_SYM 370
#define CURTIME 371
#define CYCLE_SYM 372
#define DATABASE 373
#define DATABASES 374
#define DATAFILE_SYM 375
#define DATA_SYM 376
#define DATETIME 377
#define DATE_ADD_INTERVAL 378
#define DATE_SUB_INTERVAL 379
#define DATE_SYM 380
#define DAY_HOUR_SYM 381
#define DAY_MICROSECOND_SYM 382
#define DAY_MINUTE_SYM 383
#define DAY_SECOND_SYM 384
#define DAY_SYM 385
#define DEALLOCATE_SYM 386
#define DECIMAL_NUM 387
#define DECIMAL_SYM 388
#define DECLARE_SYM 389
#define DECODE_SYM 390
#define DEFAULT 391
#define DEFINER_SYM 392
#define DELAYED_SYM 393
#define DELAY_KEY_WRITE_SYM 394
#define DELETE_SYM 395
#define DENSE_RANK_SYM 396
#define DESC 397
#define DESCRIBE 398
#define DES_KEY_FILE 399
#define DETERMINISTIC_SYM 400
#define DIAGNOSTICS_SYM 401
#define DIRECTORY_SYM 402
#define DISABLE_SYM 403
#define DISCARD 404
#define DISK_SYM 405
#define DISTINCT 406
#define DIV_SYM 407
#define DOUBLE_SYM 408
#define DO_DOMAIN_IDS_SYM 409
#define DO_SYM 410
#define DOT_DOT_SYM 411
#define DROP 412
#define DUAL_SYM 413
#define DUMPFILE 414
#define DUPLICATE_SYM 415
#define DYNAMIC_SYM 416
#define EACH_SYM 417
#define ELSE 418
#define ELSEIF_SYM 419
#define ELSIF_SYM 420
#define ENABLE_SYM 421
#define ENCLOSED 422
#define END 423
#define ENDS_SYM 424
#define END_OF_INPUT 425
#define ENGINES_SYM 426
#define ENGINE_SYM 427
#define ENUM 428
#define EQUAL_SYM 429
#define ERROR_SYM 430
#define ERRORS 431
#define ESCAPED 432
#define ESCAPE_SYM 433
#define EVENTS_SYM 434
#define EVENT_SYM 435
#define EVERY_SYM 436
#define EXCHANGE_SYM 437
#define EXAMINED_SYM 438
#define EXCEPT_SYM 439
#define EXCLUDE_SYM 440
#define EXECUTE_SYM 441
#define EXCEPTION_SYM 442
#define EXISTS 443
#define EXIT_SYM 444
#define EXPANSION_SYM 445
#define EXPORT_SYM 446
#define EXTENDED_SYM 447
#define EXTENT_SIZE_SYM 448
#define EXTRACT_SYM 449
#define FALSE_SYM 450
#define FAST_SYM 451
#define FAULTS_SYM 452
#define FETCH_SYM 453
#define FILE_SYM 454
#define FIRST_VALUE_SYM 455
#define FIRST_SYM 456
#define FIXED_SYM 457
#define FLOAT_NUM 458
#define FLOAT_SYM 459
#define FLUSH_SYM 460
#define FOLLOWS_SYM 461
#define FOLLOWING_SYM 462
#define FORCE_SYM 463
#define FOREIGN 464
#define FOR_SYM 465
#define FORMAT_SYM 466
#define FOUND_SYM 467
#define FROM 468
#define FULL 469
#define FULLTEXT_SYM 470
#define FUNCTION_SYM 471
#define GE 472
#define GENERAL 473
#define GENERATED_SYM 474
#define GEOMETRYCOLLECTION 475
#define GEOMETRY_SYM 476
#define GET_FORMAT 477
#define GET_SYM 478
#define GLOBAL_SYM 479
#define GOTO_SYM 480
#define GRANT 481
#define GRANTS 482
#define GROUP_SYM 483
#define GROUP_CONCAT_SYM 484
#define LAG_SYM 485
#define LEAD_SYM 486
#define HANDLER_SYM 487
#define HARD_SYM 488
#define HASH_SYM 489
#define HAVING 490
#define HELP_SYM 491
#define HEX_NUM 492
#define HEX_STRING 493
#define HIGH_PRIORITY 494
#define HOST_SYM 495
#define HOSTS_SYM 496
#define HOUR_MICROSECOND_SYM 497
#define HOUR_MINUTE_SYM 498
#define HOUR_SECOND_SYM 499
#define HOUR_SYM 500
#define ID_SYM 501
#define IDENT 502
#define IDENTIFIED_SYM 503
#define IDENT_QUOTED 504
#define IF_SYM 505
#define IGNORE_DOMAIN_IDS_SYM 506
#define IGNORE_SYM 507
#define IGNORE_SERVER_IDS_SYM 508
#define IMMEDIATE_SYM 509
#define IMPORT 510
#define INCREMENT_SYM 511
#define INDEXES 512
#define INDEX_SYM 513
#define INFILE 514
#define INITIAL_SIZE_SYM 515
#define INNER_SYM 516
#define INOUT_SYM 517
#define INSENSITIVE_SYM 518
#define INSERT 519
#define INSERT_METHOD 520
#define INSTALL_SYM 521
#define INTERSECT_SYM 522
#define INTERVAL_SYM 523
#define INTO 524
#define INT_SYM 525
#define INVOKER_SYM 526
#define IN_SYM 527
#define IO_SYM 528
#define IPC_SYM 529
#define IS 530
#define ISOLATION 531
#define ISOPEN_SYM 532
#define ISSUER_SYM 533
#define ITERATE_SYM 534
#define JOIN_SYM 535
#define JSON_SYM 536
#define KEYS 537
#define KEY_BLOCK_SIZE 538
#define KEY_SYM 539
#define KILL_SYM 540
#define LANGUAGE_SYM 541
#define LAST_SYM 542
#define LAST_VALUE 543
#define LASTVAL_SYM 544
#define LE 545
#define LEADING 546
#define LEAVES 547
#define LEAVE_SYM 548
#define LEFT 549
#define LESS_SYM 550
#define LEVEL_SYM 551
#define LEX_HOSTNAME 552
#define LIKE 553
#define LIMIT 554
#define LINEAR_SYM 555
#define LINES 556
#define LINESTRING 557
#define LIST_SYM 558
#define LOAD 559
#define LOCAL_SYM 560
#define LOCATOR_SYM 561
#define LOCKS_SYM 562
#define LOCK_SYM 563
#define LOGFILE_SYM 564
#define LOGS_SYM 565
#define LONGBLOB 566
#define LONGTEXT 567
#define LONG_NUM 568
#define LONG_SYM 569
#define LOOP_SYM 570
#define LOW_PRIORITY 571
#define MASTER_CONNECT_RETRY_SYM 572
#define MASTER_DELAY_SYM 573
#define MASTER_GTID_POS_SYM 574
#define MASTER_HOST_SYM 575
#define MASTER_LOG_FILE_SYM 576
#define MASTER_LOG_POS_SYM 577
#define MASTER_PASSWORD_SYM 578
#define MASTER_PORT_SYM 579
#define MASTER_SERVER_ID_SYM 580
#define MASTER_SSL_CAPATH_SYM 581
#define MASTER_SSL_CA_SYM 582
#define MASTER_SSL_CERT_SYM 583
#define MASTER_SSL_CIPHER_SYM 584
#define MASTER_SSL_CRL_SYM 585
#define MASTER_SSL_CRLPATH_SYM 586
#define MASTER_SSL_KEY_SYM 587
#define MASTER_SSL_SYM 588
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 589
#define MASTER_SYM 590
#define MASTER_USER_SYM 591
#define MASTER_USE_GTID_SYM 592
#define MASTER_HEARTBEAT_PERIOD_SYM 593
#define MATCH 594
#define MAX_CONNECTIONS_PER_HOUR 595
#define MAX_QUERIES_PER_HOUR 596
#define MAX_ROWS 597
#define MAX_SIZE_SYM 598
#define MAX_SYM 599
#define MAX_UPDATES_PER_HOUR 600
#define MAX_STATEMENT_TIME_SYM 601
#define MAX_USER_CONNECTIONS_SYM 602
#define MAXVALUE_SYM 603
#define MEDIUMBLOB 604
#define MEDIUMINT 605
#define MEDIUMTEXT 606
#define MEDIUM_SYM 607
#define MEMORY_SYM 608
#define MERGE_SYM 609
#define MESSAGE_TEXT_SYM 610
#define MICROSECOND_SYM 611
#define MIGRATE_SYM 612
#define MINUTE_MICROSECOND_SYM 613
#define MINUTE_SECOND_SYM 614
#define MINUTE_SYM 615
#define MINVALUE_SYM 616
#define MIN_ROWS 617
#define MIN_SYM 618
#define MODE_SYM 619
#define MODIFIES_SYM 620
#define MODIFY_SYM 621
#define MOD_SYM 622
#define MONTH_SYM 623
#define MULTILINESTRING 624
#define MULTIPOINT 625
#define MULTIPOLYGON 626
#define MUTEX_SYM 627
#define MYSQL_SYM 628
#define MYSQL_ERRNO_SYM 629
#define NAMES_SYM 630
#define NAME_SYM 631
#define NATIONAL_SYM 632
#define NATURAL 633
#define NCHAR_STRING 634
#define NCHAR_SYM 635
#define NE 636
#define NEG 637
#define NEW_SYM 638
#define NEXT_SYM 639
#define NEXTVAL_SYM 640
#define NOCACHE_SYM 641
#define NOCYCLE_SYM 642
#define NODEGROUP_SYM 643
#define NONE_SYM 644
#define NOT2_SYM 645
#define NOT_SYM 646
#define NOTFOUND_SYM 647
#define NOW_SYM 648
#define NO_SYM 649
#define NOMAXVALUE_SYM 650
#define NOMINVALUE_SYM 651
#define NO_WAIT_SYM 652
#define NOWAIT_SYM 653
#define NO_WRITE_TO_BINLOG 654
#define NTILE_SYM 655
#define NULL_SYM 656
#define NUM 657
#define NUMBER_SYM 658
#define NUMERIC_SYM 659
#define NTH_VALUE_SYM 660
#define NVARCHAR_SYM 661
#define OF_SYM 662
#define OFFSET_SYM 663
#define OLD_PASSWORD_SYM 664
#define ON 665
#define ONE_SYM 666
#define ONLY_SYM 667
#define ONLINE_SYM 668
#define OPEN_SYM 669
#define OPTIMIZE 670
#define OPTIONS_SYM 671
#define OPTION 672
#define OPTIONALLY 673
#define OR2_SYM 674
#define ORDER_SYM 675
#define OR_OR_SYM 676
#define OR_SYM 677
#define OTHERS_SYM 678
#define OUTER 679
#define OUTFILE 680
#define OUT_SYM 681
#define OVER_SYM 682
#define OWNER_SYM 683
#define PACK_KEYS_SYM 684
#define PAGE_SYM 685
#define PAGE_CHECKSUM_SYM 686
#define PARAM_MARKER 687
#define PARSER_SYM 688
#define PARSE_VCOL_EXPR_SYM 689
#define PARTIAL 690
#define PARTITION_SYM 691
#define PARTITIONS_SYM 692
#define PARTITIONING_SYM 693
#define PASSWORD_SYM 694
#define PERCENT_RANK_SYM 695
#define PERSISTENT_SYM 696
#define PHASE_SYM 697
#define PLUGINS_SYM 698
#define PLUGIN_SYM 699
#define POINT_SYM 700
#define POLYGON 701
#define PORT_SYM 702
#define POSITION_SYM 703
#define PRECEDES_SYM 704
#define PRECEDING_SYM 705
#define PRECISION 706
#define PREPARE_SYM 707
#define PRESERVE_SYM 708
#define PREV_SYM 709
#define PREVIOUS_SYM 710
#define PRIMARY_SYM 711
#define PRIVILEGES 712
#define PROCEDURE_SYM 713
#define PROCESS 714
#define PROCESSLIST_SYM 715
#define PROFILE_SYM 716
#define PROFILES_SYM 717
#define PROXY_SYM 718
#define PURGE 719
#define QUARTER_SYM 720
#define QUERY_SYM 721
#define QUICK 722
#define RAISE_SYM 723
#define RANGE_SYM 724
#define RANK_SYM 725
#define RAW 726
#define READS_SYM 727
#define READ_ONLY_SYM 728
#define READ_SYM 729
#define READ_WRITE_SYM 730
#define REAL 731
#define REBUILD_SYM 732
#define RECOVER_SYM 733
#define RECURSIVE_SYM 734
#define REDOFILE_SYM 735
#define REDO_BUFFER_SIZE_SYM 736
#define REDUNDANT_SYM 737
#define REFERENCES 738
#define REGEXP 739
#define RELAY 740
#define RELAYLOG_SYM 741
#define RELAY_LOG_FILE_SYM 742
#define RELAY_LOG_POS_SYM 743
#define RELAY_THREAD 744
#define RELEASE_SYM 745
#define RELOAD 746
#define REMOVE_SYM 747
#define RENAME 748
#define REORGANIZE_SYM 749
#define REPAIR 750
#define REPEATABLE_SYM 751
#define REPEAT_SYM 752
#define REPLACE 753
#define REPLICATION 754
#define REQUIRE_SYM 755
#define RESET_SYM 756
#define RESIGNAL_SYM 757
#define RESOURCES 758
#define RESTORE_SYM 759
#define RESTRICT 760
#define RESUME_SYM 761
#define RETURNED_SQLSTATE_SYM 762
#define RETURNING_SYM 763
#define RETURNS_SYM 764
#define RETURN_SYM 765
#define REUSE_SYM 766
#define REVERSE_SYM 767
#define REVOKE 768
#define RIGHT 769
#define ROLE_SYM 770
#define ROLLBACK_SYM 771
#define ROLLUP_SYM 772
#define ROUTINE_SYM 773
#define ROWCOUNT_SYM 774
#define ROW_SYM 775
#define ROWS_SYM 776
#define ROWTYPE_SYM 777
#define ROW_COUNT_SYM 778
#define ROW_FORMAT_SYM 779
#define ROW_NUMBER_SYM 780
#define RTREE_SYM 781
#define SAVEPOINT_SYM 782
#define SCHEDULE_SYM 783
#define SCHEMA_NAME_SYM 784
#define SECOND_MICROSECOND_SYM 785
#define SECOND_SYM 786
#define SECURITY_SYM 787
#define SELECT_SYM 788
#define SENSITIVE_SYM 789
#define SEPARATOR_SYM 790
#define SEQUENCE_SYM 791
#define SERIALIZABLE_SYM 792
#define SERIAL_SYM 793
#define SESSION_SYM 794
#define SERVER_SYM 795
#define SERVER_OPTIONS 796
#define SET 797
#define SET_VAR 798
#define SHARE_SYM 799
#define SHIFT_LEFT 800
#define SHIFT_RIGHT 801
#define SHOW 802
#define SHUTDOWN 803
#define SIGNAL_SYM 804
#define SIGNED_SYM 805
#define SIMPLE_SYM 806
#define SLAVE 807
#define SLAVES 808
#define SLAVE_POS_SYM 809
#define SLOW 810
#define SMALLINT 811
#define SNAPSHOT_SYM 812
#define SOCKET_SYM 813
#define SOFT_SYM 814
#define SONAME_SYM 815
#define SOUNDS_SYM 816
#define SOURCE_SYM 817
#define SPATIAL_SYM 818
#define SPECIFIC_SYM 819
#define SQLEXCEPTION_SYM 820
#define SQLSTATE_SYM 821
#define SQLWARNING_SYM 822
#define SQL_BIG_RESULT 823
#define SQL_BUFFER_RESULT 824
#define SQL_CACHE_SYM 825
#define SQL_CALC_FOUND_ROWS 826
#define SQL_NO_CACHE_SYM 827
#define SQL_SMALL_RESULT 828
#define SQL_SYM 829
#define SQL_THREAD 830
#define REF_SYSTEM_ID_SYM 831
#define SSL_SYM 832
#define STARTING 833
#define STARTS_SYM 834
#define START_SYM 835
#define STATEMENT_SYM 836
#define STATS_AUTO_RECALC_SYM 837
#define STATS_PERSISTENT_SYM 838
#define STATS_SAMPLE_PAGES_SYM 839
#define STATUS_SYM 840
#define STDDEV_SAMP_SYM 841
#define STD_SYM 842
#define STOP_SYM 843
#define STORAGE_SYM 844
#define STORED_SYM 845
#define STRAIGHT_JOIN 846
#define STRING_SYM 847
#define SUBCLASS_ORIGIN_SYM 848
#define SUBDATE_SYM 849
#define SUBJECT_SYM 850
#define SUBPARTITIONS_SYM 851
#define SUBPARTITION_SYM 852
#define SUBSTRING 853
#define SUM_SYM 854
#define SUPER_SYM 855
#define SUSPEND_SYM 856
#define SWAPS_SYM 857
#define SWITCHES_SYM 858
#define SYSDATE 859
#define TABLES 860
#define TABLESPACE 861
#define TABLE_REF_PRIORITY 862
#define TABLE_SYM 863
#define TABLE_CHECKSUM_SYM 864
#define TABLE_NAME_SYM 865
#define TEMPORARY 866
#define TEMPTABLE_SYM 867
#define TERMINATED 868
#define TEXT_STRING 869
#define TEXT_SYM 870
#define THAN_SYM 871
#define THEN_SYM 872
#define TIES_SYM 873
#define TIMESTAMP 874
#define TIMESTAMP_ADD 875
#define TIMESTAMP_DIFF 876
#define TIME_SYM 877
#define TINYBLOB 878
#define TINYINT 879
#define TINYTEXT 880
#define TO_SYM 881
#define TRAILING 882
#define TRANSACTION_SYM 883
#define TRANSACTIONAL_SYM 884
#define TRIGGERS_SYM 885
#define TRIGGER_SYM 886
#define TRIM 887
#define TRUE_SYM 888
#define TRUNCATE_SYM 889
#define TYPES_SYM 890
#define TYPE_SYM 891
#define UDF_RETURNS_SYM 892
#define ULONGLONG_NUM 893
#define UNBOUNDED_SYM 894
#define UNCOMMITTED_SYM 895
#define UNDEFINED_SYM 896
#define UNDERSCORE_CHARSET 897
#define UNDOFILE_SYM 898
#define UNDO_BUFFER_SIZE_SYM 899
#define UNDO_SYM 900
#define UNICODE_SYM 901
#define UNINSTALL_SYM 902
#define UNION_SYM 903
#define UNIQUE_SYM 904
#define UNKNOWN_SYM 905
#define UNLOCK_SYM 906
#define UNSIGNED 907
#define UNTIL_SYM 908
#define UPDATE_SYM 909
#define UPGRADE_SYM 910
#define USAGE 911
#define USER_SYM 912
#define USE_FRM 913
#define USE_SYM 914
#define USING 915
#define UTC_DATE_SYM 916
#define UTC_TIMESTAMP_SYM 917
#define UTC_TIME_SYM 918
#define VALUES 919
#define VALUE_SYM 920
#define VARBINARY 921
#define VARCHAR 922
#define VARCHAR2 923
#define VARIABLES 924
#define VARIANCE_SYM 925
#define VARYING 926
#define VAR_SAMP_SYM 927
#define VIA_SYM 928
#define VIEW_SYM 929
#define VIRTUAL_SYM 930
#define WAIT_SYM 931
#define WARNINGS 932
#define WEEK_SYM 933
#define WEIGHT_STRING_SYM 934
#define WHEN_SYM 935
#define WHERE 936
#define WINDOW_SYM 937
#define WHILE_SYM 938
#define WITH 939
#define WITH_CUBE_SYM 940
#define WITH_ROLLUP_SYM 941
#define WORK_SYM 942
#define WRAPPER_SYM 943
#define WRITE_SYM 944
#define X509_SYM 945
#define XA_SYM 946
#define XML_SYM 947
#define XOR 948
#define YEAR_MONTH_SYM 949
#define YEAR_SYM 950
#define ZEROFILL 951
#define IMPOSSIBLE_ACTION 952




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 753 "/home/buildbot/git/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  uint sp_instr_addr;

  /* structs */
  LEX_STRING lex_str;
  LEX_SYMBOL symbol;
  Lex_string_with_metadata_st lex_string_with_metadata;
  struct sys_var_with_base variable;
  Lex_string_with_pos_st lex_string_with_pos;
  Lex_spblock_st spblock;
  Lex_spblock_handlers_st spblock_handlers;
  Lex_length_and_dec_st Lex_length_and_dec;
  Lex_cast_type_st Lex_cast_type;
  Lex_field_type_st Lex_field_type;
  Lex_dyncol_type_st Lex_dyncol_type;
  Lex_for_loop_st for_loop;
  Lex_for_loop_bounds_st for_loop_bounds;

  /* pointers */
  Create_field *create_field;
  Spvar_definition *spvar_definition;
  Row_definition_list *spvar_definition_list;
  CHARSET_INFO *charset;
  Condition_information_item *cond_info_item;
  DYNCALL_CREATE_DEF *dyncol_def;
  Diagnostics_information *diag_info;
  Item *item;
  Item_num *item_num;
  Item_param *item_param;
  Key_part_spec *key_part;
  LEX *lex;
  sp_assignment_lex *assignment_lex;
  class sp_lex_cursor *sp_cursor_stmt;
  LEX_STRING *lex_str_ptr;
  LEX_USER *lex_user;
  List<Condition_information_item> *cond_info_list;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  List<Item> *item_list;
  List<sp_assignment_lex> *sp_assignment_lex_list;
  List<Statement_information_item> *stmt_info_list;
  List<String> *string_list;
  List<LEX_STRING> *lex_str_list;
  Statement_information_item *stmt_info_item;
  String *string;
  TABLE_LIST *table_list;
  Table_ident *table;
  Qualified_column_ident *qualified_column_ident;
  char *simple_string;
  const char *const_simple_string;
  chooser_compare_func_creator boolfunc2creator;
  class my_var *myvar;
  class sp_condition_value *spcondvalue;
  class sp_head *sphead;
  class sp_name *spname;
  class sp_variable *spvar;
  class With_clause *with_clause;
  class Virtual_column_info *virtual_column;

  handlerton *db_type;
  st_select_lex *select_lex;
  struct p_elem_val *p_elem_value;
  class Window_frame *window_frame;
  class Window_frame_bound *window_frame_bound;
  udf_func *udf;
  st_trg_execution_order trg_execution_order;

  /* enums */
  enum sub_select_type unit_type;
  enum Condition_information_item::Name cond_info_item_name;
  enum enum_diag_condition_item_name diag_condition_item_name;
  enum Diagnostics_information::Which_area diag_area;
  enum Field::geometry_type geom_type;
  enum enum_fk_option m_fk_option;
  enum Item_udftype udf_type;
  enum Key::Keytype key_type;
  enum Statement_information_item::Name stmt_info_item_name;
  enum enum_field_types field_type;
  enum enum_filetype filetype;
  enum enum_tx_isolation tx_isolation;
  enum enum_var_type var_type;
  enum enum_yes_no_unknown m_yes_no_unk;
  enum ha_choice choice;
  enum ha_key_alg key_alg;
  enum ha_rkey_function ha_rkey_mode;
  enum index_hint_type index_hint;
  enum interval_type interval, interval_time_st;
  enum row_type row_type;
  enum sp_variable::enum_mode spvar_mode;
  enum thr_lock_type lock_type;
  enum enum_mysql_timestamp_type date_time_type;
  enum Window_frame_bound::Bound_precedence_type bound_precedence_type;
  enum Window_frame::Frame_units frame_units;
  enum Window_frame::Frame_exclusion frame_exclusion;
  enum trigger_order_type trigger_action_order_type;
  DDL_options_st object_ddl_options;



/* Line 214 of yacc.c  */
#line 2344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 854 "/home/buildbot/git/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 2361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  670
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   78087

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  720
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  1131
/* YYNRULES -- Number of rules.  */
#define YYNRULES  3124
/* YYNRULES -- Number of states.  */
#define YYNSTATES  5365

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   952

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   713,     2,     2,     2,   707,   702,     2,
     710,   711,   705,   704,   712,   703,   717,   706,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   719,   716,
     700,   698,   699,     2,   718,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   708,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   714,   701,   715,   709,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   129,   131,   133,   135,   139,   141,
     143,   148,   149,   152,   153,   158,   159,   165,   166,   167,
     171,   175,   177,   179,   180,   184,   185,   192,   194,   198,
     202,   206,   210,   214,   218,   222,   226,   230,   234,   238,
     242,   246,   250,   254,   258,   262,   268,   274,   280,   282,
     283,   285,   289,   291,   292,   294,   298,   300,   301,   303,
     307,   309,   313,   317,   321,   325,   329,   333,   337,   338,
     340,   342,   343,   351,   352,   361,   362,   378,   379,   394,
     395,   410,   411,   418,   419,   423,   431,   438,   443,   447,
     448,   452,   453,   455,   457,   460,   464,   467,   469,   473,
     476,   478,   482,   486,   490,   492,   494,   496,   497,   510,
     512,   516,   519,   522,   525,   528,   531,   534,   537,   538,
     552,   553,   560,   563,   564,   566,   570,   572,   573,   576,
     577,   580,   581,   583,   588,   589,   592,   593,   596,   597,
     601,   603,   604,   607,   608,   611,   614,   617,   620,   623,
     627,   631,   633,   635,   638,   642,   646,   647,   652,   653,
     657,   658,   660,   664,   666,   667,   669,   673,   675,   677,
     680,   685,   689,   690,   692,   696,   698,   701,   702,   704,
     706,   708,   709,   714,   715,   720,   721,   725,   728,   732,
     733,   737,   740,   744,   750,   752,   756,   762,   764,   767,
     769,   773,   777,   779,   783,   789,   796,   801,   803,   808,
     809,   816,   817,   824,   825,   829,   830,   831,   835,   837,
     839,   841,   845,   847,   849,   851,   855,   856,   858,   860,
     862,   864,   867,   869,   873,   875,   877,   878,   880,   881,
     884,   888,   894,   896,   898,   900,   902,   904,   906,   908,
     910,   912,   914,   916,   918,   920,   922,   924,   928,   933,
     934,   936,   938,   942,   944,   948,   952,   954,   957,   959,
     961,   963,   965,   969,   973,   975,   977,   979,   981,   983,
     985,   987,   989,   991,   993,   995,   997,   999,  1001,  1003,
    1007,  1008,  1011,  1013,  1015,  1017,  1019,  1021,  1023,  1025,
    1027,  1029,  1031,  1033,  1035,  1037,  1039,  1041,  1043,  1044,
    1050,  1051,  1054,  1055,  1059,  1062,  1065,  1066,  1067,  1071,
    1073,  1077,  1078,  1082,  1086,  1090,  1095,  1101,  1104,  1107,
    1109,  1113,  1114,  1115,  1116,  1124,  1125,  1128,  1131,  1132,
    1139,  1140,  1141,  1146,  1148,  1150,  1153,  1155,  1158,  1159,
    1160,  1167,  1168,  1169,  1176,  1177,  1180,  1181,  1183,  1186,
    1187,  1195,  1196,  1202,  1203,  1211,  1215,  1216,  1223,  1224,
    1231,  1233,  1234,  1241,  1242,  1249,  1250,  1257,  1258,  1262,
    1263,  1267,  1268,  1272,  1274,  1276,  1278,  1280,  1282,  1285,
    1290,  1296,  1297,  1302,  1307,  1312,  1316,  1320,  1323,  1326,
    1327,  1330,  1332,  1335,  1339,  1341,  1343,  1345,  1347,  1349,
    1352,  1356,  1358,  1360,  1362,  1364,  1366,  1368,  1370,  1372,
    1374,  1376,  1379,  1383,  1385,  1387,  1389,  1391,  1393,  1395,
    1397,  1400,  1404,  1406,  1408,  1410,  1412,  1414,  1416,  1418,
    1420,  1422,  1425,  1429,  1431,  1433,  1435,  1438,  1441,  1444,
    1446,  1448,  1450,  1452,  1455,  1459,  1463,  1467,  1471,  1475,
    1479,  1483,  1487,  1492,  1493,  1495,  1497,  1499,  1501,  1503,
    1504,  1512,  1516,  1520,  1521,  1527,  1528,  1534,  1536,  1539,
    1544,  1545,  1549,  1550,  1558,  1564,  1568,  1569,  1575,  1576,
    1582,  1584,  1585,  1587,  1588,  1593,  1594,  1595,  1599,  1600,
    1607,  1614,  1615,  1620,  1623,  1626,  1629,  1632,  1633,  1635,
    1636,  1640,  1641,  1643,  1645,  1649,  1651,  1656,  1662,  1668,
    1669,  1672,  1673,  1674,  1682,  1683,  1694,  1696,  1700,  1702,
    1704,  1705,  1708,  1709,  1713,  1715,  1719,  1720,  1727,  1729,
    1730,  1731,  1737,  1738,  1743,  1745,  1747,  1749,  1751,  1755,
    1757,  1761,  1762,  1763,  1769,  1771,  1775,  1777,  1779,  1780,
    1784,  1786,  1790,  1791,  1796,  1798,  1799,  1801,  1804,  1806,
    1810,  1815,  1819,  1823,  1827,  1831,  1836,  1841,  1845,  1851,
    1852,  1856,  1858,  1860,  1863,  1865,  1867,  1868,  1870,  1871,
    1873,  1875,  1878,  1880,  1882,  1883,  1887,  1888,  1892,  1894,
    1898,  1899,  1901,  1903,  1906,  1908,  1911,  1915,  1919,  1923,
    1927,  1931,  1935,  1939,  1943,  1947,  1951,  1955,  1959,  1963,
    1967,  1971,  1975,  1979,  1983,  1987,  1991,  1995,  1996,  2003,
    2005,  2007,  2011,  2016,  2021,  2024,  2027,  2030,  2034,  2038,
    2042,  2046,  2050,  2054,  2058,  2062,  2067,  2072,  2074,  2076,
    2078,  2080,  2082,  2084,  2086,  2088,  2090,  2092,  2094,  2096,
    2098,  2100,  2102,  2104,  2106,  2108,  2112,  2114,  2116,  2118,
    2120,  2123,  2124,  2134,  2135,  2146,  2147,  2157,  2158,  2168,
    2169,  2180,  2181,  2193,  2194,  2205,  2208,  2209,  2211,  2216,
    2217,  2219,  2222,  2223,  2228,  2229,  2233,  2234,  2238,  2239,
    2241,  2244,  2246,  2248,  2249,  2256,  2257,  2260,  2261,  2263,
    2265,  2267,  2268,  2270,  2273,  2275,  2277,  2280,  2283,  2284,
    2288,  2290,  2292,  2296,  2300,  2302,  2304,  2306,  2308,  2312,
    2316,  2320,  2323,  2325,  2327,  2331,  2335,  2338,  2342,  2346,
    2349,  2353,  2355,  2358,  2361,  2364,  2366,  2369,  2373,  2375,
    2377,  2380,  2384,  2387,  2391,  2394,  2397,  2401,  2405,  2409,
    2415,  2421,  2424,  2426,  2428,  2430,  2432,  2434,  2436,  2438,
    2440,  2442,  2444,  2447,  2450,  2452,  2455,  2457,  2460,  2464,
    2467,  2469,  2471,  2473,  2475,  2477,  2479,  2481,  2484,  2485,
    2489,  2490,  2492,  2494,  2500,  2501,  2503,  2506,  2508,  2510,
    2512,  2514,  2518,  2522,  2526,  2530,  2531,  2533,  2534,  2536,
    2537,  2539,  2540,  2542,  2545,  2547,  2549,  2552,  2557,  2559,
    2563,  2566,  2568,  2571,  2574,  2576,  2579,  2582,  2586,  2590,
    2594,  2598,  2601,  2604,  2606,  2608,  2610,  2612,  2614,  2615,
    2618,  2620,  2622,  2624,  2626,  2628,  2629,  2632,  2634,  2636,
    2637,  2639,  2642,  2644,  2646,  2647,  2649,  2652,  2654,  2657,
    2658,  2660,  2661,  2666,  2668,  2670,  2672,  2673,  2675,  2678,
    2680,  2682,  2685,  2687,  2691,  2695,  2697,  2699,  2700,  2703,
    2704,  2706,  2712,  2713,  2717,  2721,  2723,  2724,  2727,  2730,
    2733,  2734,  2738,  2742,  2749,  2756,  2758,  2760,  2763,  2766,
    2769,  2772,  2775,  2777,  2779,  2780,  2782,  2784,  2786,  2788,
    2789,  2791,  2793,  2795,  2796,  2798,  2799,  2801,  2802,  2804,
    2806,  2809,  2811,  2814,  2816,  2819,  2820,  2823,  2824,  2827,
    2830,  2833,  2836,  2840,  2843,  2847,  2851,  2855,  2859,  2861,
    2863,  2865,  2867,  2871,  2873,  2875,  2877,  2882,  2885,  2887,
    2892,  2893,  2895,  2896,  2899,  2901,  2905,  2906,  2907,  2916,
    2917,  2923,  2931,  2932,  2938,  2939,  2945,  2946,  2952,  2953,
    2958,  2959,  2971,  2975,  2980,  2984,  2988,  2989,  2998,  3006,
    3007,  3011,  3013,  3018,  3019,  3023,  3024,  3027,  3028,  3030,
    3031,  3034,  3037,  3040,  3043,  3045,  3047,  3049,  3054,  3059,
    3060,  3067,  3072,  3073,  3079,  3080,  3087,  3092,  3096,  3098,
    3106,  3109,  3111,  3113,  3114,  3121,  3122,  3126,  3129,  3130,
    3136,  3137,  3138,  3145,  3147,  3151,  3153,  3155,  3159,  3163,
    3167,  3170,  3175,  3178,  3186,  3193,  3199,  3205,  3210,  3216,
    3220,  3225,  3228,  3231,  3238,  3244,  3248,  3254,  3256,  3258,
    3260,  3262,  3264,  3265,  3267,  3269,  3272,  3275,  3279,  3283,
    3287,  3291,  3292,  3294,  3295,  3297,  3298,  3301,  3302,  3304,
    3307,  3309,  3311,  3313,  3314,  3316,  3318,  3319,  3322,  3324,
    3325,  3327,  3329,  3331,  3332,  3339,  3340,  3346,  3351,  3356,
    3360,  3361,  3363,  3365,  3369,  3373,  3376,  3379,  3380,  3383,
    3385,  3389,  3390,  3392,  3394,  3395,  3398,  3403,  3405,  3409,
    3410,  3416,  3417,  3419,  3421,  3425,  3426,  3431,  3432,  3437,
    3438,  3440,  3442,  3445,  3447,  3449,  3451,  3452,  3455,  3456,
    3462,  3464,  3468,  3471,  3472,  3476,  3478,  3483,  3485,  3486,
    3491,  3493,  3494,  3499,  3500,  3502,  3506,  3507,  3509,  3513,
    3515,  3517,  3520,  3524,  3525,  3530,  3531,  3535,  3536,  3538,
    3540,  3543,  3545,  3547,  3549,  3551,  3553,  3556,  3557,  3560,
    3561,  3568,  3569,  3571,  3573,  3574,  3579,  3584,  3588,  3594,
    3596,  3600,  3605,  3606,  3613,  3615,  3617,  3619,  3623,  3626,
    3630,  3632,  3634,  3635,  3642,  3644,  3646,  3648,  3652,  3656,
    3661,  3662,  3669,  3670,  3673,  3674,  3679,  3680,  3683,  3686,
    3690,  3694,  3699,  3704,  3708,  3712,  3717,  3722,  3723,  3729,
    3733,  3734,  3740,  3744,  3745,  3751,  3755,  3756,  3764,  3768,
    3769,  3774,  3777,  3778,  3783,  3786,  3789,  3790,  3795,  3798,
    3802,  3804,  3806,  3808,  3810,  3812,  3814,  3817,  3819,  3822,
    3826,  3828,  3833,  3836,  3839,  3843,  3844,  3848,  3854,  3855,
    3857,  3860,  3862,  3864,  3865,  3867,  3870,  3872,  3874,  3876,
    3878,  3879,  3883,  3889,  3893,  3895,  3897,  3901,  3906,  3907,
    3908,  3909,  3910,  3913,  3916,  3918,  3920,  3921,  3924,  3928,
    3929,  3932,  3936,  3937,  3940,  3944,  3948,  3952,  3955,  3959,
    3964,  3968,  3973,  3977,  3982,  3984,  3988,  3993,  3997,  4001,
    4008,  4010,  4016,  4023,  4029,  4037,  4044,  4053,  4059,  4066,
    4071,  4076,  4082,  4086,  4091,  4093,  4097,  4101,  4105,  4109,
    4113,  4117,  4123,  4129,  4133,  4137,  4141,  4145,  4149,  4153,
    4155,  4157,  4159,  4161,  4163,  4165,  4167,  4169,  4171,  4173,
    4175,  4177,  4179,  4181,  4183,  4185,  4187,  4188,  4191,  4193,
    4195,  4197,  4199,  4202,  4204,  4206,  4208,  4211,  4213,  4216,
    4219,  4220,  4224,  4226,  4231,  4233,  4237,  4239,  4241,  4243,
    4245,  4247,  4249,  4251,  4253,  4255,  4257,  4264,  4269,  4274,
    4282,  4289,  4295,  4302,  4309,  4314,  4319,  4324,  4329,  4334,
    4339,  4341,  4345,  4349,  4352,  4356,  4359,  4362,  4365,  4368,
    4374,  4379,  4386,  4389,  4392,  4397,  4402,  4407,  4418,  4425,
    4434,  4441,  4446,  4451,  4458,  4463,  4468,  4473,  4480,  4485,
    4493,  4501,  4509,  4516,  4523,  4530,  4537,  4541,  4546,  4553,
    4562,  4565,  4568,  4577,  4586,  4593,  4600,  4607,  4610,  4617,
    4624,  4633,  4642,  4649,  4658,  4665,  4668,  4677,  4686,  4689,
    4692,  4695,  4702,  4709,  4714,  4719,  4728,  4733,  4738,  4743,
    4748,  4752,  4761,  4768,  4777,  4782,  4789,  4794,  4801,  4806,
    4811,  4816,  4823,  4832,  4837,  4841,  4848,  4853,  4860,  4866,
    4875,  4883,  4894,  4896,  4903,  4908,  4913,  4918,  4923,  4928,
    4935,  4940,  4941,  4947,  4954,  4957,  4961,  4962,  4967,  4968,
    4972,  4973,  4975,  4977,  4981,  4986,  4991,  4997,  5002,  5007,
    5012,  5018,  5023,  5024,  5025,  5033,  5038,  5044,  5049,  5055,
    5060,  5065,  5070,  5075,  5080,  5086,  5087,  5096,  5100,  5104,
    5106,  5108,  5112,  5116,  5120,  5124,  5128,  5133,  5138,  5143,
    5150,  5155,  5162,  5167,  5174,  5176,  5177,  5181,  5185,  5187,
    5192,  5193,  5195,  5196,  5199,  5200,  5204,  5209,  5212,  5213,
    5217,  5220,  5221,  5226,  5229,  5231,  5233,  5235,  5237,  5240,
    5242,  5245,  5248,  5251,  5253,  5256,  5259,  5260,  5262,  5264,
    5268,  5270,  5274,  5276,  5280,  5281,  5283,  5284,  5287,  5292,
    5298,  5300,  5302,  5304,  5306,  5311,  5313,  5317,  5321,  5322,
    5329,  5330,  5339,  5344,  5345,  5354,  5355,  5366,  5373,  5374,
    5383,  5384,  5395,  5402,  5404,  5407,  5409,  5411,  5414,  5415,
    5417,  5423,  5425,  5427,  5428,  5434,  5440,  5449,  5451,  5454,
    5455,  5460,  5463,  5467,  5471,  5473,  5475,  5476,  5480,  5483,
    5485,  5486,  5490,  5493,  5497,  5498,  5499,  5505,  5506,  5508,
    5509,  5510,  5512,  5513,  5516,  5520,  5524,  5526,  5528,  5529,
    5537,  5538,  5546,  5548,  5551,  5552,  5553,  5556,  5557,  5560,
    5561,  5563,  5565,  5567,  5569,  5573,  5575,  5579,  5581,  5583,
    5585,  5587,  5589,  5591,  5593,  5595,  5597,  5599,  5601,  5603,
    5605,  5607,  5609,  5611,  5613,  5615,  5617,  5619,  5621,  5623,
    5625,  5627,  5629,  5630,  5632,  5634,  5635,  5638,  5639,  5641,
    5642,  5643,  5647,  5648,  5649,  5653,  5656,  5657,  5658,  5663,
    5668,  5671,  5672,  5674,  5676,  5677,  5680,  5684,  5686,  5690,
    5691,  5699,  5700,  5702,  5703,  5707,  5708,  5712,  5713,  5717,
    5719,  5721,  5723,  5728,  5731,  5734,  5737,  5739,  5742,  5745,
    5746,  5750,  5753,  5756,  5760,  5764,  5768,  5770,  5773,  5774,
    5776,  5777,  5782,  5787,  5790,  5791,  5793,  5795,  5796,  5798,
    5800,  5803,  5809,  5814,  5816,  5820,  5824,  5826,  5830,  5832,
    5834,  5836,  5838,  5840,  5841,  5844,  5848,  5853,  5855,  5858,
    5860,  5862,  5864,  5866,  5868,  5870,  5872,  5874,  5876,  5878,
    5880,  5882,  5884,  5887,  5890,  5892,  5894,  5896,  5898,  5900,
    5902,  5904,  5906,  5908,  5910,  5912,  5914,  5916,  5918,  5920,
    5921,  5928,  5929,  5931,  5935,  5937,  5941,  5942,  5945,  5949,
    5951,  5953,  5956,  5958,  5962,  5965,  5966,  5967,  5975,  5978,
    5980,  5981,  5985,  5986,  5995,  6003,  6008,  6015,  6020,  6025,
    6031,  6037,  6038,  6045,  6050,  6055,  6061,  6068,  6073,  6074,
    6081,  6083,  6087,  6089,  6092,  6094,  6098,  6100,  6101,  6104,
    6105,  6108,  6109,  6111,  6112,  6113,  6122,  6123,  6124,  6131,
    6132,  6134,  6136,  6138,  6140,  6142,  6145,  6147,  6149,  6151,
    6155,  6160,  6161,  6165,  6169,  6171,  6174,  6177,  6179,  6183,
    6185,  6189,  6191,  6195,  6197,  6199,  6200,  6202,  6204,  6206,
    6208,  6210,  6211,  6216,  6217,  6219,  6223,  6225,  6227,  6229,
    6231,  6232,  6233,  6240,  6241,  6242,  6254,  6258,  6260,  6264,
    6268,  6270,  6274,  6275,  6277,  6278,  6283,  6284,  6285,  6295,
    6296,  6302,  6303,  6310,  6311,  6314,  6316,  6320,  6323,  6328,
    6329,  6332,  6333,  6336,  6338,  6340,  6342,  6343,  6349,  6350,
    6352,  6353,  6355,  6357,  6361,  6363,  6365,  6368,  6371,  6374,
    6376,  6378,  6380,  6382,  6383,  6387,  6388,  6392,  6395,  6400,
    6405,  6409,  6414,  6419,  6421,  6425,  6429,  6433,  6437,  6444,
    6447,  6450,  6451,  6458,  6459,  6467,  6473,  6476,  6478,  6480,
    6482,  6488,  6494,  6497,  6500,  6502,  6507,  6511,  6514,  6518,
    6521,  6524,  6526,  6531,  6536,  6540,  6544,  6548,  6551,  6555,
    6558,  6562,  6566,  6570,  6574,  6577,  6581,  6585,  6589,  6593,
    6597,  6601,  6605,  6609,  6611,  6613,  6615,  6617,  6619,  6620,
    6622,  6623,  6626,  6627,  6629,  6631,  6633,  6634,  6637,  6638,
    6641,  6642,  6646,  6650,  6651,  6656,  6657,  6662,  6664,  6666,
    6668,  6670,  6672,  6674,  6676,  6680,  6682,  6684,  6686,  6687,
    6691,  6692,  6694,  6696,  6697,  6702,  6703,  6708,  6710,  6711,
    6713,  6718,  6719,  6723,  6727,  6729,  6732,  6735,  6738,  6741,
    6744,  6748,  6751,  6753,  6755,  6757,  6759,  6762,  6764,  6766,
    6768,  6771,  6772,  6774,  6775,  6779,  6780,  6784,  6788,  6790,
    6791,  6796,  6797,  6801,  6804,  6805,  6807,  6808,  6811,  6812,
    6816,  6820,  6823,  6826,  6827,  6833,  6834,  6836,  6838,  6839,
    6841,  6843,  6846,  6848,  6851,  6853,  6856,  6857,  6858,  6859,
    6860,  6883,  6885,  6887,  6888,  6890,  6891,  6893,  6895,  6896,
    6898,  6900,  6901,  6904,  6907,  6909,  6913,  6918,  6922,  6926,
    6927,  6930,  6933,  6935,  6939,  6943,  6944,  6949,  6950,  6954,
    6956,  6958,  6959,  6963,  6966,  6970,  6972,  6974,  6977,  6978,
    6981,  6985,  6987,  6993,  6995,  6997,  7000,  7003,  7005,  7007,
    7009,  7011,  7013,  7015,  7018,  7021,  7023,  7025,  7027,  7029,
    7031,  7033,  7035,  7037,  7039,  7042,  7044,  7046,  7048,  7050,
    7052,  7055,  7058,  7061,  7062,  7064,  7065,  7070,  7071,  7073,
    7075,  7079,  7080,  7090,  7091,  7095,  7097,  7101,  7103,  7105,
    7107,  7111,  7117,  7119,  7121,  7123,  7127,  7129,  7131,  7135,
    7137,  7142,  7148,  7150,  7156,  7160,  7163,  7165,  7169,  7172,
    7175,  7180,  7182,  7184,  7186,  7188,  7190,  7192,  7194,  7196,
    7198,  7200,  7202,  7204,  7206,  7208,  7210,  7212,  7216,  7219,
    7221,  7223,  7225,  7227,  7229,  7231,  7233,  7235,  7237,  7239,
    7241,  7243,  7245,  7247,  7249,  7251,  7253,  7255,  7257,  7259,
    7261,  7263,  7265,  7267,  7269,  7271,  7273,  7275,  7277,  7279,
    7281,  7283,  7285,  7287,  7289,  7291,  7293,  7295,  7297,  7299,
    7301,  7303,  7305,  7307,  7309,  7311,  7313,  7315,  7317,  7319,
    7321,  7323,  7325,  7327,  7329,  7331,  7333,  7335,  7337,  7339,
    7341,  7343,  7345,  7347,  7349,  7351,  7353,  7355,  7357,  7359,
    7361,  7363,  7365,  7367,  7369,  7371,  7373,  7375,  7377,  7379,
    7381,  7383,  7385,  7387,  7389,  7391,  7393,  7395,  7397,  7399,
    7401,  7403,  7405,  7407,  7409,  7411,  7413,  7415,  7417,  7419,
    7421,  7423,  7425,  7427,  7429,  7431,  7433,  7435,  7437,  7439,
    7441,  7443,  7445,  7447,  7449,  7451,  7453,  7455,  7457,  7459,
    7461,  7463,  7465,  7467,  7469,  7471,  7473,  7475,  7477,  7479,
    7481,  7483,  7485,  7487,  7489,  7491,  7493,  7495,  7497,  7499,
    7501,  7503,  7505,  7507,  7509,  7511,  7513,  7515,  7517,  7519,
    7521,  7523,  7525,  7527,  7529,  7531,  7533,  7535,  7537,  7539,
    7541,  7543,  7545,  7547,  7549,  7551,  7553,  7555,  7557,  7559,
    7561,  7563,  7565,  7567,  7569,  7571,  7573,  7575,  7577,  7579,
    7581,  7583,  7585,  7587,  7589,  7591,  7593,  7595,  7597,  7599,
    7601,  7603,  7605,  7607,  7609,  7611,  7613,  7615,  7617,  7619,
    7621,  7623,  7625,  7627,  7629,  7631,  7633,  7635,  7637,  7639,
    7641,  7643,  7645,  7647,  7649,  7651,  7653,  7655,  7657,  7659,
    7661,  7663,  7665,  7667,  7669,  7671,  7673,  7675,  7677,  7679,
    7681,  7683,  7685,  7687,  7689,  7691,  7693,  7695,  7697,  7699,
    7701,  7703,  7705,  7707,  7709,  7711,  7713,  7715,  7717,  7719,
    7721,  7723,  7725,  7727,  7729,  7731,  7733,  7735,  7737,  7739,
    7741,  7743,  7745,  7747,  7749,  7751,  7753,  7755,  7757,  7759,
    7761,  7763,  7765,  7767,  7769,  7771,  7773,  7775,  7777,  7779,
    7781,  7783,  7785,  7787,  7789,  7791,  7793,  7795,  7797,  7799,
    7801,  7803,  7805,  7807,  7809,  7811,  7813,  7815,  7817,  7819,
    7821,  7823,  7825,  7827,  7829,  7831,  7833,  7835,  7837,  7839,
    7841,  7843,  7845,  7847,  7849,  7851,  7853,  7855,  7857,  7859,
    7861,  7863,  7865,  7867,  7869,  7871,  7873,  7875,  7877,  7879,
    7881,  7883,  7885,  7887,  7889,  7891,  7893,  7895,  7897,  7899,
    7901,  7903,  7905,  7907,  7909,  7911,  7913,  7915,  7917,  7919,
    7921,  7923,  7925,  7927,  7929,  7931,  7933,  7935,  7937,  7939,
    7941,  7943,  7945,  7947,  7949,  7951,  7953,  7955,  7957,  7959,
    7961,  7963,  7965,  7967,  7969,  7971,  7973,  7975,  7977,  7979,
    7981,  7983,  7985,  7987,  7989,  7991,  7993,  7995,  7997,  7999,
    8001,  8003,  8005,  8007,  8009,  8011,  8013,  8015,  8017,  8019,
    8021,  8023,  8025,  8027,  8029,  8031,  8033,  8035,  8037,  8039,
    8040,  8044,  8045,  8046,  8054,  8056,  8060,  8061,  8065,  8066,
    8070,  8071,  8075,  8076,  8080,  8083,  8084,  8087,  8088,  8091,
    8092,  8097,  8098,  8102,  8104,  8106,  8108,  8110,  8111,  8113,
    8115,  8117,  8118,  8121,  8124,  8127,  8131,  8135,  8141,  8147,
    8152,  8159,  8162,  8166,  8170,  8174,  8180,  8183,  8187,  8189,
    8193,  8197,  8199,  8201,  8205,  8209,  8211,  8215,  8218,  8221,
    8224,  8227,  8230,  8232,  8234,  8238,  8240,  8245,  8250,  8252,
    8254,  8256,  8258,  8260,  8261,  8267,  8268,  8271,  8273,  8275,
    8277,  8279,  8283,  8287,  8289,  8291,  8294,  8297,  8300,  8301,
    8305,  8310,  8314,  8315,  8323,  8325,  8328,  8330,  8332,  8334,
    8336,  8338,  8340,  8341,  8347,  8349,  8351,  8353,  8355,  8357,
    8361,  8368,  8375,  8382,  8390,  8396,  8400,  8405,  8407,  8411,
    8420,  8429,  8438,  8445,  8450,  8451,  8455,  8456,  8460,  8462,
    8466,  8469,  8471,  8473,  8474,  8476,  8478,  8481,  8482,  8484,
    8486,  8490,  8491,  8495,  8496,  8500,  8501,  8505,  8506,  8510,
    8512,  8514,  8516,  8518,  8520,  8522,  8524,  8526,  8528,  8530,
    8532,  8535,  8538,  8540,  8544,  8547,  8550,  8553,  8556,  8559,
    8562,  8565,  8568,  8570,  8572,  8575,  8576,  8578,  8582,  8584,
    8587,  8590,  8593,  8595,  8599,  8603,  8605,  8607,  8611,  8613,
    8617,  8619,  8623,  8625,  8627,  8629,  8631,  8636,  8642,  8647,
    8654,  8656,  8657,  8661,  8665,  8667,  8669,  8670,  8673,  8676,
    8679,  8682,  8685,  8688,  8691,  8694,  8697,  8700,  8702,  8703,
    8706,  8707,  8710,  8711,  8715,  8718,  8720,  8723,  8725,  8726,
    8730,  8732,  8733,  8735,  8736,  8738,  8739,  8743,  8746,  8747,
    8749,  8752,  8753,  8755,  8760,  8765,  8771,  8774,  8778,  8780,
    8782,  8784,  8785,  8787,  8788,  8793,  8794,  8799,  8800,  8803,
    8806,  8808,  8811,  8812,  8814,  8816,  8820,  8824,  8829,  8832,
    8836,  8838,  8840,  8843,  8848,  8849,  8850,  8851,  8853,  8856,
    8858,  8860,  8862,  8864,  8866,  8868,  8870,  8872,  8874,  8877,
    8880,  8884,  8886,  8888,  8890,  8892,  8894,  8896,  8898,  8900,
    8902,  8904,  8906,  8908,  8910,  8911,  8915,  8919,  8923,  8927,
    8928,  8932,  8936,  8937,  8946,  8947,  8951,  8953,  8957,  8958,
    8963,  8967,  8971,  8976,  8981,  8982,  8986,  8991,  8996,  8998,
    9000,  9001,  9004,  9005,  9006,  9007,  9008,  9009,  9030,  9033,
    9035,  9043,  9044,  9045,  9046,  9047,  9060,  9061,  9062,  9071,
    9076,  9081,  9085,  9090,  9094,  9097,  9099,  9103,  9109,  9111,
    9113,  9114,  9116,  9118,  9119,  9122,  9123,  9124,  9128,  9129,
    9132,  9138,  9142,  9146,  9150
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     721,     0,    -1,   170,    -1,    -1,   724,   722,   716,   723,
      -1,   724,   170,    -1,    -1,   170,    -1,   725,    -1,  1773,
      -1,  1775,    -1,  1162,    -1,  1231,    -1,  1586,    -1,  1244,
      -1,   788,    -1,   740,    -1,  1247,    -1,  1220,    -1,  1781,
      -1,   753,    -1,   726,    -1,  1547,    -1,  1581,    -1,  1497,
      -1,  1499,    -1,   731,    -1,  1590,    -1,   839,    -1,  1736,
      -1,  1726,    -1,   738,    -1,  1511,    -1,  1848,    -1,  1850,
      -1,  1261,    -1,  1613,    -1,  1620,    -1,  1717,    -1,  1253,
      -1,  1076,    -1,   974,    -1,  1268,    -1,   728,    -1,  1609,
      -1,  1784,    -1,  1256,    -1,  1225,    -1,  1514,    -1,  1601,
      -1,   838,    -1,  1733,    -1,  1782,    -1,  1783,    -1,  1280,
      -1,  1686,    -1,   831,    -1,  1567,    -1,  1618,    -1,  1207,
      -1,  1210,    -1,  1560,    -1,  1849,    -1,  1724,    -1,  1539,
      -1,  1619,    -1,  1840,    -1,   727,   452,  1677,    -1,   131,
      -1,   157,    -1,   452,  1677,   213,   729,    -1,    -1,   730,
    1321,    -1,    -1,   186,  1677,   732,   734,    -1,    -1,   186,
     254,   729,   733,   734,    -1,    -1,    -1,   660,   735,   736,
      -1,   736,   712,   737,    -1,   737,    -1,  1536,    -1,    -1,
     236,   739,  1680,    -1,    -1,    60,   335,   751,   626,   741,
     742,    -1,   743,    -1,   742,   712,   743,    -1,   320,   698,
    1674,    -1,   336,   698,  1674,    -1,   323,   698,  1674,    -1,
     324,   698,  1475,    -1,   317,   698,  1475,    -1,   318,   698,
    1475,    -1,   333,   698,  1475,    -1,   327,   698,  1674,    -1,
     326,   698,  1674,    -1,   328,   698,  1674,    -1,   329,   698,
    1674,    -1,   332,   698,  1674,    -1,   334,   698,  1475,    -1,
     330,   698,  1674,    -1,   331,   698,  1674,    -1,   338,   698,
    1650,    -1,   253,   698,   710,   744,   711,    -1,   154,   698,
     710,   746,   711,    -1,   251,   698,   710,   748,   711,    -1,
     750,    -1,    -1,   745,    -1,   744,   712,   745,    -1,  1475,
      -1,    -1,   747,    -1,   746,   712,   747,    -1,  1475,    -1,
      -1,   749,    -1,   748,   712,   749,    -1,  1475,    -1,   321,
     698,  1674,    -1,   322,   698,  1478,    -1,   487,   698,  1674,
      -1,   488,   698,  1475,    -1,   337,   698,   113,    -1,   337,
     698,   554,    -1,   337,   698,   394,    -1,    -1,   752,    -1,
    1674,    -1,    -1,  1032,  1510,   608,  1031,  1670,   754,   959,
      -1,    -1,  1032,  1510,   536,  1031,  1670,   755,   762,  1033,
      -1,    -1,  1032,  1140,   258,  1031,  1677,  1150,   410,  1670,
     756,   710,  1157,   711,  1719,  1143,  1194,    -1,    -1,  1032,
    1141,   258,  1031,  1677,   410,  1670,   757,   710,  1157,   711,
    1719,  1144,  1194,    -1,    -1,  1032,  1142,   258,  1031,  1677,
     410,  1670,   758,   710,  1157,   711,  1719,  1145,  1194,    -1,
      -1,  1032,   118,  1031,  1677,   759,  1027,    -1,    -1,  1032,
     760,  1806,    -1,  1032,   657,  1031,   781,  1757,  1765,  1768,
      -1,  1032,   515,  1031,   781,  1740,  1738,    -1,   105,   309,
     228,   922,    -1,   105,   606,   919,    -1,    -1,  1032,   761,
     765,    -1,    -1,   763,    -1,   764,    -1,   763,   764,    -1,
     361,  1529,  1477,    -1,   394,   361,    -1,   396,    -1,   348,
    1529,  1477,    -1,   394,   348,    -1,   395,    -1,   580,  1530,
    1477,    -1,   256,  1531,  1477,    -1,    52,  1529,  1477,    -1,
     386,    -1,   117,    -1,   387,    -1,    -1,   540,  1031,  1680,
     766,   209,   121,   688,  1680,   416,   710,   767,   711,    -1,
     768,    -1,   767,   712,   768,    -1,   657,  1674,    -1,   240,
    1674,    -1,   118,  1674,    -1,   428,  1674,    -1,   439,  1674,
      -1,   558,  1674,    -1,   447,  1475,    -1,    -1,  1315,   180,
    1031,   782,   770,   410,   528,   771,   776,   773,   778,   155,
     779,    -1,    -1,   181,  1321,  1431,   772,   774,   775,    -1,
      24,  1321,    -1,    -1,   166,    -1,   148,   410,   552,    -1,
     148,    -1,    -1,   579,  1321,    -1,    -1,   169,  1321,    -1,
      -1,   777,    -1,   410,    88,  1776,   453,    -1,    -1,    84,
    1674,    -1,    -1,   780,   854,    -1,    -1,  1677,   717,  1677,
      -1,  1677,    -1,    -1,   783,   785,    -1,    -1,   784,   786,
      -1,    84,  1674,    -1,   286,   574,    -1,   394,   574,    -1,
      98,   574,    -1,   472,   574,   121,    -1,   365,   574,   121,
      -1,   787,    -1,   785,    -1,  1776,   145,    -1,   574,   532,
     137,    -1,   574,   532,   271,    -1,    -1,    53,   782,   789,
     790,    -1,    -1,   710,   791,   711,    -1,    -1,   792,    -1,
     792,   712,  1321,    -1,  1321,    -1,    -1,   794,    -1,   794,
     712,   796,    -1,   796,    -1,  1677,    -1,   795,  1104,    -1,
     795,   636,   407,   809,    -1,   795,   520,   814,    -1,    -1,
     798,    -1,   798,   712,   799,    -1,   799,    -1,   800,   796,
      -1,    -1,   272,    -1,   426,    -1,   262,    -1,    -1,   710,
     802,   793,   711,    -1,    -1,   710,   804,   797,   711,    -1,
      -1,   805,   854,   716,    -1,   854,   716,    -1,   806,   854,
     716,    -1,    -1,   807,   808,   716,    -1,   134,   817,    -1,
     850,   717,  1677,    -1,   850,   717,  1677,   717,  1677,    -1,
     850,    -1,   850,   717,  1677,    -1,   850,   717,  1677,   717,
    1677,    -1,  1677,    -1,   811,  1104,    -1,   812,    -1,   813,
     712,   812,    -1,   710,   813,   711,    -1,   851,    -1,   815,
    1104,   852,    -1,   815,   636,   407,   810,   852,    -1,   815,
     520,   636,   407,   810,   852,    -1,   815,   520,   814,   852,
      -1,   816,    -1,   850,    91,   210,   827,    -1,    -1,   824,
     232,   210,   818,   825,   854,    -1,    -1,   850,   114,   819,
     820,   210,   822,    -1,    -1,   710,   794,   711,    -1,    -1,
      -1,   821,   823,  1280,    -1,   189,    -1,   100,    -1,   826,
      -1,   825,   712,   826,    -1,   830,    -1,  1475,    -1,   828,
      -1,   566,   829,  1675,    -1,    -1,   665,    -1,   827,    -1,
    1677,    -1,   567,    -1,  1327,   212,    -1,   565,    -1,   549,
     832,   834,    -1,  1677,    -1,   828,    -1,    -1,   832,    -1,
      -1,   542,   835,    -1,   837,   698,   836,    -1,   835,   712,
     837,   698,   836,    -1,  1649,    -1,  1361,    -1,  1665,    -1,
      68,    -1,   593,    -1,    95,    -1,    97,    -1,    96,    -1,
      58,    -1,   529,    -1,   610,    -1,    83,    -1,   115,    -1,
     355,    -1,   374,    -1,   502,   833,   834,    -1,   223,   840,
     146,   841,    -1,    -1,   110,    -1,   842,    -1,    91,   846,
     847,    -1,   843,    -1,   842,   712,   843,    -1,   844,   698,
     845,    -1,  1677,    -1,   718,  1680,    -1,   403,    -1,   523,
      -1,   836,    -1,   848,    -1,   847,   712,   848,    -1,   844,
     698,   849,    -1,    68,    -1,   593,    -1,    95,    -1,    97,
      -1,    96,    -1,    58,    -1,   529,    -1,   610,    -1,    83,
      -1,   115,    -1,   355,    -1,   374,    -1,   507,    -1,  1677,
      -1,   850,    -1,   851,   712,  1677,    -1,    -1,   136,  1321,
      -1,   860,    -1,   895,    -1,   897,    -1,   907,    -1,   855,
      -1,   853,    -1,   858,    -1,   862,    -1,   863,    -1,   869,
      -1,   871,    -1,   872,    -1,   856,    -1,   879,    -1,   899,
      -1,   911,    -1,    -1,   250,   857,   874,   168,   250,    -1,
      -1,   859,   725,    -1,    -1,   510,   861,  1321,    -1,   293,
    1679,    -1,   279,  1679,    -1,    -1,    -1,   864,   866,  1321,
      -1,   865,    -1,   867,   712,   865,    -1,    -1,   710,   867,
     711,    -1,   414,  1677,   868,    -1,   198,  1677,   269,    -1,
     198,   213,  1677,   269,    -1,   198,   384,   213,  1677,   269,
      -1,   870,   873,    -1,    70,  1677,    -1,  1677,    -1,   873,
     712,  1677,    -1,    -1,    -1,    -1,   875,  1321,   617,   876,
     806,   877,   878,    -1,    -1,   164,   874,    -1,   163,   806,
      -1,    -1,    56,   880,   881,   892,   168,    56,    -1,    -1,
      -1,   882,  1321,   883,   884,    -1,   885,    -1,   886,    -1,
     884,   886,    -1,   889,    -1,   885,   889,    -1,    -1,    -1,
     680,   887,  1321,   888,   617,   806,    -1,    -1,    -1,   680,
     890,  1321,   891,   617,   806,    -1,    -1,   163,   806,    -1,
      -1,  1679,    -1,  1679,   719,    -1,    -1,   894,    34,   896,
     807,   805,   168,   893,    -1,    -1,    34,   898,   807,   805,
     168,    -1,    -1,    34,  1327,    25,   900,   807,   805,   168,
      -1,   806,   168,   315,    -1,    -1,  1321,   155,   903,   806,
     168,   683,    -1,    -1,   806,   653,   905,  1321,   168,   497,
      -1,   893,    -1,    -1,  1679,   719,   315,   908,   901,   906,
      -1,    -1,  1679,   719,   683,   909,   902,   906,    -1,    -1,
    1679,   719,   497,   910,   904,   906,    -1,    -1,   315,   912,
     901,    -1,    -1,   683,   913,   902,    -1,    -1,   497,   914,
     904,    -1,    33,    -1,     9,    -1,   264,    -1,   654,    -1,
     140,    -1,   944,   946,    -1,   944,    60,   941,   925,    -1,
     944,     6,   941,   920,   929,    -1,    -1,   659,   309,   228,
    1677,    -1,   944,     6,   941,   932,    -1,   944,   157,   941,
     932,    -1,   945,   924,   935,    -1,   945,   924,   938,    -1,
       6,   942,    -1,     6,   943,    -1,    -1,   926,   927,    -1,
     928,    -1,   927,   928,    -1,   927,   712,   928,    -1,   947,
      -1,   948,    -1,   949,    -1,   930,    -1,   931,    -1,   930,
     931,    -1,   930,   712,   931,    -1,   947,    -1,   948,    -1,
     949,    -1,   950,    -1,   953,    -1,   955,    -1,   957,    -1,
     954,    -1,   933,    -1,   934,    -1,   933,   934,    -1,   933,
     712,   934,    -1,   947,    -1,   948,    -1,   949,    -1,   955,
      -1,   957,    -1,   936,    -1,   937,    -1,   936,   937,    -1,
     936,   712,   937,    -1,   947,    -1,   951,    -1,   952,    -1,
     953,    -1,   955,    -1,   957,    -1,   954,    -1,   939,    -1,
     940,    -1,   939,   940,    -1,   939,   712,   940,    -1,   947,
      -1,   955,    -1,   957,    -1,   120,  1674,    -1,   643,  1674,
      -1,   480,  1674,    -1,  1677,    -1,  1677,    -1,   473,    -1,
     475,    -1,   391,     4,    -1,   260,  1529,   958,    -1,    27,
    1529,   958,    -1,   343,  1529,   958,    -1,   193,  1529,   958,
      -1,   644,  1529,   958,    -1,   481,  1529,   958,    -1,   388,
    1529,  1476,    -1,    84,  1529,  1674,    -1,  1574,   172,  1529,
    1040,    -1,    -1,   957,    -1,   676,    -1,   397,    -1,  1479,
      -1,  1673,    -1,    -1,   710,  1045,   711,   960,  1033,   969,
     964,    -1,  1033,   969,   964,    -1,   710,  1020,   711,    -1,
      -1,   710,  1020,   711,   961,  1787,    -1,    -1,   710,  1020,
     711,   962,  1791,    -1,   963,    -1,   298,  1670,    -1,   710,
     298,  1670,   711,    -1,    -1,  1628,  1026,   965,    -1,    -1,
    1652,   533,  1021,  1305,  1025,   966,  1786,    -1,  1652,   533,
    1021,  1024,  1025,    -1,   710,  1020,   711,    -1,    -1,   710,
    1020,   711,   967,  1787,    -1,    -1,   710,  1020,   711,   968,
    1791,    -1,   970,    -1,    -1,   971,    -1,    -1,   436,   973,
     972,   976,    -1,    -1,    -1,   436,   975,   976,    -1,    -1,
      50,   977,   978,   988,   989,   996,    -1,   980,   284,   981,
     710,   982,   711,    -1,    -1,   980,   234,   979,   986,    -1,
     469,   986,    -1,   469,   985,    -1,   303,   986,    -1,   303,
     985,    -1,    -1,   300,    -1,    -1,    12,   698,  1476,    -1,
      -1,   983,    -1,   984,    -1,   983,   712,   984,    -1,  1677,
      -1,    76,   710,   982,   711,    -1,   710,  1315,   994,  1316,
     711,    -1,   710,  1315,   994,  1316,   711,    -1,    -1,   437,
    1476,    -1,    -1,    -1,   597,    50,   980,   234,   987,   990,
     995,    -1,    -1,   597,    50,   980,   284,   981,   710,   992,
     711,   991,   995,    -1,   993,    -1,   992,   712,   993,    -1,
    1677,    -1,  1324,    -1,    -1,   596,  1476,    -1,    -1,   710,
     997,   711,    -1,   998,    -1,   997,   712,   998,    -1,    -1,
     436,   999,  1000,  1001,  1017,  1012,    -1,  1677,    -1,    -1,
      -1,   664,   295,   616,  1002,  1004,    -1,    -1,   664,   272,
    1003,  1005,    -1,   136,    -1,   348,    -1,  1007,    -1,  1007,
      -1,   710,  1006,   711,    -1,  1007,    -1,  1006,   712,  1007,
      -1,    -1,    -1,   710,  1008,  1010,  1009,   711,    -1,  1011,
      -1,  1010,   712,  1011,    -1,   348,    -1,  1324,    -1,    -1,
     710,  1013,   711,    -1,  1014,    -1,  1013,   712,  1014,    -1,
      -1,   597,  1015,  1016,  1017,    -1,  1680,    -1,    -1,  1018,
      -1,  1018,  1019,    -1,  1019,    -1,   606,  1529,  1680,    -1,
    1574,   172,  1529,  1040,    -1,    92,  1529,  1674,    -1,   388,
    1529,  1476,    -1,   342,  1529,  1479,    -1,   362,  1529,  1479,
      -1,   121,   147,  1529,  1674,    -1,   258,   147,  1529,  1674,
      -1,    84,  1529,  1674,    -1,  1652,   533,  1021,  1023,  1025,
      -1,    -1,  1022,  1308,  1312,    -1,  1305,    -1,  1024,    -1,
    1304,  1793,    -1,  1793,    -1,  1311,    -1,    -1,    20,    -1,
      -1,  1028,    -1,  1029,    -1,  1028,  1029,    -1,  1039,    -1,
    1038,    -1,    -1,   250,  1327,   188,    -1,    -1,   250,  1327,
     188,    -1,   105,    -1,   105,   422,   498,    -1,    -1,  1035,
      -1,  1036,    -1,  1036,  1034,    -1,  1036,    -1,  1036,  1035,
      -1,  1036,   712,  1035,    -1,   172,  1529,  1040,    -1,   342,
    1529,  1478,    -1,   362,  1529,  1478,    -1,    30,  1529,  1475,
      -1,   439,  1529,  1674,    -1,    84,  1529,  1674,    -1,    28,
    1529,  1478,    -1,   429,  1529,  1475,    -1,   429,  1529,   136,
      -1,   582,  1529,  1475,    -1,   582,  1529,   136,    -1,   583,
    1529,  1475,    -1,   583,  1529,   136,    -1,   584,  1529,  1475,
      -1,   584,  1529,   136,    -1,    65,  1529,  1475,    -1,   609,
    1529,  1475,    -1,   431,  1529,  1482,    -1,   139,  1529,  1475,
      -1,   524,  1529,  1042,    -1,    -1,   648,  1529,  1037,   710,
    1599,   711,    -1,  1038,    -1,  1039,    -1,   265,  1529,  1043,
      -1,   121,   147,  1529,  1674,    -1,   258,   147,  1529,  1674,
      -1,   606,  1677,    -1,   589,   150,    -1,   589,   353,    -1,
      92,  1529,  1674,    -1,   283,  1529,  1475,    -1,   629,  1529,
    1482,    -1,  1673,  1528,  1674,    -1,  1673,  1528,  1677,    -1,
    1673,  1528,  1479,    -1,  1673,  1528,   136,    -1,   536,  1529,
    1482,    -1,  1114,  1105,  1529,  1107,    -1,  1114,    74,  1529,
    1113,    -1,  1680,    -1,  1680,    -1,   136,    -1,   202,    -1,
     161,    -1,    89,    -1,   482,    -1,    87,    -1,   430,    -1,
     394,    -1,   201,    -1,   287,    -1,   592,    -1,   476,    -1,
     133,    -1,   270,    -1,  1046,    -1,  1047,    -1,  1046,   712,
    1047,    -1,  1048,    -1,  1049,    -1,  1057,    -1,  1062,    -1,
    1062,  1130,    -1,    -1,  1137,  1031,  1159,  1149,  1050,   710,
    1157,   711,  1143,    -1,    -1,  1137,  1031,  1677,   636,  1156,
    1051,   710,  1157,   711,  1143,    -1,    -1,  1141,  1138,  1031,
    1159,  1052,   710,  1157,   711,  1144,    -1,    -1,  1142,  1138,
    1031,  1159,  1053,   710,  1157,   711,  1145,    -1,    -1,  1060,
    1136,  1031,  1159,  1149,  1054,   710,  1157,   711,  1143,    -1,
      -1,  1060,  1136,  1031,  1677,   636,  1156,  1055,   710,  1157,
     711,  1143,    -1,    -1,  1060,   209,   284,  1031,  1159,  1056,
     710,  1157,   711,  1130,    -1,  1060,  1059,    -1,    -1,  1059,
      -1,    66,   710,  1321,   711,    -1,    -1,  1061,    -1,    94,
    1159,    -1,    -1,  1669,  1063,  1064,  1058,    -1,    -1,  1082,
    1065,  1069,    -1,    -1,   538,  1066,  1067,    -1,    -1,  1068,
      -1,  1068,  1103,    -1,  1103,    -1,  1100,    -1,    -1,  1071,
      20,  1079,  1070,  1072,  1073,    -1,    -1,   219,    15,    -1,
      -1,   675,    -1,   441,    -1,   590,    -1,    -1,  1074,    -1,
    1074,  1075,    -1,  1075,    -1,   649,    -1,   649,   284,    -1,
      84,  1674,    -1,    -1,   434,  1077,  1321,    -1,  1800,    -1,
    1321,    -1,  1321,   712,  1375,    -1,   710,  1078,   711,    -1,
    1339,    -1,  1648,    -1,  1079,    -1,  1080,    -1,  1088,  1097,
    1093,    -1,  1089,  1099,  1093,    -1,   204,  1091,  1093,    -1,
      42,  1098,    -1,    47,    -1,    46,    -1,  1084,  1098,  1116,
      -1,  1085,  1098,  1117,    -1,    37,  1098,    -1,  1086,  1096,
    1116,    -1,  1087,  1096,  1117,    -1,   666,  1096,    -1,   695,
    1097,  1093,    -1,   125,    -1,   622,  1097,    -1,   619,  1097,
      -1,   122,  1097,    -1,   623,    -1,    44,  1097,    -1,  1083,
    1091,  1090,    -1,   349,    -1,   311,    -1,   314,   666,    -1,
     314,  1086,  1116,    -1,   625,  1116,    -1,   615,  1097,  1116,
      -1,   351,  1116,    -1,   312,  1116,    -1,   133,  1091,  1093,
      -1,   404,  1091,  1093,    -1,   202,  1091,  1093,    -1,   173,
     710,  1161,   711,  1116,    -1,   542,   710,  1161,   711,  1116,
      -1,   314,  1116,    -1,   221,    -1,   220,    -1,   445,    -1,
     370,    -1,   302,    -1,   369,    -1,   446,    -1,   371,    -1,
      63,    -1,   380,    -1,   377,    63,    -1,  1084,   671,    -1,
     667,    -1,   377,   667,    -1,   406,    -1,   380,   667,    -1,
     377,    63,   671,    -1,   380,   671,    -1,   270,    -1,   624,
      -1,   556,    -1,   350,    -1,    36,    -1,   476,    -1,   153,
      -1,   153,   451,    -1,    -1,   576,   698,   402,    -1,    -1,
    1096,    -1,  1092,    -1,   710,   402,   712,   402,   711,    -1,
      -1,  1094,    -1,  1094,  1095,    -1,  1095,    -1,   550,    -1,
     652,    -1,   696,    -1,   710,   313,   711,    -1,   710,   638,
     711,    -1,   710,   132,   711,    -1,   710,   402,   711,    -1,
      -1,  1096,    -1,    -1,  1096,    -1,    -1,  1092,    -1,    -1,
    1101,    -1,  1101,  1102,    -1,  1102,    -1,   401,    -1,   136,
    1081,    -1,   410,   654,   393,  1318,    -1,    28,    -1,   538,
     136,   665,    -1,    74,  1111,    -1,  1103,    -1,  1327,   401,
      -1,  1129,   284,    -1,   649,    -1,   649,   284,    -1,    84,
    1674,    -1,  1673,  1528,  1674,    -1,  1673,  1528,  1677,    -1,
    1673,  1528,  1479,    -1,  1673,  1528,   136,    -1,  1082,  1112,
      -1,    63,   542,    -1,    62,    -1,  1680,    -1,    37,    -1,
    1106,    -1,   136,    -1,    -1,  1105,  1107,    -1,  1680,    -1,
      37,    -1,  1109,    -1,   136,    -1,  1680,    -1,    -1,    74,
    1113,    -1,  1111,    -1,   136,    -1,    -1,   136,    -1,  1105,
    1106,    -1,    22,    -1,   646,    -1,    -1,    51,    -1,  1115,
    1117,    -1,    37,    -1,    37,  1115,    -1,    -1,    37,    -1,
      -1,   710,  1476,  1119,   711,    -1,    21,    -1,   142,    -1,
     512,    -1,    -1,  1120,    -1,  1120,  1121,    -1,  1121,    -1,
    1476,    -1,  1123,  1122,    -1,  1124,    -1,  1125,   712,  1124,
      -1,  1123,   703,  1123,    -1,  1125,    -1,  1126,    -1,    -1,
     296,  1127,    -1,    -1,   456,    -1,   483,  1670,  1131,  1133,
    1134,    -1,    -1,   710,  1132,   711,    -1,  1132,   712,  1677,
      -1,  1677,    -1,    -1,   339,   214,    -1,   339,   435,    -1,
     339,   551,    -1,    -1,   410,   654,  1135,    -1,   410,   140,
    1135,    -1,   410,   654,  1135,   410,   140,  1135,    -1,   410,
     140,  1135,   410,   654,  1135,    -1,   505,    -1,    54,    -1,
     542,   401,    -1,   394,     5,    -1,   542,   136,    -1,   456,
     284,    -1,   649,  1138,    -1,   284,    -1,   258,    -1,    -1,
    1137,    -1,   282,    -1,   258,    -1,   257,    -1,    -1,   649,
      -1,   215,    -1,   563,    -1,    -1,  1146,    -1,    -1,  1148,
      -1,    -1,  1147,    -1,  1153,    -1,  1146,  1153,    -1,  1154,
      -1,  1147,  1154,    -1,  1155,    -1,  1148,  1155,    -1,    -1,
     660,  1156,    -1,    -1,   660,  1156,    -1,   636,  1156,    -1,
     660,  1156,    -1,   636,  1156,    -1,   283,  1529,  1475,    -1,
      84,  1674,    -1,  1673,  1528,  1674,    -1,  1673,  1528,  1677,
      -1,  1673,  1528,  1479,    -1,  1673,  1528,   136,    -1,  1152,
      -1,  1151,    -1,  1152,    -1,  1152,    -1,   684,   433,  1673,
      -1,    49,    -1,   526,    -1,   234,    -1,  1157,   712,  1158,
    1466,    -1,  1158,  1466,    -1,  1677,    -1,  1677,   710,   402,
     711,    -1,    -1,  1669,    -1,    -1,   717,  1677,    -1,  1645,
      -1,  1161,   712,  1645,    -1,    -1,    -1,    14,  1163,  1199,
     608,  1670,  1719,  1164,  1176,    -1,    -1,    14,   118,  1175,
    1165,  1028,    -1,    14,   118,  1677,   655,   121,   147,   376,
      -1,    -1,    14,   458,   782,  1166,   783,    -1,    -1,    14,
     216,   782,  1167,   783,    -1,    -1,    14,  1812,  1809,  1168,
    1814,    -1,    -1,    14,  1809,  1169,  1814,    -1,    -1,    14,
    1809,  1315,   180,   782,  1170,  1172,  1173,   773,   778,  1174,
      -1,    14,   606,   921,    -1,    14,   309,   228,   923,    -1,
      14,   606,   918,    -1,    14,   606,   917,    -1,    -1,    14,
     540,  1680,  1171,   416,   710,   767,   711,    -1,    14,  1509,
     657,   781,  1757,  1765,  1768,    -1,    -1,   410,   528,   771,
      -1,   777,    -1,   410,   528,   771,   777,    -1,    -1,   493,
     626,   782,    -1,    -1,   155,   779,    -1,    -1,  1677,    -1,
      -1,   149,   606,    -1,   255,   606,    -1,  1191,   970,    -1,
    1191,  1180,    -1,  1180,    -1,   971,    -1,  1182,    -1,   157,
     436,  1509,  1189,    -1,   477,   436,  1255,  1181,    -1,    -1,
     415,   436,  1255,  1181,  1177,  1255,    -1,    16,   436,  1255,
    1181,    -1,    -1,    66,   436,  1181,  1178,  1249,    -1,    -1,
     495,   436,  1255,  1181,  1179,  1227,    -1,    72,   436,  1255,
    1476,    -1,   634,   436,  1181,    -1,  1185,    -1,   182,   436,
    1190,   684,   608,  1670,   973,    -1,   492,   438,    -1,    13,
      -1,  1189,    -1,    -1,     6,   436,  1031,  1255,  1183,  1184,
      -1,    -1,   710,   997,   711,    -1,   437,  1476,    -1,    -1,
     494,   436,  1255,  1186,  1187,    -1,    -1,    -1,  1189,  1188,
     269,   710,   997,   711,    -1,  1190,    -1,  1189,   712,  1190,
      -1,  1677,    -1,  1193,    -1,  1191,   712,  1193,    -1,     6,
    1197,  1030,    -1,  1192,  1048,  1205,    -1,     6,  1049,    -1,
    1192,   710,  1045,   711,    -1,     6,  1057,    -1,     6,    94,
     250,  1327,   188,  1669,  1059,    -1,    60,  1197,  1508,  1669,
    1062,  1205,    -1,   366,  1197,  1508,  1062,  1205,    -1,   157,
    1197,  1508,  1669,  1204,    -1,   157,    94,  1508,  1669,    -1,
     157,   209,   284,  1508,  1669,    -1,   157,   456,   284,    -1,
     157,  1137,  1508,  1669,    -1,   148,   282,    -1,   166,   282,
      -1,    14,  1197,  1669,   542,   136,  1081,    -1,    14,  1197,
    1669,   157,   136,    -1,   493,  1206,  1670,    -1,   102,   626,
    1105,  1107,  1112,    -1,  1034,    -1,   208,    -1,  1459,    -1,
    1195,    -1,  1196,    -1,    -1,  1196,    -1,  1195,    -1,  1196,
    1195,    -1,  1195,  1196,    -1,    12,  1529,   136,    -1,    12,
    1529,  1677,    -1,   308,  1529,   136,    -1,   308,  1529,  1677,
      -1,    -1,    82,    -1,    -1,   252,    -1,    -1,  1200,  1201,
      -1,    -1,  1202,    -1,  1202,  1203,    -1,  1203,    -1,   252,
      -1,   413,    -1,    -1,   505,    -1,    54,    -1,    -1,     9,
    1677,    -1,   201,    -1,    -1,   626,    -1,   698,    -1,    20,
      -1,    -1,   580,   552,   751,  1214,  1208,  1218,    -1,    -1,
     580,    13,   553,  1214,  1209,    -1,   588,   552,   751,  1214,
      -1,   588,    13,   553,  1214,    -1,   580,   628,  1211,    -1,
      -1,  1212,    -1,  1213,    -1,  1212,   712,  1213,    -1,   684,
      93,   557,    -1,   474,   412,    -1,   474,   689,    -1,    -1,
    1215,  1216,    -1,  1217,    -1,  1216,   712,  1217,    -1,    -1,
     575,    -1,   489,    -1,    -1,   653,  1219,    -1,   653,   319,
     698,  1674,    -1,   750,    -1,  1219,   712,   750,    -1,    -1,
      65,  1720,  1221,  1503,  1222,    -1,    -1,   467,    -1,   192,
      -1,  1720,  1503,  1227,    -1,    -1,   674,  1224,  1503,  1230,
      -1,    -1,   495,  1255,  1226,  1223,    -1,    -1,  1228,    -1,
    1229,    -1,  1229,  1228,    -1,   467,    -1,   192,    -1,   658,
      -1,    -1,   213,   373,    -1,    -1,    16,  1255,  1720,  1232,
    1233,    -1,  1234,    -1,  1233,   712,  1234,    -1,  1504,  1235,
      -1,    -1,   441,   210,  1236,    -1,    13,    -1,    76,  1237,
     257,  1239,    -1,    13,    -1,    -1,   710,  1238,  1241,   711,
      -1,    13,    -1,    -1,   710,  1240,  1242,   711,    -1,    -1,
    1677,    -1,  1241,   712,  1677,    -1,    -1,  1243,    -1,  1242,
     712,  1243,    -1,  1677,    -1,   456,    -1,    38,  1674,    -1,
    1720,  1503,  1249,    -1,    -1,   674,  1246,  1503,  1252,    -1,
      -1,    66,  1248,  1245,    -1,    -1,  1250,    -1,  1251,    -1,
    1251,  1250,    -1,   467,    -1,   196,    -1,   352,    -1,   192,
      -1,    61,    -1,   210,   655,    -1,    -1,   210,   655,    -1,
      -1,   415,  1255,  1720,  1254,  1503,  1719,    -1,    -1,   399,
      -1,   305,    -1,    -1,   493,  1720,  1257,  1259,    -1,   493,
     657,   781,  1258,    -1,  1683,   626,  1683,    -1,  1258,   712,
    1683,   626,  1683,    -1,  1260,    -1,  1259,   712,  1260,    -1,
    1670,  1719,   626,  1670,    -1,    -1,    52,   258,  1262,  1263,
     272,  1267,    -1,  1264,    -1,  1266,    -1,  1265,    -1,  1264,
     712,  1265,    -1,  1670,  1276,    -1,  1670,  1274,  1276,    -1,
    1677,    -1,   136,    -1,    -1,   304,   258,   269,    52,  1269,
    1270,    -1,  1273,    -1,  1271,    -1,  1272,    -1,  1271,   712,
    1272,    -1,  1670,  1276,  1279,    -1,  1670,  1274,  1276,  1279,
      -1,    -1,   436,   973,  1275,   710,  1181,   711,    -1,    -1,
    1277,  1278,    -1,    -1,  1137,   710,  1427,   711,    -1,    -1,
     252,   292,    -1,  1652,  1281,    -1,   533,  1302,  1291,    -1,
     710,  1283,   711,    -1,   710,  1283,   711,  1787,    -1,   710,
    1283,   711,  1791,    -1,   533,  1302,  1293,    -1,   710,  1285,
     711,    -1,   710,  1285,   711,  1787,    -1,   710,  1285,   711,
    1791,    -1,    -1,  1284,   533,  1302,  1297,  1311,    -1,   710,
    1283,   711,    -1,    -1,  1286,   533,  1302,  1298,  1311,    -1,
     710,  1285,   711,    -1,    -1,  1288,   533,  1302,  1299,  1311,
      -1,   710,  1287,   711,    -1,    -1,  1290,   533,  1406,  1305,
    1462,  1467,  1311,    -1,   710,  1289,   711,    -1,    -1,  1305,
    1311,  1292,  1786,    -1,  1300,  1311,    -1,    -1,  1305,  1311,
    1294,  1786,    -1,  1301,  1311,    -1,  1305,  1311,    -1,    -1,
    1305,  1311,  1296,  1789,    -1,  1793,  1311,    -1,  1304,  1793,
    1311,    -1,  1305,    -1,  1300,    -1,  1305,    -1,  1301,    -1,
    1305,    -1,  1793,    -1,  1304,  1793,    -1,  1301,    -1,  1304,
    1483,    -1,  1304,  1793,  1483,    -1,  1793,    -1,  1493,  1305,
    1462,  1467,    -1,  1304,  1493,    -1,  1304,  1793,    -1,  1304,
    1793,  1493,    -1,    -1,  1303,  1308,  1312,    -1,  1306,  1437,
    1442,  1439,  1445,    -1,    -1,  1304,    -1,   213,  1307,    -1,
    1382,    -1,   158,    -1,    -1,  1309,    -1,  1309,  1310,    -1,
    1310,    -1,  1805,    -1,   572,    -1,   570,    -1,    -1,   210,
     654,  1719,    -1,   308,   272,   544,   364,  1719,    -1,  1312,
     712,  1313,    -1,  1313,    -1,   705,    -1,  1315,  1663,  1316,
      -1,  1315,  1321,  1316,  1317,    -1,    -1,    -1,    -1,    -1,
      20,  1677,    -1,    20,  1674,    -1,  1677,    -1,  1674,    -1,
      -1,   710,   711,    -1,   710,  1476,   711,    -1,    -1,   710,
     711,    -1,   710,  1476,   711,    -1,    -1,   710,   711,    -1,
    1321,  1325,  1321,    -1,  1321,   693,  1321,    -1,  1321,  1326,
    1321,    -1,   391,  1321,    -1,  1322,   275,   633,    -1,  1322,
     275,  1327,   633,    -1,  1322,   275,   195,    -1,  1322,   275,
    1327,   195,    -1,  1322,   275,   650,    -1,  1322,   275,  1327,
     650,    -1,  1322,    -1,  1322,   275,   401,    -1,  1322,   275,
    1327,   401,    -1,  1322,   174,  1323,    -1,  1322,  1329,  1323,
      -1,  1322,  1329,  1330,   710,  1800,   711,    -1,  1323,    -1,
    1324,   272,   710,  1800,   711,    -1,  1324,  1327,   272,   710,
    1800,   711,    -1,  1324,   272,   710,  1321,   711,    -1,  1324,
     272,   710,  1321,   712,  1375,   711,    -1,  1324,  1327,   272,
     710,  1321,   711,    -1,  1324,  1327,   272,   710,  1321,   712,
    1375,   711,    -1,  1324,    35,  1324,    18,  1323,    -1,  1324,
    1327,    35,  1324,    18,  1323,    -1,  1324,   561,   298,  1324,
      -1,  1324,   298,  1340,  1441,    -1,  1324,  1327,   298,  1340,
    1441,    -1,  1324,   484,  1324,    -1,  1324,  1327,   484,  1324,
      -1,  1324,    -1,  1324,   701,  1324,    -1,  1324,   702,  1324,
      -1,  1324,   545,  1324,    -1,  1324,   546,  1324,    -1,  1324,
     704,  1324,    -1,  1324,   703,  1324,    -1,  1324,   704,   268,
    1321,  1431,    -1,  1324,   703,   268,  1321,  1431,    -1,  1324,
     705,  1324,    -1,  1324,   706,  1324,    -1,  1324,   707,  1324,
      -1,  1324,   152,  1324,    -1,  1324,   367,  1324,    -1,  1324,
     708,  1324,    -1,  1340,    -1,   422,    -1,   419,    -1,    18,
      -1,    17,    -1,   391,    -1,   390,    -1,   713,    -1,   390,
      -1,   698,    -1,   217,    -1,   699,    -1,   290,    -1,   700,
      -1,   381,    -1,    13,    -1,    19,    -1,    -1,    20,  1332,
      -1,  1333,    -1,  1334,    -1,  1335,    -1,   270,    -1,   652,
     270,    -1,   153,    -1,   476,    -1,   204,    -1,   133,  1091,
      -1,   125,    -1,   622,  1097,    -1,   122,  1097,    -1,    -1,
    1084,  1336,  1116,    -1,  1085,    -1,  1321,   712,  1321,  1331,
      -1,  1337,    -1,  1338,   712,  1337,    -1,  1665,    -1,  1341,
      -1,  1342,    -1,  1345,    -1,  1343,    -1,  1649,    -1,  1647,
      -1,  1361,    -1,  1353,    -1,  1357,    -1,   520,   710,  1321,
     712,  1375,   711,    -1,   188,   710,  1800,   711,    -1,   714,
    1677,  1321,   715,    -1,   339,  1376,    10,   710,  1324,  1347,
     711,    -1,    57,   710,  1321,    20,  1370,   711,    -1,    56,
    1378,  1380,  1379,   168,    -1,   102,   710,  1321,   712,  1370,
     711,    -1,   102,   710,  1321,   660,  1106,   711,    -1,   136,
     710,  1665,   711,    -1,   664,   710,  1666,   711,    -1,   384,
     665,   210,  1670,    -1,   385,   710,  1670,   711,    -1,   455,
     665,   210,  1670,    -1,   289,   710,  1670,   711,    -1,  1339,
      -1,  1340,    74,  1680,    -1,   710,  1078,   711,    -1,    37,
    1340,    -1,  1340,   421,  1340,    -1,   704,  1340,    -1,   703,
    1340,    -1,   709,  1340,    -1,  1328,  1340,    -1,   268,  1321,
    1431,   704,  1321,    -1,    63,   710,  1375,   711,    -1,    63,
     710,  1375,   660,  1106,   711,    -1,   111,  1320,    -1,   112,
    1320,    -1,   125,   710,  1321,   711,    -1,   130,   710,  1321,
     711,    -1,   245,   710,  1321,   711,    -1,   264,   710,  1321,
     712,  1321,   712,  1321,   712,  1321,   711,    -1,   268,   710,
    1321,   712,  1321,   711,    -1,   268,   710,  1321,   712,  1321,
     712,  1375,   711,    -1,   294,   710,  1321,   712,  1321,   711,
      -1,   360,   710,  1321,   711,    -1,   368,   710,  1321,   711,
      -1,   514,   710,  1321,   712,  1321,   711,    -1,   531,   710,
    1321,   711,    -1,   622,   710,  1321,   711,    -1,   619,   710,
    1321,   711,    -1,   619,   710,  1321,   712,  1321,   711,    -1,
     632,   710,  1321,   711,    -1,   632,   710,   291,  1321,   213,
    1321,   711,    -1,   632,   710,   627,  1321,   213,  1321,   711,
      -1,   632,   710,    48,  1321,   213,  1321,   711,    -1,   632,
     710,   291,   213,  1321,   711,    -1,   632,   710,   627,   213,
    1321,   711,    -1,   632,   710,    48,   213,  1321,   711,    -1,
     632,   710,  1321,   213,  1321,   711,    -1,   657,   710,   711,
      -1,   695,   710,  1321,   711,    -1,     8,   710,  1321,   712,
    1321,   711,    -1,     8,   710,  1321,   712,   268,  1321,  1431,
     711,    -1,   109,  1320,    -1,   116,  1319,    -1,   123,   710,
    1321,   712,   268,  1321,  1431,   711,    -1,   124,   710,  1321,
     712,   268,  1321,  1431,   711,    -1,   135,   710,  1321,   712,
    1321,   711,    -1,   194,   710,  1431,   213,  1321,   711,    -1,
     222,   710,  1433,   712,  1321,   711,    -1,   393,  1319,    -1,
     448,   710,  1324,   272,  1321,   711,    -1,   594,   710,  1321,
     712,  1321,   711,    -1,   594,   710,  1321,   712,   268,  1321,
    1431,   711,    -1,   598,   710,  1321,   712,  1321,   712,  1321,
     711,    -1,   598,   710,  1321,   712,  1321,   711,    -1,   598,
     710,  1321,   213,  1321,   210,  1321,   711,    -1,   598,   710,
    1321,   213,  1321,   711,    -1,   604,  1319,    -1,   620,   710,
    1432,   712,  1321,   712,  1321,   711,    -1,   621,   710,  1432,
     712,  1321,   712,  1321,   711,    -1,   661,  1320,    -1,   663,
    1319,    -1,   662,  1319,    -1,    77,   710,  1321,   712,  1338,
     711,    -1,    80,   710,  1321,   712,  1375,   711,    -1,    78,
     710,  1321,   711,    -1,    79,   710,  1338,   711,    -1,    81,
     710,  1321,   712,  1321,    20,  1370,   711,    -1,    22,   710,
    1321,   711,    -1,    62,   710,  1321,   711,    -1,    72,   710,
    1375,   711,    -1,    75,   710,  1321,   711,    -1,   118,   710,
     711,    -1,   250,   710,  1321,   712,  1321,   712,  1321,   711,
      -1,   211,   710,  1321,   712,  1321,   711,    -1,   211,   710,
    1321,   712,  1321,   712,  1321,   711,    -1,   288,   710,  1321,
     711,    -1,   288,   710,  1375,   712,  1321,   711,    -1,   356,
     710,  1321,   711,    -1,   367,   710,  1321,   712,  1321,   711,
      -1,   409,   710,  1321,   711,    -1,   439,   710,  1321,   711,
      -1,   465,   710,  1321,   711,    -1,   497,   710,  1321,   712,
    1321,   711,    -1,   498,   710,  1321,   712,  1321,   712,  1321,
     711,    -1,   512,   710,  1321,   711,    -1,   523,   710,   711,
      -1,   634,   710,  1321,   712,  1321,   711,    -1,   678,   710,
    1321,   711,    -1,   678,   710,  1321,   712,  1321,   711,    -1,
     679,   710,  1321,  1128,   711,    -1,   679,   710,  1321,    20,
      63,  1118,  1128,   711,    -1,   679,   710,  1321,    20,    37,
    1118,   711,    -1,   679,   710,  1321,   712,  1475,   712,  1475,
     712,  1475,   711,    -1,  1344,    -1,    98,   710,  1321,   712,
    1321,   711,    -1,   220,   710,  1375,   711,    -1,   302,   710,
    1375,   711,    -1,   369,   710,  1375,   711,    -1,   370,   710,
    1375,   711,    -1,   371,   710,  1375,   711,    -1,   445,   710,
    1321,   712,  1321,   711,    -1,   446,   710,  1375,   711,    -1,
      -1,  1673,   710,  1346,  1350,   711,    -1,  1677,   717,  1677,
     710,  1374,   711,    -1,  1348,  1349,    -1,   272,    46,   364,
      -1,    -1,   272,   378,   286,   364,    -1,    -1,   684,   466,
     190,    -1,    -1,  1351,    -1,  1352,    -1,  1351,   712,  1352,
      -1,  1315,  1321,  1316,  1317,    -1,    31,   710,  1368,   711,
      -1,    31,   710,   151,  1368,   711,    -1,    40,   710,  1368,
     711,    -1,    41,   710,  1368,   711,    -1,    43,   710,  1368,
     711,    -1,   103,   710,  1436,   705,   711,    -1,   103,   710,
    1368,   711,    -1,    -1,    -1,   103,   710,   151,  1354,  1375,
    1355,   711,    -1,   363,   710,  1368,   711,    -1,   363,   710,
     151,  1368,   711,    -1,   344,   710,  1368,   711,    -1,   344,
     710,   151,  1368,   711,    -1,   587,   710,  1368,   711,    -1,
     670,   710,  1368,   711,    -1,   586,   710,  1368,   711,    -1,
     672,   710,  1368,   711,    -1,   599,   710,  1368,   711,    -1,
     599,   710,   151,  1368,   711,    -1,    -1,   229,   710,  1364,
    1356,  1375,  1366,  1365,   711,    -1,  1358,   427,  1360,    -1,
    1358,   427,  1448,    -1,  1359,    -1,  1353,    -1,   525,   710,
     711,    -1,   470,   710,   711,    -1,   141,   710,   711,    -1,
     440,   710,   711,    -1,   108,   710,   711,    -1,   400,   710,
    1321,   711,    -1,   200,   710,  1321,   711,    -1,   288,   710,
    1321,   711,    -1,   405,   710,  1321,   712,  1321,   711,    -1,
     231,   710,  1321,   711,    -1,   231,   710,  1321,   712,  1321,
     711,    -1,   230,   710,  1321,   711,    -1,   230,   710,  1321,
     712,  1321,   711,    -1,  1677,    -1,    -1,   718,  1362,  1363,
      -1,  1680,   543,  1321,    -1,  1680,    -1,   718,  1705,  1680,
    1160,    -1,    -1,   151,    -1,    -1,   535,  1645,    -1,    -1,
     420,    50,  1367,    -1,  1367,   712,  1664,  1466,    -1,  1664,
    1466,    -1,    -1,  1436,  1369,  1321,    -1,    37,  1097,    -1,
      -1,    63,  1097,  1371,  1116,    -1,   380,  1097,    -1,  1372,
      -1,  1373,    -1,   270,    -1,   550,    -1,   550,   270,    -1,
     652,    -1,   652,   270,    -1,   133,  1091,    -1,   153,  1099,
      -1,   125,    -1,   622,  1097,    -1,   122,  1097,    -1,    -1,
    1375,    -1,  1321,    -1,  1375,   712,  1321,    -1,  1377,    -1,
     710,  1377,   711,    -1,  1665,    -1,  1377,   712,  1665,    -1,
      -1,  1321,    -1,    -1,   163,  1321,    -1,   680,  1321,   617,
    1321,    -1,  1380,   680,  1321,   617,  1321,    -1,  1396,    -1,
    1385,    -1,  1384,    -1,  1381,    -1,   714,  1677,  1381,   715,
      -1,  1383,    -1,  1384,   712,  1383,    -1,  1381,  1393,  1381,
      -1,    -1,  1381,  1393,  1381,   410,  1386,  1321,    -1,    -1,
    1381,  1393,  1381,   660,  1387,   710,  1430,   711,    -1,  1381,
     378,  1392,  1396,    -1,    -1,  1381,   294,  1416,   280,  1381,
     410,  1388,  1321,    -1,    -1,  1381,   294,  1416,   280,  1396,
    1389,   660,   710,  1430,   711,    -1,  1381,   378,   294,  1416,
     280,  1396,    -1,    -1,  1381,   514,  1416,   280,  1381,   410,
    1390,  1321,    -1,    -1,  1381,   514,  1416,   280,  1396,  1391,
     660,   710,  1430,   711,    -1,  1381,   378,   514,  1416,   280,
    1396,    -1,   280,    -1,   261,   280,    -1,   591,    -1,  1392,
      -1,   106,   280,    -1,    -1,  1395,    -1,   436,   710,  1430,
     711,   973,    -1,  1397,    -1,  1399,    -1,    -1,  1398,  1670,
    1394,  1435,  1425,    -1,   710,  1413,  1400,   711,  1435,    -1,
     710,  1413,  1801,  1653,  1799,  1802,   711,  1435,    -1,  1408,
      -1,  1408,  1791,    -1,    -1,  1408,  1794,  1401,  1402,    -1,
    1409,  1311,    -1,  1409,  1793,  1311,    -1,  1409,  1311,  1404,
      -1,  1797,    -1,  1798,    -1,    -1,  1798,  1403,  1404,    -1,
    1794,  1402,    -1,  1406,    -1,    -1,  1407,  1803,  1312,    -1,
    1414,  1384,    -1,   533,  1415,  1410,    -1,    -1,    -1,  1411,
    1308,  1312,  1412,  1305,    -1,    -1,  1413,    -1,    -1,    -1,
     424,    -1,    -1,   210,   280,    -1,   210,   420,    50,    -1,
     210,   228,    50,    -1,   208,    -1,   252,    -1,    -1,  1418,
    1137,  1417,  1420,   710,  1429,   711,    -1,    -1,   659,  1137,
    1417,  1421,   710,  1427,   711,    -1,  1419,    -1,  1422,  1419,
      -1,    -1,    -1,  1424,  1422,    -1,    -1,  1426,  1423,    -1,
      -1,  1429,    -1,  1677,    -1,   456,    -1,  1428,    -1,  1429,
     712,  1428,    -1,  1677,    -1,  1430,   712,  1677,    -1,  1432,
      -1,   126,    -1,   127,    -1,   128,    -1,   129,    -1,   242,
      -1,   243,    -1,   244,    -1,   358,    -1,   359,    -1,   530,
      -1,   694,    -1,   130,    -1,   678,    -1,   245,    -1,   360,
      -1,   368,    -1,   465,    -1,   531,    -1,   356,    -1,   695,
      -1,   125,    -1,   622,    -1,   122,    -1,   619,    -1,    -1,
      20,    -1,   698,    -1,    -1,  1434,  1677,    -1,    -1,    13,
      -1,    -1,    -1,   681,  1438,  1321,    -1,    -1,    -1,   235,
    1440,  1321,    -1,   178,  1340,    -1,    -1,    -1,   228,    50,
    1443,  1444,    -1,  1443,   712,  1664,  1466,    -1,  1664,  1466,
      -1,    -1,   685,    -1,   686,    -1,    -1,   682,  1446,    -1,
    1446,   712,  1447,    -1,  1447,    -1,  1360,    20,  1448,    -1,
      -1,   710,  1449,  1450,  1451,  1452,  1453,   711,    -1,    -1,
    1677,    -1,    -1,   436,    50,  1443,    -1,    -1,   420,    50,
    1465,    -1,    -1,  1454,  1455,  1458,    -1,   521,    -1,   469,
      -1,  1456,    -1,    35,  1457,    18,  1457,    -1,   639,   450,
      -1,   110,   520,    -1,  1649,   450,    -1,  1456,    -1,   639,
     207,    -1,  1649,   207,    -1,    -1,   185,   110,   520,    -1,
     185,   228,    -1,   185,   618,    -1,   185,   394,   423,    -1,
     420,    50,  1460,    -1,  1460,   712,  1461,    -1,  1461,    -1,
    1666,  1466,    -1,    -1,  1463,    -1,    -1,   420,    50,  1464,
    1465,    -1,  1465,   712,  1664,  1466,    -1,  1664,  1466,    -1,
      -1,    21,    -1,   142,    -1,    -1,  1469,    -1,   299,    -1,
    1468,  1470,    -1,  1468,  1470,   521,   183,  1472,    -1,  1468,
     521,   183,  1472,    -1,  1471,    -1,  1471,   712,  1471,    -1,
    1471,   408,  1471,    -1,  1678,    -1,  1678,   717,  1677,    -1,
    1647,    -1,   638,    -1,   313,    -1,   402,    -1,  1471,    -1,
      -1,   299,  1471,    -1,   299,   521,   183,    -1,   299,  1471,
     521,   183,    -1,   402,    -1,   703,   402,    -1,   402,    -1,
     237,    -1,   313,    -1,   638,    -1,   132,    -1,   203,    -1,
     402,    -1,   237,    -1,   313,    -1,   638,    -1,  1480,    -1,
     402,    -1,   313,    -1,   703,   402,    -1,   703,   313,    -1,
     402,    -1,   638,    -1,   313,    -1,   132,    -1,   203,    -1,
     402,    -1,   638,    -1,   237,    -1,   313,    -1,  1480,    -1,
    1481,    -1,   132,    -1,   203,    -1,  1475,    -1,   136,    -1,
      -1,   458,  1677,  1484,   710,  1485,   711,    -1,    -1,  1486,
      -1,  1486,   712,  1487,    -1,  1487,    -1,  1315,  1321,  1316,
      -1,    -1,  1489,  1490,    -1,  1490,   712,  1491,    -1,  1491,
      -1,  1492,    -1,   718,  1680,    -1,  1680,    -1,  1677,   717,
    1677,    -1,   269,  1494,    -1,    -1,    -1,   425,  1676,  1495,
    1108,  1496,  1629,  1632,    -1,   159,  1676,    -1,  1488,    -1,
      -1,   155,  1498,  1375,    -1,    -1,   157,  1510,  1720,  1509,
    1500,  1503,  1719,  1204,    -1,   157,   258,  1508,  1677,   410,
    1670,  1719,    -1,   157,   118,  1509,  1677,    -1,   157,   216,
    1509,  1677,   717,  1677,    -1,   157,   216,  1509,  1677,    -1,
     157,   458,  1509,   782,    -1,   157,   657,  1509,   781,  1756,
      -1,   157,   515,  1509,   781,  1740,    -1,    -1,   157,   674,
    1509,  1501,  1503,  1204,    -1,   157,   180,  1509,   782,    -1,
     157,   631,  1509,   782,    -1,   157,   606,   944,   955,   956,
      -1,   157,   309,   228,   945,   955,   956,    -1,   157,   540,
    1509,  1680,    -1,    -1,   157,  1510,   536,  1509,  1502,  1503,
      -1,  1504,    -1,  1503,   712,  1504,    -1,  1670,    -1,  1670,
    1394,    -1,  1507,    -1,  1506,   712,  1507,    -1,  1671,    -1,
      -1,   250,   188,    -1,    -1,   250,   188,    -1,    -1,   611,
      -1,    -1,    -1,   264,  1512,  1517,  1198,  1519,  1513,  1521,
    1537,    -1,    -1,    -1,   498,  1515,  1518,  1519,  1516,  1521,
      -1,    -1,   316,    -1,   138,    -1,   239,    -1,  1546,    -1,
     138,    -1,   269,  1520,    -1,  1520,    -1,  1505,    -1,  1524,
      -1,   710,   711,  1524,    -1,   710,  1523,   711,  1524,    -1,
      -1,   542,  1522,  1526,    -1,  1523,   712,  1662,    -1,  1662,
      -1,   664,  1525,    -1,   665,  1525,    -1,   965,    -1,  1525,
     712,  1532,    -1,  1532,    -1,  1526,   712,  1527,    -1,  1527,
      -1,  1666,  1528,  1536,    -1,   698,    -1,   543,    -1,    -1,
    1528,    -1,  1529,    -1,   684,    -1,  1529,    -1,    50,    -1,
      -1,   710,  1533,  1534,   711,    -1,    -1,  1535,    -1,  1535,
     712,  1536,    -1,  1536,    -1,  1321,    -1,   136,    -1,   252,
      -1,    -1,    -1,   410,   160,  1538,   284,   654,  1544,    -1,
      -1,    -1,   654,  1540,  1546,  1198,  1382,   542,  1542,  1541,
    1437,  1462,  1473,    -1,  1542,   712,  1543,    -1,  1543,    -1,
    1666,  1528,  1536,    -1,  1544,   712,  1545,    -1,  1545,    -1,
    1666,  1528,  1536,    -1,    -1,   316,    -1,    -1,   140,  1548,
    1558,  1549,    -1,    -1,    -1,   213,  1670,  1394,  1550,  1437,
    1462,  1473,  1551,  1554,    -1,    -1,  1555,  1552,   213,  1382,
    1437,    -1,    -1,   213,  1506,  1553,   660,  1382,  1437,    -1,
      -1,   508,  1312,    -1,  1556,    -1,  1555,   712,  1556,    -1,
    1677,  1557,    -1,  1677,   717,  1677,  1557,    -1,    -1,   717,
     705,    -1,    -1,  1559,  1558,    -1,   467,    -1,   316,    -1,
     252,    -1,    -1,   634,  1562,  1561,  1504,  1719,    -1,    -1,
     608,    -1,    -1,  1564,    -1,  1565,    -1,  1564,   712,  1565,
      -1,   104,    -1,   353,    -1,    45,   273,    -1,    99,   603,
      -1,   430,   197,    -1,   274,    -1,   602,    -1,   562,    -1,
      13,    -1,    -1,   210,   466,   402,    -1,    -1,   547,  1568,
    1569,    -1,   119,  1580,    -1,  1576,   605,  1575,  1580,    -1,
    1576,   630,  1575,  1580,    -1,   179,  1575,  1580,    -1,   608,
     585,  1575,  1580,    -1,   414,   605,  1575,  1580,    -1,   443,
      -1,   443,   560,  1674,    -1,   443,   560,  1580,    -1,   172,
    1041,  1572,    -1,   172,    13,  1572,    -1,  1576,    76,  1577,
    1670,  1575,  1580,    -1,  1573,   310,    -1,   552,   241,    -1,
      -1,    38,   179,  1578,  1579,  1570,  1467,    -1,    -1,   486,
     751,   179,  1578,  1579,  1571,  1467,    -1,  1139,  1577,  1670,
    1575,  1437,    -1,  1574,   171,    -1,    26,    -1,   101,    -1,
     457,    -1,   103,   710,   705,   711,   677,    -1,   103,   710,
     705,   711,   176,    -1,   677,  1467,    -1,   176,  1467,    -1,
     462,    -1,   461,  1563,  1566,  1467,    -1,  1704,   585,  1580,
      -1,  1576,   460,    -1,  1704,   669,  1580,    -1,  1105,  1580,
      -1,    75,  1580,    -1,   227,    -1,   227,   210,  1682,   781,
      -1,   105,   118,  1031,  1677,    -1,   105,   608,  1670,    -1,
     105,   674,  1670,    -1,   105,   536,  1670,    -1,   335,   585,
      -1,    13,   553,   585,    -1,   552,   585,    -1,   552,   752,
     585,    -1,   105,   458,   782,    -1,   105,   216,   782,    -1,
     105,   631,   782,    -1,   105,   657,    -1,   105,   657,  1683,
      -1,   458,   585,  1580,    -1,   216,   585,  1580,    -1,   458,
      73,   782,    -1,   216,    73,   782,    -1,   105,   180,   782,
      -1,  1585,   210,  1321,    -1,  1673,  1314,  1580,    -1,   585,
      -1,   372,    -1,   310,    -1,   335,    -1,    37,    -1,    -1,
     589,    -1,    -1,  1577,  1677,    -1,    -1,   214,    -1,   213,
      -1,   272,    -1,    -1,   272,  1674,    -1,    -1,   213,  1478,
      -1,    -1,   298,  1314,  1674,    -1,   681,  1314,  1321,    -1,
      -1,  1585,  1670,  1582,  1589,    -1,    -1,  1585,  1587,  1583,
    1584,    -1,  1280,    -1,  1511,    -1,  1514,    -1,  1539,    -1,
    1547,    -1,   142,    -1,   143,    -1,    16,  1588,  1584,    -1,
     192,    -1,   437,    -1,  1588,    -1,    -1,   211,   698,  1680,
      -1,    -1,  1645,    -1,  1677,    -1,    -1,   205,  1255,  1591,
    1592,    -1,    -1,  1720,  1593,  1599,  1594,    -1,  1597,    -1,
      -1,  1595,    -1,   684,   474,   308,  1600,    -1,    -1,   210,
    1596,   191,    -1,  1597,   712,  1598,    -1,  1598,    -1,   175,
     310,    -1,   172,   310,    -1,   218,   310,    -1,   555,   310,
      -1,    37,   310,    -1,   485,   310,   751,    -1,   466,    52,
      -1,   241,    -1,   457,    -1,   310,    -1,   585,    -1,   552,
     751,    -1,   335,    -1,   144,    -1,   503,    -1,  1673,  1314,
      -1,    -1,  1503,    -1,    -1,    18,   148,    64,    -1,    -1,
     501,  1602,  1603,    -1,  1603,   712,  1604,    -1,  1604,    -1,
      -1,   552,  1605,   751,  1607,    -1,    -1,   335,  1606,  1608,
      -1,   466,    52,    -1,    -1,    13,    -1,    -1,   626,  1475,
      -1,    -1,   464,  1610,  1611,    -1,  1573,   310,  1612,    -1,
     626,  1674,    -1,    33,  1321,    -1,    -1,   285,  1614,  1615,
    1616,  1617,    -1,    -1,   233,    -1,   559,    -1,    -1,    92,
      -1,   466,    -1,   466,   246,    -1,  1321,    -1,   657,  1683,
      -1,   548,    -1,   659,  1677,    -1,    -1,    -1,    -1,    -1,
     304,  1625,  1621,  1627,  1626,   259,  1676,  1622,  1628,   269,
     608,  1670,  1394,  1623,  1108,  1624,  1635,  1629,  1632,  1636,
    1638,  1641,    -1,   121,    -1,   692,    -1,    -1,   305,    -1,
      -1,    90,    -1,   316,    -1,    -1,   498,    -1,   252,    -1,
      -1,    76,  1630,    -1,  1630,  1631,    -1,  1631,    -1,   613,
      50,  1645,    -1,   418,   167,    50,  1645,    -1,   167,    50,
    1645,    -1,   177,    50,  1645,    -1,    -1,   301,  1633,    -1,
    1633,  1634,    -1,  1634,    -1,   613,    50,  1645,    -1,   578,
      50,  1645,    -1,    -1,   521,   248,    50,  1645,    -1,    -1,
     252,   402,  1637,    -1,   301,    -1,   521,    -1,    -1,   710,
    1639,   711,    -1,   710,   711,    -1,  1639,   712,  1640,    -1,
    1640,    -1,  1666,    -1,   718,  1680,    -1,    -1,   542,  1642,
      -1,  1642,   712,  1643,    -1,  1643,    -1,  1666,  1528,  1315,
    1536,  1316,    -1,   614,    -1,   379,    -1,   642,   614,    -1,
    1644,  1675,    -1,  1675,    -1,  1646,    -1,   237,    -1,   238,
      -1,    39,    -1,   432,    -1,   704,  1650,    -1,   703,  1650,
      -1,  1644,    -1,  1650,    -1,  1651,    -1,   401,    -1,   195,
      -1,   633,    -1,   237,    -1,   238,    -1,    39,    -1,   642,
    1646,    -1,   402,    -1,   313,    -1,   638,    -1,   132,    -1,
     203,    -1,   125,   614,    -1,   622,   614,    -1,   619,   614,
      -1,    -1,  1653,    -1,    -1,   684,  1655,  1654,  1656,    -1,
      -1,   479,    -1,  1657,    -1,  1656,   712,  1657,    -1,    -1,
    1661,  1659,  1658,    20,   710,  1315,  1800,  1316,   711,    -1,
      -1,   710,  1660,   711,    -1,  1677,    -1,  1660,   712,  1677,
      -1,  1677,    -1,  1666,    -1,  1663,    -1,  1677,   717,   705,
      -1,  1677,   717,  1677,   717,   705,    -1,  1321,    -1,  1677,
      -1,  1668,    -1,  1677,   717,  1677,    -1,  1677,    -1,  1667,
      -1,  1677,   717,  1677,    -1,  1668,    -1,   717,  1677,   717,
    1677,    -1,  1677,   717,  1677,   717,  1677,    -1,  1677,    -1,
    1677,   717,  1677,   717,  1677,    -1,  1677,   717,  1677,    -1,
     717,  1677,    -1,  1677,    -1,  1677,   717,  1677,    -1,   717,
    1677,    -1,  1677,  1557,    -1,  1677,   717,  1677,  1557,    -1,
    1677,    -1,   247,    -1,   249,    -1,   614,    -1,   614,    -1,
     614,    -1,  1673,    -1,  1684,    -1,  1673,    -1,  1684,    -1,
    1673,    -1,  1685,    -1,  1677,    -1,  1674,    -1,   297,    -1,
    1680,    -1,  1680,   718,  1680,    -1,   111,  1320,    -1,  1681,
      -1,  1741,    -1,  1681,    -1,  1685,    -1,    22,    -1,    32,
      -1,    34,    -1,    38,    -1,    51,    -1,    52,    -1,    62,
      -1,    65,    -1,    64,    -1,    70,    -1,    77,    -1,    78,
      -1,    79,    -1,    80,    -1,    81,    -1,    84,    -1,    86,
      -1,    98,    -1,   131,    -1,   155,    -1,   168,    -1,   183,
      -1,   185,    -1,   186,    -1,   205,    -1,   206,    -1,   207,
      -1,   211,    -1,   223,    -1,   232,    -1,   236,    -1,   240,
      -1,   266,    -1,   286,    -1,   394,    -1,   414,    -1,   417,
      -1,   416,    -1,   423,    -1,   428,    -1,   433,    -1,   447,
      -1,   449,    -1,   450,    -1,   452,    -1,   492,    -1,   495,
      -1,   501,    -1,   504,    -1,   516,    -1,   527,    -1,   532,
      -1,   540,    -1,   548,    -1,   550,    -1,   558,    -1,   552,
      -1,   553,    -1,   560,    -1,   580,    -1,   588,    -1,   590,
      -1,   618,    -1,   634,    -1,   646,    -1,   647,    -1,   639,
      -1,   688,    -1,   691,    -1,   655,    -1,     5,    -1,     8,
      -1,     7,    -1,     9,    -1,    10,    -1,    11,    -1,    12,
      -1,    15,    -1,    19,    -1,    24,    -1,    25,    -1,    26,
      -1,    28,    -1,    27,    -1,    29,    -1,    30,    -1,    31,
      -1,    42,    -1,    45,    -1,    47,    -1,    46,    -1,    49,
      -1,    55,    -1,    58,    -1,    59,    -1,    61,    -1,    67,
      -1,    69,    -1,    68,    -1,    71,    -1,    72,    -1,    73,
      -1,    75,    -1,    83,    -1,    76,    -1,    85,    -1,    87,
      -1,    88,    -1,    89,    -1,    90,    -1,    92,    -1,    93,
      -1,    95,    -1,    97,    -1,    96,    -1,    99,    -1,   101,
      -1,   113,    -1,   104,    -1,   107,    -1,   110,    -1,   115,
      -1,   117,    -1,   121,    -1,   120,    -1,   122,    -1,   125,
      -1,   130,    -1,   135,    -1,   137,    -1,   139,    -1,   144,
      -1,   146,    -1,   147,    -1,   148,    -1,   149,    -1,   150,
      -1,   159,    -1,   160,    -1,   161,    -1,   165,    -1,   169,
      -1,   173,    -1,   172,    -1,   171,    -1,   175,    -1,   176,
      -1,   178,    -1,   180,    -1,   179,    -1,   181,    -1,   187,
      -1,   182,    -1,   190,    -1,   191,    -1,   192,    -1,   193,
      -1,   197,    -1,   196,    -1,   212,    -1,   166,    -1,   214,
      -1,   199,    -1,   201,    -1,   202,    -1,   218,    -1,   219,
      -1,   221,    -1,   220,    -1,   222,    -1,   227,    -1,   224,
      -1,   225,    -1,   234,    -1,   233,    -1,   241,    -1,   245,
      -1,   246,    -1,   248,    -1,   253,    -1,   256,    -1,   254,
      -1,   271,    -1,   255,    -1,   257,    -1,   260,    -1,   273,
      -1,   274,    -1,   276,    -1,   277,    -1,   278,    -1,   281,
      -1,   265,    -1,   283,    -1,   288,    -1,   287,    -1,   289,
      -1,   292,    -1,   295,    -1,   296,    -1,   302,    -1,   303,
      -1,   305,    -1,   307,    -1,   309,    -1,   310,    -1,   342,
      -1,   335,    -1,   338,    -1,   319,    -1,   320,    -1,   324,
      -1,   321,    -1,   322,    -1,   336,    -1,   337,    -1,   323,
      -1,   325,    -1,   317,    -1,   318,    -1,   333,    -1,   327,
      -1,   326,    -1,   328,    -1,   329,    -1,   330,    -1,   331,
      -1,   332,    -1,   340,    -1,   341,    -1,   343,    -1,   346,
      -1,   345,    -1,   347,    -1,   352,    -1,   353,    -1,   354,
      -1,   355,    -1,   356,    -1,   357,    -1,   360,    -1,   361,
      -1,   362,    -1,   366,    -1,   364,    -1,   368,    -1,   369,
      -1,   370,    -1,   371,    -1,   372,    -1,   373,    -1,   374,
      -1,   376,    -1,   375,    -1,   377,    -1,   380,    -1,   384,
      -1,   385,    -1,   383,    -1,   386,    -1,   387,    -1,   396,
      -1,   395,    -1,   397,    -1,   398,    -1,   388,    -1,   389,
      -1,   392,    -1,   403,    -1,   406,    -1,   407,    -1,   408,
      -1,   409,    -1,   411,    -1,   413,    -1,   412,    -1,   429,
      -1,   430,    -1,   435,    -1,   438,    -1,   437,    -1,   439,
      -1,   441,    -1,   442,    -1,   444,    -1,   443,    -1,   445,
      -1,   446,    -1,   453,    -1,   454,    -1,   455,    -1,   457,
      -1,   459,    -1,   460,    -1,   461,    -1,   462,    -1,   463,
      -1,   465,    -1,   466,    -1,   467,    -1,   468,    -1,   471,
      -1,   473,    -1,   477,    -1,   478,    -1,   481,    -1,   480,
      -1,   482,    -1,   485,    -1,   486,    -1,   487,    -1,   488,
      -1,   489,    -1,   491,    -1,   494,    -1,   496,    -1,   499,
      -1,   503,    -1,   506,    -1,   507,    -1,   509,    -1,   511,
      -1,   512,    -1,   515,    -1,   517,    -1,   518,    -1,   519,
      -1,   522,    -1,   523,    -1,   524,    -1,   520,    -1,   526,
      -1,   528,    -1,   529,    -1,   531,    -1,   536,    -1,   538,
      -1,   537,    -1,   539,    -1,   551,    -1,   544,    -1,   554,
      -1,   555,    -1,   557,    -1,   559,    -1,   561,    -1,   562,
      -1,   570,    -1,   569,    -1,   572,    -1,   575,    -1,   579,
      -1,   581,    -1,   585,    -1,   589,    -1,   592,    -1,   593,
      -1,   594,    -1,   595,    -1,   597,    -1,   596,    -1,   600,
      -1,   601,    -1,   602,    -1,   603,    -1,   610,    -1,   605,
      -1,   609,    -1,   606,    -1,   611,    -1,   612,    -1,   615,
      -1,   616,    -1,   628,    -1,   629,    -1,   630,    -1,   619,
      -1,   620,    -1,   621,    -1,   622,    -1,   635,    -1,   636,
      -1,   637,    -1,   216,    -1,   640,    -1,   641,    -1,   644,
      -1,   643,    -1,   650,    -1,   653,    -1,   657,    -1,   658,
      -1,   668,    -1,   669,    -1,   674,    -1,   675,    -1,   665,
      -1,   677,    -1,   676,    -1,   678,    -1,   679,    -1,   687,
      -1,   690,    -1,   692,    -1,   695,    -1,   673,    -1,    -1,
     542,  1687,  1691,    -1,    -1,    -1,   542,   581,  1688,  1690,
    1689,   210,   724,    -1,  1706,    -1,  1690,   712,  1706,    -1,
      -1,  1707,  1692,  1697,    -1,    -1,   628,  1693,  1709,    -1,
      -1,  1703,  1694,  1695,    -1,    -1,  1706,  1696,  1697,    -1,
     628,  1709,    -1,    -1,   712,  1698,    -1,    -1,  1699,  1701,
      -1,    -1,  1698,   712,  1700,  1701,    -1,    -1,  1703,  1702,
    1706,    -1,  1707,    -1,   224,    -1,   305,    -1,   539,    -1,
      -1,   224,    -1,   305,    -1,   539,    -1,    -1,   224,   717,
      -1,   305,   717,    -1,   539,   717,    -1,  1708,  1528,  1716,
      -1,  1677,  1528,  1716,    -1,  1677,   717,  1677,  1528,  1716,
      -1,   136,   717,  1677,  1528,  1716,    -1,   718,  1680,  1528,
    1321,    -1,   718,   718,  1705,  1708,  1528,  1716,    -1,  1105,
    1110,    -1,   375,  1528,  1321,    -1,   375,  1107,  1112,    -1,
     136,   515,  1742,    -1,   136,   515,  1742,   210,  1683,    -1,
     515,  1680,    -1,   439,  1714,  1715,    -1,  1677,    -1,  1677,
     717,  1677,    -1,   136,   717,  1677,    -1,  1710,    -1,  1711,
      -1,  1710,   712,  1711,    -1,  1711,   712,  1710,    -1,  1712,
      -1,   276,   296,  1713,    -1,   474,   412,    -1,   474,   689,
      -1,   474,   640,    -1,   474,    85,    -1,   496,   474,    -1,
     537,    -1,  1528,    -1,   210,  1683,  1528,    -1,   614,    -1,
     439,   710,   614,   711,    -1,   409,   710,   614,   711,    -1,
    1321,    -1,   136,    -1,   410,    -1,    13,    -1,    37,    -1,
      -1,   308,  1720,  1718,  1721,  1719,    -1,    -1,   676,  1475,
      -1,   398,    -1,   608,    -1,   605,    -1,  1722,    -1,  1721,
     712,  1722,    -1,  1670,  1435,  1723,    -1,   474,    -1,   689,
      -1,   689,    90,    -1,   316,   689,    -1,   474,   305,    -1,
      -1,   651,  1725,  1720,    -1,   232,  1670,   414,  1435,    -1,
     232,  1672,    70,    -1,    -1,   232,  1672,   474,  1727,  1728,
    1437,  1467,    -1,  1729,    -1,  1677,  1730,    -1,   201,    -1,
     384,    -1,   201,    -1,   384,    -1,   454,    -1,   287,    -1,
      -1,  1732,  1731,   710,  1535,   711,    -1,   698,    -1,   217,
      -1,   290,    -1,   699,    -1,   700,    -1,   513,   781,  1734,
      -1,  1744,   410,  1743,  1755,   213,  1758,    -1,  1744,   410,
     216,  1755,   213,  1758,    -1,  1744,   410,   458,  1755,   213,
    1758,    -1,    13,  1745,   712,   226,   417,   213,  1758,    -1,
     463,   410,  1683,   213,  1756,    -1,  1735,   213,  1758,    -1,
       7,   417,   210,  1742,    -1,  1742,    -1,   226,   781,  1737,
      -1,  1744,   410,  1743,  1755,   626,  1757,  1765,  1769,    -1,
    1744,   410,   216,  1755,   626,  1757,  1765,  1769,    -1,  1744,
     410,   458,  1755,   626,  1757,  1765,  1769,    -1,   463,   410,
    1683,   626,  1757,  1770,    -1,  1742,   626,  1757,  1739,    -1,
      -1,   684,     7,  1682,    -1,    -1,   684,     7,   417,    -1,
    1742,    -1,  1740,   712,  1742,    -1,   112,  1320,    -1,  1680,
      -1,  1741,    -1,    -1,   608,    -1,  1746,    -1,    13,  1745,
      -1,    -1,   457,    -1,  1747,    -1,  1746,   712,  1747,    -1,
      -1,   533,  1748,  1762,    -1,    -1,   264,  1749,  1762,    -1,
      -1,   654,  1750,  1762,    -1,    -1,   483,  1751,  1762,    -1,
     140,    -1,   656,    -1,   258,    -1,    14,    -1,   105,    -1,
     157,    -1,   186,    -1,   491,    -1,   548,    -1,   459,    -1,
     199,    -1,   226,   417,    -1,   547,   119,    -1,   600,    -1,
     105,   611,   605,    -1,   308,   605,    -1,   499,   552,    -1,
     499,    69,    -1,   105,   674,    -1,   547,   674,    -1,   105,
     518,    -1,    14,   518,    -1,   105,   657,    -1,   180,    -1,
     631,    -1,   105,   606,    -1,    -1,    18,    -1,  1754,  1752,
    1753,    -1,  1754,    -1,   595,   614,    -1,   278,   614,    -1,
      67,   614,    -1,   705,    -1,  1677,   717,   705,    -1,   705,
     717,   705,    -1,  1670,    -1,  1683,    -1,  1756,   712,  1683,
      -1,  1761,    -1,  1757,   712,  1761,    -1,  1682,    -1,  1758,
     712,  1682,    -1,   673,    -1,   684,    -1,   660,    -1,    20,
      -1,  1683,   248,    50,   614,    -1,  1683,   248,    50,   439,
     614,    -1,  1683,   248,  1759,  1680,    -1,  1683,   248,  1759,
    1680,  1760,  1674,    -1,  1682,    -1,    -1,   710,  1763,   711,
      -1,  1763,   712,  1764,    -1,  1764,    -1,  1677,    -1,    -1,
     500,  1753,    -1,   500,   577,    -1,   500,   690,    -1,   500,
     389,    -1,   341,  1475,    -1,   345,  1475,    -1,   340,  1475,
      -1,   347,  1474,    -1,   346,  1650,    -1,  1767,  1766,    -1,
    1766,    -1,    -1,   684,  1767,    -1,    -1,   684,  1771,    -1,
      -1,   684,   226,   417,    -1,  1771,  1772,    -1,  1772,    -1,
     226,   417,    -1,  1766,    -1,    -1,    34,  1774,  1777,    -1,
     855,    -1,    -1,  1327,    -1,    -1,   687,    -1,    -1,    18,
     394,    59,    -1,    18,    59,    -1,    -1,   490,    -1,   394,
     490,    -1,    -1,   527,    -1,    86,  1777,  1778,  1779,    -1,
     516,  1777,  1778,  1779,    -1,   516,  1777,   626,  1780,  1677,
      -1,   527,  1677,    -1,   490,   527,  1677,    -1,   648,    -1,
     267,    -1,   184,    -1,    -1,  1787,    -1,    -1,  1785,  1795,
    1788,  1282,    -1,    -1,  1785,  1795,  1790,  1820,    -1,    -1,
    1792,  1793,    -1,  1463,  1467,    -1,  1469,    -1,  1785,  1795,
      -1,    -1,   151,    -1,    13,    -1,   533,  1405,  1305,    -1,
    1796,  1793,  1311,    -1,   710,  1289,   711,  1791,    -1,  1796,
    1311,    -1,   710,  1289,   711,    -1,  1797,    -1,  1798,    -1,
    1798,  1404,    -1,  1801,  1652,  1799,  1802,    -1,    -1,    -1,
      -1,  1804,    -1,  1804,  1805,    -1,  1805,    -1,   591,    -1,
     239,    -1,   151,    -1,   573,    -1,   568,    -1,   569,    -1,
     571,    -1,    13,    -1,  1811,  1807,    -1,  1810,  1808,    -1,
    1812,  1809,  1814,    -1,  1814,    -1,  1824,    -1,  1837,    -1,
    1832,    -1,   769,    -1,  1814,    -1,  1824,    -1,  1837,    -1,
    1832,    -1,  1830,    -1,   769,    -1,  1810,    -1,  1811,    -1,
      -1,   137,   698,  1682,    -1,    12,   698,   641,    -1,    12,
     698,   354,    -1,    12,   698,   612,    -1,    -1,   574,   532,
     137,    -1,   574,   532,   271,    -1,    -1,  1813,   674,  1031,
    1670,  1815,  1816,    20,  1818,    -1,    -1,   710,  1817,   711,
      -1,  1677,    -1,  1817,   712,  1677,    -1,    -1,  1819,  1652,
    1820,  1821,    -1,   533,  1302,  1295,    -1,   710,  1287,   711,
      -1,   710,  1287,   711,  1791,    -1,   710,  1287,   711,  1789,
      -1,    -1,   684,    66,   417,    -1,   684,    55,    66,   417,
      -1,   684,   305,    66,   417,    -1,   206,    -1,   449,    -1,
      -1,  1822,  1680,    -1,    -1,    -1,    -1,    -1,    -1,   631,
    1315,  1031,  1825,   782,   915,   916,   410,  1315,  1826,  1670,
     210,  1315,  1827,   162,   520,  1828,  1823,  1829,   854,    -1,
      11,  1831,    -1,  1831,    -1,   216,  1031,  1677,   509,  1044,
     560,  1674,    -1,    -1,    -1,    -1,    -1,   216,  1031,   782,
    1833,   801,   509,  1834,  1104,  1835,   784,  1836,   853,    -1,
      -1,    -1,   458,  1031,   782,  1838,   803,   784,  1839,   854,
      -1,   691,  1842,  1841,  1843,    -1,   691,   168,  1841,  1845,
      -1,   691,   452,  1841,    -1,   691,    86,  1841,  1844,    -1,
     691,   516,  1841,    -1,   691,   478,    -1,  1645,    -1,  1645,
     712,  1645,    -1,  1645,   712,  1645,   712,  1475,    -1,    34,
      -1,   580,    -1,    -1,   280,    -1,   506,    -1,    -1,   411,
     442,    -1,    -1,    -1,   601,  1846,  1847,    -1,    -1,   210,
     357,    -1,   266,   444,  1677,   560,  1674,    -1,   266,   560,
    1674,    -1,   647,   444,  1677,    -1,   647,   560,  1674,    -1,
     697,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1984,  1984,  1994,  1993,  2018,  2025,  2027,  2031,  2032,
    2033,  2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,  2046,
    2047,  2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,  2056,
    2057,  2058,  2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,
    2067,  2068,  2069,  2070,  2071,  2072,  2073,  2074,  2075,  2076,
    2077,  2078,  2079,  2080,  2081,  2082,  2083,  2084,  2085,  2086,
    2087,  2088,  2089,  2090,  2091,  2092,  2093,  2097,  2106,  2107,
    2111,  2123,  2123,  2133,  2132,  2141,  2140,  2151,  2153,  2153,
    2164,  2165,  2169,  2180,  2179,  2196,  2195,  2204,  2205,  2209,
    2213,  2217,  2221,  2225,  2229,  2239,  2244,  2248,  2252,  2256,
    2260,  2264,  2269,  2273,  2278,  2305,  2309,  2313,  2318,  2321,
    2323,  2324,  2328,  2334,  2336,  2337,  2341,  2347,  2349,  2350,
    2354,  2361,  2365,  2380,  2384,  2390,  2396,  2402,  2412,  2416,
    2420,  2434,  2433,  2470,  2469,  2530,  2527,  2540,  2538,  2550,
    2548,  2559,  2558,  2571,  2570,  2579,  2585,  2591,  2595,  2599,
    2599,  2605,  2606,  2610,  2611,  2615,  2620,  2625,  2630,  2636,
    2641,  2646,  2651,  2655,  2659,  2663,  2667,  2675,  2674,  2686,
    2687,  2691,  2696,  2702,  2707,  2712,  2717,  2722,  2730,  2729,
    2761,  2760,  2767,  2774,  2775,  2781,  2787,  2797,  2803,  2809,
    2811,  2818,  2819,  2823,  2833,  2834,  2842,  2842,  2887,  2901,
    2906,  2914,  2915,  2919,  2920,  2925,  2927,  2929,  2931,  2933,
    2935,  2937,  2943,  2944,  2948,  2952,  2960,  2959,  2972,  2974,
    2977,  2979,  2983,  2987,  2994,  2996,  3000,  3001,  3005,  3013,
    3018,  3022,  3033,  3035,  3039,  3040,  3044,  3048,  3049,  3050,
    3051,  3056,  3055,  3068,  3067,  3079,  3080,  3084,  3085,  3090,
    3093,  3105,  3110,  3115,  3124,  3129,  3134,  3143,  3155,  3159,
    3165,  3176,  3180,  3187,  3196,  3204,  3212,  3223,  3224,  3232,
    3231,  3244,  3243,  3260,  3262,  3267,  3276,  3275,  3291,  3292,
    3297,  3299,  3304,  3319,  3327,  3331,  3350,  3351,  3355,  3359,
    3365,  3371,  3377,  3386,  3394,  3409,  3415,  3416,  3422,  3425,
    3429,  3437,  3454,  3456,  3474,  3480,  3482,  3484,  3486,  3488,
    3490,  3492,  3494,  3496,  3498,  3500,  3502,  3507,  3515,  3531,
    3532,  3537,  3543,  3552,  3558,  3567,  3575,  3584,  3593,  3595,
    3604,  3609,  3615,  3624,  3632,  3634,  3636,  3638,  3640,  3642,
    3644,  3646,  3648,  3650,  3652,  3654,  3656,  3661,  3665,  3677,
    3692,  3693,  3706,  3707,  3708,  3709,  3710,  3714,  3715,  3716,
    3717,  3718,  3719,  3720,  3724,  3725,  3726,  3727,  3732,  3731,
    3742,  3742,  3795,  3794,  3819,  3827,  3835,  3844,  3843,  3861,
    3867,  3875,  3876,  3880,  3888,  3893,  3898,  3906,  3910,  3928,
    3942,  3959,  3961,  3977,  3959,  3996,  3998,  3999,  4004,  4003,
    4073,  4075,  4073,  4084,  4089,  4090,  4094,  4095,  4100,  4104,
    4099,  4124,  4128,  4123,  4146,  4156,  4160,  4161,  4165,  4176,
    4174,  4191,  4190,  4205,  4204,  4220,  4235,  4234,  4251,  4250,
    4270,  4279,  4278,  4286,  4285,  4294,  4293,  4304,  4303,  4313,
    4312,  4323,  4322,  4334,  4336,  4341,  4343,  4345,  4362,  4367,
    4373,  4380,  4381,  4389,  4395,  4404,  4410,  4416,  4417,  4421,
    4421,  4426,  4427,  4428,  4432,  4433,  4434,  4438,  4442,  4443,
    4444,  4448,  4449,  4450,  4451,  4452,  4453,  4454,  4455,  4459,
    4463,  4464,  4465,  4469,  4470,  4471,  4472,  4473,  4477,  4481,
    4482,  4483,  4487,  4488,  4489,  4490,  4491,  4492,  4493,  4497,
    4501,  4502,  4503,  4507,  4508,  4509,  4514,  4522,  4530,  4538,
    4551,  4564,  4569,  4574,  4582,  4590,  4598,  4606,  4614,  4622,
    4630,  4640,  4650,  4660,  4662,  4666,  4671,  4681,  4682,  4725,
    4724,  4727,  4733,  4735,  4734,  4737,  4736,  4738,  4752,  4753,
    4757,  4758,  4764,  4762,  4769,  4774,  4776,  4775,  4778,  4777,
    4782,  4819,  4820,  4825,  4824,  4843,  4858,  4857,  4875,  4874,
    4880,  4888,  4887,  4890,  4892,  4894,  4896,  4901,  4902,  4908,
    4909,  4926,  4927,  4931,  4932,  4936,  4952,  4962,  4973,  4982,
    4983,  4996,  4998,  4997,  5002,  5000,  5011,  5012,  5016,  5031,
    5043,  5044,  5057,  5066,  5088,  5089,  5094,  5093,  5118,  5130,
    5146,  5145,  5160,  5159,  5173,  5197,  5219,  5223,  5252,  5264,
    5265,  5270,  5281,  5269,  5306,  5307,  5311,  5324,  5345,  5358,
    5384,  5385,  5390,  5389,  5427,  5436,  5437,  5441,  5442,  5446,
    5448,  5454,  5460,  5462,  5464,  5466,  5468,  5470,  5479,  5487,
    5487,  5508,  5509,  5513,  5514,  5518,  5529,  5530,  5534,  5535,
    5539,  5540,  5544,  5545,  5550,  5553,  5561,  5564,  5571,  5575,
    5581,  5583,  5587,  5588,  5592,  5593,  5594,  5598,  5603,  5608,
    5613,  5618,  5623,  5628,  5633,  5648,  5654,  5669,  5674,  5689,
    5695,  5713,  5718,  5723,  5728,  5733,  5738,  5744,  5743,  5769,
    5770,  5771,  5776,  5781,  5786,  5788,  5790,  5792,  5798,  5803,
    5808,  5816,  5824,  5830,  5836,  5844,  5852,  5869,  5890,  5901,
    5902,  5903,  5904,  5905,  5906,  5907,  5911,  5912,  5913,  5917,
    5918,  5919,  5920,  5925,  5932,  5933,  5937,  5938,  5939,  5943,
    5945,  5951,  5950,  5958,  5957,  5965,  5964,  5972,  5971,  5981,
    5978,  5989,  5987,  5996,  5995,  6033,  6040,  6041,  6045,  6058,
    6059,  6063,  6068,  6067,  6103,  6103,  6106,  6105,  6115,  6116,
    6120,  6121,  6126,  6128,  6127,  6136,  6137,  6142,  6145,  6149,
    6153,  6160,  6161,  6165,  6166,  6170,  6176,  6182,  6187,  6186,
    6205,  6211,  6212,  6222,  6234,  6234,  6237,  6238,  6246,  6247,
    6248,  6264,  6268,  6272,  6276,  6280,  6285,  6290,  6294,  6299,
    6304,  6322,  6324,  6327,  6344,  6347,  6352,  6357,  6368,  6373,
    6378,  6383,  6385,  6387,  6389,  6391,  6393,  6395,  6397,  6399,
    6401,  6403,  6408,  6409,  6410,  6411,  6412,  6413,  6414,  6415,
    6419,  6423,  6424,  6428,  6429,  6433,  6434,  6435,  6436,  6437,
    6441,  6442,  6443,  6444,  6445,  6449,  6454,  6456,  6462,  6464,
    6471,  6472,  6473,  6477,  6481,  6482,  6486,  6487,  6491,  6492,
    6493,  6497,  6498,  6499,  6500,  6503,  6504,  6507,  6508,  6511,
    6512,  6516,  6517,  6521,  6522,  6526,  6527,  6528,  6535,  6536,
    6542,  6549,  6553,  6554,  6560,  6566,  6572,  6573,  6581,  6589,
    6595,  6604,  6618,  6619,  6623,  6628,  6632,  6633,  6637,  6638,
    6642,  6648,  6652,  6653,  6657,  6665,  6666,  6670,  6671,  6675,
    6676,  6680,  6681,  6682,  6690,  6691,  6692,  6693,  6694,  6698,
    6699,  6704,  6703,  6716,  6717,  6721,  6724,  6725,  6726,  6727,
    6731,  6739,  6746,  6747,  6751,  6761,  6762,  6766,  6767,  6770,
    6772,  6776,  6788,  6789,  6793,  6800,  6813,  6814,  6816,  6818,
    6824,  6829,  6835,  6841,  6848,  6858,  6859,  6860,  6861,  6862,
    6866,  6867,  6871,  6872,  6876,  6877,  6881,  6882,  6883,  6887,
    6888,  6892,  6896,  6908,  6909,  6913,  6914,  6918,  6919,  6923,
    6924,  6928,  6929,  6933,  6934,  6938,  6939,  6943,  6944,  6945,
    6948,  6950,  6955,  6957,  6959,  6967,  6975,  6981,  6989,  6990,
    6994,  6998,  6999,  7009,  7010,  7011,  7015,  7019,  7026,  7032,
    7044,  7045,  7049,  7050,  7054,  7056,  7065,  7079,  7064,  7099,
    7098,  7112,  7121,  7120,  7136,  7135,  7151,  7150,  7166,  7160,
    7177,  7176,  7211,  7216,  7221,  7226,  7232,  7231,  7238,  7247,
    7248,  7249,  7250,  7254,  7255,  7267,  7268,  7272,  7273,  7276,
    7278,  7286,  7294,  7296,  7298,  7299,  7307,  7308,  7314,  7323,
    7321,  7334,  7347,  7346,  7359,  7357,  7370,  7377,  7387,  7388,
    7415,  7422,  7426,  7432,  7430,  7449,  7451,  7456,  7464,  7463,
    7479,  7483,  7482,  7494,  7495,  7499,  7515,  7516,  7520,  7528,
    7533,  7538,  7543,  7547,  7552,  7560,  7568,  7578,  7589,  7599,
    7610,  7620,  7626,  7632,  7641,  7651,  7667,  7681,  7691,  7695,
    7700,  7701,  7704,  7706,  7707,  7708,  7709,  7712,  7717,  7725,
    7730,  7738,  7739,  7743,  7744,  7748,  7748,  7751,  7753,  7757,
    7758,  7762,  7763,  7771,  7772,  7773,  7777,  7778,  7783,  7791,
    7792,  7793,  7794,  7799,  7798,  7808,  7807,  7815,  7822,  7832,
    7849,  7852,  7859,  7863,  7870,  7874,  7878,  7885,  7885,  7891,
    7892,  7896,  7897,  7898,  7902,  7903,  7912,  7919,  7920,  7925,
    7924,  7936,  7937,  7938,  7942,  7944,  7943,  7950,  7949,  7970,
    7971,  7975,  7976,  7980,  7981,  7982,  7986,  7987,  7992,  7991,
    8012,  8013,  8017,  8022,  8023,  8030,  8032,  8036,  8038,  8037,
    8049,  8051,  8050,  8063,  8064,  8069,  8078,  8079,  8080,  8084,
    8091,  8101,  8109,  8111,  8110,  8116,  8115,  8138,  8139,  8143,
    8144,  8148,  8149,  8150,  8151,  8152,  8153,  8157,  8158,  8163,
    8162,  8183,  8184,  8185,  8190,  8189,  8195,  8202,  8208,  8217,
    8218,  8222,  8236,  8235,  8248,  8249,  8253,  8254,  8258,  8268,
    8278,  8279,  8284,  8283,  8294,  8295,  8299,  8300,  8304,  8314,
    8325,  8324,  8332,  8332,  8341,  8342,  8347,  8348,  8357,  8366,
    8367,  8368,  8369,  8373,  8374,  8375,  8376,  8380,  8380,  8392,
    8396,  8396,  8408,  8412,  8412,  8424,  8429,  8429,  8441,  8447,
    8445,  8452,  8464,  8462,  8469,  8479,  8484,  8483,  8488,  8492,
    8503,  8504,  8508,  8509,  8513,  8514,  8515,  8519,  8520,  8521,
    8525,  8526,  8527,  8528,  8529,  8533,  8533,  8551,  8558,  8560,
    8564,  8568,  8574,  8581,  8583,  8591,  8592,  8596,  8597,  8614,
    8633,  8635,  8642,  8653,  8654,  8655,  8669,  8674,  8696,  8702,
    8708,  8714,  8715,  8716,  8717,  8718,  8722,  8723,  8724,  8728,
    8729,  8730,  8734,  8735,  8740,  8791,  8798,  8841,  8847,  8853,
    8859,  8865,  8871,  8877,  8883,  8887,  8893,  8899,  8905,  8911,
    8917,  8921,  8927,  8936,  8942,  8950,  8956,  8965,  8971,  8979,
    8989,  8996,  9004,  9010,  9019,  9023,  9029,  9035,  9041,  9047,
    9053,  9059,  9065,  9071,  9077,  9083,  9089,  9095,  9101,  9107,
    9111,  9112,  9116,  9117,  9121,  9122,  9126,  9127,  9131,  9132,
    9133,  9134,  9135,  9136,  9140,  9141,  9146,  9150,  9154,  9155,
    9156,  9160,  9161,  9162,  9163,  9164,  9165,  9169,  9170,  9171,
    9176,  9175,  9181,  9189,  9211,  9218,  9254,  9255,  9256,  9257,
    9258,  9259,  9260,  9261,  9262,  9263,  9264,  9271,  9277,  9301,
    9311,  9319,  9325,  9332,  9338,  9348,  9355,  9366,  9377,  9388,
    9402,  9403,  9414,  9415,  9422,  9428,  9432,  9438,  9444,  9450,
    9466,  9472,  9478,  9487,  9496,  9502,  9508,  9514,  9520,  9534,
    9545,  9551,  9557,  9563,  9569,  9575,  9582,  9589,  9595,  9601,
    9607,  9613,  9619,  9625,  9631,  9637,  9643,  9651,  9672,  9679,
    9685,  9692,  9699,  9706,  9713,  9719,  9725,  9731,  9738,  9744,
    9751,  9757,  9763,  9769,  9775,  9781,  9799,  9805,  9811,  9818,
    9825,  9833,  9840,  9847,  9854,  9861,  9878,  9884,  9890,  9896,
    9902,  9909,  9915,  9921,  9930,  9941,  9948,  9954,  9960,  9967,
    9975,  9981,  9987,  9993,  9999, 10007, 10013, 10019, 10025, 10031,
   10039, 10051, 10058, 10073, 10079, 10086, 10093, 10100, 10107, 10114,
   10118, 10138, 10137, 10209, 10247, 10249, 10254, 10255, 10259, 10260,
   10264, 10265, 10269, 10276, 10284, 10311, 10317, 10323, 10329, 10335,
   10341, 10350, 10357, 10359, 10356, 10366, 10377, 10383, 10389, 10395,
   10401, 10407, 10413, 10419, 10425, 10432, 10431, 10450, 10459, 10477,
   10479, 10486, 10493, 10500, 10507, 10514, 10521, 10528, 10535, 10542,
   10549, 10560, 10567, 10578, 10587, 10597, 10596, 10608, 10618, 10626,
   10642, 10643, 10648, 10653, 10656, 10658, 10662, 10664, 10670, 10669,
   10686, 10689, 10688, 10692, 10697, 10698, 10702, 10703, 10704, 10705,
   10706, 10707, 10708, 10712, 10713, 10714, 10718, 10719, 10723, 10730,
   10738, 10739, 10743, 10750, 10758, 10759, 10763, 10764, 10768, 10776,
   10787, 10788, 10800, 10811, 10812, 10818, 10819, 10839, 10843, 10841,
   10859, 10857, 10868, 10878, 10876, 10894, 10893, 10903, 10914, 10912,
   10931, 10930, 10941, 10953, 10954, 10955, 10959, 10960, 10968, 10969,
   10973, 10988, 10989, 10993, 10993, 11029, 11090, 11130, 11131, 11140,
   11139, 11148, 11149, 11150, 11154, 11155, 11156, 11156, 11160, 11166,
   11174, 11174, 11189, 11211, 11220, 11237, 11220, 11244, 11248, 11257,
   11268, 11269, 11274, 11277, 11278, 11279, 11283, 11284, 11289, 11288,
   11294, 11293, 11301, 11302, 11305, 11307, 11307, 11311, 11311, 11316,
   11317, 11321, 11323, 11328, 11329, 11333, 11344, 11357, 11358, 11359,
   11360, 11361, 11362, 11363, 11364, 11365, 11366, 11367, 11368, 11372,
   11373, 11374, 11375, 11376, 11377, 11378, 11379, 11380, 11384, 11385,
   11386, 11387, 11390, 11392, 11393, 11397, 11398, 11406, 11408, 11412,
   11414, 11413, 11427, 11430, 11429, 11444, 11450, 11464, 11466, 11470,
   11472, 11477, 11478, 11495, 11518, 11519, 11525, 11526, 11530, 11543,
   11542, 11550, 11551, 11559, 11560, 11564, 11565, 11569, 11570, 11584,
   11585, 11589, 11599, 11608, 11615, 11622, 11632, 11633, 11640, 11650,
   11651, 11653, 11655, 11657, 11666, 11670, 11671, 11675, 11687, 11689,
   11694, 11693, 11743, 11745, 11750, 11751, 11752, 11756, 11757, 11761,
   11774, 11781, 11786, 11793, 11800, 11807, 11817, 11827, 11837, 11841,
   11847, 11853, 11862, 11870, 11874, 11881, 11882, 11886, 11887, 11890,
   11891, 11892, 11893, 11894, 11895, 11899, 11900, 11901, 11902, 11903,
   11907, 11908, 11909, 11910, 11914, 11915, 11916, 11917, 11918, 11922,
   11923, 11924, 11925, 11926, 11930, 11935, 11936, 11940, 11941, 11946,
   11945, 11979, 11980, 11984, 11985, 11989, 11999, 11999, 12010, 12011,
   12014, 12034, 12038, 12049, 12057, 12062, 12072, 12061, 12074, 12087,
   12099, 12098, 12116, 12115, 12124, 12141, 12147, 12161, 12176, 12184,
   12188, 12193, 12192, 12201, 12206, 12212, 12217, 12222, 12229, 12227,
   12241, 12242, 12246, 12257, 12270, 12271, 12275, 12287, 12291, 12300,
   12303, 12310, 12311, 12319, 12327, 12318, 12337, 12344, 12336, 12354,
   12362, 12363, 12371, 12375, 12376, 12387, 12388, 12392, 12401, 12402,
   12403, 12405, 12404, 12415, 12417, 12421, 12422, 12423, 12427, 12428,
   12432, 12433, 12437, 12447, 12448, 12452, 12453, 12457, 12458, 12462,
   12463, 12468, 12467, 12481, 12482, 12486, 12491, 12499, 12500, 12506,
   12514, 12516, 12516, 12524, 12532, 12523, 12554, 12555, 12559, 12567,
   12568, 12572, 12582, 12583, 12590, 12589, 12605, 12616, 12604, 12619,
   12618, 12630, 12629, 12642, 12644, 12648, 12649, 12653, 12666, 12682,
   12683, 12687, 12688, 12692, 12693, 12694, 12699, 12698, 12719, 12721,
   12724, 12726, 12729, 12730, 12733, 12737, 12741, 12745, 12749, 12753,
   12757, 12761, 12765, 12773, 12776, 12786, 12785, 12801, 12808, 12816,
   12824, 12832, 12840, 12848, 12855, 12862, 12868, 12870, 12872, 12881,
   12885, 12890, 12889, 12896, 12895, 12900, 12909, 12916, 12921, 12926,
   12931, 12933, 12935, 12937, 12939, 12941, 12948, 12956, 12958, 12966,
   12973, 12980, 12987, 12993, 12998, 13006, 13014, 13022, 13026, 13031,
   13038, 13043, 13050, 13057, 13063, 13070, 13075, 13082, 13089, 13094,
   13099, 13104, 13111, 13133, 13135, 13137, 13142, 13143, 13146, 13148,
   13152, 13153, 13157, 13158, 13162, 13163, 13167, 13168, 13172, 13173,
   13177, 13178, 13186, 13198, 13197, 13213, 13212, 13222, 13223, 13224,
   13225, 13226, 13230, 13231, 13235, 13242, 13243, 13244, 13248, 13249,
   13261, 13262, 13263, 13278, 13277, 13290, 13289, 13301, 13305, 13306,
   13321, 13324, 13323, 13335, 13336, 13341, 13343, 13345, 13347, 13349,
   13351, 13359, 13361, 13363, 13365, 13370, 13372, 13380, 13382, 13384,
   13386, 13402, 13403, 13407, 13408, 13412, 13411, 13421, 13422, 13426,
   13426, 13430, 13429, 13435, 13439, 13440, 13444, 13445, 13453, 13452,
   13463, 13467, 13471, 13484, 13483, 13498, 13499, 13500, 13503, 13504,
   13505, 13506, 13514, 13518, 13527, 13533, 13545, 13556, 13566, 13576,
   13544, 13584, 13585, 13589, 13590, 13594, 13595, 13603, 13607, 13608,
   13609, 13612, 13614, 13618, 13619, 13623, 13628, 13635, 13640, 13647,
   13649, 13653, 13654, 13658, 13663, 13671, 13672, 13675, 13677, 13685,
   13686, 13690, 13691, 13692, 13696, 13698, 13703, 13704, 13713, 13714,
   13718, 13719, 13723, 13736, 13758, 13768, 13775, 13794, 13802, 13807,
   13820, 13829, 13845, 13855, 13856, 13864, 13865, 13866, 13867, 13881,
   13887, 13893, 13899, 13905, 13911, 13929, 13939, 13949, 13955, 13964,
   13976, 13982, 13988, 13998, 13999, 14008, 14007, 14026, 14027, 14032,
   14033, 14040, 14038, 14059, 14060, 14066, 14071, 14080, 14095, 14096,
   14100, 14109, 14124, 14128, 14136, 14137, 14149, 14154, 14158, 14163,
   14167, 14191, 14221, 14222, 14232, 14239, 14243, 14249, 14255, 14265,
   14271, 14280, 14290, 14291, 14316, 14330, 14344, 14359, 14364, 14375,
   14380, 14390, 14391, 14401, 14402, 14403, 14407, 14420, 14450, 14460,
   14460, 14462, 14472, 14473, 14474, 14475, 14476, 14477, 14478, 14479,
   14480, 14481, 14482, 14483, 14484, 14485, 14486, 14487, 14488, 14489,
   14490, 14491, 14492, 14493, 14494, 14495, 14496, 14497, 14498, 14499,
   14500, 14501, 14502, 14503, 14504, 14505, 14506, 14507, 14508, 14509,
   14510, 14511, 14512, 14513, 14514, 14515, 14516, 14517, 14518, 14519,
   14520, 14521, 14522, 14523, 14524, 14525, 14526, 14527, 14528, 14529,
   14530, 14531, 14532, 14533, 14534, 14535, 14536, 14537, 14538, 14539,
   14540, 14541, 14542, 14552, 14553, 14554, 14555, 14556, 14557, 14558,
   14559, 14560, 14561, 14562, 14563, 14564, 14565, 14566, 14567, 14568,
   14569, 14570, 14571, 14572, 14573, 14574, 14575, 14576, 14577, 14578,
   14579, 14580, 14581, 14582, 14583, 14584, 14585, 14586, 14587, 14588,
   14589, 14590, 14591, 14592, 14593, 14594, 14595, 14596, 14597, 14598,
   14599, 14600, 14601, 14606, 14607, 14608, 14609, 14610, 14611, 14612,
   14613, 14614, 14615, 14616, 14617, 14618, 14619, 14620, 14621, 14622,
   14623, 14624, 14625, 14626, 14627, 14628, 14629, 14630, 14631, 14632,
   14633, 14634, 14635, 14636, 14637, 14638, 14639, 14640, 14641, 14642,
   14643, 14644, 14645, 14646, 14647, 14648, 14649, 14650, 14651, 14652,
   14653, 14654, 14655, 14656, 14657, 14658, 14659, 14660, 14661, 14662,
   14663, 14664, 14665, 14666, 14667, 14668, 14669, 14670, 14671, 14672,
   14673, 14674, 14675, 14676, 14677, 14678, 14679, 14680, 14681, 14682,
   14683, 14684, 14685, 14686, 14687, 14688, 14689, 14690, 14691, 14692,
   14693, 14694, 14695, 14696, 14697, 14698, 14699, 14700, 14701, 14702,
   14703, 14704, 14705, 14706, 14707, 14708, 14709, 14710, 14711, 14712,
   14713, 14714, 14715, 14716, 14717, 14718, 14719, 14720, 14721, 14722,
   14723, 14724, 14725, 14726, 14727, 14728, 14729, 14730, 14731, 14732,
   14733, 14734, 14735, 14736, 14737, 14738, 14739, 14740, 14741, 14742,
   14743, 14744, 14745, 14746, 14747, 14748, 14749, 14750, 14751, 14752,
   14753, 14754, 14755, 14756, 14757, 14758, 14759, 14760, 14761, 14762,
   14763, 14764, 14765, 14766, 14767, 14768, 14769, 14770, 14771, 14772,
   14773, 14774, 14775, 14776, 14777, 14778, 14779, 14780, 14781, 14782,
   14783, 14784, 14785, 14786, 14787, 14788, 14789, 14790, 14791, 14792,
   14793, 14794, 14795, 14796, 14797, 14798, 14799, 14800, 14801, 14802,
   14803, 14804, 14805, 14806, 14807, 14808, 14809, 14810, 14811, 14812,
   14813, 14814, 14815, 14816, 14817, 14818, 14819, 14820, 14821, 14822,
   14823, 14824, 14825, 14826, 14827, 14828, 14829, 14830, 14831, 14832,
   14833, 14834, 14835, 14836, 14837, 14838, 14839, 14840, 14841, 14842,
   14843, 14844, 14845, 14846, 14847, 14848, 14849, 14850, 14851, 14852,
   14853, 14854, 14855, 14856, 14857, 14858, 14859, 14860, 14861, 14862,
   14863, 14864, 14865, 14866, 14867, 14868, 14869, 14870, 14871, 14872,
   14873, 14874, 14875, 14876, 14877, 14878, 14879, 14880, 14881, 14882,
   14883, 14884, 14885, 14886, 14887, 14888, 14889, 14890, 14891, 14903,
   14902, 14912, 14916, 14911, 14933, 14934, 14939, 14938, 14945, 14944,
   14954, 14953, 14964, 14963, 14969, 14977, 14979, 14984, 14984, 14993,
   14992, 15006, 15005, 15010, 15014, 15015, 15016, 15020, 15021, 15022,
   15023, 15027, 15028, 15029, 15030, 15035, 15059, 15066, 15072, 15079,
   15090, 15102, 15116, 15131, 15150, 15167, 15179, 15187, 15203, 15208,
   15213, 15221, 15222, 15223, 15224, 15228, 15246, 15264, 15265, 15269,
   15270, 15271, 15272, 15276, 15290, 15294, 15295, 15296, 15306, 15307,
   15308, 15314, 15320, 15332, 15331, 15345, 15346, 15352, 15361, 15362,
   15366, 15367, 15371, 15386, 15387, 15388, 15393, 15394, 15399, 15398,
   15415, 15424, 15434, 15433, 15464, 15465, 15469, 15470, 15474, 15475,
   15476, 15477, 15479, 15478, 15491, 15492, 15493, 15494, 15495, 15501,
   15506, 15512, 15523, 15534, 15538, 15545, 15554, 15556, 15561, 15566,
   15573, 15585, 15597, 15604, 15616, 15617, 15620, 15621, 15624, 15629,
   15637, 15647, 15666, 15669, 15671, 15675, 15676, 15683, 15685, 15689,
   15690, 15695, 15694, 15698, 15697, 15701, 15700, 15704, 15703, 15706,
   15707, 15708, 15709, 15710, 15711, 15712, 15713, 15714, 15715, 15716,
   15717, 15718, 15719, 15720, 15721, 15722, 15723, 15724, 15725, 15726,
   15727, 15728, 15729, 15730, 15731, 15735, 15736, 15740, 15741, 15745,
   15752, 15759, 15769, 15780, 15789, 15798, 15810, 15815, 15823, 15828,
   15836, 15841, 15848, 15848, 15849, 15849, 15852, 15859, 15864, 15870,
   15876, 15882, 15886, 15890, 15891, 15895, 15923, 15925, 15929, 15933,
   15937, 15944, 15950, 15956, 15962, 15968, 15977, 15978, 15982, 15983,
   15988, 15989, 15993, 15994, 15998, 15999, 16003, 16004, 16009, 16008,
   16018, 16027, 16028, 16032, 16033, 16038, 16039, 16040, 16045, 16046,
   16047, 16051, 16052, 16056, 16068, 16077, 16087, 16096, 16109, 16111,
   16113, 16118, 16119, 16124, 16123, 16140, 16139, 16151, 16151, 16172,
   16173, 16180, 16188, 16189, 16190, 16203, 16210, 16211, 16215, 16216,
   16220, 16221, 16222, 16227, 16235, 16256, 16281, 16283, 16287, 16288,
   16292, 16293, 16301, 16302, 16303, 16304, 16310, 16316, 16326, 16328,
   16330, 16335, 16336, 16337, 16338, 16339, 16343, 16344, 16345, 16346,
   16347, 16348, 16358, 16359, 16364, 16377, 16393, 16395, 16397, 16403,
   16404, 16406, 16412, 16411, 16430, 16431, 16435, 16441, 16450, 16450,
   16475, 16476, 16477, 16478, 16483, 16484, 16486, 16488, 16499, 16501,
   16507, 16513, 16524, 16533, 16539, 16544, 16548, 16521, 16600, 16601,
   16605, 16624, 16632, 16638, 16643, 16621, 16669, 16677, 16668, 16694,
   16698, 16702, 16706, 16710, 16714, 16721, 16728, 16735, 16745, 16746,
   16750, 16751, 16752, 16756, 16757, 16762, 16764, 16763, 16769, 16770,
   16774, 16781, 16791, 16797, 16808
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "ATOMIC_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "CLOB", "COALESCE",
  "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_ADD_SYM",
  "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONSTRAINT_CATALOG_SYM",
  "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM",
  "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CUME_DIST_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE",
  "CURRENT_POS_SYM", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "CYCLE_SYM", "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM",
  "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM",
  "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DECODE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DENSE_RANK_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_DOMAIN_IDS_SYM", "DO_SYM",
  "DOT_DOT_SYM", "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM",
  "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM", "ELSIF_SYM",
  "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT",
  "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXCHANGE_SYM", "EXAMINED_SYM", "EXCEPT_SYM", "EXCLUDE_SYM",
  "EXECUTE_SYM", "EXCEPTION_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM",
  "EXPORT_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM",
  "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM",
  "FIRST_VALUE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM",
  "FLUSH_SYM", "FOLLOWS_SYM", "FOLLOWING_SYM", "FORCE_SYM", "FOREIGN",
  "FOR_SYM", "FORMAT_SYM", "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM",
  "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GOTO_SYM",
  "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM", "LAG_SYM",
  "LEAD_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM", "HAVING", "HELP_SYM",
  "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "ID_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF_SYM",
  "IGNORE_DOMAIN_IDS_SYM", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM",
  "IMMEDIATE_SYM", "IMPORT", "INCREMENT_SYM", "INDEXES", "INDEX_SYM",
  "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM",
  "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERSECT_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISOPEN_SYM",
  "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "JSON_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LAST_VALUE", "LASTVAL_SYM", "LE", "LEADING", "LEAVES", "LEAVE_SYM",
  "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT",
  "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM",
  "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM",
  "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "MASTER_CONNECT_RETRY_SYM", "MASTER_DELAY_SYM",
  "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM",
  "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_STATEMENT_TIME_SYM", "MAX_USER_CONNECTIONS_SYM", "MAXVALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM",
  "MINVALUE_SYM", "MIN_ROWS", "MIN_SYM", "MODE_SYM", "MODIFIES_SYM",
  "MODIFY_SYM", "MOD_SYM", "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT",
  "MULTIPOLYGON", "MUTEX_SYM", "MYSQL_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM",
  "NAME_SYM", "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NE",
  "NEG", "NEW_SYM", "NEXT_SYM", "NEXTVAL_SYM", "NOCACHE_SYM",
  "NOCYCLE_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM", "NOT_SYM",
  "NOTFOUND_SYM", "NOW_SYM", "NO_SYM", "NOMAXVALUE_SYM", "NOMINVALUE_SYM",
  "NO_WAIT_SYM", "NOWAIT_SYM", "NO_WRITE_TO_BINLOG", "NTILE_SYM",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NTH_VALUE_SYM",
  "NVARCHAR_SYM", "OF_SYM", "OFFSET_SYM", "OLD_PASSWORD_SYM", "ON",
  "ONE_SYM", "ONLY_SYM", "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE",
  "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM", "ORDER_SYM",
  "OR_OR_SYM", "OR_SYM", "OTHERS_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OVER_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PAGE_CHECKSUM_SYM", "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD_SYM", "PERCENT_RANK_SYM", "PERSISTENT_SYM", "PHASE_SYM",
  "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM", "POLYGON", "PORT_SYM",
  "POSITION_SYM", "PRECEDES_SYM", "PRECEDING_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PREVIOUS_SYM", "PRIMARY_SYM",
  "PRIVILEGES", "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM",
  "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM",
  "QUERY_SYM", "QUICK", "RAISE_SYM", "RANGE_SYM", "RANK_SYM", "RAW",
  "READS_SYM", "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL",
  "REBUILD_SYM", "RECOVER_SYM", "RECURSIVE_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNED_SQLSTATE_SYM",
  "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM", "REUSE_SYM", "REVERSE_SYM",
  "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM", "ROLLUP_SYM",
  "ROUTINE_SYM", "ROWCOUNT_SYM", "ROW_SYM", "ROWS_SYM", "ROWTYPE_SYM",
  "ROW_COUNT_SYM", "ROW_FORMAT_SYM", "ROW_NUMBER_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SEQUENCE_SYM", "SERIALIZABLE_SYM",
  "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET",
  "SET_VAR", "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES",
  "SLAVE_POS_SYM", "SLOW", "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM",
  "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "REF_SYSTEM_ID_SYM", "SSL_SYM", "STARTING", "STARTS_SYM",
  "START_SYM", "STATEMENT_SYM", "STATS_AUTO_RECALC_SYM",
  "STATS_PERSISTENT_SYM", "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM",
  "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM", "STORED_SYM",
  "STRAIGHT_JOIN", "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIES_SYM", "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM",
  "TINYBLOB", "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING",
  "TRANSACTION_SYM", "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM",
  "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM",
  "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNBOUNDED_SYM", "UNCOMMITTED_SYM",
  "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER_SYM", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARCHAR2", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM",
  "VIRTUAL_SYM", "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM",
  "WHEN_SYM", "WHERE", "WINDOW_SYM", "WHILE_SYM", "WITH", "WITH_CUBE_SYM",
  "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM",
  "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL",
  "IMPOSSIBLE_ACTION", "'='", "'>'", "'<'", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'.'", "'@'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "$@2", "execute", "$@3",
  "$@4", "execute_using", "$@5", "execute_var_list", "execute_var_ident",
  "help", "$@6", "change", "$@7", "master_defs", "master_def",
  "ignore_server_id_list", "ignore_server_id", "do_domain_id_list",
  "do_domain_id", "ignore_domain_id_list", "ignore_domain_id",
  "master_file_def", "optional_connection_name", "connection_name",
  "create", "$@8", "$@9", "$@10", "$@11", "$@12", "$@13", "$@14", "$@15",
  "opt_sequence", "sequence_defs", "sequence_def", "server_def", "$@16",
  "server_options_list", "server_option", "event_tail", "$@17",
  "ev_schedule_time", "$@18", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@19", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@20",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_param_name", "sp_param_name_and_type",
  "sp_pdparam_list", "sp_pdparams", "sp_pdparam", "sp_opt_inout",
  "sp_parenthesized_fdparam_list", "$@21", "sp_parenthesized_pdparam_list",
  "$@22", "sp_proc_stmts", "sp_proc_stmts1", "sp_decls", "sp_decl",
  "qualified_column_ident", "optionally_qualified_column_ident",
  "row_field_name", "row_field_definition", "row_field_definition_list",
  "row_type_body", "sp_decl_idents_init_vars", "sp_decl_variable_list",
  "sp_decl_body", "$@23", "$@24",
  "opt_parenthesized_cursor_formal_parameters", "sp_cursor_stmt_lex",
  "sp_cursor_stmt", "$@25", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_ident", "sp_decl_idents",
  "sp_opt_default", "sp_proc_stmt_in_returns_clause", "sp_proc_stmt",
  "sp_proc_stmt_compound_ok", "sp_proc_stmt_if", "$@26",
  "sp_proc_stmt_statement", "$@27", "sp_proc_stmt_return", "$@28",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "assignment_source_lex",
  "assignment_source_expr", "$@29", "cursor_actual_parameters",
  "opt_parenthesized_cursor_actual_parameters", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch_head", "sp_proc_stmt_fetch", "sp_proc_stmt_close",
  "sp_fetch_list", "sp_if", "$@30", "$@31", "$@32", "sp_elseifs",
  "case_stmt_specification", "$@33", "case_stmt_body", "$@34", "$@35",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@36", "$@37", "searched_when_clause", "$@38",
  "$@39", "else_clause_opt", "sp_opt_label", "sp_block_label",
  "sp_labeled_block", "$@40", "sp_unlabeled_block", "$@41",
  "sp_unlabeled_block_not_atomic", "$@42", "loop_body", "while_body",
  "$@43", "repeat_body", "$@44", "pop_sp_loop_label", "sp_labeled_control",
  "$@45", "$@46", "$@47", "sp_unlabeled_control", "$@48", "$@49", "$@50",
  "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@51", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@52", "$@53", "$@54", "create_like", "opt_create_select",
  "create_select_query_expression", "$@55", "$@56", "$@57",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@58",
  "have_partitioning", "partition_entry", "$@59", "partition", "$@60",
  "part_type_def", "$@61", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@62",
  "$@63", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@64", "part_name", "opt_part_values", "$@65", "$@66", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@67", "$@68",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@69", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select_query_specification", "create_select_part2", "$@70",
  "create_select_part3", "create_select_part3_union_not_ready",
  "create_select_part4", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option",
  "opt_if_not_exists_table_element", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "$@71", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "udf_type", "create_field_list", "field_list",
  "field_list_item", "column_def", "key_def", "$@72", "$@73", "$@74",
  "$@75", "$@76", "$@77", "$@78", "constraint_def", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "@79",
  "field_type_or_serial", "$@80", "$@81", "opt_serial_attribute",
  "opt_serial_attribute_list", "field_def", "$@82", "opt_generated_always",
  "vcol_opt_specifier", "vcol_opt_attribute", "vcol_opt_attribute_list",
  "vcol_attribute", "parse_vcol_expr", "$@83", "parenthesized_expr",
  "virtual_column_func", "expr_or_literal", "column_default_expr",
  "field_type", "spatial_type", "char", "nchar", "varchar", "nvarchar",
  "int_type", "real_type", "srid_option", "float_options", "precision",
  "field_options", "field_opt_list", "field_option", "field_length",
  "opt_field_length", "opt_field_length_default_1", "opt_precision",
  "opt_attribute", "opt_attribute_list", "attribute", "serial_attribute",
  "type_with_opt_collate", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "charset_or_alias", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@84", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "constraint_key_type", "key_or_index", "opt_key_or_index",
  "keys_or_index", "opt_unique", "fulltext", "spatial",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "opt_USING_key_algorithm", "opt_key_algorithm_clause", "key_using_alg",
  "all_key_opt", "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@85", "$@86", "$@87", "$@88", "$@89", "$@90",
  "$@91", "$@92", "$@93", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@94", "$@95", "$@96", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@97",
  "add_part_extra", "reorg_partition_rule", "$@98", "reorg_parts_rule",
  "$@99", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "opt_index_lock_algorithm",
  "alter_algorithm_option", "alter_lock_option", "opt_column",
  "opt_ignore", "alter_options", "$@100", "alter_options_part2",
  "alter_option_list", "alter_option", "opt_restrict", "opt_place",
  "opt_to", "slave", "$@101", "$@102", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@103",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@104", "opt_checksum_type",
  "repair_table_or_view", "$@105", "repair", "$@106", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "opt_view_repair_type", "analyze",
  "$@107", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@108", "persistent_index_stat_spec",
  "$@109", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check_view_or_table", "$@110", "check", "$@111",
  "opt_mi_check_type", "mi_check_types", "mi_check_type",
  "opt_view_check_type", "optimize", "$@112", "opt_no_write_to_binlog",
  "rename", "$@113", "rename_list", "table_to_table_list",
  "table_to_table", "keycache", "$@114", "keycache_list_or_parts",
  "keycache_list", "assign_to_keycache", "assign_to_keycache_parts",
  "key_cache_name", "preload", "$@115", "preload_list_or_parts",
  "preload_list", "preload_keys", "preload_keys_parts", "adm_partition",
  "$@116", "cache_keys_spec", "$@117", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "union_list_part2",
  "select_paren", "$@118", "select_paren_union_query_term", "$@119",
  "select_paren_view", "$@120", "select_paren_derived", "$@121",
  "select_init3", "$@122", "select_init3_union_query_term", "$@123",
  "select_init3_view", "$@124", "select_part3",
  "select_part3_union_query_term", "select_part3_view",
  "select_part3_union_not_ready", "select_part3_union_not_ready_noproc",
  "select_options_and_item_list", "$@125", "table_expression",
  "opt_table_expression", "from_clause", "table_reference_list",
  "select_options", "select_option_list", "select_option",
  "opt_select_lock_type", "select_item_list", "select_item",
  "remember_tok_start", "remember_name", "remember_end", "select_alias",
  "opt_default_time_precision", "opt_time_precision", "optional_braces",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "opt_dyncol_type", "dyncol_type",
  "numeric_dyncol_type", "temporal_dyncol_type", "string_dyncol_type",
  "$@126", "dyncall_create_element", "dyncall_create_list",
  "column_default_non_parenthesized_expr", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@127", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@128", "$@129", "$@130", "window_func_expr", "window_func",
  "simple_window_func", "window_name", "variable", "$@131", "variable_aux",
  "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause",
  "gorder_list", "in_sum_expr", "$@132", "cast_type", "$@133",
  "cast_type_numeric", "cast_type_temporal", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@134", "$@135", "$@136", "$@137", "$@138", "$@139",
  "inner_join", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "table_primary_ident", "$@140", "table_primary_derived",
  "select_derived_union", "$@141", "union_list_derived_part2", "$@142",
  "union_list_derived", "select_init2_derived", "select_part2_derived",
  "$@143", "select_derived", "derived_query_specification",
  "select_derived2", "$@144", "$@145", "get_select_lex",
  "get_select_lex_derived", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@146",
  "$@147", "index_hints_list", "opt_index_hints_list", "$@148",
  "opt_key_definition", "$@149", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "opt_where_clause", "$@150", "opt_having_clause", "$@151", "opt_escape",
  "opt_group_clause", "group_list", "olap_opt", "opt_window_clause",
  "window_def_list", "window_def", "window_spec", "$@152",
  "opt_window_ref", "opt_window_partition_clause",
  "opt_window_order_clause", "opt_window_frame_clause",
  "window_frame_units", "window_frame_extent", "window_frame_start",
  "window_frame_bound", "opt_window_frame_exclusion", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@153", "order_list", "order_dir", "opt_limit_clause",
  "limit_clause_init", "limit_clause", "limit_options", "limit_option",
  "limit_rows_option", "delete_limit_clause", "int_num", "ulong_num",
  "real_ulong_num", "longlong_num", "ulonglong_num", "real_ulonglong_num",
  "dec_num_error", "dec_num", "choice", "procedure_clause", "$@154",
  "procedure_list", "procedure_list2", "procedure_item",
  "select_var_list_init", "$@155", "select_var_list", "select_var_ident",
  "select_outvar", "into", "into_destination", "$@156", "$@157", "do",
  "$@158", "drop", "$@159", "$@160", "$@161", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists_table_element", "opt_if_exists",
  "opt_temporary", "insert", "$@162", "$@163", "replace", "$@164", "$@165",
  "insert_lock_option", "replace_lock_option", "insert2", "insert_table",
  "insert_field_spec", "$@166", "fields", "insert_values", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "opt_with",
  "opt_by", "no_braces", "$@167", "opt_values", "values",
  "expr_or_default", "opt_insert_update", "$@168", "update", "$@169",
  "$@170", "update_list", "update_elem", "insert_update_list",
  "insert_update_elem", "opt_low_priority", "delete", "$@171",
  "single_multi", "$@172", "$@173", "$@174", "$@175",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@176", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@177", "show_param",
  "$@178", "$@179", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@180", "$@181", "explainable_command",
  "describe_command", "analyze_stmt_command", "opt_extended_describe",
  "opt_format_json", "opt_describe_column", "flush", "$@182",
  "flush_options", "$@183", "opt_flush_lock", "flush_lock", "$@184",
  "flush_options_list", "flush_option", "opt_table_list",
  "optional_flush_tables_arguments", "reset", "$@185", "reset_options",
  "reset_option", "$@186", "$@187", "slave_reset_options",
  "master_reset_options", "purge", "$@188", "purge_options",
  "purge_option", "kill", "$@189", "kill_type", "kill_option", "kill_expr",
  "shutdown", "use", "load", "$@190", "$@191", "$@192", "$@193",
  "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "hex_or_bin_String", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "opt_with_clause",
  "with_clause", "$@194", "opt_recursive", "with_list",
  "with_list_element", "$@195", "opt_with_column_list", "with_column_list",
  "query_name", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q",
  "simple_ident_q2", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident",
  "ident_with_tok_start", "label_ident", "ident_or_text",
  "user_maybe_role", "user_or_role", "user", "keyword", "keyword_sp",
  "set", "$@196", "$@197", "$@198",
  "set_stmt_option_value_following_option_type_list",
  "start_option_value_list", "$@199", "$@200", "$@201",
  "start_option_value_list_following_option_type", "$@202",
  "option_value_list_continued", "option_value_list", "$@203", "$@204",
  "option_value", "$@205", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "opt_for_user", "text_or_password", "set_expr_or_default", "lock",
  "$@206", "opt_lock_wait_timeout", "table_or_tables", "table_lock_list",
  "table_lock", "lock_option", "unlock", "$@207", "handler", "$@208",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@209", "handler_rkey_mode", "revoke", "revoke_command",
  "admin_option_for_role", "grant", "grant_command", "opt_with_admin",
  "opt_with_admin_option", "role_list", "current_role", "grant_role",
  "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@210", "$@211", "$@212",
  "$@213", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "user_and_role_list",
  "via_or_with", "using_or_as", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "opt_require_clause", "resource_option",
  "resource_option_list", "opt_resource_options", "opt_grant_options",
  "opt_grant_option", "grant_option_list", "grant_option", "begin",
  "$@214", "compound_statement", "opt_not", "opt_work", "opt_chain",
  "opt_release", "opt_savepoint", "commit", "rollback", "savepoint",
  "release", "unit_type_decl", "union_clause", "union_list", "$@215",
  "union_list_view", "$@216", "union_order_or_limit", "$@217",
  "order_or_limit", "union_head_non_top", "union_option",
  "query_specification", "query_term_union_not_ready",
  "query_term_union_ready", "query_expression_body", "subselect",
  "subselect_start", "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_algorithm", "view_suid",
  "view_tail", "$@218", "view_list_opt", "view_list", "view_select",
  "$@219", "query_expression_body_view", "view_check_option",
  "trigger_action_order", "trigger_follows_precedes_clause",
  "trigger_tail", "$@220", "$@221", "$@222", "$@223", "$@224", "udf_tail",
  "udf_tail2", "sf_tail", "$@225", "$@226", "$@227", "$@228", "sp_tail",
  "$@229", "$@230", "xa", "xid", "begin_or_start", "opt_join_or_resume",
  "opt_one_phase", "opt_suspend", "$@231", "opt_migrate", "install",
  "uninstall", "keep_gcc_happy", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,   900,   901,   902,   903,   904,
     905,   906,   907,   908,   909,   910,   911,   912,   913,   914,
     915,   916,   917,   918,   919,   920,   921,   922,   923,   924,
     925,   926,   927,   928,   929,   930,   931,   932,   933,   934,
     935,   936,   937,   938,   939,   940,   941,   942,   943,   944,
     945,   946,   947,   948,   949,   950,   951,   952,    61,    62,
      60,   124,    38,    45,    43,    42,    47,    37,    94,   126,
      40,    41,    44,    33,   123,   125,    59,    46,    64,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   720,   721,   722,   721,   721,   723,   723,   724,   724,
     724,   725,   725,   725,   725,   725,   725,   725,   725,   725,
     725,   725,   725,   725,   725,   725,   725,   725,   725,   725,
     725,   725,   725,   725,   725,   725,   725,   725,   725,   725,
     725,   725,   725,   725,   725,   725,   725,   725,   725,   725,
     725,   725,   725,   725,   725,   725,   725,   725,   725,   725,
     725,   725,   725,   725,   725,   725,   725,   726,   727,   727,
     728,   730,   729,   732,   731,   733,   731,   734,   735,   734,
     736,   736,   737,   739,   738,   741,   740,   742,   742,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   743,
     743,   743,   743,   743,   743,   743,   743,   743,   743,   744,
     744,   744,   745,   746,   746,   746,   747,   748,   748,   748,
     749,   750,   750,   750,   750,   750,   750,   750,   751,   751,
     752,   754,   753,   755,   753,   756,   753,   757,   753,   758,
     753,   759,   753,   760,   753,   753,   753,   753,   753,   761,
     753,   762,   762,   763,   763,   764,   764,   764,   764,   764,
     764,   764,   764,   764,   764,   764,   764,   766,   765,   767,
     767,   768,   768,   768,   768,   768,   768,   768,   770,   769,
     772,   771,   771,   773,   773,   773,   773,   774,   774,   775,
     775,   776,   776,   777,   778,   778,   780,   779,   781,   782,
     782,   783,   783,   784,   784,   785,   785,   785,   785,   785,
     785,   785,   786,   786,   787,   787,   789,   788,   790,   790,
     791,   791,   792,   792,   793,   793,   794,   794,   795,   796,
     796,   796,   797,   797,   798,   798,   799,   800,   800,   800,
     800,   802,   801,   804,   803,   805,   805,   806,   806,   807,
     807,   808,   809,   809,   810,   810,   810,   811,   812,   813,
     813,   814,   815,   816,   816,   816,   816,   817,   817,   818,
     817,   819,   817,   820,   820,   821,   823,   822,   824,   824,
     825,   825,   826,   827,   827,   828,   829,   829,   830,   830,
     830,   830,   830,   831,   832,   832,   833,   833,   834,   834,
     835,   835,   836,   836,   836,   837,   837,   837,   837,   837,
     837,   837,   837,   837,   837,   837,   837,   838,   839,   840,
     840,   841,   841,   842,   842,   843,   844,   844,   845,   845,
     846,   847,   847,   848,   849,   849,   849,   849,   849,   849,
     849,   849,   849,   849,   849,   849,   849,   850,   851,   851,
     852,   852,   853,   853,   853,   853,   853,   854,   854,   854,
     854,   854,   854,   854,   855,   855,   855,   855,   857,   856,
     859,   858,   861,   860,   862,   863,   864,   866,   865,   867,
     867,   868,   868,   869,   870,   870,   870,   871,   872,   873,
     873,   875,   876,   877,   874,   878,   878,   878,   880,   879,
     882,   883,   881,   881,   884,   884,   885,   885,   887,   888,
     886,   890,   891,   889,   892,   892,   893,   893,   894,   896,
     895,   898,   897,   900,   899,   901,   903,   902,   905,   904,
     906,   908,   907,   909,   907,   910,   907,   912,   911,   913,
     911,   914,   911,   915,   915,   916,   916,   916,   917,   918,
     919,   920,   920,   921,   921,   922,   923,   924,   924,   926,
     925,   927,   927,   927,   928,   928,   928,   929,   930,   930,
     930,   931,   931,   931,   931,   931,   931,   931,   931,   932,
     933,   933,   933,   934,   934,   934,   934,   934,   935,   936,
     936,   936,   937,   937,   937,   937,   937,   937,   937,   938,
     939,   939,   939,   940,   940,   940,   941,   942,   943,   944,
     945,   946,   946,   946,   947,   948,   949,   950,   951,   952,
     953,   954,   955,   956,   956,   957,   957,   958,   958,   960,
     959,   959,   959,   961,   959,   962,   959,   959,   963,   963,
     964,   964,   966,   965,   965,   965,   967,   965,   968,   965,
     969,   970,   970,   972,   971,   973,   975,   974,   977,   976,
     978,   979,   978,   978,   978,   978,   978,   980,   980,   981,
     981,   982,   982,   983,   983,   984,   985,   986,   987,   988,
     988,   989,   990,   989,   991,   989,   992,   992,   993,   994,
     995,   995,   996,   996,   997,   997,   999,   998,  1000,  1001,
    1002,  1001,  1003,  1001,  1001,  1004,  1004,  1005,  1005,  1006,
    1006,  1008,  1009,  1007,  1010,  1010,  1011,  1011,  1012,  1012,
    1013,  1013,  1015,  1014,  1016,  1017,  1017,  1018,  1018,  1019,
    1019,  1019,  1019,  1019,  1019,  1019,  1019,  1019,  1020,  1022,
    1021,  1023,  1023,  1024,  1024,  1025,  1026,  1026,  1027,  1027,
    1028,  1028,  1029,  1029,  1030,  1030,  1031,  1031,  1032,  1032,
    1033,  1033,  1034,  1034,  1035,  1035,  1035,  1036,  1036,  1036,
    1036,  1036,  1036,  1036,  1036,  1036,  1036,  1036,  1036,  1036,
    1036,  1036,  1036,  1036,  1036,  1036,  1036,  1037,  1036,  1036,
    1036,  1036,  1036,  1036,  1036,  1036,  1036,  1036,  1036,  1036,
    1036,  1036,  1036,  1036,  1036,  1038,  1039,  1040,  1041,  1042,
    1042,  1042,  1042,  1042,  1042,  1042,  1043,  1043,  1043,  1044,
    1044,  1044,  1044,  1045,  1046,  1046,  1047,  1047,  1047,  1048,
    1048,  1050,  1049,  1051,  1049,  1052,  1049,  1053,  1049,  1054,
    1049,  1055,  1049,  1056,  1049,  1057,  1058,  1058,  1059,  1060,
    1060,  1061,  1063,  1062,  1065,  1064,  1066,  1064,  1067,  1067,
    1068,  1068,  1069,  1070,  1069,  1071,  1071,  1072,  1072,  1072,
    1072,  1073,  1073,  1074,  1074,  1075,  1075,  1075,  1077,  1076,
    1078,  1078,  1078,  1079,  1080,  1080,  1081,  1081,  1082,  1082,
    1082,  1082,  1082,  1082,  1082,  1082,  1082,  1082,  1082,  1082,
    1082,  1082,  1082,  1082,  1082,  1082,  1082,  1082,  1082,  1082,
    1082,  1082,  1082,  1082,  1082,  1082,  1082,  1082,  1082,  1082,
    1082,  1082,  1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,
    1084,  1085,  1085,  1086,  1086,  1087,  1087,  1087,  1087,  1087,
    1088,  1088,  1088,  1088,  1088,  1089,  1089,  1089,  1090,  1090,
    1091,  1091,  1091,  1092,  1093,  1093,  1094,  1094,  1095,  1095,
    1095,  1096,  1096,  1096,  1096,  1097,  1097,  1098,  1098,  1099,
    1099,  1100,  1100,  1101,  1101,  1102,  1102,  1102,  1102,  1102,
    1102,  1102,  1103,  1103,  1103,  1103,  1103,  1103,  1103,  1103,
    1103,  1104,  1105,  1105,  1106,  1106,  1107,  1107,  1108,  1108,
    1109,  1109,  1110,  1110,  1111,  1112,  1112,  1113,  1113,  1114,
    1114,  1115,  1115,  1115,  1116,  1116,  1116,  1116,  1116,  1117,
    1117,  1119,  1118,  1120,  1120,  1121,  1122,  1122,  1122,  1122,
    1123,  1124,  1125,  1125,  1126,  1127,  1127,  1128,  1128,  1129,
    1129,  1130,  1131,  1131,  1132,  1132,  1133,  1133,  1133,  1133,
    1134,  1134,  1134,  1134,  1134,  1135,  1135,  1135,  1135,  1135,
    1136,  1136,  1137,  1137,  1138,  1138,  1139,  1139,  1139,  1140,
    1140,  1141,  1142,  1143,  1143,  1144,  1144,  1145,  1145,  1146,
    1146,  1147,  1147,  1148,  1148,  1149,  1149,  1150,  1150,  1150,
    1151,  1151,  1152,  1152,  1152,  1152,  1152,  1152,  1153,  1153,
    1154,  1155,  1155,  1156,  1156,  1156,  1157,  1157,  1158,  1158,
    1159,  1159,  1160,  1160,  1161,  1161,  1163,  1164,  1162,  1165,
    1162,  1162,  1166,  1162,  1167,  1162,  1168,  1162,  1169,  1162,
    1170,  1162,  1162,  1162,  1162,  1162,  1171,  1162,  1162,  1172,
    1172,  1172,  1172,  1173,  1173,  1174,  1174,  1175,  1175,  1176,
    1176,  1176,  1176,  1176,  1176,  1176,  1176,  1176,  1176,  1177,
    1176,  1176,  1178,  1176,  1179,  1176,  1176,  1176,  1176,  1176,
    1180,  1181,  1181,  1183,  1182,  1184,  1184,  1184,  1186,  1185,
    1187,  1188,  1187,  1189,  1189,  1190,  1191,  1191,  1192,  1193,
    1193,  1193,  1193,  1193,  1193,  1193,  1193,  1193,  1193,  1193,
    1193,  1193,  1193,  1193,  1193,  1193,  1193,  1193,  1193,  1193,
    1193,  1193,  1194,  1194,  1194,  1194,  1194,  1195,  1195,  1196,
    1196,  1197,  1197,  1198,  1198,  1200,  1199,  1201,  1201,  1202,
    1202,  1203,  1203,  1204,  1204,  1204,  1205,  1205,  1205,  1206,
    1206,  1206,  1206,  1208,  1207,  1209,  1207,  1207,  1207,  1210,
    1211,  1211,  1212,  1212,  1213,  1213,  1213,  1215,  1214,  1216,
    1216,  1217,  1217,  1217,  1218,  1218,  1218,  1219,  1219,  1221,
    1220,  1222,  1222,  1222,  1223,  1224,  1223,  1226,  1225,  1227,
    1227,  1228,  1228,  1229,  1229,  1229,  1230,  1230,  1232,  1231,
    1233,  1233,  1234,  1235,  1235,  1236,  1236,  1237,  1238,  1237,
    1239,  1240,  1239,  1241,  1241,  1241,  1242,  1242,  1242,  1243,
    1243,  1244,  1245,  1246,  1245,  1248,  1247,  1249,  1249,  1250,
    1250,  1251,  1251,  1251,  1251,  1251,  1251,  1252,  1252,  1254,
    1253,  1255,  1255,  1255,  1257,  1256,  1256,  1258,  1258,  1259,
    1259,  1260,  1262,  1261,  1263,  1263,  1264,  1264,  1265,  1266,
    1267,  1267,  1269,  1268,  1270,  1270,  1271,  1271,  1272,  1273,
    1275,  1274,  1277,  1276,  1278,  1278,  1279,  1279,  1280,  1281,
    1281,  1281,  1281,  1282,  1282,  1282,  1282,  1284,  1283,  1283,
    1286,  1285,  1285,  1288,  1287,  1287,  1290,  1289,  1289,  1292,
    1291,  1291,  1294,  1293,  1293,  1295,  1296,  1295,  1295,  1295,
    1297,  1297,  1298,  1298,  1299,  1299,  1299,  1300,  1300,  1300,
    1301,  1301,  1301,  1301,  1301,  1303,  1302,  1304,  1305,  1305,
    1306,  1307,  1307,  1308,  1308,  1309,  1309,  1310,  1310,  1310,
    1311,  1311,  1311,  1312,  1312,  1312,  1313,  1313,  1314,  1315,
    1316,  1317,  1317,  1317,  1317,  1317,  1318,  1318,  1318,  1319,
    1319,  1319,  1320,  1320,  1321,  1321,  1321,  1321,  1321,  1321,
    1321,  1321,  1321,  1321,  1321,  1322,  1322,  1322,  1322,  1322,
    1322,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,  1323,
    1323,  1323,  1323,  1323,  1323,  1324,  1324,  1324,  1324,  1324,
    1324,  1324,  1324,  1324,  1324,  1324,  1324,  1324,  1324,  1324,
    1325,  1325,  1326,  1326,  1327,  1327,  1328,  1328,  1329,  1329,
    1329,  1329,  1329,  1329,  1330,  1330,  1331,  1331,  1332,  1332,
    1332,  1333,  1333,  1333,  1333,  1333,  1333,  1334,  1334,  1334,
    1336,  1335,  1335,  1337,  1338,  1338,  1339,  1339,  1339,  1339,
    1339,  1339,  1339,  1339,  1339,  1339,  1339,  1339,  1339,  1339,
    1339,  1339,  1339,  1339,  1339,  1339,  1339,  1339,  1339,  1339,
    1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,  1340,
    1341,  1341,  1341,  1341,  1341,  1341,  1341,  1341,  1341,  1341,
    1341,  1341,  1341,  1341,  1341,  1341,  1341,  1341,  1341,  1341,
    1341,  1341,  1341,  1341,  1341,  1341,  1341,  1341,  1342,  1342,
    1342,  1342,  1342,  1342,  1342,  1342,  1342,  1342,  1342,  1342,
    1342,  1342,  1342,  1342,  1342,  1342,  1342,  1342,  1342,  1342,
    1342,  1342,  1342,  1342,  1342,  1342,  1343,  1343,  1343,  1343,
    1343,  1343,  1343,  1343,  1343,  1343,  1343,  1343,  1343,  1343,
    1343,  1343,  1343,  1343,  1343,  1343,  1343,  1343,  1343,  1343,
    1343,  1343,  1343,  1344,  1344,  1344,  1344,  1344,  1344,  1344,
    1344,  1346,  1345,  1345,  1347,  1347,  1348,  1348,  1349,  1349,
    1350,  1350,  1351,  1351,  1352,  1353,  1353,  1353,  1353,  1353,
    1353,  1353,  1354,  1355,  1353,  1353,  1353,  1353,  1353,  1353,
    1353,  1353,  1353,  1353,  1353,  1356,  1353,  1357,  1357,  1358,
    1358,  1359,  1359,  1359,  1359,  1359,  1359,  1359,  1359,  1359,
    1359,  1359,  1359,  1359,  1360,  1362,  1361,  1363,  1363,  1363,
    1364,  1364,  1365,  1365,  1366,  1366,  1367,  1367,  1369,  1368,
    1370,  1371,  1370,  1370,  1370,  1370,  1372,  1372,  1372,  1372,
    1372,  1372,  1372,  1373,  1373,  1373,  1374,  1374,  1375,  1375,
    1376,  1376,  1377,  1377,  1378,  1378,  1379,  1379,  1380,  1380,
    1381,  1381,  1382,  1383,  1383,  1384,  1384,  1385,  1386,  1385,
    1387,  1385,  1385,  1388,  1385,  1389,  1385,  1385,  1390,  1385,
    1391,  1385,  1385,  1392,  1392,  1392,  1393,  1393,  1394,  1394,
    1395,  1396,  1396,  1398,  1397,  1399,  1399,  1400,  1400,  1401,
    1400,  1400,  1400,  1400,  1402,  1402,  1403,  1402,  1404,  1405,
    1407,  1406,  1408,  1409,  1411,  1412,  1410,  1413,  1414,  1415,
    1416,  1416,  1417,  1417,  1417,  1417,  1418,  1418,  1420,  1419,
    1421,  1419,  1422,  1422,  1423,  1424,  1423,  1426,  1425,  1427,
    1427,  1428,  1428,  1429,  1429,  1430,  1430,  1431,  1431,  1431,
    1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,  1431,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1433,  1433,
    1433,  1433,  1434,  1434,  1434,  1435,  1435,  1436,  1436,  1437,
    1438,  1437,  1439,  1440,  1439,  1441,  1441,  1442,  1442,  1443,
    1443,  1444,  1444,  1444,  1445,  1445,  1446,  1446,  1447,  1449,
    1448,  1450,  1450,  1451,  1451,  1452,  1452,  1453,  1453,  1454,
    1454,  1455,  1455,  1456,  1456,  1456,  1457,  1457,  1457,  1458,
    1458,  1458,  1458,  1458,  1459,  1460,  1460,  1461,  1462,  1462,
    1464,  1463,  1465,  1465,  1466,  1466,  1466,  1467,  1467,  1468,
    1469,  1469,  1469,  1470,  1470,  1470,  1471,  1471,  1471,  1471,
    1471,  1471,  1472,  1473,  1473,  1473,  1473,  1474,  1474,  1475,
    1475,  1475,  1475,  1475,  1475,  1476,  1476,  1476,  1476,  1476,
    1477,  1477,  1477,  1477,  1478,  1478,  1478,  1478,  1478,  1479,
    1479,  1479,  1479,  1479,  1480,  1481,  1481,  1482,  1482,  1484,
    1483,  1485,  1485,  1486,  1486,  1487,  1489,  1488,  1490,  1490,
    1491,  1492,  1492,  1492,  1493,  1495,  1496,  1494,  1494,  1494,
    1498,  1497,  1500,  1499,  1499,  1499,  1499,  1499,  1499,  1499,
    1499,  1501,  1499,  1499,  1499,  1499,  1499,  1499,  1502,  1499,
    1503,  1503,  1504,  1505,  1506,  1506,  1507,  1508,  1508,  1509,
    1509,  1510,  1510,  1512,  1513,  1511,  1515,  1516,  1514,  1517,
    1517,  1517,  1517,  1518,  1518,  1519,  1519,  1520,  1521,  1521,
    1521,  1522,  1521,  1523,  1523,  1524,  1524,  1524,  1525,  1525,
    1526,  1526,  1527,  1528,  1528,  1529,  1529,  1530,  1530,  1531,
    1531,  1533,  1532,  1534,  1534,  1535,  1535,  1536,  1536,  1536,
    1537,  1538,  1537,  1540,  1541,  1539,  1542,  1542,  1543,  1544,
    1544,  1545,  1546,  1546,  1548,  1547,  1550,  1551,  1549,  1552,
    1549,  1553,  1549,  1554,  1554,  1555,  1555,  1556,  1556,  1557,
    1557,  1558,  1558,  1559,  1559,  1559,  1561,  1560,  1562,  1562,
    1563,  1563,  1564,  1564,  1565,  1565,  1565,  1565,  1565,  1565,
    1565,  1565,  1565,  1566,  1566,  1568,  1567,  1569,  1569,  1569,
    1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,
    1569,  1570,  1569,  1571,  1569,  1569,  1569,  1569,  1569,  1569,
    1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,
    1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,
    1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,  1569,
    1569,  1569,  1569,  1572,  1572,  1572,  1573,  1573,  1574,  1574,
    1575,  1575,  1576,  1576,  1577,  1577,  1578,  1578,  1579,  1579,
    1580,  1580,  1580,  1582,  1581,  1583,  1581,  1584,  1584,  1584,
    1584,  1584,  1585,  1585,  1586,  1587,  1587,  1587,  1588,  1588,
    1589,  1589,  1589,  1591,  1590,  1593,  1592,  1592,  1594,  1594,
    1595,  1596,  1595,  1597,  1597,  1598,  1598,  1598,  1598,  1598,
    1598,  1598,  1598,  1598,  1598,  1598,  1598,  1598,  1598,  1598,
    1598,  1599,  1599,  1600,  1600,  1602,  1601,  1603,  1603,  1605,
    1604,  1606,  1604,  1604,  1607,  1607,  1608,  1608,  1610,  1609,
    1611,  1612,  1612,  1614,  1613,  1615,  1615,  1615,  1616,  1616,
    1616,  1616,  1617,  1617,  1618,  1619,  1621,  1622,  1623,  1624,
    1620,  1625,  1625,  1626,  1626,  1627,  1627,  1627,  1628,  1628,
    1628,  1629,  1629,  1630,  1630,  1631,  1631,  1631,  1631,  1632,
    1632,  1633,  1633,  1634,  1634,  1635,  1635,  1636,  1636,  1637,
    1637,  1638,  1638,  1638,  1639,  1639,  1640,  1640,  1641,  1641,
    1642,  1642,  1643,  1644,  1644,  1644,  1644,  1645,  1645,  1646,
    1646,  1646,  1647,  1648,  1648,  1649,  1649,  1649,  1649,  1649,
    1649,  1649,  1649,  1649,  1649,  1650,  1650,  1650,  1650,  1650,
    1651,  1651,  1651,  1652,  1652,  1654,  1653,  1655,  1655,  1656,
    1656,  1658,  1657,  1659,  1659,  1660,  1660,  1661,  1662,  1662,
    1663,  1663,  1664,  1665,  1665,  1665,  1666,  1666,  1667,  1667,
    1668,  1668,  1669,  1669,  1669,  1669,  1670,  1670,  1670,  1671,
    1671,  1672,  1673,  1673,  1674,  1675,  1676,  1677,  1677,  1678,
    1678,  1679,  1679,  1680,  1680,  1680,  1681,  1681,  1681,  1682,
    1682,  1683,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,
    1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,
    1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,
    1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,
    1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,
    1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,
    1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,
    1684,  1684,  1684,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,
    1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1685,  1687,
    1686,  1688,  1689,  1686,  1690,  1690,  1692,  1691,  1693,  1691,
    1694,  1691,  1696,  1695,  1695,  1697,  1697,  1699,  1698,  1700,
    1698,  1702,  1701,  1701,  1703,  1703,  1703,  1704,  1704,  1704,
    1704,  1705,  1705,  1705,  1705,  1706,  1707,  1707,  1707,  1707,
    1707,  1707,  1707,  1707,  1707,  1707,  1707,  1707,  1708,  1708,
    1708,  1709,  1709,  1709,  1709,  1710,  1711,  1712,  1712,  1713,
    1713,  1713,  1713,  1714,  1714,  1715,  1715,  1715,  1716,  1716,
    1716,  1716,  1716,  1718,  1717,  1719,  1719,  1719,  1720,  1720,
    1721,  1721,  1722,  1723,  1723,  1723,  1723,  1723,  1725,  1724,
    1726,  1726,  1727,  1726,  1728,  1728,  1729,  1729,  1730,  1730,
    1730,  1730,  1731,  1730,  1732,  1732,  1732,  1732,  1732,  1733,
    1734,  1734,  1734,  1734,  1734,  1734,  1735,  1735,  1736,  1737,
    1737,  1737,  1737,  1737,  1738,  1738,  1739,  1739,  1740,  1740,
    1741,  1742,  1742,  1743,  1743,  1744,  1744,  1745,  1745,  1746,
    1746,  1748,  1747,  1749,  1747,  1750,  1747,  1751,  1747,  1747,
    1747,  1747,  1747,  1747,  1747,  1747,  1747,  1747,  1747,  1747,
    1747,  1747,  1747,  1747,  1747,  1747,  1747,  1747,  1747,  1747,
    1747,  1747,  1747,  1747,  1747,  1752,  1752,  1753,  1753,  1754,
    1754,  1754,  1755,  1755,  1755,  1755,  1756,  1756,  1757,  1757,
    1758,  1758,  1759,  1759,  1760,  1760,  1761,  1761,  1761,  1761,
    1761,  1762,  1762,  1763,  1763,  1764,  1765,  1765,  1765,  1765,
    1765,  1766,  1766,  1766,  1766,  1766,  1767,  1767,  1768,  1768,
    1769,  1769,  1770,  1770,  1771,  1771,  1772,  1772,  1774,  1773,
    1775,  1776,  1776,  1777,  1777,  1778,  1778,  1778,  1779,  1779,
    1779,  1780,  1780,  1781,  1782,  1782,  1783,  1784,  1785,  1785,
    1785,  1786,  1786,  1788,  1787,  1790,  1789,  1792,  1791,  1793,
    1793,  1794,  1795,  1795,  1795,  1796,  1797,  1797,  1798,  1798,
    1799,  1799,  1799,  1800,  1801,  1802,  1803,  1803,  1804,  1804,
    1805,  1805,  1805,  1805,  1805,  1805,  1805,  1805,  1806,  1806,
    1806,  1807,  1807,  1807,  1807,  1807,  1808,  1808,  1808,  1808,
    1808,  1808,  1809,  1809,  1810,  1811,  1812,  1812,  1812,  1813,
    1813,  1813,  1815,  1814,  1816,  1816,  1817,  1817,  1819,  1818,
    1820,  1820,  1820,  1820,  1821,  1821,  1821,  1821,  1822,  1822,
    1823,  1823,  1825,  1826,  1827,  1828,  1829,  1824,  1830,  1830,
    1831,  1833,  1834,  1835,  1836,  1832,  1838,  1839,  1837,  1840,
    1840,  1840,  1840,  1840,  1840,  1841,  1841,  1841,  1842,  1842,
    1843,  1843,  1843,  1844,  1844,  1845,  1846,  1845,  1847,  1847,
    1848,  1848,  1849,  1849,  1850
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       4,     0,     2,     0,     4,     0,     5,     0,     0,     3,
       3,     1,     1,     0,     3,     0,     6,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     5,     5,     1,     0,
       1,     3,     1,     0,     1,     3,     1,     0,     1,     3,
       1,     3,     3,     3,     3,     3,     3,     3,     0,     1,
       1,     0,     7,     0,     8,     0,    15,     0,    14,     0,
      14,     0,     6,     0,     3,     7,     6,     4,     3,     0,
       3,     0,     1,     1,     2,     3,     2,     1,     3,     2,
       1,     3,     3,     3,     1,     1,     1,     0,    12,     1,
       3,     2,     2,     2,     2,     2,     2,     2,     0,    13,
       0,     6,     2,     0,     1,     3,     1,     0,     2,     0,
       2,     0,     1,     4,     0,     2,     0,     2,     0,     3,
       1,     0,     2,     0,     2,     2,     2,     2,     2,     3,
       3,     1,     1,     2,     3,     3,     0,     4,     0,     3,
       0,     1,     3,     1,     0,     1,     3,     1,     1,     2,
       4,     3,     0,     1,     3,     1,     2,     0,     1,     1,
       1,     0,     4,     0,     4,     0,     3,     2,     3,     0,
       3,     2,     3,     5,     1,     3,     5,     1,     2,     1,
       3,     3,     1,     3,     5,     6,     4,     1,     4,     0,
       6,     0,     6,     0,     3,     0,     0,     3,     1,     1,
       1,     3,     1,     1,     1,     3,     0,     1,     1,     1,
       1,     2,     1,     3,     1,     1,     0,     1,     0,     2,
       3,     5,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     4,     0,
       1,     1,     3,     1,     3,     3,     1,     2,     1,     1,
       1,     1,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     5,
       0,     2,     0,     3,     2,     2,     0,     0,     3,     1,
       3,     0,     3,     3,     3,     4,     5,     2,     2,     1,
       3,     0,     0,     0,     7,     0,     2,     2,     0,     6,
       0,     0,     4,     1,     1,     2,     1,     2,     0,     0,
       6,     0,     0,     6,     0,     2,     0,     1,     2,     0,
       7,     0,     5,     0,     7,     3,     0,     6,     0,     6,
       1,     0,     6,     0,     6,     0,     6,     0,     3,     0,
       3,     0,     3,     1,     1,     1,     1,     1,     2,     4,
       5,     0,     4,     4,     4,     3,     3,     2,     2,     0,
       2,     1,     2,     3,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     3,     1,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     4,     0,     1,     1,     1,     1,     1,     0,
       7,     3,     3,     0,     5,     0,     5,     1,     2,     4,
       0,     3,     0,     7,     5,     3,     0,     5,     0,     5,
       1,     0,     1,     0,     4,     0,     0,     3,     0,     6,
       6,     0,     4,     2,     2,     2,     2,     0,     1,     0,
       3,     0,     1,     1,     3,     1,     4,     5,     5,     0,
       2,     0,     0,     7,     0,    10,     1,     3,     1,     1,
       0,     2,     0,     3,     1,     3,     0,     6,     1,     0,
       0,     5,     0,     4,     1,     1,     1,     1,     3,     1,
       3,     0,     0,     5,     1,     3,     1,     1,     0,     3,
       1,     3,     0,     4,     1,     0,     1,     2,     1,     3,
       4,     3,     3,     3,     3,     4,     4,     3,     5,     0,
       3,     1,     1,     2,     1,     1,     0,     1,     0,     1,
       1,     2,     1,     1,     0,     3,     0,     3,     1,     3,
       0,     1,     1,     2,     1,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     0,     6,     1,
       1,     3,     4,     4,     2,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     4,     4,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
       2,     0,     9,     0,    10,     0,     9,     0,     9,     0,
      10,     0,    11,     0,    10,     2,     0,     1,     4,     0,
       1,     2,     0,     4,     0,     3,     0,     3,     0,     1,
       2,     1,     1,     0,     6,     0,     2,     0,     1,     1,
       1,     0,     1,     2,     1,     1,     2,     2,     0,     3,
       1,     1,     3,     3,     1,     1,     1,     1,     3,     3,
       3,     2,     1,     1,     3,     3,     2,     3,     3,     2,
       3,     1,     2,     2,     2,     1,     2,     3,     1,     1,
       2,     3,     2,     3,     2,     2,     3,     3,     3,     5,
       5,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     2,     1,     2,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     0,     3,
       0,     1,     1,     5,     0,     1,     2,     1,     1,     1,
       1,     3,     3,     3,     3,     0,     1,     0,     1,     0,
       1,     0,     1,     2,     1,     1,     2,     4,     1,     3,
       2,     1,     2,     2,     1,     2,     2,     3,     3,     3,
       3,     2,     2,     1,     1,     1,     1,     1,     0,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     0,
       1,     2,     1,     1,     0,     1,     2,     1,     2,     0,
       1,     0,     4,     1,     1,     1,     0,     1,     2,     1,
       1,     2,     1,     3,     3,     1,     1,     0,     2,     0,
       1,     5,     0,     3,     3,     1,     0,     2,     2,     2,
       0,     3,     3,     6,     6,     1,     1,     2,     2,     2,
       2,     2,     1,     1,     0,     1,     1,     1,     1,     0,
       1,     1,     1,     0,     1,     0,     1,     0,     1,     1,
       2,     1,     2,     1,     2,     0,     2,     0,     2,     2,
       2,     2,     3,     2,     3,     3,     3,     3,     1,     1,
       1,     1,     3,     1,     1,     1,     4,     2,     1,     4,
       0,     1,     0,     2,     1,     3,     0,     0,     8,     0,
       5,     7,     0,     5,     0,     5,     0,     5,     0,     4,
       0,    11,     3,     4,     3,     3,     0,     8,     7,     0,
       3,     1,     4,     0,     3,     0,     2,     0,     1,     0,
       2,     2,     2,     2,     1,     1,     1,     4,     4,     0,
       6,     4,     0,     5,     0,     6,     4,     3,     1,     7,
       2,     1,     1,     0,     6,     0,     3,     2,     0,     5,
       0,     0,     6,     1,     3,     1,     1,     3,     3,     3,
       2,     4,     2,     7,     6,     5,     5,     4,     5,     3,
       4,     2,     2,     6,     5,     3,     5,     1,     1,     1,
       1,     1,     0,     1,     1,     2,     2,     3,     3,     3,
       3,     0,     1,     0,     1,     0,     2,     0,     1,     2,
       1,     1,     1,     0,     1,     1,     0,     2,     1,     0,
       1,     1,     1,     0,     6,     0,     5,     4,     4,     3,
       0,     1,     1,     3,     3,     2,     2,     0,     2,     1,
       3,     0,     1,     1,     0,     2,     4,     1,     3,     0,
       5,     0,     1,     1,     3,     0,     4,     0,     4,     0,
       1,     1,     2,     1,     1,     1,     0,     2,     0,     5,
       1,     3,     2,     0,     3,     1,     4,     1,     0,     4,
       1,     0,     4,     0,     1,     3,     0,     1,     3,     1,
       1,     2,     3,     0,     4,     0,     3,     0,     1,     1,
       2,     1,     1,     1,     1,     1,     2,     0,     2,     0,
       6,     0,     1,     1,     0,     4,     4,     3,     5,     1,
       3,     4,     0,     6,     1,     1,     1,     3,     2,     3,
       1,     1,     0,     6,     1,     1,     1,     3,     3,     4,
       0,     6,     0,     2,     0,     4,     0,     2,     2,     3,
       3,     4,     4,     3,     3,     4,     4,     0,     5,     3,
       0,     5,     3,     0,     5,     3,     0,     7,     3,     0,
       4,     2,     0,     4,     2,     2,     0,     4,     2,     3,
       1,     1,     1,     1,     1,     1,     2,     1,     2,     3,
       1,     4,     2,     2,     3,     0,     3,     5,     0,     1,
       2,     1,     1,     0,     1,     2,     1,     1,     1,     1,
       0,     3,     5,     3,     1,     1,     3,     4,     0,     0,
       0,     0,     2,     2,     1,     1,     0,     2,     3,     0,
       2,     3,     0,     2,     3,     3,     3,     2,     3,     4,
       3,     4,     3,     4,     1,     3,     4,     3,     3,     6,
       1,     5,     6,     5,     7,     6,     8,     5,     6,     4,
       4,     5,     3,     4,     1,     3,     3,     3,     3,     3,
       3,     5,     5,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     2,     1,     1,
       1,     1,     2,     1,     1,     1,     2,     1,     2,     2,
       0,     3,     1,     4,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     6,     4,     4,     7,
       6,     5,     6,     6,     4,     4,     4,     4,     4,     4,
       1,     3,     3,     2,     3,     2,     2,     2,     2,     5,
       4,     6,     2,     2,     4,     4,     4,    10,     6,     8,
       6,     4,     4,     6,     4,     4,     4,     6,     4,     7,
       7,     7,     6,     6,     6,     6,     3,     4,     6,     8,
       2,     2,     8,     8,     6,     6,     6,     2,     6,     6,
       8,     8,     6,     8,     6,     2,     8,     8,     2,     2,
       2,     6,     6,     4,     4,     8,     4,     4,     4,     4,
       3,     8,     6,     8,     4,     6,     4,     6,     4,     4,
       4,     6,     8,     4,     3,     6,     4,     6,     5,     8,
       7,    10,     1,     6,     4,     4,     4,     4,     4,     6,
       4,     0,     5,     6,     2,     3,     0,     4,     0,     3,
       0,     1,     1,     3,     4,     4,     5,     4,     4,     4,
       5,     4,     0,     0,     7,     4,     5,     4,     5,     4,
       4,     4,     4,     4,     5,     0,     8,     3,     3,     1,
       1,     3,     3,     3,     3,     3,     4,     4,     4,     6,
       4,     6,     4,     6,     1,     0,     3,     3,     1,     4,
       0,     1,     0,     2,     0,     3,     4,     2,     0,     3,
       2,     0,     4,     2,     1,     1,     1,     1,     2,     1,
       2,     2,     2,     1,     2,     2,     0,     1,     1,     3,
       1,     3,     1,     3,     0,     1,     0,     2,     4,     5,
       1,     1,     1,     1,     4,     1,     3,     3,     0,     6,
       0,     8,     4,     0,     8,     0,    10,     6,     0,     8,
       0,    10,     6,     1,     2,     1,     1,     2,     0,     1,
       5,     1,     1,     0,     5,     5,     8,     1,     2,     0,
       4,     2,     3,     3,     1,     1,     0,     3,     2,     1,
       0,     3,     2,     3,     0,     0,     5,     0,     1,     0,
       0,     1,     0,     2,     3,     3,     1,     1,     0,     7,
       0,     7,     1,     2,     0,     0,     2,     0,     2,     0,
       1,     1,     1,     1,     3,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     1,     1,     0,     2,     0,     1,     0,
       0,     3,     0,     0,     3,     2,     0,     0,     4,     4,
       2,     0,     1,     1,     0,     2,     3,     1,     3,     0,
       7,     0,     1,     0,     3,     0,     3,     0,     3,     1,
       1,     1,     4,     2,     2,     2,     1,     2,     2,     0,
       3,     2,     2,     3,     3,     3,     1,     2,     0,     1,
       0,     4,     4,     2,     0,     1,     1,     0,     1,     1,
       2,     5,     4,     1,     3,     3,     1,     3,     1,     1,
       1,     1,     1,     0,     2,     3,     4,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       6,     0,     1,     3,     1,     3,     0,     2,     3,     1,
       1,     2,     1,     3,     2,     0,     0,     7,     2,     1,
       0,     3,     0,     8,     7,     4,     6,     4,     4,     5,
       5,     0,     6,     4,     4,     5,     6,     4,     0,     6,
       1,     3,     1,     2,     1,     3,     1,     0,     2,     0,
       2,     0,     1,     0,     0,     8,     0,     0,     6,     0,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     3,
       4,     0,     3,     3,     1,     2,     2,     1,     3,     1,
       3,     1,     3,     1,     1,     0,     1,     1,     1,     1,
       1,     0,     4,     0,     1,     3,     1,     1,     1,     1,
       0,     0,     6,     0,     0,    11,     3,     1,     3,     3,
       1,     3,     0,     1,     0,     4,     0,     0,     9,     0,
       5,     0,     6,     0,     2,     1,     3,     2,     4,     0,
       2,     0,     2,     1,     1,     1,     0,     5,     0,     1,
       0,     1,     1,     3,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     0,     3,     0,     3,     2,     4,     4,
       3,     4,     4,     1,     3,     3,     3,     3,     6,     2,
       2,     0,     6,     0,     7,     5,     2,     1,     1,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     3,     2,
       2,     1,     4,     4,     3,     3,     3,     2,     3,     2,
       3,     3,     3,     3,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     1,     1,     1,     1,     1,     0,     1,
       0,     2,     0,     1,     1,     1,     0,     2,     0,     2,
       0,     3,     3,     0,     4,     0,     4,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     1,     1,     0,     3,
       0,     1,     1,     0,     4,     0,     4,     1,     0,     1,
       4,     0,     3,     3,     1,     2,     2,     2,     2,     2,
       3,     2,     1,     1,     1,     1,     2,     1,     1,     1,
       2,     0,     1,     0,     3,     0,     3,     3,     1,     0,
       4,     0,     3,     2,     0,     1,     0,     2,     0,     3,
       3,     2,     2,     0,     5,     0,     1,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     0,     0,     0,     0,
      22,     1,     1,     0,     1,     0,     1,     1,     0,     1,
       1,     0,     2,     2,     1,     3,     4,     3,     3,     0,
       2,     2,     1,     3,     3,     0,     4,     0,     3,     1,
       1,     0,     3,     2,     3,     1,     1,     2,     0,     2,
       3,     1,     5,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       2,     2,     2,     0,     1,     0,     4,     0,     1,     1,
       3,     0,     9,     0,     3,     1,     3,     1,     1,     1,
       3,     5,     1,     1,     1,     3,     1,     1,     3,     1,
       4,     5,     1,     5,     3,     2,     1,     3,     2,     2,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     0,     0,     7,     1,     3,     0,     3,     0,     3,
       0,     3,     0,     3,     2,     0,     2,     0,     2,     0,
       4,     0,     3,     1,     1,     1,     1,     0,     1,     1,
       1,     0,     2,     2,     2,     3,     3,     5,     5,     4,
       6,     2,     3,     3,     3,     5,     2,     3,     1,     3,
       3,     1,     1,     3,     3,     1,     3,     2,     2,     2,
       2,     2,     1,     1,     3,     1,     4,     4,     1,     1,
       1,     1,     1,     0,     5,     0,     2,     1,     1,     1,
       1,     3,     3,     1,     1,     2,     2,     2,     0,     3,
       4,     3,     0,     7,     1,     2,     1,     1,     1,     1,
       1,     1,     0,     5,     1,     1,     1,     1,     1,     3,
       6,     6,     6,     7,     5,     3,     4,     1,     3,     8,
       8,     8,     6,     4,     0,     3,     0,     3,     1,     3,
       2,     1,     1,     0,     1,     1,     2,     0,     1,     1,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     2,     0,     1,     3,     1,     2,
       2,     2,     1,     3,     3,     1,     1,     3,     1,     3,
       1,     3,     1,     1,     1,     1,     4,     5,     4,     6,
       1,     0,     3,     3,     1,     1,     0,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     1,     0,     2,
       0,     2,     0,     3,     2,     1,     2,     1,     0,     3,
       1,     0,     1,     0,     1,     0,     3,     2,     0,     1,
       2,     0,     1,     4,     4,     5,     2,     3,     1,     1,
       1,     0,     1,     0,     4,     0,     4,     0,     2,     2,
       1,     2,     0,     1,     1,     3,     3,     4,     2,     3,
       1,     1,     2,     4,     0,     0,     0,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     3,     3,     3,     0,
       3,     3,     0,     8,     0,     3,     1,     3,     0,     4,
       3,     3,     4,     4,     0,     3,     4,     4,     1,     1,
       0,     2,     0,     0,     0,     0,     0,    20,     2,     1,
       7,     0,     0,     0,     0,    12,     0,     0,     8,     4,
       4,     3,     4,     3,     2,     1,     3,     5,     1,     1,
       0,     1,     1,     0,     2,     0,     0,     3,     0,     2,
       5,     3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    2283,  1016,  2138,  2978,     0,     0,     0,   398,     0,     0,
    1215,  2983,   658,    68,  2004,  2132,  2133,  1910,  1941,     2,
       0,  1231,   319,   198,     0,    83,   368,  1943,     0,  2193,
       0,     0,   437,  1231,   778,   556,     0,  2188,     0,     0,
    1231,   441,  1946,  2175,   296,   198,  2983,     0,  2749,  2045,
    2204,     0,     0,     0,  2028,     0,  2838,  1993,     0,   439,
    2287,     0,  3124,     0,     3,     8,    21,     0,    43,    26,
      31,    16,    20,    15,    56,    50,    28,  2980,   364,   365,
     366,   367,    41,   143,    40,    11,    59,    60,    18,    47,
      12,    14,    17,    39,    46,    35,    42,    54,    24,    25,
      32,    48,    64,    22,    61,    57,    23,  2138,    13,    27,
      49,    44,    36,    58,    65,    37,     0,  2284,    55,    38,
      63,    30,    51,    29,     9,    10,    19,    52,    53,    45,
      66,    33,    62,    34,     0,  1047,     0,     0,     0,     0,
       0,     0,     0,  1125,     0,  1028,  3052,  3053,  3054,     0,
    1233,  1232,     0,  2283,  1405,  1404,     0,  2983,  2324,  1211,
    1242,  2413,  2415,  2414,  2416,  2417,  2418,  2419,  2420,  2421,
    2343,  2422,  2423,  2424,  2426,  2425,  2427,  2428,  2429,  2344,
    2345,  2346,  2430,  2431,  2433,  2432,  2434,  2347,  2348,  2435,
    2436,  2437,  2438,  2349,  2351,  2350,  2439,  2441,  2440,  2352,
    2442,  2443,  2444,  2445,  2447,  2353,  2354,  2355,  2356,  2357,
    2446,  2358,  2448,  2359,  2449,  2450,  2451,  2452,  2453,  2454,
    2455,  2457,  2456,  2360,  2458,  2459,  2461,  2462,  2463,  2460,
    2464,  2465,  2467,  2466,  2468,  2469,  2470,  2361,  2471,  2472,
    2473,  2474,  2475,  2476,  2477,  2478,  2479,  2362,  2480,  2481,
    2482,  2483,  2503,  2363,  2484,  2487,  2486,  2485,  2488,  2489,
    2490,  2492,  2491,  2493,  2495,  2364,  2365,  2366,  2494,  2496,
    2497,  2498,  2499,  2501,  2500,  2505,  2506,  2507,  2367,  2368,
    2369,  2370,  2502,  2504,  2726,  2508,  2509,  2511,  2510,  2512,
    2371,  2514,  2515,  2513,  2372,  2517,  2516,  2373,  2374,  2518,
    2519,  2520,  2322,  2521,  2323,  2522,  2524,  2526,  2523,  2527,
    2528,  2535,  2375,  2525,  2529,  2530,  2531,  2532,  2533,  2534,
    2536,  2376,  2538,  2537,  2539,  2540,  2541,  2542,  2543,  2544,
    2545,  2546,  2547,  2548,  2561,  2562,  2552,  2553,  2555,  2556,
    2559,  2554,  2560,  2565,  2564,  2566,  2567,  2568,  2569,  2570,
    2563,  2550,  2557,  2558,  2551,  2571,  2572,  2549,  2573,  2575,
    2574,  2576,  2577,  2578,  2579,  2580,  2581,  2582,  2583,  2584,
    2585,  2587,  2586,  2588,  2589,  2590,  2591,  2592,  2593,  2594,
    2596,  2595,  2597,  2598,  2601,  2599,  2600,  2602,  2603,  2608,
    2609,  2610,  2377,  2605,  2604,  2606,  2607,  2611,  2612,  2613,
    2614,  2615,  2616,  2618,  2617,  2378,  2380,  2379,  2381,  2382,
    2619,  2620,  2383,  2621,  2623,  2622,  2624,  2625,  2626,  2628,
    2627,  2629,  2630,  2384,  2385,  2386,  2387,  2631,  2632,  2633,
    2634,  2635,  2636,  2637,  2638,  2639,  2640,  2641,  2642,  2643,
    2644,  2645,  2646,  2647,  2649,  2648,  2650,  2651,  2652,  2653,
    2654,  2655,  2656,  2388,  2657,  2389,  2658,  2659,  2390,  2660,
    2391,  2661,  2662,  2663,  2664,  2665,  2666,  2392,  2667,  2668,
    2669,  2673,  2670,  2671,  2672,  2674,  2393,  2675,  2676,  2677,
    2394,  2678,  2680,  2679,  2681,  2395,  2683,  2396,  2397,  2682,
    2399,  2400,  2684,  2685,  2686,  2398,  2687,  2401,  2688,  2689,
    2691,  2690,  2692,  2693,  2694,  2402,  2695,  2696,  2403,  2697,
    2404,  2698,  2699,  2700,  2701,  2703,  2702,  2704,  2705,  2706,
    2707,  2709,  2711,  2710,  2708,  2712,  2713,  2714,  2715,  2405,
    2719,  2720,  2721,  2722,  2716,  2717,  2718,  2406,  2723,  2724,
    2725,  2409,  2727,  2728,  2730,  2729,  2407,  2408,  2731,  2732,
    2412,  2733,  2734,  2739,  2735,  2736,  2748,  2737,  2738,  2741,
    2740,  2742,  2743,  2744,  2410,  2745,  2411,  2746,  2747,   216,
    2327,   200,  2328,  2342,   400,   128,  2829,  2828,  1169,     0,
    2984,  2985,     0,     0,     0,  2021,     0,  1939,  1939,  1939,
    1937,     0,  1939,  1939,  1939,     0,  1942,  1939,  1939,  1939,
       0,    71,    73,  2143,   320,     0,     0,     0,     0,     0,
    2321,     0,   391,  1949,     0,     0,  2195,  2211,     0,  2212,
    2206,  2823,   370,     0,     0,     0,     0,     0,     0,   198,
    1234,  1177,   370,  2002,     0,   286,   295,   297,   298,   294,
       0,  2985,  2996,  2751,     0,  2112,   298,     0,   128,  1150,
       0,   128,  2029,  2026,     0,     0,     0,  2002,  2205,     0,
    2288,  2285,  3108,     0,     0,     0,  3104,     0,  3109,     0,
       1,     5,     0,     0,   656,   971,   656,   972,   970,   656,
    3054,     0,     0,     0,     0,     0,  2498,  2370,  2623,  2125,
    2137,  2123,  2316,  1315,  1277,  1268,     0,  1019,  1048,     0,
    1024,  1940,     0,  1022,  2335,  2334,  2333,  1036,  1035,  1034,
    1032,     0,   509,     0,  1127,   198,  3059,     0,  1026,     0,
    1188,  2127,  2128,  2129,  2130,  2131,  2134,   423,  2979,     0,
     218,     0,   411,   414,     0,   403,   406,     0,   129,   130,
       0,  1213,  1216,     0,     0,  2988,     0,   659,   148,     0,
    2025,  2024,  2023,     0,  2021,  2414,  2343,  2429,     0,  2273,
       0,     0,     0,  1654,     0,  2349,     0,  2443,  2445,  2353,
    2354,  2355,  2356,  2357,  2360,     0,     0,     0,  1352,  1352,
    1352,  1349,     0,     0,     0,  2469,  2470,  2278,  2471,     0,
       0,     0,     0,  2269,     0,  2279,  2370,  2511,  2512,     0,
       0,     0,  2271,  2272,  2519,     0,     0,     0,  2537,  2539,
       0,  2543,  2276,     0,     0,  2581,  2583,     0,     0,  2588,
    2589,  2590,  2591,  2254,  2599,  2600,  1407,     0,  1349,     0,
    2268,  2275,     0,  2615,  2262,  2624,     0,  2629,  2630,     0,
    2633,  2640,     0,     0,     0,  2665,     0,  2673,  2671,     0,
    2677,     0,     0,  2700,     0,     0,  1349,  2253,  2719,  2720,
    2721,  2722,     0,  2270,  2406,  2277,     0,  2733,  1352,  1349,
    1349,     0,     0,     0,  2742,  2743,  2747,     0,     0,     0,
    3024,  1406,     0,     0,  1615,  1648,  1364,  1370,  1384,     0,
    1460,  1399,  1437,  1438,  1440,  1552,  1439,  1444,  1445,     0,
    1599,  1443,  1911,  2265,  1442,  1441,  2266,  2267,  1436,  2304,
    2327,  2303,     0,     0,     0,     0,     0,     0,     0,   198,
       0,  2108,     0,   198,  1921,  1939,  1939,    75,     0,    77,
       0,     0,  2887,  2902,  2903,  1352,  2899,  2904,  2491,  2366,
    2505,     0,  2901,  2893,     0,  2635,  2639,  2897,  2656,  2659,
    2891,     0,  2396,  2704,  2923,  2895,  2900,  2881,  2868,  2882,
       0,     0,  2885,  2889,  2318,  1772,  2841,  2842,     0,    84,
       0,     0,  1951,  1952,  1950,  1123,     0,  3121,  2196,  2197,
    2198,     0,  2215,     0,   421,     0,     0,     0,     0,     0,
     372,   370,   357,     0,   356,   358,  2283,   352,   359,   360,
     361,     0,   362,   363,     0,   353,   354,   438,   355,  2331,
       0,  2332,  1229,   779,   558,   557,    71,  2107,  2106,     0,
    2189,  2997,     0,     0,     0,   370,   442,  1954,  2003,     0,
    1953,  2181,     0,  2179,  2176,  2178,   287,     0,     0,   317,
    2415,  2887,  2639,  2859,     0,  2867,     0,  2991,  2988,     0,
     893,     0,     0,  2774,  2775,  2596,  2624,  2666,  2776,  2716,
       0,     0,     0,  2750,  2760,  2756,     0,  2067,     0,   893,
    2120,  2068,     0,     0,  2120,     0,  1837,  2110,  2113,     0,
    2778,  2081,   968,   967,   966,  2779,  2106,     0,  2053,  2069,
       0,  2030,  2074,   128,  2780,     0,  2109,     0,  1837,  2120,
       0,  2046,     0,     0,     0,     0,  1338,     0,   293,  1157,
    1157,     0,     0,  1149,  1151,  1152,  1157,  1157,     0,  3122,
    3123,  2839,  1123,   440,     0,     0,  2261,  2259,  2260,  2325,
    3105,  2258,  2257,  3113,  3115,  3101,  3103,  3110,     6,    67,
       0,     0,   198,   198,   144,  1339,  1339,  3054,   656,   150,
     656,   656,   656,   656,   656,  2283,  2140,  1318,  1323,  1277,
       0,     0,  3057,  3058,  3056,   909,     0,  1352,  2336,  2339,
    3055,  2340,   201,  1033,     0,   510,   201,     0,     0,     0,
       0,     0,   511,   512,   448,     0,  1131,  1132,  1126,  1128,
    1130,     0,     0,     0,  1029,     0,  3059,  2139,     0,   249,
       0,  1244,  1246,  1245,  1262,   220,   217,   199,     0,   370,
       0,   401,   407,    85,  1171,  1930,  1932,     0,  1217,  2987,
       0,     0,  2989,  2993,   147,     0,     0,     0,  2005,  2009,
    2015,  2019,  2022,     0,     0,  1777,  1463,  1777,  1777,  1777,
    1655,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1777,     0,     0,  1500,  1472,  1473,
       0,  1501,     0,     0,     0,  2280,     0,     0,     0,     0,
       0,  3024,     0,     0,     0,     0,     0,  1620,     0,     0,
       0,     0,     0,  3024,     0,     0,     0,     0,     0,     0,
       0,  1650,  1652,  2303,  1777,     0,     0,  1777,     0,     0,
       0,     0,     0,     0,     0,  1357,  1507,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1777,  1777,     0,     0,
    1777,  1515,  2282,     0,     0,     0,  2281,     0,     0,     0,
    2255,  2274,     0,  1518,  1520,  1519,     0,  1777,  1777,     0,
       0,     0,  1466,  1465,  1467,     0,   781,   780,  2283,     0,
       0,     0,  1403,  1402,  1401,  1400,     0,     0,     0,     0,
    1409,     0,  1411,  1413,  1408,  1410,  1412,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1468,     0,     0,     0,
       0,  2256,  1561,     0,  1915,  1923,  1917,  1938,     0,  2108,
    1918,     0,  1927,   523,     0,  1924,     0,     0,  1928,  1912,
      77,    72,    78,    74,     0,  2168,     0,     0,     0,  2162,
    2164,  2167,  2163,     0,     0,  2169,   128,     0,  2165,  2144,
    2147,  2154,  1338,  2145,     0,     0,   318,   321,   323,     0,
     326,  2888,  2886,  2920,  2919,  2924,     0,  2921,  2917,  2880,
    2910,  2951,  2914,     0,  2951,  2916,  2915,  2951,  2911,  2918,
    2951,     0,  2883,     0,  1773,  1774,     0,  2840,     0,  2317,
       0,     0,  1124,     0,     0,  2199,  2200,     0,  1252,  2216,
    2217,  2213,  1772,  2825,  2830,   249,   388,     0,  2599,     0,
     375,   374,   381,     0,     0,     0,   247,   371,   387,   389,
     419,   418,     0,   567,    70,     0,  1236,  2341,     0,  1235,
    1239,  2825,  1175,  1178,     0,   428,     0,  1957,  1947,  1956,
    1688,  2186,  2183,   128,     0,   285,   310,   305,   313,   307,
     309,   308,   314,   315,   316,   311,   306,   312,   299,     0,
       0,  2886,     0,     0,  2883,  2992,     0,  2994,     0,  2798,
    2752,  2754,     0,   892,     0,     0,   895,   897,  1974,  1973,
     896,   905,     0,   894,     0,  2813,     0,  2796,     0,  2781,
       0,   901,   903,   902,  2791,   900,     0,     0,     0,  2765,
       0,  2116,  1338,  1338,  2080,     0,   656,     0,     0,     0,
       0,     0,     0,  2094,     0,  2047,     0,     0,   708,  1839,
    2073,     0,  1838,  2114,  2115,  2120,     0,     0,  2120,     0,
    2087,  2110,  2120,     0,  2120,  2042,     0,     0,  2034,  2039,
    2035,     0,  2041,  2040,  2043,  2031,  2032,     0,  2060,  2089,
       0,  2110,  2072,  2079,     0,  2059,  2066,     0,  2077,  2110,
    2110,     0,  2120,  2120,  2120,  1145,  1161,  1143,  1155,  1156,
       0,     0,  1148,  1147,  2825,  1693,   426,  2286,  2289,  2293,
    2297,     0,     0,  3102,  3116,  3100,  3111,  3112,  3099,     7,
       4,     0,   141,     0,     0,     0,   656,   656,  1339,  3051,
       0,  3039,  3046,  3047,  3050,  3089,  3049,  3048,   656,  3045,
    3038,  3041,  3042,  3044,  3043,  3059,     0,     0,     0,     0,
       0,     0,  2126,  2124,  2141,  2142,  1693,  1896,     0,  1269,
    1330,  1307,  1319,  1330,  1779,  1837,  3010,  1318,  1310,  3037,
    3032,  3031,  3034,  3035,  1329,  3036,  1328,  3033,  3030,  1339,
    1324,  1326,  1327,     0,  1270,  1315,   910,   909,   650,   653,
     652,     0,     0,  2338,     0,  1025,     0,  2108,  1023,     0,
       0,  2108,   459,  2108,   513,  2825,  1129,  2339,  2950,     0,
    2956,  2938,     0,   656,  1030,  1027,  1189,  1190,  1193,   245,
       0,     0,   555,  1262,  1248,  1264,     0,   221,   223,   412,
     370,     0,     0,     0,  1173,  1172,     0,  1170,  1227,  1225,
    1224,  1222,     0,  1223,  1221,  1212,  1218,  1219,  2986,  2990,
    2108,   451,  2011,  1934,  1688,  1936,  2316,     0,     0,     0,
    2017,     0,     0,  1778,  1777,     0,  1628,     0,     0,     0,
       0,  1656,     0,     0,     0,     0,     0,     0,     0,     0,
    1434,     0,     0,     0,     0,     0,  1582,     0,  1628,  1605,
    1353,  1885,  1886,  1866,  1867,  1865,  1868,  1350,     0,  1869,
    1884,  1530,     0,     0,     0,     0,     0,     0,  1603,     0,
    1748,  1749,  1750,  1751,  1759,  1752,  1753,  1754,  1761,  1766,
    1755,  1756,  1762,  1763,  1764,  1757,  1765,  1760,  1758,  1767,
       0,  1747,     0,     0,     0,  1770,  1768,  1771,  1769,     0,
    1621,  1595,     0,     0,     0,     0,     0,   781,     0,  1648,
       0,     0,     0,     0,     0,     0,     0,     0,  1777,     0,
       0,     0,  1777,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1604,     0,     0,     0,     0,
       0,  1602,     0,     0,     0,     0,     0,  1544,  1601,     0,
       0,     0,     0,     0,  1777,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1496,     0,  2307,  2309,  2306,
       0,     0,     0,   937,     0,  1462,     0,     0,     0,     0,
    2781,  1616,  1618,  1355,  1354,  1356,  1367,  1360,  1365,  1358,
    1362,     0,  1414,  2421,  1368,     0,     0,  1396,  3024,  1786,
    1397,  1382,  1387,  1388,     0,  1385,  1386,     0,  1390,     0,
    1389,  1393,  1394,  1395,  1398,     0,     0,     0,     0,  1461,
    1464,  1799,  1597,  1598,  1614,  1649,  1339,  2305,     0,     0,
     523,  1920,  2878,   526,   525,  1925,   524,  1975,  2936,  1919,
    1133,     0,     0,    76,     0,  2159,  2156,  2155,  2157,  2161,
     128,  2166,  2158,     0,  2170,  2171,  2469,  2719,  2722,   330,
       0,   303,   302,   304,   327,     0,     0,  2913,     0,  2894,
       0,  2898,  2892,  2896,  2876,     0,     0,  2884,     0,  2922,
    2905,  2909,  2908,  2906,     0,  2907,  2912,  2890,  1776,  2506,
    2599,     0,  1779,  2844,   369,   392,  1944,  3120,  2201,  2733,
    2202,  2194,     0,  2214,     0,     0,  2827,     0,     0,  2824,
     245,     0,     0,   384,   376,   383,   373,   425,   248,     0,
     249,   431,   435,   433,  2825,   568,     0,     0,   579,     0,
       0,     0,  2190,     0,     0,     0,     0,     0,  1179,     0,
    1955,  2283,     0,  1933,  1689,     0,  2182,  2184,  2177,     0,
       0,     0,     0,     0,  2940,  2865,     0,     0,     0,  2995,
       0,     0,     0,     0,     0,  2794,     0,     0,  2793,  2792,
       0,     0,     0,  2815,  2797,     0,     0,  2759,  2801,  2802,
    2805,     0,     0,     0,     0,     0,     0,  2821,  2822,  2819,
    2820,  2818,  2786,  2716,  2761,  2762,  2767,  2757,  2088,     0,
    2118,     0,     0,     0,     0,  2100,  2092,  2091,  2086,  2084,
    2093,  2095,  2085,  2105,  2104,  2103,  2057,  2056,  1850,  1851,
       0,  1849,  1840,  1843,  1848,  2329,  1846,  2330,  2050,  2111,
    2099,  2097,   198,  2120,  2055,  2054,  2098,  2096,  2036,  2037,
    2038,     0,  1837,     0,  2116,  2090,  2120,  2110,     0,  2120,
    2120,  2101,  2102,  2076,  2078,  1146,  1163,  1162,  1158,  1159,
    1164,  1154,  1153,  2027,  1717,     0,  1663,     0,  1665,  1662,
    1661,  1660,  1691,     0,  1692,   370,     0,     0,  2291,  3106,
    3114,  3118,   657,   909,  2874,  2956,   656,  3088,     0,     0,
     656,   656,     0,  3040,   167,   987,     0,     0,   133,   131,
    1322,  1320,  1321,     0,     0,  1909,     0,  1904,  1830,     0,
       0,  1291,     0,  1308,  1312,  1313,  1289,  1780,  1787,  3009,
    1319,  1828,  1335,  1316,  1334,     0,  1325,  1279,  3000,  2999,
    2998,  3012,  1271,  1272,     0,  1318,   651,  1975,  1975,     0,
    2337,     0,     0,     0,     0,     0,     0,     0,   202,   211,
       0,     0,   457,   458,  1975,   456,   499,   500,   503,   504,
     505,     0,   506,  1975,  1975,   453,   479,   480,   483,   484,
     485,   486,   487,   449,     0,   454,  1017,     0,     0,     0,
    2968,  3060,  3061,     0,  1039,     0,     0,  1192,     0,   370,
       0,  1251,  1243,  1250,  1247,  1262,  1260,  1249,   963,   962,
       0,  1263,   219,     0,     0,   399,   408,   402,   404,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    86,    87,   108,  1931,     0,  1214,  1226,
    1220,  1975,  1975,  1975,  1975,   455,   488,   489,   492,   493,
     494,   495,   498,   496,   497,     0,  2108,     0,     0,  2006,
       0,  2319,  2016,  1693,  2020,  2019,     0,  1526,     0,  1575,
       0,  1577,  1578,  1579,     0,     0,     0,     0,     0,  1527,
       0,  1470,  1528,  1529,     0,  1523,     0,  1524,     0,     0,
       0,     0,     0,     0,     0,  1581,     0,  1351,     0,     0,
    1474,  1475,     0,  1454,  1447,     0,  1607,     0,  1554,     0,
       0,  1612,     0,  1610,     0,  1476,     0,     0,     0,     0,
    1534,     0,  1459,     0,  1555,  1651,     0,  1653,  2305,     0,
    1587,  1536,  1481,     0,  1585,     0,  1482,  1556,  1557,  1558,
    1456,  1457,  1606,     0,  1538,  1539,     0,  1560,     0,  1458,
    1540,     0,     0,  1543,     0,     0,  1484,  1591,  1589,     0,
       0,     0,     0,  1593,  1486,     0,     0,     0,  1485,     0,
       0,     0,     0,     0,     0,     0,  1488,     0,  1455,     0,
    1590,  1592,  1546,     0,     0,     0,     0,     0,  1497,   782,
    1710,  1286,  1330,  3020,  3021,  3025,  1448,  2310,     0,     0,
    1361,  1366,  1359,  1363,  3024,     0,     0,     0,     0,  1380,
    1379,     0,     0,     0,  3024,  1786,  1383,  1801,     0,     0,
    1571,  1572,  1646,     0,  1916,  2825,  1926,     0,  1976,     0,
       0,  1135,  1134,  1922,  1929,  2825,  1988,  1989,    79,    81,
    1987,    82,  2160,  2153,  2172,  2148,     0,   322,   331,   324,
     328,   329,   325,  2955,     0,  2954,     0,     0,  2873,  2932,
    2935,  2316,     0,     0,     0,  2848,  2855,  2851,  2856,  2849,
    2850,  2854,  2857,  2858,  2845,  2852,  1837,   370,  2283,  2203,
    1253,  1255,  1256,  1254,  1262,     0,     0,  2833,  2834,  2832,
    1863,  1864,  1860,  1861,  1859,  1862,  2826,  2831,   370,   385,
       0,   377,   379,     0,   390,   245,   370,   370,     0,  1230,
       0,  1339,   566,   565,   564,   563,     0,   581,   561,   569,
    2192,  2191,     0,  1237,  1240,     0,  1186,  1184,  1183,  1185,
    1174,  1180,  1181,     0,  1961,     0,     0,  2283,  1967,  1948,
    1958,     0,     0,  2187,  2185,  2180,     0,   300,  2866,     0,
       0,     0,     0,     0,     0,  2800,  2799,  2755,  2283,  2785,
       0,     0,   908,   907,   906,   904,  2814,     0,     0,     0,
    2807,  2808,     0,     0,  2782,  2783,  2784,     0,  2789,     0,
    2764,  2765,  2766,     0,  2117,     0,  2061,  2121,  2122,     0,
    2083,     0,     0,     0,     0,     0,  2082,  2052,     0,  2075,
    2033,  2118,  2051,  1779,  2110,  2048,  2049,  1161,     0,  1144,
    1717,  1693,     0,     0,  1683,  1720,     0,  1720,  1685,  1686,
    1693,     0,  1693,  1688,   370,  2290,     0,  2295,     0,     0,
       0,  3117,   142,   909,     0,   146,  2968,     0,  3091,   200,
    3096,  3082,     0,     0,     0,     0,     0,     0,     0,   151,
     660,  2326,  1908,  1905,     0,  1897,  1899,  1900,  2333,  1902,
       0,  2825,     0,  1889,  1309,  1314,  3001,     0,     0,  1782,
    1837,  1829,  1339,  1340,  1340,  2303,  3014,  3013,  3003,  3008,
    1330,  1301,  1300,     0,     0,  1021,   205,   208,   206,     0,
     207,     0,     0,   508,   507,     0,  2108,   501,     0,     0,
       0,     0,     0,     0,     0,     0,   169,     0,     0,  2108,
     481,   460,   461,   464,   465,   466,   909,     0,  2942,  2943,
       0,     0,     0,  2960,  2958,     0,  2959,  2957,  2925,  2939,
       0,  1038,  3062,     0,  1041,  1043,  1191,     0,   279,   278,
       0,   267,   251,     0,   348,   262,   347,   424,     0,   250,
       0,  1739,   222,   370,     0,   405,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1228,     0,     0,     0,     0,  2108,   490,     0,  1975,
     450,   467,   468,   471,   472,   473,   474,   475,   478,   476,
     477,  1935,  2019,  1693,  1779,  2317,  1779,     0,  2018,     0,
       0,  1576,  1629,     0,  1657,     0,  1451,   865,   865,   865,
    1643,   850,   869,  1636,   865,  1637,   865,  1639,     0,  1634,
    1635,     0,     0,  1416,  1435,     0,     0,     0,     0,     0,
    1583,  1580,     0,     0,     0,     0,     0,     0,  1624,     0,
       0,     0,     0,     0,  1469,  1649,     0,  1566,  1588,  1586,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1594,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2308,     0,     0,     0,   926,   932,
     935,   936,   938,   930,     0,  1548,  1318,  1709,  3026,  1286,
       0,     0,  3018,  1330,  3022,  3012,     0,  3023,  1012,  1617,
       0,  1377,  1373,     0,  1371,  1785,  1392,  1391,     0,     0,
       0,  1381,  1803,  1802,  1340,  1562,  1339,     0,  1647,  2311,
    1914,  2879,   522,   707,  2937,  1133,     0,  2151,     0,  2146,
    2149,     0,     0,  2952,     0,  2972,     0,     0,     0,     0,
       0,     0,     0,  2843,   370,  1990,     0,  1262,  1266,  2207,
    2836,  2837,  2835,   422,   386,     0,   382,   376,   370,   416,
     416,   416,   571,     0,   580,     0,   592,     0,     0,     0,
       0,  1241,     0,  1176,  1182,     0,     0,  1981,  1965,  1969,
    1966,  2283,     0,     0,     0,  1964,  2299,  2298,  2306,   639,
       0,  1745,     0,     0,  2864,  2941,     0,     0,     0,  2753,
    2795,  2788,     0,     0,     0,     0,  2812,  2806,  2803,  2804,
       0,  2787,  2763,  2769,  2768,  2771,  2773,  1877,  1878,  1876,
    1874,  1875,  2119,  1837,  2071,  2070,  1852,  1842,     0,  1845,
    1844,  1847,  2044,  2063,  2065,  2120,  1160,     0,  1167,  1165,
    1719,     0,  3007,  1330,  1718,  1693,     0,     0,  1687,  1684,
    1721,     0,  1720,  1720,  1693,     0,  1667,  1994,  1997,     0,
    1666,  1772,     0,  2294,     0,     0,  3107,  3119,     0,   145,
       0,     0,     0,     0,     0,   178,     0,  1003,  1005,  1004,
     989,   988,     0,   137,   139,  1975,   165,  1975,  1975,  1975,
     164,   166,     0,   160,   157,  1975,   909,   152,   153,  1975,
    1975,  1975,  1975,  1975,     0,  1975,  1975,     0,  1975,  1975,
       0,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,  1975,
    1975,     0,     0,  1975,  1975,  1975,   749,   132,   537,   551,
     661,   664,   689,   690,     0,   898,  1901,     0,     0,  2302,
    1831,  1834,  1331,     0,     0,  1290,  3002,  1781,     0,  1783,
    1794,  1311,  1333,  1341,  1336,     0,     0,  1278,   706,   705,
     210,   209,   214,   215,  1881,  1882,  1879,  1880,   514,   527,
    1883,   528,   502,   173,   172,   174,   175,   177,   176,   171,
    1037,     0,   515,   516,   482,     0,   462,  1121,  1975,  1121,
       0,  1121,     0,     0,     0,     0,     0,  1121,     0,     0,
    1108,     0,  1975,  1121,     0,     0,   555,     0,     0,  1139,
       0,     0,     0,  1055,  1107,   662,  1018,  1054,  1056,  1068,
     551,     0,  1086,  1110,  1111,  1109,     0,  2946,  2948,  2931,
    2930,  2929,  2926,     0,     0,     0,     0,     0,     0,  2967,
    2969,  3064,  2981,     0,     0,   183,  1195,     0,  1194,   844,
     867,   867,   865,   793,   792,   830,   865,   801,   850,   846,
       0,   850,   850,   823,   822,   840,   826,   809,   914,   914,
     808,   843,   914,   827,   825,   829,     0,   831,   850,   836,
     824,   828,   845,     0,     0,   842,   865,   865,   865,   805,
     841,   914,     0,     0,   834,   865,   905,   850,   867,   867,
       0,     0,   865,   869,   350,     0,     0,   271,     0,   246,
       0,  1742,     0,  1743,  1740,  1741,   370,   409,   113,   117,
     109,    93,    94,    89,   121,   122,    91,    92,    97,    96,
      98,    99,   102,   103,   100,    95,   101,    90,   125,   127,
     126,   104,   123,   124,    88,   521,   520,   519,   518,   491,
       0,     0,  2108,   469,     0,  1779,  1828,  2320,  2010,     0,
    1498,  1658,     0,     0,   866,  1630,  1631,  1645,     0,  1641,
     852,   851,     0,   870,  1642,  1633,  1638,  1644,  1640,  1450,
    1471,  1521,     0,  1433,  1522,     0,  1553,  1453,  1452,     0,
       0,     0,  1504,  1505,  1532,     0,  1506,     0,  1622,  1613,
    1611,     0,     0,  1478,     0,  1535,  1480,     0,     0,  1568,
    1537,  1609,  1559,  1508,  1541,     0,  1483,  1446,     0,  1509,
       0,  1514,  1512,     0,  1487,     0,     0,  1494,     0,  1492,
       0,  1493,     0,  1495,  1545,  1547,     0,     0,   937,   923,
     924,   925,     0,   927,   929,   931,     0,     0,  3015,  1339,
    3027,  3029,     0,  3019,  1710,  3016,  3011,  1708,  1704,  1706,
       0,  1619,  1369,     0,  1378,  1375,     0,  1372,     0,  1805,
    1341,  1573,  1563,  1913,    80,     0,     0,   339,   334,   342,
     336,   338,   337,   343,   344,   345,   346,   340,   335,   341,
     333,   332,  2953,     0,  2872,  2877,  2934,  2933,  2956,  2956,
    2956,     0,   395,     0,  1945,  1257,  1262,  1266,     0,  1258,
    2218,   378,   380,   416,   430,   432,   417,   436,   434,     0,
     572,   573,   575,  1340,   589,   567,     0,   559,   562,     0,
     571,  1238,  1187,   429,  1962,  1971,     0,  1983,     0,  2283,
    1959,   545,  2283,     0,   639,     0,  1318,  1323,   555,     0,
     301,     0,  2861,  2862,  2860,  2817,  2816,  2810,  2809,  2811,
    2790,     0,     0,  2062,  1841,  1837,  2058,     0,     0,  1714,
    1772,  1698,  1699,  1701,  1330,  1712,     0,  1664,  1693,     0,
       0,  1672,  1693,  1668,  1670,     0,  1779,     0,  1737,   427,
    2296,  1339,  2875,   241,     0,   721,   722,   720,   719,     0,
     243,   203,     0,     0,     0,   135,     0,     0,     0,  1980,
    1979,     0,     0,     0,   159,   156,  1978,  1977,     0,   134,
     154,     0,     0,     0,     0,     0,  1975,     0,     0,  1975,
       0,     0,   538,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   695,   696,   694,     0,     0,   687,  1010,
       0,     0,     0,     0,   723,   724,   726,   727,   728,     0,
     750,   729,   656,   964,   964,   752,  2312,  2218,   550,   552,
     909,   665,     0,     0,  1906,  1898,  1903,     0,  1835,  1836,
    1833,  2825,  1339,  1791,  1834,     0,     0,  1317,     0,  1337,
    1345,  1344,  2300,  2305,  1315,  1280,  3004,   170,   463,  1122,
    1010,   656,  1090,  1092,   654,     0,     0,  1231,  1937,     0,
    1231,     0,  1101,  1050,  1937,     0,  1939,     0,  1937,  1937,
    1102,     0,  1051,     0,  1937,  1231,     0,   553,  1231,  1070,
    1142,  1140,  1141,     0,  1231,  1231,     0,   663,   909,  1052,
    1053,   749,  1136,  2947,  2945,  2944,     0,  2927,  2963,  2961,
    2962,  2965,  1857,     0,  2964,  2966,     0,     0,  2982,     0,
       0,     0,  1040,     0,   186,   184,   194,  1197,  1198,     0,
     868,   796,   791,   806,   804,   854,   847,     0,   854,   854,
     912,   917,   915,   913,     0,   919,   815,   830,   810,     0,
     914,   821,   814,   832,   835,   837,   839,   854,     0,     0,
     350,     0,   914,   803,   802,   812,     0,   799,   854,   891,
     848,   833,   914,   919,   914,   919,   854,   854,     0,   263,
     269,     0,   273,   349,  1071,     0,  1072,  1083,  1085,  1265,
       0,     0,     0,   114,   116,     0,   118,   120,     0,   110,
     112,   452,   517,   470,  2019,  2012,  1853,     0,  1659,     0,
       0,     0,     0,   914,     0,     0,   865,  1427,   850,  1423,
    1425,  1421,     0,   831,  1424,   865,     0,  1430,  1432,  1417,
    1418,  1419,  1420,     0,  1584,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1449,     0,  1564,     0,
       0,     0,     0,     0,     0,  1491,  1489,  1490,   921,  1550,
       0,   934,   928,   926,   933,     0,  1711,  3028,  1288,  3017,
    1318,     0,  1013,  1374,     0,     0,     0,  1807,  1574,  2152,
    2173,     0,  2970,  2970,  2970,     0,  1986,   370,   391,   394,
    1991,  1259,  1267,  2220,  2219,     0,   420,   576,     0,     0,
       0,   596,     0,   594,   570,     0,     0,     0,     0,  1984,
    1968,     0,  3007,  1960,  1963,  1318,  2308,  1330,  1319,  1330,
     644,  1339,  1690,  1746,  2863,  2770,  2772,  2064,  1166,  1168,
    1713,  1323,  1695,     0,  1703,  1702,  3025,     0,  1660,  1693,
    1693,     0,  1660,     0,     0,  1996,  1828,  1998,  1694,  1734,
    3024,   224,  3092,     0,   237,  3097,   444,   443,     0,     0,
       0,     0,     0,     0,  1871,  1870,     0,   163,   162,   158,
     155,   161,   673,   670,   682,   672,   697,     0,   685,   667,
       0,   717,   718,   716,   691,   698,   668,   669,   675,   674,
    1888,  1887,   684,   671,   714,   712,   709,   711,   710,   715,
     713,   686,   704,   677,   676,   679,   678,   681,   680,   683,
     699,     0,   751,  1011,     0,  2315,   533,   529,   749,     0,
       0,     0,   964,   745,   656,     0,   730,  1010,   965,   656,
     656,     0,     0,   531,   646,   666,   703,   702,   700,   701,
     899,  2221,  1834,  1332,     0,     0,  1892,  1894,  1792,  1793,
       0,  1788,  1790,  1784,     0,  1795,  1797,  1343,  1342,     0,
    1318,  1280,     0,     0,     0,  1231,     0,  1088,  1117,  1118,
       0,     0,     0,  1062,     0,     0,     0,  1937,     0,  1099,
       0,     0,     0,  1119,  1120,     0,     0,  1824,  1826,  1834,
       0,     0,  1105,  1078,     0,  1067,  1121,  1121,  1087,     0,
       0,  1138,  1089,  2949,  1858,  3066,     0,  3068,   193,   182,
       0,     0,  1042,  1044,     0,     0,  1045,  1203,     0,   858,
     859,   860,   816,   855,   857,     0,  1014,   818,   790,   918,
     911,   920,   916,   811,   838,   817,     0,     0,   259,     0,
     257,   266,     0,   813,   350,   254,   800,     0,   807,   794,
     795,   797,   798,   788,   789,   351,     0,   268,   284,   283,
       0,     0,  1261,     0,  1744,   370,   106,     0,   107,     0,
     105,     0,     0,  2007,  1499,   863,   861,   864,   862,  1632,
       0,  1429,  1426,   832,  1428,  1422,   914,  1525,  1502,  1503,
    1533,  1625,  1834,  1623,  1596,  1531,     0,  1479,  1565,     0,
       0,  1542,  1510,  1513,  1511,  1516,  1517,     0,  1549,     0,
    1828,  1707,  1376,  1804,     0,  1810,  1809,     0,     0,     0,
    2150,  2973,     0,  2870,  2871,  2869,  2853,     0,   370,   396,
       0,     0,   574,   577,     0,   569,     0,   593,     0,   560,
    1970,  1972,  1982,   547,   549,  1330,   642,   641,   544,   645,
     643,   542,   640,  1339,  1700,     0,  1673,     0,  1677,  1682,
    1678,     0,  1669,     0,  1853,  1738,     0,  1340,     0,   225,
       0,   227,   228,     0,  3090,   240,   238,   239,     0,   233,
     235,     0,   212,   204,     0,   370,   447,   445,   446,     0,
       0,     0,     0,     0,  1834,  1008,     0,  1873,  1872,   692,
     693,  2171,   539,     0,  3007,   660,   725,     0,   656,   960,
     961,  1010,   942,   985,  2312,  1010,  1010,   756,   746,   754,
    2314,   647,  2283,     0,  2229,  1832,  1340,  1890,  1339,  1834,
       0,     0,  2301,  1273,  1330,  1319,  1330,     0,  1274,  1315,
       0,  1073,     0,     0,     0,  1061,     0,  1217,  1066,   905,
    1097,     0,  1057,  1100,  1133,     0,  1136,  1059,     0,  1827,
     554,  1058,  1080,  1064,  1091,  1137,  3065,     0,  3063,  2283,
     180,   185,   195,   196,  1031,     0,  1204,  1200,  1201,  1196,
     856,   914,     0,   350,   258,   261,     0,   914,   264,     0,
       0,   292,   290,   370,   280,   288,   282,     0,   289,     0,
     275,  1084,   370,   115,   119,   111,     0,  1854,  2013,     0,
    1431,     0,  1627,     0,  1567,  1569,   922,     0,  1837,  1806,
    1800,     0,     0,     0,     0,     0,     0,  1819,  1811,     0,
       0,     0,  2977,  2971,  2975,  1985,     0,     0,  1339,   582,
       0,   599,   598,   595,   638,  3001,  1715,  1772,     0,     0,
       0,     0,     0,  1995,  1726,  1727,     0,     0,  1732,  1736,
       0,   242,     0,     0,     0,   229,  3093,   244,   237,   236,
     213,  3098,  1339,   191,     0,     0,  2825,     0,  1007,     0,
    2825,     0,   534,   536,   551,     0,  1010,   985,  2312,     0,
     946,     0,   731,     0,   735,   737,   758,   753,   747,   871,
       0,   541,     0,     0,     0,     0,  2222,  2224,     0,  1907,
    1895,  1893,  1789,  1798,  1796,  1294,  1313,  1292,  1282,  1275,
    1276,  1318,     0,  1075,   655,  1104,     0,  1136,  1063,  1106,
    1098,  1096,     0,  1095,  1231,  1825,  1079,  1081,  1179,  3067,
       0,   187,  1046,   370,  1199,     0,  1206,   819,  1015,   265,
     260,   820,   255,   849,     0,   270,   291,   274,   276,   272,
    1855,     0,  1339,  2008,   853,  1834,  1477,  1551,  1330,     0,
    1816,     0,     0,  1814,  1813,     0,  1808,  1815,  2174,  2976,
    2974,     0,  1688,     0,   590,     0,   604,     0,   625,   543,
    1318,  1696,  1674,     0,  1679,     0,  1671,  1722,  1722,  1733,
    2292,   226,   231,     0,   203,   234,  3083,   183,   192,     0,
    2825,   975,  1834,     0,   977,   688,  2218,   748,   743,   739,
       0,     0,   945,     0,   950,   986,     0,   733,     0,     0,
       0,   940,   884,   757,   759,   761,     0,     0,     0,   878,
       0,     0,     0,   875,     0,     0,   755,     0,   762,   872,
     874,   881,  2313,     0,     0,     0,     0,  2223,     0,     0,
    2230,  2232,  3001,  1330,  1303,  1302,     0,     0,     0,  1074,
       0,     0,     0,  3024,   786,   787,  1103,   784,   785,  1094,
     555,  1060,     0,  1065,  1315,  1283,  3074,     0,   189,   197,
    1205,  1210,     0,  1207,  1209,     0,   281,  2283,  1856,  2014,
    1626,  1287,  1817,     0,  1818,     0,  1821,     0,  1822,  1992,
    2000,     0,  2208,  1340,     0,   583,     0,   586,   588,   602,
       0,  1975,  1975,     0,     0,  1975,  1975,  1975,  1975,   618,
     626,   628,     0,  1716,     0,     0,     0,  1730,  1728,   230,
       0,  3094,     0,   194,     0,   973,     0,  1975,     0,  1112,
     976,  1001,   983,     0,  1006,  1009,  1112,   978,  1000,   981,
     530,     0,     0,   741,   943,     0,   947,   948,   949,     0,
     941,     0,     0,     0,     0,   886,   885,   760,   883,   882,
       0,   880,   876,   766,     0,     0,     0,   873,  2227,  2228,
       0,  2225,     0,     0,  2231,  1293,  1281,  1093,  1077,     0,
       0,  2264,  2263,     0,  1069,     0,  1318,  1283,     0,     0,
       0,  3069,   188,     0,   181,  1202,     0,   256,   277,  1812,
    1820,  1823,     0,     0,   898,     0,   591,   584,     0,     0,
     600,     0,     0,  1975,  1975,     0,     0,     0,     0,     0,
     597,   627,  1975,  1676,  1681,     0,  1723,     0,     0,     0,
       0,     0,     0,     0,   168,     0,     0,  1112,   974,   999,
     998,   979,   993,     0,     0,   138,  1114,  1113,   984,     0,
     140,   982,     0,     0,     0,   944,     0,     0,     0,     0,
       0,     0,   890,   889,   887,   888,  1346,   879,   763,  2226,
    2234,  2233,  1076,     0,   783,     0,  3070,  1319,  1330,  1330,
       0,  3071,  1315,     0,     0,     0,   190,  1208,  1999,  2001,
    2209,   578,   590,   587,   611,   603,   607,     0,   637,   631,
       0,     0,   633,   634,   632,   629,   622,     0,   620,     0,
    1725,  1724,  1739,     0,   252,  3095,  1339,   196,   991,   990,
     136,   980,   992,  1002,  1116,  1115,   997,   996,   994,   995,
       0,     0,     0,   956,     0,   955,     0,   952,   951,   973,
       0,   975,   977,     0,   877,   767,     0,     0,  1330,  1295,
    1298,  1285,  3012,  3073,  3072,  1318,     0,  3075,     0,  2235,
     585,   611,     0,   609,     0,   605,   601,   606,   635,   636,
       0,   619,     0,   630,     0,     0,     0,  3084,   179,     0,
     973,     0,   958,   959,   957,     0,     0,   732,   973,   736,
     738,  1347,     0,   769,   770,   768,   771,     0,  1082,  1299,
       0,  3005,  1330,  1319,  1304,  1305,  3076,  3077,     0,  2221,
     608,     0,   616,   612,   614,   617,   625,   624,   621,  1731,
    1729,   253,     0,   744,   740,   973,     0,     0,   734,  1348,
       0,   775,   764,   772,   774,  1297,     0,  1284,  1306,     0,
    2229,   610,     0,     0,   623,     0,   742,   954,   953,   777,
     776,   773,  3006,     0,  2237,   615,   613,  3085,  2236,     0,
    2241,  3080,     0,     0,  2248,  3078,  3079,     0,  3086,  2239,
    2240,  2238,  2243,     0,     0,  2245,  2246,     0,  2210,  3081,
     370,  2247,  2242,     0,  2249,  2251,     0,  3087,  2244,     0,
    1339,  2250,     0,  1340,  2252
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    63,   672,  1680,    64,    65,    66,    67,    68,   927,
     928,    69,   929,  1420,  1423,  2044,  2638,  2639,    70,   611,
      71,  1793,  2433,  2434,  4048,  4049,  4042,  4043,  4045,  4046,
    2435,   737,   738,    72,  2850,  2849,  4211,  3816,  3817,  2283,
     680,   681,  3306,  3307,  3308,  1149,  2843,  2905,  2906,  1689,
    3813,  3972,  4791,  3976,  4938,  5064,  4857,  2934,  4366,  4792,
    4793,   606,  2838,  1755,  4205,  2348,  4533,  2349,    73,   730,
    1206,  1786,  1787,  4518,  4519,  4520,  4521,  4528,  4529,  4530,
    4531,  3804,  4201,  3811,  4204,  2389,   991,  1779,  2390,  4989,
    4394,  4387,  4388,  4389,  4010,  2940,  2941,  2942,  4406,  4032,
    4411,  4808,  4809,  4947,  2943,  4643,  4644,  4645,  4408,  1037,
    4646,    74,   637,   638,  1039,  1548,  2059,  1549,    75,    76,
     605,  1446,  1447,  1448,  1449,  2652,  2060,  2647,  2648,  3700,
    4395,  2945,  4029,   992,   993,   994,    78,   612,   995,   996,
     997,  1503,   998,   999,  2701,  2702,  3165,  2703,  2115,  1000,
    1001,  1002,  1003,  1508,   970,   971,  2677,  3712,  4139,    79,
     574,   733,   734,  1792,  2407,   735,  2408,  2954,  4041,   736,
    1208,  2404,  1210,  3724,  1004,  1005,  2120,  1006,  1495,    80,
    1199,  1007,  1123,  2275,  1026,  2139,  3725,  1008,  2706,  2708,
    2707,    81,   622,   659,   632,  4208,  4539,   708,   709,   748,
    2456,   710,  1224,  1173,  1757,  2373,  2374,  2911,  2912,  2990,
    2991,  2992,  2365,  2366,  2367,  2445,  2446,  2447,  2355,  2356,
    2357,  1761,  2352,  2353,   711,  1174,  1184,  2368,  2369,  2370,
    2996,  2449,  2450,  2451,  2452,  2371,  2035,  2372,  3378,  3337,
    4555,  4553,  4554,  3338,  4283,  2738,  4695,  4161,  4162,  3877,
    3878,  3879,  4340,  2396,    82,   625,  1015,  1513,  2128,  3177,
    2129,  3179,  3729,  3730,  3731,  2712,  2713,  4689,  2717,  3176,
    4834,  5162,  4966,  4967,  3733,  4965,  3737,  4152,  4153,  4486,
    4691,  4838,  5167,  5079,  5236,  5165,  5232,  5166,  5234,  5313,
    5283,  5284,  5090,  5177,  5178,  5240,  5286,  4979,  4980,  4981,
    3192,  3756,  3757,  4495,  4167,  4498,  4572,  2832,  1747,  1748,
    4317,  1141,    83,  3339,  3424,  3340,  3341,  4261,  3342,  3343,
    3132,  1607,  4251,  4234,  3809,  3863,  3864,  3865,  3866,  3867,
    4876,  5022,  4878,  4879,  5012,  5124,  5011,  3868,  4747,  4273,
    3869,  3870,  3871,  4281,  4568,  4749,  4746,  4883,  4884,  4896,
    5215,  4897,  5266,  5302,  5303,  5304,    84,   624,  1355,  4924,
    4925,  4926,  3506,  3507,  3508,  3509,  3510,  3511,  3512,  3513,
    4398,  3579,  3580,  4372,  4373,  4374,  3574,  3575,  3981,  3584,
    4898,  4899,  4900,  4901,  3514,  3994,  1570,  1571,  3884,  1583,
    1584,  2763,  2168,  2764,  1751,  3995,  3996,  4382,  3647,  4457,
    3653,  3654,  3655,  3088,  3089,  3090,  3091,  3092,  2587,  4886,
    4276,  4740,  4871,  4874,  5020,  5207,  4274,  3872,  4279,  1100,
     682,  3873,  3874,  5107,  4999,  5006,  5108,  5007,  5000,  4742,
    2846,  5109,  5110,  5111,  5009,  5002,  3290,  4543,  4544,  4262,
    3671,  4375,    85,   143,  2916,  1165,  1176,  1172,  1196,   716,
    2384,  1177,  2935,  3455,  4624,   697,  3426,  4784,  4597,  4788,
    3427,  4035,  3428,  4773,  4919,  3429,  4612,  4786,  4932,  4036,
    4037,  3430,  3431,  3432,  5115,  5116,  5117,  3914,  1483,   713,
     714,  1188,  1189,  1190,  2633,  4352,  3943,    86,  2260,  2255,
      87,  1113,  1114,  1115,  1655,  1656,  2258,  2259,  2809,  3249,
      88,   740,  1797,  1523,  2137,    89,  1024,  2730,  2731,  2732,
    3183,    90,  1198,  1776,  1777,  2387,  3458,  3979,  4367,  4629,
    4796,  4625,  4942,  4943,    91,   742,  1217,    92,   579,  1805,
    1806,  1807,  2438,    93,  1512,   152,    94,  1023,  1516,  1519,
    1520,    95,   729,  1200,  1201,  1202,  1203,  2392,    96,  2102,
    2680,  2681,  2682,  2683,  1783,  2950,  1784,  1785,  2401,  3719,
      97,   695,  3906,  1160,  1161,  4312,  4313,  5058,  5059,  3100,
    3101,  1719,  2866,  4583,  4912,  5146,  5270,  2880,  4913,  5272,
    1720,  1721,  1157,  1158,  2320,  1723,  1724,  2301,  1739,  1740,
    1741,  4499,  2323,  2324,  1652,  2325,  3363,  3899,  5214,  1261,
    1257,   885,   886,   887,   888,  1367,  1368,  4887,   889,  1377,
    1995,  3593,  4079,  4080,  4081,  4082,  4436,  1840,  1841,   890,
     891,   892,   893,   894,   895,   896,  2026,  3618,  3619,  4098,
    2619,  2620,  2621,   897,  2494,  3599,  2510,   898,   899,   900,
    4304,   901,  1361,  1981,  1901,  4090,  3608,  4441,  1825,  2470,
    3028,  4063,  3029,  3030,  3127,  2589,  1290,  1291,  1241,  2477,
    1831,  2266,  2267,  2268,  2269,  2270,  4193,  4194,  4698,  4507,
    4700,  4511,  2819,  2820,  2143,  2144,  2271,  2272,  2273,  2274,
    3251,  4183,  3667,  4121,  3104,  3096,  3097,  3098,  3252,  3253,
    4180,  4181,  4840,  2810,  3255,  3779,  3261,  4987,  4707,  4708,
    5099,  5098,  4709,  4515,  4516,  4198,  4199,  3522,  3523,  3524,
    3200,  1890,  1891,  1899,  1476,  1477,  1826,  2318,  2867,  3360,
    3895,  2609,  2869,  3893,  4301,  3897,  4305,  4306,  2023,  2617,
    3122,  3679,  4127,  4467,  4468,  4677,  4820,  4821,  4826,  3435,
    4337,  4338,  2870,  1725,  2860,  3350,  3890,  1610,  1611,  1726,
    2222,  3236,  3237,  4423,  3964,  4241,  3093,  4217,  3232,  3379,
    1859,  1860,  4242,  2313,  3354,  4295,  4296,  4297,  2305,  2306,
    2855,  2856,  2857,  1727,  2307,  3345,  4291,    98,   586,    99,
    2042,  1417,  2041,  2644,  1215,  1527,  1812,  1813,   916,   144,
     600,   100,   613,  2678,   101,   633,  2141,   975,  1029,  1528,
    1529,  2739,  3186,  3193,  2740,  3188,  3744,  3745,  2628,  2629,
    3828,  3821,  3189,  3747,  4158,  4135,  2641,  3714,  4480,   102,
     657,  3796,  3267,  3268,  4959,  4960,  1030,   103,   585,  1228,
    3004,  4658,  1818,  2458,  4813,  1229,  1230,  2461,   753,   754,
     104,  1118,   653,  1634,  1635,  1636,  2242,   105,   645,  1101,
    3233,  3775,  2216,  1019,  1414,  1615,  1104,  1616,  2200,  2786,
    1594,   106,  1156,  1155,   726,   107,   108,   689,   153,  1713,
     109,   930,  1439,  2055,  3139,  3140,  3685,  1440,  1441,  2645,
    4470,   110,   634,  1034,  1035,  1533,  1531,  2745,  2146,   111,
     627,  1020,  2132,   112,   616,   980,  1487,  2101,   113,   114,
     115,   982,  3720,  5074,  5229,   620,  2104,  1491,  4284,  4574,
    4756,  4757,  4759,  4910,  4911,  5279,  5330,  5341,  5334,  5344,
    5345,  5348,  5354,  5355,   903,  1130,  1131,   904,  4928,   905,
     906,   907,   116,   117,  1125,   661,  1667,  1668,  2828,  2278,
    2826,  1669,  3195,  3196,  3351,   908,  3197,  1967,   909,  4263,
    1216,  1815,   609,   570,   705,  1132,  2852,   911,  2226,  1010,
    1168,  1517,  1768,  1769,   572,   573,   118,   644,  1049,  2163,
    1560,  1063,  1589,  1578,  1588,  2194,  2781,  2197,  2782,  2783,
    3771,  3224,  3772,  3225,  1107,  2184,  1561,  3226,  1562,  2177,
    2178,  2179,  2180,  3217,  1576,  2174,  2192,   119,   983,  2109,
     578,  1493,  1494,  2689,   120,   656,   121,  1478,  2092,  2093,
    2674,  3152,  2675,   122,  1043,  1044,   123,   958,  2835,  2658,
    2031,  1171,  2032,  2078,   961,  1452,   962,   963,  1467,  1461,
    1470,  1464,  3443,  2927,  2928,  2662,  2039,  1770,  2155,  2920,
    3956,  1771,  2069,  2654,  2655,  2380,  4682,  3450,  2931,  4473,
    3704,  4683,  4684,   124,   157,   125,  4534,   581,   745,  1223,
    1556,   126,   127,   128,   129,  2331,  3355,  3356,  3366,  5223,
    5306,  2333,  2334,  1728,  3106,  2878,  2592,  2593,  2594,  2595,
    1357,  1358,  3107,  3659,  3660,  1742,  1144,  1700,  1691,   145,
     146,   147,   148,  1193,  1194,  3451,  3967,  4356,  4618,  4619,
    4936,  5061,  5337,  5338,  1693,  3284,  4992,  5292,  5331,  5350,
    1694,  1695,  1696,  3281,  4523,  4854,  5101,  1697,  3283,  4535,
     130,  1133,   669,  1678,  1673,  1675,  2281,  2831,   131,   132,
     133
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -4590
static const int yypact[] =
{
    7259,  2269,  1834,    71,  -133,   238, 65708, -4590,   807,  1389,
   -4590,   609,    51, -4590, -4590, -4590, -4590, -4590,  3524, -4590,
   66397,   771,  1220, -4590, 34680, -4590, -4590, -4590,   826, -4590,
     119,  1389, -4590,   771, -4590, -4590, 65708, -4590,   969,  -138,
     771, -4590, -4590, -4590, 57440, -4590,   609, 65708,   900, -4590,
   -4590, 57440,   294,   293,   893,  1192, -4590, -4590, 65708, -4590,
    1078,  1089, -4590,  1566,  1473, -4590, -4590,  1238, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590,  3560, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, 35374, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590,  -152, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590,  1048, 65708,  1120, 65708,  1661,  1676,
   65708, 55373, 65708, -4590,  1380,  1697, -4590, -4590,  1920,  1386,
   -4590, -4590,  1389,  1161, -4590, -4590,  2083,   609, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590,  1372, -4590, -4590,  1418,  -133, -4590, -4590, -4590,  1649,
   -4590,  2100,  1931,  1638, 65708,   127, 14313,  1897,  1897,  1897,
    1935,  1971,  1897,  1897,  1897, 65708, -4590,  1897,  1897,  1897,
    1515,   304, -4590, -4590, -4590,  2056, 42971, 65708,  1800,   216,
     -97, 55373, -4590,  1585, 65708,  -133,    97, -4590,  1981, -4590,
   -4590, -4590, 74665,  1389, 14313,  2205,  2050,   298, 65708, -4590,
   -4590, -4590, 74665,   944,  1391,  1626, -4590, -4590,  1767, -4590,
   43660,   184, -4590, -4590, 22864,  8328,  1767,  1707,  -133,  -107,
    1760,  -133, -4590, -4590, 65708,  -133,  1389,  2029, -4590, 14313,
   -4590, -4590, -4590,   301,   301,   301, -4590,   301, -4590,   301,
   -4590, -4590,  1634, 65708,  2078, -4590,  2078, -4590, -4590,  2078,
     385,  1829,  2123,  2130,  2139,  1278,   961,  1386,  2153, -4590,
   -4590, -4590,  1682, -4590,  1694, -4590,  1271, -4590,  1747, 48483,
   -4590, -4590, 65708, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590,  1396, -4590,  1808,   139, -4590,  1836,  2228, -4590, 55373,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, 34680,
    1709, 65708, -4590,  2273, 14313,  1418, -4590,  1812, -4590, -4590,
   34680, -4590, -4590, 34680,  1029,    35, 65708, -4590, -4590,  2440,
   -4590, -4590, -4590, 58129,   127,  1743,  1746,  1751, 19311, -4590,
    1770,  1777,  1779, 14313,  1807,  1816,  1828,  1850,  1852,  1875,
    1885,  1888,  1899,  1917,  1921,  1925,  1953,  1955,  1957,  1957,
    1957,  1974,  1977,  1982,  1999,  -164,  2004, -4590,  2007,  2010,
    2014,  2018,  2031, -4590,  2033, -4590,  2036,  2081,  2095,  2112,
    2120,  2129, -4590, -4590,  2134,  2136,  2149, 15027,  2166,  2172,
    2184,  2187, -4590, 31205,  2189,  2196,  2208,  2250,  2252,  2260,
    2262,  2265,  2300, -4590,  1793,  2303, -4590, 14313,  1974,  2305,
   -4590, -4590,  2331,  2333, -4590,  2343,  2349,  2355,  2362,  2366,
    1845,  2382,  2385,  2387,  2390,  2392,  2397,  2403,  2407,  2421,
    2423,  2452,  2455,  2468,  2473,  2480,  1974, -4590,   434,  2485,
    2489,   821,  2494, -4590,  2516, -4590,   317,  2524,  1957,  1974,
    1974,  2531,  2535,  2542,  2544,  2554,  2560, 19311, 19311, 19311,
   14313, -4590, 65708, 65708, -4590,  1433,  3045, -4590,  3553, 19311,
   -4590,   226, -4590, -4590, -4590, -4590, -4590,  2085, -4590,  2117,
   -4590, -4590,  1988,  2023, -4590, -4590, -4590, -4590, -4590, -4590,
    2566,  1924, 65708, 65708, 65708,  2457, 65708, 65708, 65708, -4590,
   55373,  2150, 65708, -4590, -4590,  1897,  1897, -4590, 14313,  1983,
    4444, 27036,  2294,  2275,  1274,  1957, -4590, -4590,  -114,   676,
     680,  2371, -4590, -4590,  2191,   780,  2415, -4590,   818,   361,
   -4590,   105,   904,   952, -4590, -4590, -4590, -4590, -4590, -4590,
    2246,  2676,  2268, -4590, -4590,   174, -4590, -4590, 65708, -4590,
    2719, 14313, -4590, -4590, -4590,  2934,  2648, -4590, -4590, -4590,
     200,  3197,   300, 34680,    71, 65708, 58818, 76732, 76732, 65708,
   -4590, 69842, -4590,  2580, -4590, -4590,  8336, -4590, -4590, -4590,
   -4590, 65708, -4590, -4590,  3248, -4590, -4590, -4590, -4590, -4590,
    2586, -4590, -4590,  1433, -4590, -4590, -4590, -4590, -4590,  2998,
   -4590, -4590, 51928, 34680,  1687, 75354, -4590, -4590, -4590, 31899,
   -4590, -4590,  3258, -4590,  2604, -4590, -4590,  2023,  4064, -4590,
    2902,  2294,  2914, -4590,  3118, -4590,  2923,  2813,    35, 59507,
     978,  2807,  -100,  1285,  1377, 42279,    33, 55373,  1378,    89,
   23559, 49172,  1490, -4590, -4590, -4590,  2798, -4590,  3176, -4590,
     419, -4590,  2650,  3063,   419, 52617,  3059,   244, -4590,   182,
   -4590,  3163, -4590, -4590, -4590, -4590,  2790,  2774,  2817, -4590,
     383,  2626, -4590,  -133, -4590,  1171, -4590,  2800,  3059,   419,
     244, -4590,  3077,  3218,   376,  3180, -4590,   606, -4590, -4590,
   -4590,   997,  3303, -4590,  2691, -4590, -4590, -4590, 34680, -4590,
   -4590, -4590,  2934, -4590,   314, 65708, -4590, -4590, -4590, -4590,
    2694, -4590, -4590,  2988,  2804, -4590, -4590,    82,  3237, -4590,
      71, 65708, -4590, -4590, -4590,   634,  2477,  1920,  2078, -4590,
    2078,  2078,  2078,  2078,  2078,  1161, 49861,  1902,  2584,  1694,
    2697,  2877, -4590, -4590, -4590,  3278,  3301,  1957,  2706, -4590,
   -4590, -4590, -4590, -4590,  3421, -4590, -4590,  3022,  3319,  3319,
    3319,  3437, -4590, -4590, -4590, 34680, -4590, -4590, -4590,   139,
   -4590, 48483,  2910,  2769, -4590, 65708,  1836, -4590, 34680, -4590,
    3177,  2735, -4590, -4590,  3014, 14313, -4590, -4590, 14313, 74665,
    3283,  1433, -4590, -4590,   254, -4590, -4590, 34680,   208, -4590,
    3394,  2965, -4590, -4590, -4590,  3421,  3319, 34680, -4590,  2744,
   -4590,  2741, -4590, 14313, 14313,  1644,  3388,  3450,  3450,  3450,
    1433,  2784, 14313, 14313, 14313, 14313, 14313, 14313, 14313, 14313,
   14313, 14313, 14313, 14313,  1666,  2755,  2756, -4590, -4590, -4590,
     943, -4590,  2757, 14313, 14313, -4590, 14313, 14313, 14313, 36068,
    2758, -4590,  3940, 14313, 14313, 14313,  1030,  3330, 14313, 14313,
   14313, 14313, 14313, 14313,  3863, 14313, 34680, 14313, 14313, 36068,
    3460,  2771, -4590,  2770,  1675, 14313, 14313,  1678, 14313, 14313,
   14313, 14313, 14313,  3279, 34680, -4590, -4590, 14313, 14313, 14313,
   14313,  2780, 14313, 14313, 19311,  3286, 14313,  2789, 14313, 14313,
   14313, 14313, 14313,  2792,  2793, 14313,  3450,  3450, 14313, 14313,
    1748, -4590, -4590, 14313,  3084,  3084, -4590, 14313, 10029, 14313,
   -4590, -4590,  2796, -4590, -4590, -4590, 36068,  3450,  3450, 14313,
   14313, 14313,  3388,  3388,  3388,  2797,   272, -4590,  2825, 14313,
    2794, 24254, -4590, -4590, -4590, -4590, 14313, 14313, 14313, 19311,
   -4590,  2460, -4590, -4590, -4590, -4590, -4590, 15741, 19311, 19311,
    2805, 19311, 19311, 19311, 19311, 19311,  3203, 19311, 19311, 20025,
   20739, 19311, 19311, 19311, 19311,  1059,  3388, 55373, 19311, 38834,
   14313, -4590, -4590, 65708, -4590, -4590,  2799, -4590,  3107,  2150,
   -4590, 53306, -4590,   -85,  3347, -4590, 51928, 34680, -4590, -4590,
    1983,  1433, -4590, -4590,  3212, -4590,  3216,  3217,  3220, -4590,
   -4590, -4590, -4590,  3479,  3225, -4590,  -133,  3228, -4590, -4590,
    2828, -4590, -4590, -4590, 22167, 55373, -4590,  2829, -4590,  2847,
   -4590, -4590, -4590, -4590, -4590, -4590,  2942, -4590, -4590, -4590,
   -4590,  2846, -4590, 51928,  2846, -4590, -4590,  2846, -4590, -4590,
    2846, 48483,   122,  4132, -4590, -4590, 65708, -4590, 67086, -4590,
    3307,   418, -4590, 31899,  -133, -4590,  3305, 16455, -4590, -4590,
   -4590,  3255,   330,   756, -4590, -4590, -4590, 65708,  3348,  3293,
   -4590, -4590,  2853, 14313,  3257,  2860, -4590, -4590,  2866, -4590,
   -4590,   -12, 34680,  1483, -4590,   167,  2867, -4590,  2956,  2871,
   -4590,   590, -4590, -4590, 34680,  2868, 34680, -4590, -4590, -4590,
    3150,  2963, -4590,  -133,  1391, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,  2878,  2893,
    3383,  2884, 51928, 48483,   854, -4590, 65708, -4590,  2883,  2894,
    2898, -4590,  -150, -4590, 53306, 65708, -4590, -4590, -4590, -4590,
   -4590,  3542, 14313, -4590, 51928, -4590,   -52, -4590,   107,  1210,
    -150, -4590, -4590, -4590, -4590, -4590, 65708, 10743, 60196,  2907,
    3036,  3361, -4590, -4590, -4590,  2930,  2078, 65708, 65708, 65708,
   34680, 34680, 65708, 51928, 34680, -4590,   999,   999, -4590, -4590,
   -4590, 47105, -4590, -4590, -4590,   419, 65708, 65708,   419, 48483,
   -4590,   244,   804, 65708,   419, -4590,  3371,  3048, -4590, -4590,
   -4590,  3455, -4590, -4590,  3443,  2947, -4590,  3475, -4590, -4590,
    3080,   244, -4590, -4590, 34680, -4590, -4590,   244, -4590,   244,
     244, 14313,   419,   419,   419, -4590,   -48, -4590, -4590, -4590,
    3111,  -107, -4590, -4590,   590,   488, -4590,  2960, -4590,  2967,
   -4590,   301,  3231, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590,  3487, -4590, 53306, 48483,  3463,  2078,  2078, -4590, -4590,
    3507, -4590, -4590, -4590, -4590, -4590, -4590, -4590,  2078, -4590,
   -4590, -4590, -4590, -4590, -4590,  1836, 55373, 65708, 65708, 65708,
   34680, 34680, -4590, -4590, -4590, -4590,   234,   186,  3640, -4590,
     215, -4590,   129,   215,  3010,  3059, -4590,  3480, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,  2987,
    2584, -4590, -4590,  2985,  1102, -4590, -4590,   135, -4590, -4590,
   -4590,  2508,  3552, -4590, 55373,  2841,   -77,  1055,  2841,  2990,
    -133,   806, -4590,   806, -4590,   590, -4590,  3454, -4590,  3458,
    -147, -4590,   262,  2078, -4590, -4590,  2991, -4590,  3266,  3575,
   60885, 34680, -4590, -4590, -4590,   214,  2999,  3000,  1433,  1433,
   70531,  3657,  3034,  4824, -4590, -4590, 34680, -4590,   278, -4590,
   -4590, -4590,  3060, -4590, -4590, -4590, -4590,  2088, -4590, -4590,
    2984,  3058,  3007, -4590,  3150, -4590,  1625, 65708,  3511, 39523,
   -4590,   394,   586, -4590,  3450,  3017, -4590,  3018,  3021,  3024,
   14313,    73,   420,   791,  1720,  1223,  1519,   578,  1702,   614,
   -4590,  1613,   836,   925,   968,   205, -4590,  3028,  3020, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,  3030, -4590,
   -4590, -4590,   981,  1023,  1802,  1813,  1039,  3031, -4590,  3035,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
    3520, -4590,  1843,  1086,  1672, -4590, -4590, -4590, -4590,  3038,
   -4590, -4590,   241,   281,  1855,  1104,  1202,  1275,  3047,  1908,
    3040,  3049,  1277,  1718,  1831,  3057, 36068, 65708,  3450,  3061,
    1919,  1927,  3450,  3062,  1293,  1929,  1835,  1857,  1895, 34680,
    3066,  1933,  1299,  1943,  1967, -4590,  1303,  1937,  2900, 34680,
    1990, -4590,  1305,  1336,  1992,  1362,  1429, -4590, -4590,  1996,
    3067,  3072,  1472,   258,  3450,  3073,   310,  3046,  3056,  2002,
   11457, 12171, 12885,  1622,  1481, -4590,  3074, -4590, -4590,  3052,
    3075,  3076,   384,   193,  2022, -4590, 14313,  -113,   187, 65708,
    1210, -4590,  3247,  2270,   190, -4590, -4590, -4590, -4590, -4590,
   -4590,  1173, -4590,  3064, -4590,  3081,  2729,  3085, 14313,  1315,
    3085,  3485,  2713,  2713, 19311,  3413,  2978, 15027,  1032, 15027,
    1032,  3085,  3085,  3085, -4590, 19311,  3082, 19311, 19311, -4590,
    3388, -4590, -4590, -4590, -4590,  1433,  3083,   327, 65708, 34680,
     -85,  3086, -4590, -4590, -4590, -4590, -4590,  -150, -4590,  3087,
     147, 34680, 34680, -4590, 13599, -4590, -4590, -4590, -4590, -4590,
    -133, -4590, -4590,  4468, -4590, 34680,  3157,  3181,  3183, -4590,
   28428, -4590, -4590, -4590, -4590, 28428,  1289, -4590, 65708, -4590,
    3174, -4590, -4590, -4590,  -220, 32593, 32593, -4590, 32593, -4590,
   -4590, -4590, -4590, -4590,   361, -4590, -4590, -4590, -4590,   351,
     400,  3327,  3010, -4590, -4590, -4590, -4590, -4590, -4590, 38145,
    1433, -4590, 34680, -4590,  3543,   -25, -4590,  1204, 34680, -4590,
    3575,  3534, 65708, -4590, -4590, -4590,  1433, -4590, -4590, 65708,
   -4590, -4590, -4590, -4590,   797, -4590,   114,   114,  3367,  1673,
   14313,  -133, -4590, 51928, 51928, 34680,  3185, 34680,    61, 14313,
   -4590,  2073,  3097, -4590, -4590,  1204, -4590,  3801, -4590,  4064,
   22167, 53306,  3589,  3604, -4590,  3108, 32593, 32593, 32593, -4590,
   65708, 65708, 59507,  3611, 10743,  3612,  -150, 53995, -4590,  1433,
    -150,  3113,  3114, -4590, -4590,  3530,  1113, -4590,  3116,  3117,
   -4590,  3120,  3122,  3124, 59507, 14313,  -150, -4590, 19311,  2010,
   -4590,  1433, -4590,   107, -4590, -4590, -4590, -4590, -4590,  -133,
    3617,  -133, 14313,  3136, 65708, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
    3648, -4590,  3314,   -98, -4590, -4590,  3132, -4590, -4590, -4590,
   -4590, -4590, -4590,   419, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590,  3384,  3059,  2626,  3361, -4590,   419,   244, 34680,   419,
     419,  1433, -4590, -4590, -4590, -4590, -4590, -4590,  3144, -4590,
    3204, -4590, -4590, -4590, -4590, 65708,  3704,  3320, -4590,  3149,
   -4590, -4590, -4590, 34680, -4590, 74665, 65708, 65708, -4590,  3151,
   -4590,  3654, -4590,   148,  -219,  -147,  2078, -4590, 65708, 65708,
    2078,  2078, 65708, -4590, -4590,  -178,  3457,  3461, -4590, -4590,
   -4590, -4590, -4590,  3251,  3251, -4590, 24949, -4590, -4590,  3215,
    3596, -4590, 65708, -4590, -4590,   113, -4590, -4590,  3642, -4590,
   -4590,  3452, -4590,  3161, -4590, 14313, -4590, -4590, -4590, -4590,
   -4590,  1788, -4590, -4590,   120,  1902, -4590,  -150,  -150,  3499,
   -4590,  -133,  3304,  3309,  3313,  3317,  3324,  3356, -4590, -4590,
    -133,  -133, -4590, -4590,  -150, -4590,  2285, -4590, -4590, -4590,
   -4590,  1361, -4590,  -150,  -150, -4590,   482, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590,   270, -4590, -4590,   220,   197, 48483,
    3195, -4590, -4590, 34680,  3484, 34680,  3691, -4590, 56062, 71220,
    3186, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
    3193, -4590, -4590, 14313,  3288, -4590, -4590,  3034, -4590,  3209,
    3219,  3223,  3226,  3230,  3235,  3240,  3249,  3252,  3253,  3254,
    3259,  3263,  3264,  3265,  3270,  3271,  3273,  3276,  3277,  3281,
    3282,  3285,  3289,  3200, -4590, -4590, -4590,  3260, -4590, -4590,
   -4590,  -150,  -150,  -150,  -150, -4590,  2717, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590,  3614,  2806, 65708,  3295, -4590,
   39523, -4590, -4590,   488, -4590,  3229, 17169, -4590,  3238, -4590,
   14313, -4590, -4590, -4590,   954, 14313, 14313,  3785,  3214, -4590,
   54684, -4590, -4590, -4590, 14313, -4590, 14313, -4590, 14313, 14313,
   14313, 14313, 54684,  3214, 14313, -4590,  3245, -4590,  3696,  3698,
   -4590, -4590, 14313, -4590, -4590, 14313, -4590, 14313, -4590, 14313,
   14313, -4590, 14313, -4590, 14313, -4590, 14313, 14313, 14313, 14313,
    3550, 14313, -4590, 14313, -4590, -4590, 19311, -4590,  3269,  3284,
   -4590, -4590, -4590,  3290, -4590, 14313, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, 14313, -4590, -4590, 14313, -4590, 14313, -4590,
   -4590, 14313, 14313, -4590, 14313, 14313, -4590, -4590, -4590, 17883,
   14313, 14313,  3298, -4590, -4590, 14313, 14313, 14313, -4590, 14313,
     994, 14313,  1311, 14313,  1419, 14313, -4590, 14313, -4590, 65708,
   -4590, -4590, -4590, 14313,  1932,  2591,  1204,  3300, -4590,  1988,
   -4590,  3292,  2182, -4590,  1159, -4590, -4590, -4590, 55373, 14313,
   -4590, -4590, -4590, -4590, -4590, 19311,   396,  3302, 19311, -4590,
    3485,  3863,  3863,  2772, 14313,  1315,  3485, 65708, 14313,  3310,
    3287, -4590, 14313, 65708, -4590,   590, -4590, 53306, -4590, 55373,
   51928, -4590, -4590, -4590,  3306,   797,  2010, -4590,  3308, -4590,
    1433, -4590, -4590, -4590,  3306,   289,  3316,  3311, -4590, -4590,
   -4590, -4590, -4590, -4590,  1963, -4590, 48483,  3974, -4590,  3299,
   -4590,  3321,  3368,  3370,  3374, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590,  3059, 74665,  2073, -4590,
   -4590,  3328, -4590, -4590,  3014,  3251,  3315,  3707,  3938, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, 71909, -4590,
    3774, -4590, -4590,  1969, -4590,  3575, 74665, 74665, 14313, -4590,
    3334, -4590, -4590, -4590, -4590, -4590,  2591,  3448, -4590,  4034,
    1433, -4590,  3423, -4590, -4590, 34680,   284, -4590, -4590, -4590,
   -4590, -4590,   846,  1061, -4590,  3337,  3337, 30511, -4590, -4590,
   -4590,  3517, 65708, -4590, -4590, -4590,  3353, -4590, -4590,  3635,
   51928, 48483,  3840,  3841,  3850, -4590, -4590, -4590,  7765, -4590,
   51928, 10743, -4590, -4590, -4590, -4590, -4590,  3451,  3464,  1475,
   -4590, -4590,  3795,  3598, -4590, -4590, -4590,  -150,  1433, 10743,
   -4590,  2907,  3362, 25644, -4590,  1579, -4590, -4590,  1433,   283,
   -4590, 50550,  3890, 50550, 50550, 65708, -4590, -4590,  3675, -4590,
   -4590,  3617, -4590,  3010,   244, -4590, -4590,   -48,  2705, -4590,
    -123,  3369,  3800,  3804, -4590,  3661,  1576,  3661, -4590, -4590,
    3369, 36068,   488,  3150, 72598, -4590,  1986, -4590,  4061,  1204,
    3729, -4590, -4590,   166,  4082, -4590,  3195, 65708, -4590,   650,
   -4590, -4590, 65708,  3882,   526,   526,  3682, 34680, 34680,  3236,
    6720, -4590, -4590, -4590, 55373,  3381, -4590, -4590,  3378, -4590,
   14313,   590,  3557, -4590, -4590, -4590,  1159, 14313,  4047,  3867,
    3059, -4590, -4590,  1433, -4590,  3386, -4590, -4590, -4590, -4590,
     215, -4590, -4590, 53995, 51239, -4590, -4590, -4590, -4590,  3983,
   -4590,  3990,  1489, -4590, -4590,  1659,  1055, -4590,  -133,  -133,
    -133,  -133,  1204,  -133,  -133,  2037, -4590,  1659,  1659,   806,
   -4590,   188, -4590, -4590, -4590, -4590,  5512,   -50, -4590, -4590,
   55373,  3514,  3515, -4590, -4590,  3519, -4590, -4590,   159, -4590,
    2539, -4590, -4590,   169, -4590,  3632, -4590,  1193, -4590, -4590,
    8856, -4590, -4590,  3899,  1383,  3422, -4590, -4590,  3420, -4590,
    3427, 61574,  1433, 74665, 14313, -4590,  3431,  3435,  3438,  1204,
    1204,  -133,  -133,  1579,  -133,  1204,  -133,  -133,  -133,  -133,
    -133,  -133,  -133,  1204,  1204,  -133,   141,  2175,  -133,  1204,
    4824, -4590,  -133,  2591,  1659,  1659,  2984, -4590,  3910,  -150,
   -4590,  2785, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590,  3432,   488,  3010,  1651,  3010,  3446, -4590, 15027,
    2047, -4590,  1433, 14313,  1433,  1555, -4590,  3442,  3442,  3442,
   -4590,  3444,  3447, -4590,  3442,  3883,  3442,  3886,  3453, -4590,
   -4590,  3456,  2044,  1910, -4590,  2055,  2162,  2049,  3462,  3466,
    1988, -4590, 14313, 14313,  2060,  2086,   416,  2092,   -94,  2099,
    2115,  1494,  1496,   539, -4590,  2177,  2210,  3354, -4590, -4590,
    2272,  2353,  2376,  2405,  2410,  1510,  2430,  2062, 15027,  2474,
    1692,   556, -4590,  2476,  1544,  1560,  2486, 14313,  2498, 14313,
    2514, 14313,  2522,  2547,  3269,  2562,  3465,  3465,   206, -4590,
    3488, -4590, -4590, -4590,  3489, -4590,  3480, -4590,  2213,  3292,
    3467,  3625, -4590,   215, -4590,  1788,  -113, -4590,  3445,  1433,
    3491, -4590, -4590, 14313, -4590,   226, -4590, -4590, 19311,   840,
    3492, -4590,  3727, -4590,  1433, -4590, -4590,  3497,  1988, -4590,
   -4590, -4590, -4590, -4590, -4590,   505, 13599, -4590,  3692, -4590,
   -4590,  4287, 28428, -4590, 65708,  -206,  3748,  3494, 40212, 48483,
   48483, 48483,  3486, -4590, 67775,  3759, 34680, -4590,  3918, -4590,
   -4590, -4590, -4590, -4590, -4590, 14313, -4590, -4590, 73287, 76732,
   76732, 76732, 65708, 19311, -4590,  4163,  3504,  3505,  3518,  3522,
   51928, -4590,  3851, -4590, -4590,  3730, 36068, -4590,  3521, -4590,
    3521,  2012,  3523,  2105,  3697, -4590, -4590, -4590,  3512, -4590,
    2108, -4590, 22167,  4022,  3087, -4590, 48483, 48483, 48483, -4590,
   -4590, -4590,  3527,  3529,   140,  3767, -4590, -4590, -4590, -4590,
   10743, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590,  3059, -4590, -4590, -4590, -4590, 50550, -4590,
   -4590, -4590, -4590, -4590, -4590,   419, -4590,  3544, -4590,  3535,
   -4590,  3538,   248,  2182, -4590,   488,  2825,  2541, -4590, -4590,
   -4590,  3966,  3661,  3661,  3369,  3970,   949,  3539, -4590,  -150,
   -4590,  3428,  3569, -4590, 65708,  3554, -4590, -4590, 48483, -4590,
    3754,  3555,  1151,  3556, 65708, -4590,  4146, -4590, -4590, -4590,
   -4590, -4590, 34680, -4590, -4590,  -150, -4590,   146,  -150,  -150,
   -4590, -4590,  1322, -4590, -4590,  1256,  4322,  3236, -4590,  -150,
    -150,  -150,  -150,  -150,  4121,  -150,  -150,  4123,  -150,  -150,
   34680,  -150,  -150,  -150,  -150,  -150,  -150,  -150,  -150,  -150,
    -150,  1017, 65708,  -150,  -150,  -150, 29123, -4590, -4590,  3837,
   -4590,  5499, -4590, -4590,  -150,  2791, -4590, 24949, 65708,  1433,
    3562,   401, -4590,  3911,  3568, -4590, -4590,  1433, 14313, -4590,
    3597, -4590, -4590, 56751, -4590, 40901,   745, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590,  1361, -4590, -4590, -4590,   270, -4590,  3561,  -150,  4199,
    3847,  4199,  3848,  3854,  3660,  4005,  3685,  3404,  4011,  3858,
   -4590,  3695,  -150,  4199,  3861,  4252, -4590,  3868,  3869,   150,
    3873,  3874,  3875, -4590, -4590,  5626, -4590, -4590, -4590, -4590,
    1128, 33292, -4590, -4590, -4590, -4590,  3699, -4590,   201, -4590,
   -4590, -4590, -4590,   359,  1204,  1204,  1204,  2175,   851, -4590,
    2539,  3595,    71,  1492,  3688,   335, -4590,   171, -4590, -4590,
    3442,  3442,  3442, -4590, -4590, -4590,  3442, -4590,  3444,  3866,
    3622,  3444,  3444, -4590, -4590, -4590, -4590, -4590,   210,   417,
   -4590, -4590,   210, -4590, -4590, -4590,   211,  1165,  3444, -4590,
   -4590, -4590, -4590,  1157,  3623, -4590,  3442,  3442,  3442, -4590,
   -4590,   210,  3920,  3442, -4590,  3442,  3542,  3444,  -216,  3442,
    3442,  3442,  3442,  3447,  4198,  4126,  4130, -4590, 65708, -4590,
   62263, -4590,  3630, -4590,  3631, -4590, 68464,  1433,  1204,  1204,
    1204, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   65708,  1659,  2806, -4590, 39523,  3010,  3452, -4590, -4590,  3863,
   -4590,  1433, 14313,  1444, -4590, -4590, -4590, -4590,  1758, -4590,
   -4590, -4590,  3944, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590,  3190, -4590, -4590,  3214, -4590, -4590, -4590,  3637,
    3863,  3863, -4590, -4590, -4590, 14313, -4590,  4292,  3814, -4590,
   -4590, 14313, 14313, -4590, 14313, -4590, -4590,   273,  3643,  3667,
   -4590, -4590, -4590, -4590, -4590, 14313, -4590, -4590,  3863, -4590,
   14313, -4590, -4590, 14313, -4590, 14313, 14313, -4590,  2570, -4590,
    2572, -4590,  2576, -4590, -4590, -4590,  2591,  3645,  4057, -4590,
   -4590, -4590,  2591,  3845, -4590, -4590,  2591,  1204, -4590,  2987,
    2213, -4590,  3649,   124, -4590, -4590, -4590, -4590, -4590,  3651,
   65708, -4590, -4590,  2146, -4590, -4590, 14313, -4590,  4309,  3946,
   56751, -4590, -4590, -4590, -4590,  4173,  4059, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590,  4142, -4590, -4590, -4590, -4590,  -147,  -147,
    -147, 13599,  2703,  4209, -4590, -4590, -4590,  3918,  4080, -4590,
      85,  1433, -4590, 76732, -4590, -4590, -4590, -4590, -4590,  3662,
    3663, -4590, -4590, -4590,  3485,  4074,  3941, -4590, -4590,  2591,
   65708, -4590, -4590, -4590,  3664, -4590,  -150, 13599,  3337,  2825,
   -4590,  1233,  2012, 36068, -4590, 40901,  1075,  2584, -4590, 65708,
   -4590, 48483,  3108,  3108,  3108, -4590, -4590, -4590, -4590, -4590,
   -4590, 25644, 59507, -4590, -4590,  3059, -4590,  -133,  2594, -4590,
    2292, -4590, -4590,  1159,   215,  3149,  -113, -4590,  3369,  4099,
    4101, -4590,  3369, -4590, -4590, 36068,  3010, 13599, -4590, -4590,
   -4590, -4590, -4590, -4590,  3877, -4590, -4590, -4590, -4590,  3828,
   -4590, -4590,  2064,  3979,  3703, -4590,  3687,  3693,   737, -4590,
   -4590,   737,   737,   737, -4590, -4590, -4590, -4590,   737, -4590,
   -4590,  1579,  1204,  1204,  -133,  -133,  -150,  1204, 55373,  -150,
    1368,  1204, -4590,  1579,  1579,  2041,  2864,  -133,  3459,  2864,
    2986,  3088,  3175, -4590, -4590, -4590,  1204,  2864, -4590, 36762,
   34680, 65708,  3681,  3684,  3686, -4590, -4590, -4590, -4590,   165,
   -4590,  3925,  2078,   214,   214, -4590,  3694,    81, -4590, -4590,
    5891, -4590, 45038, 51239, -4590, -4590, -4590, 14313, -4590, -4590,
   -4590,   590,  3701,  -209,   401, 14313, 65708, -4590, 62952, -4590,
   -4590, -4590, -4590,  1245, -4590,  3706, -4590, -4590, -4590, -4590,
   33986,  2078, -4590, -4590,  4159, 63641, 36762,   771,  1935, 62263,
     771,  2791, -4590, -4590,  1935,  4133,  1897,  4136,  1935,  1935,
   -4590, 65708, -4590, 64330,  1935,   771, 36068, -4590,   771, -4590,
   -4590, -4590, -4590, 34680,   771,   771, 62263, -4590,  6869, -4590,
   -4590, 29817,  1422, -4590, -4590, -4590,  -133, -4590, -4590, -4590,
   -4590, -4590, -4590,  4019, -4590, -4590, 65708,  4402, -4590,  3972,
   14313, 14313,  4013, 65708,  4016, -4590,  4343, -4590, -4590,  4171,
   -4590, -4590, -4590, -4590, -4590,  -145, -4590,   301,  -145,  -145,
   -4590,   217, -4590, -4590, 54684,  4392, -4590,  2807, -4590,  3760,
     210, -4590, -4590,  3761, -4590, -4590, -4590,  -145,  4023, 65708,
    4198,   301,   210, -4590, -4590, -4590, 65708, -4590,  -145, -4590,
    3857, -4590,   210,  4392,   210,  4392,  -145,  -145, 14313, -4590,
   -4590,  3268,  3725, -4590, -4590,  3728,  3732, -4590, -4590, -4590,
   61574,  3824,  2190, -4590, -4590,  2200, -4590, -4590,  2211, -4590,
   -4590, -4590, -4590, -4590,  3229, -4590,  4143,  1512,  1433,  3734,
    3735,  3738,  3739,   210,  2226,  3740,  3442, -4590,  3444, -4590,
   -4590, -4590,  4388, -4590, -4590,  3442,  4183, -4590, -4590, -4590,
   -4590, -4590, -4590,  3743, -4590,  3744,  3746,  2587, 14313,   301,
    3749,  2616,  1624,  2235,  4095,  4176, -4590,  3997, -4590,  2635,
    1530,  2639,  2641,  2651,  2655, -4590, -4590, -4590, -4590, -4590,
    3753, -4590, -4590,   242, -4590,  3755,  3161, -4590, -4590, -4590,
    3480,  1159, -4590, -4590,  2244, 14313,  4415,  1455, -4590, -4590,
    4448,  4051,  3788,  3788,  3788,  2247, -4590, 74665, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590,  4200, -4590, -4590, 65708,  3762,
    1719, -4590,  2274, -4590, -4590,  3763, 36068, 13599,  3764,  3765,
   -4590,  1159, -4590, -4590, -4590,  1075,  3766,   215,   120,   215,
   -4590,  2987, -4590, -4590,  3108, -4590, -4590, -4590, -4590, -4590,
   -4590,  2584, -4590,  -113, -4590, -4590, -4590,  3291,  3816,  3369,
    3369,  3833,  3818, 14313,  3769, -4590,  3452, -4590, -4590,    52,
   -4590, 65708, -4590,  -133,   876,  4554, -4590, -4590,   180,  3956,
   55373,  3775, 65708, 65708, -4590, -4590,   134, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590,  -133, -4590, -4590,
    -133, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590,  3776, -4590, -4590,  3777, -4590,   203, -4590, 29817,  3779,
    4203,  4211,   214, -4590,  2078, 34680, -4590, 36762, -4590,  2078,
    2078, 77379, 65708, -4590,  4473, -4590, -4590, -4590, -4590, -4590,
   -4590,  4420,   401, -4590, 14313,  3786,  3787, -4590, -4590, -4590,
   14313, -4590, -4590,  1433,  4481,  3794, -4590, -4590, -4590, 41590,
    1902,  3706,  3797,  3976,    71,   771,    71, -4590, -4590, -4590,
     126, 62263, 36762, -4590,  2591, 51239, 36762,  1935, 65708, -4590,
   36762, 36762,  3827, -4590, -4590, 36762, 62263,  3807, -4590,   401,
    2205, 62263, -4590, -4590, 62263, -4590,  1784,  1823, -4590,  3802,
   65708, -4590, -4590, -4590, -4590, -4590,  2276, -4590, -4590,  1433,
    3863,  4424, -4590, -4590,  3985,  -133,  4367, 65708,   175, -4590,
   -4590, -4590, -4590,  -145, -4590,  2290, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, 65708, 77392, -4590,  2319,
   -4590, -4590,  2322, -4590,  4198,  3829, -4590,  3849, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590,  1433, 44349, -4590, -4590, -4590,
   65708,  4338, -4590, 65708, -4590, 74665, -4590,  1204, -4590,  1204,
   -4590,  1204, 47794, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
    4147, -4590, -4590, -4590, -4590, -4590,   210, -4590, -4590, -4590,
   -4590,  3838,   401, -4590, -4590, -4590, 14313, -4590, -4590,  4187,
    4362, -4590, -4590, -4590, -4590, -4590, -4590,  3843, -4590,  1204,
    3452, -4590, -4590,  3852, 14313, -4590, -4590,  3856,  3606,  4413,
   -4590, -4590,  2779, -4590, -4590, -4590, -4590, 13599, 73976, -4590,
    4279,  3957, -4590, -4590,  3860,  4034, 65708, -4590,  3941, -4590,
   -4590, -4590, -4590, -4590, -4590,   215, -4590, -4590, -4590, -4590,
   -4590, -4590,  3161,  2987, -4590,  3862, -4590,  3908, -4590, -4590,
   -4590,  3912,  1433, 65708,  4143, -4590,    69, -4590,  3865,  3870,
    9044, -4590, -4590, 77392, -4590, -4590, -4590, -4590,  3872,  3880,
   -4590, 65708, -4590, -4590,  4429, 74665, -4590, -4590, -4590,  4167,
    1492,  4165, 65708,  2325,   401,  3876,  2328, -4590, -4590, -4590,
   -4590, 34680, -4590,  1159, -4590,  5626, -4590, 14313,  2078, -4590,
   -4590, 36762,  3879,  3919,  -212, 36762, 36762, -4590,  4519, -4590,
    3881, -4590,  1458,  1045,  4293, -4590,  1433, -4590, -4590,   401,
    3887, 65708, -4590, -4590,   215,  1610,   215,  3885,  1102, -4590,
    4411, -4590,  4412,  4465,  4471, -4590, 36762,  2088, -4590,  3542,
   -4590, 36762,  3732, -4590,   505,  3996,  1422, -4590, 36068, -4590,
   -4590, -4590, 65708, -4590, -4590, -4590, -4590, 65708, -4590,  2825,
   -4590, -4590, -4590, -4590, -4590,  2336, -4590, -4590, -4590, -4590,
   -4590,   210,   301,  4198, -4590, -4590, 65708,   210, -4590, 65708,
    4207, -4590, -4590, 37456, -4590, -4590, -4590,  4398, -4590,  2338,
   -4590, -4590, 69153, -4590, -4590, -4590,  4430,  4093,  4112,  3913,
   -4590, 14313, -4590,  2687, -4590, -4590, -4590,  3914,  3059,  3562,
   -4590,  4253,  4102,  3157,  3181,  3183,  4177,  4436, -4590,  4178,
    4562,  4212, -4590,  2779, -4590, -4590,  3982, 34680, -4590, -4590,
    3927,   177, -4590, -4590, -4590,  1159,  3161,  2292, 14313,  3929,
   14313,  3931,  2367, -4590, -4590, -4590,   214,   214, -4590,    69,
    3933, -4590, 65708,  3936,  4240, -4590, -4590, -4590,  1612, -4590,
   -4590, -4590, -4590,  4013,  3939,  2377,   590, 65708, -4590,  4246,
     590,  3942, -4590, -4590,  3837,  2693, 36762,  3919,  -191, 65708,
    4311,   526, -4590,   526, -4590, -4590,  2069, -4590, -4590,  4152,
   65708, -4590,  4601,  4606,  4491,  4609,  1045, -4590,  -118, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590,  4391, -4590, -4590, -4590,
   -4590,  1902, 36762,   777, -4590, -4590, 21453,  1422, -4590, -4590,
   -4590, -4590, 34680, -4590,   771, -4590, -4590,  3732,   846, -4590,
     766,  4084, -4590, 74665, -4590, 65708, 65019, -4590, -4590, -4590,
   -4590, -4590,  3949, -4590, 44349, -4590, -4590, -4590, -4590, -4590,
   -4590,  4484,  2987, -4590, -4590,   401, -4590, -4590,   215,   142,
   -4590,  4651,   892, -4590, -4590,  1236, -4590, -4590, -4590, -4590,
   -4590, 36068,  3150, 19311,  4075, 65708, -4590,  1670,  4326, -4590,
    3480, -4590,  1433, 65708,  1433, 65708, -4590,  4460,  4460, -4590,
   -4590, -4590, -4590, 65708, -4590, -4590, -4590,   335, -4590,  1361,
     590,   204,   401,  3961,  1741, -4590,    81, -4590, -4590, -4590,
     526,  2379, -4590,  1034,  4263, -4590,  3965, -4590,  3967,  3968,
    -133, -4590,  4399, -4590,  2069, -4590,  4403,  4275,  -150, -4590,
   55373, 21453,  4667, -4590,  4035,  4556, -4590,  4674, -4590,  3001,
   -4590, -4590, -4590,   301,   301,  4645,   301, -4590,  4646,  4647,
    -118, -4590,  1159,   215, -4590, -4590,  4519,  2591,  3941, -4590,
    3988,  2175,  2175, 14313, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590,  4431, -4590, -4590,  3992,  4020, 14313,  4534, -4590,
   -4590, -4590,  2436, -4590, -4590, 65708, -4590,  2825, -4590,  3161,
   -4590, -4590, -4590,  4253, -4590,  4185, -4590,  4284, -4590,  3998,
   -4590,  -150, -4590, -4590,  2591, -4590,  2447, -4590, -4590, -4590,
    4092,  -150,  -150,  4564,  4565,  -150,  -150,  -150,  -150,  4003,
    4326, -4590,  4544, -4590,  2449,  2459,  1351, -4590, -4590, -4590,
    4001,  4554, 34680,  4343,  2499,   379,  -133,  -150,  4286,   299,
     204, -4590, -4590,  -150, -4590, -4590,   299,  1741, -4590, -4590,
   -4590,  4010,  4012, -4590, -4590, 65708, -4590, -4590, -4590,   112,
   -4590, 65708,  4014, 65708, 65708, -4590, -4590, -4590, -4590, -4590,
   45727, -4590, -4590, -4590,  4330,  4060,  4017, -4590, -4590, -4590,
     301, -4590,   301,   301, -4590, -4590, -4590, -4590, -4590,  2501,
   14313, -4590, -4590,  4015, -4590,  4018,  1075,  3992,  4024,  4196,
     297, -4590,  1433, 14313, -4590, -4590, 65019, -4590, -4590, -4590,
   -4590, -4590, 36068, 13599,  2791,  4025, -4590, -4590, 65708,  4028,
   -4590,  -133,  -133,  -150,  -150,  3296,  3296,  2591, 55373,  4137,
   -4590, -4590,  -150, -4590, -4590,  4690, -4590,  4691,  4032,  4033,
   65708, 76043,  4535,  4591, -4590,   526,   526,   299,   379, -4590,
   -4590, -4590, -4590,  1204,  2054, -4590,  4440,  4738, -4590, 46416,
   -4590, -4590, 65708, 65708,  4042, -4590,  1014,  1014,  2505, 65708,
    2519,  2525, -4590, -4590, -4590, -4590,  4045, -4590, -4590, -4590,
   -4590, -4590, -4590,  1664, -4590,  3941, -4590,   120,   215,   215,
    4046,  1102, -4590,  4692,  4339,  4693,  1433, -4590, -4590, -4590,
   -4590, -4590,  4075, -4590,  4052, -4590, -4590,   -55, -4590, -4590,
    -133,  -133, -4590, -4590, -4590, -4590, -4590,  2527, -4590, 55373,
   -4590, -4590, 61574, 61574,  4048, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
    2549,  2581, 65708, -4590,  4759, -4590,  1284,  4357,  4358,   379,
    2583,   204,  1741,  1069, -4590,   -56, 14313,  2589,   215,  1199,
   -4590, -4590,  1788, -4590, -4590,  1075,  4352, -4590,  4354,  4251,
   -4590, -4590,  2610, -4590, 18597, -4590, -4590, -4590, -4590, -4590,
   55373, -4590,  4137, -4590,  4062,  2653, 65708, -4590, -4590,  3925,
     379,  2657, -4590, -4590, -4590,  4127,  4637, -4590,   379, -4590,
   -4590, -4590,  4069, -4590, -4590, -4590,   280,   539, -4590, -4590,
    1159, -4590,   215,   120, -4590, -4590, -4590, -4590,  4536,  4420,
   -4590,  4052, -4590,  4070, -4590,  3485,  4326, -4590, -4590, -4590,
   -4590, -4590,  4621, -4590, -4590,   379,  1014,  1014, -4590, -4590,
    -133,  4501, -4590,   280, -4590, -4590,   766, -4590, -4590,  4737,
    4293, -4590, 18597,  4081, -4590,  4271, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590,   301,  4541, -4590, -4590, -4590, -4590,  4393,
    4087,  1058,    46, 26339,  4257, -4590, -4590, 55373, -4590, -4590,
   -4590, -4590, -4590, 55373,  2659, -4590, -4590, 36068, -4590, -4590,
   74665, -4590, -4590, 27731,  4088, -4590,  -150, -4590, -4590, 36068,
   -4590, -4590, 13599, -4590, -4590
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4590, -4590, -4590, -4590,  2046,  3806, -4590, -4590, -4590,  3789,
   -4590, -4590, -4590, -4590,  3387, -4590, -4590,  1674, -4590, -4590,
   -4590, -4590, -4590,  1826, -4590,   387, -4590,   392, -4590,   393,
   -2644,  -508,  3718, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590,  1507, -4590, -4590,   -44,  1426,  3672,
   -4590,   279, -4590,   -37, -4590, -4590, -4590, -3791,  -172,  -365,
   -4590,    44,     5,  3647,   -30, -4034, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590,   421, -4590, -4143, -4590, -4590,   108,
   -4590, -4590, -4590, -4590, -4590, -1873,  -627, -1297, -4590, -4590,
     441, -4590,   192, -4590,   117, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590,    28,   802,  2315, -4590,
   -4590, -4590,  4783, -4590,  4189, -4590, -2006,  2689, -4590, -4590,
   -4590, -4590, -4590,  2776, -1911, -4590, -4590, -4590,  1700, -4590,
   -2330, -4590, -3784,  -265,  -985,    53, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590,  1681, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590,   705, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590,  2438, -4590, -4590,  4116,
   -4590, -4590, -4590,  1127, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590,  2147,  2144, -4590,  2148, -4590,   132, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590,  3629, -4590, -4590, -4590, -2649, -4590,
   -4590, -2777,  3093, -4590, -2132, -4590, -4590, -2085, -4590, -4590,
   -1949,   873, -4590, -4590,  1150,   318, -4590, -1562, -2227, -2223,
   -4590, -4590, -4590, -2310, -2308,  -748,  2827, -1326, -2690, -4590,
   -4590, -4590, -4590, -4590,    -7,   288, -4590, -4590, -4590,   128,
    1431,  1947, -4590, -3316, -4590, -4590,   524, -4590, -4590, -4590,
    1130,   381,  1129, -4590,   720,  2743, -1973, -4590, -4590, -4590,
   -4590, -4590, -4590,  -207,    41,  -286, -4590, -4552,   389, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -3423, -4590, -4590,
   -4590,  -433, -4590, -4590,  -361, -4590, -4590,  -404, -4590,   -95,
    1547,  1133, -4590, -4590,   723, -3783, -4590, -4590,  2606, -1609,
   -4590,  -640, -4590, -3183,  1465, -3007, -2751, -4590, -1068, -1045,
   -3719, -4590, -4590, -4590, -4590,   942, -4590,   626,  1467, -3222,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -3215, -4590, -3898,
   -4590, -4590, -4012, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590,  -407, -4590, -4590,   -24,  -136,
   -4590,    11,   622, -4590, -3063,  1316,  1428, -4590, -4590, -4590,
   -4590, -3129, -2772,  -452, -4590,   536, -2641, -2710, -1165,  1399,
   -4590, -4590,    14, -2824, -2262,  -637, -2359, -2790,  -160, -4590,
   -4590,    27, -3369,  2035, -4590,   929, -3273, -1667,  1837, -4590,
   -4590,  1263, -4590, -1427,  1265, -4590, -4590, -4590,  1279, -4590,
    -326, -4590, -4590, -4590, -4590, -3399, -4590, -1739, -3587, -4590,
   -4590,  4843,  4850, -2074,  -276,  -275, -4590, -4590, -4590,   209,
   -4590, -4590, -2248,  -170,   -71,   -60, -2785, -3997,   222, -2702,
   -4590,   930, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
    1513, -1615, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -3982,
   -3663, -4590, -4590,  1002, -4589, -2851, -2843, -3210,  3830, -4590,
   -4590, -4590, -4590,  3768, -3039, -3496, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590,  3294,  1412, -4590, -4590,  2151, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590,   168,  2222, -4590,
   -4590, -4590, -4590, -4590,  2574, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590,  -106, -4590, -4590, -4590, -4590, -4590,   364,
    3155, -4590, -4590, -4590, -4590,    -9, -4590, -4590, -4590, -4590,
    2830, -4590, -4590, -4590, -4590,  3182, -4590, -4590, -4590, -4590,
   -4590, -4590,  1810, -4590,  2280, -4590, -1690, -4590, -4590,  1250,
    -151, -4590, -4590,  3810, -4590,   661, -4590,   -84, -4590,  1876,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
    2642, -4061, -1729, -4590, -1142, -1700, -4590, -4590, -3472, -4590,
    3234, -1654, -3527,  2104,   833,  -144, -2800,  1300, -4590,  1627,
    1595,  5085, -4590, -1253, -1280, -4590, -4590,     7, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590,  2491,  2497, -4349,
    -633, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590,  1856, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
    3584, -1349, -4590, -4590, -4590, -4590, -4590, -4590,  -972, -4590,
   -2352, -4590, -4590, -4590, -4590,  -530, -4590,  3700, -4590, -4590,
   -4590, -2635, -1589,  2163,  1729, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590,  2171, -4590, -1770, -4590, -3072, -4590, -4590, -4590,
   -4590, -4590,   805, -4590, -3468, -4590,  1326, -4590, -4590, -4590,
   -4590, -4590, -4590,  2181, -4590, -4590, -2249,   149, -4590,   291,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590,  -181,   962,  -180,
   -3415, -1261,  2003, -4590, -4590, -1475,  3751, -1975, -4590, -4590,
   -4590,  2391, -4590,   882, -4590, -4590, -4590,   427,   430, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590,   543,    59, -4590, -4590,
   -4590,   405, -3400, -2229, -4590,   550, -3653, -1076, -4590, -1043,
   -4590, -1560,  1778,   507, -4590, -1641, -1241,  -894, -2770, -3725,
   -2817, -4590, -1691,  2704, -4590, -4590, -4590,   444, -4590, -4590,
   -4590,  1680, -4590, -1672, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590,  -588,  -979, -4590, -4590,  2568, -2165,  -517,
    4945,    10, -4590, -4590,    19, -4590, -4590, -4590, -4590,  3547,
    3506,  2356, -4590, -4590, -2971,  2295, -4590,   877, -1030,  1205,
   -4590, -4590,  1287, -4590, -4590,  1290, -3585, -4590, -4590,    21,
   -4590, -4590, -4590,  1241, -4590,   -33,  4383,    26, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590,  3233, -1183,  4294, -4590,
   -4590, -4590, -4590, -4590, -4590,  2808, -4590, -4590, -4590, -4590,
   -4590, -4590,  3440,  4410,  -641, -1463, -4590,  -865,  2812,  2256,
    -946, -4590, -4590, -4590,  3903,  4416, -4590, -4590,  4955, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,  3011,   512,
   -4590, -4590, -4590, -4590,  3531, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,  1347,  -211,
   -4590,   313,  -240, -4590,   161, -4590, -4590, -4590, -4590, -4590,
    -280, -4590, -4590,  -285, -4590, -1147,  4210, -1554, -4590, -1424,
   -2894, -4590, -1315,  1822, -4590, -4590, -4590,  2803, -4590, -4590,
   -4590, -4590,  1328,  2759, -3228,  -752, -1311, -4590, -1318, -3153,
      62, -4590, -4590,  4115,    50,   772, -1963,    -6, -4590,  -924,
    -120,  -650,  -632,  -916, -1549,  -619, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590,  2302, -4590, -4590,
   -4590,  1314, -4590,  4443, -4590,  3109, -1520,  4446,  2904,  2899,
    2318,  2321, -4590, -4590, -4590, -4590, -2004, -4590, -4590, -1484,
     199, -4590,  2989, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
    3412,  -522,  -484,  3545,  4456,  4063, -4590,  3627, -4590, -4590,
   -4590, -4590, -4590,  1655, -4590,   612,  2351, -1383, -2812, -4590,
   -4590,  2726,  1003, -4590,  1964, -2170, -2688, -4590,  2271,  -750,
   -4590, -4590,   426, -4590, -4590, -4590,  1658,  1432,  4470,  4066,
   -4590, -4590, -4590, -4590, -4590, -2509, -3636, -1697, -4590,  -158,
   -4590, -3173, -4590, -1693,  1863, -3046, -4590, -2956, -2947,  1332,
   -1229,  2309,   935, -4590, -4590, -2899, -4590, -4590, -4590,    13,
    4442,  4445,  4447, -4590,  -775, -4590, -4590, -4590, -4590, -4590,
    -182, -4590, -4590, -4590,  3980, -4590, -4590, -4590, -4590, -4590,
   -4590,  3449,  3984, -4590, -4590, -4590, -4590,  3987, -4590, -4590,
   -4590,  1997, -4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590,
   -4590
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -3060
static const yytype_int16 yytable[] =
{
     571,   717,   721,  1011,  1103,  1025,  1505,  1061,  1099,  1714,
     156,   569,   603,  1011,   602,  1722,  2335,  2105,   610,  1858,
    2062,   707,  1642,  1908,   623,  1572,  1575,  2321,  1968,  2315,
     626,   631,  1587,  1612,  1938,  1966,  1142,  2136,   639,  1143,
    1505,   642,  1869,  1977,  2459,   639,  2400,  2332,  1820,  1169,
    2314,  2223,   658,    77,   159,  1612,   902,  2224,  2944,  3666,
    3291,  1292,  2227,  1500,  1501,  3433,  2311,  1170,  2195,  2316,
     912,   913,   914,  3434,  3364,   918,   919,   920,  3380,  3781,
     922,   923,   924,  3551,   959,  3105,   608,  2036,  2074,   640,
    3380,  3380,  2871,  2397,  3369,  2061,  3683,  1749,  1996,  1997,
    3937,   692,  2000,  2001,  2002,  2003,  1518,  2005,  2006,  2008,
    2010,  2011,  2012,  2013,  2014,  2836,  1986,  2676,   959,  4229,
    1750,  3031,   960,  3829,  1994,  1236,  4136,  2302,  1605,   698,
    3894,   571,  4116,  3038,   571,   706,   712,  4019,  2336,  1664,
    1110,  3039,   700,  1117,  2747,   703,  2997,  2914,  2998,  2646,
    3668,  2915,  1214,  1643,  2715,  1218,  1045,  4287,  2233,  3669,
    2759,   718,  4136,   722,  3248,  3425,  4056,  3380,  3380,   691,
    3940,  4532,   723,  1413,   724,  3912,  3257,  3442,  2246,   725,
    2263,  4362,  3913,  3875,  3977,  3266,  2249,  2250,  4627,  3916,
    2710,  3918,  3791,  3535,  1474,  2358,  3819,  3929,  2110,  3661,
    2130,  2631,   744,  3934,  1362,  1363,  4001,  1362,  1363,  4002,
    1362,  1363,  4197,  2584,  3563,  2363,  4546,  3392,  3393,  1778,
    3750,  3954,  1362,  1363,  1468,  3767,  4391,  3649,  4015,  2994,
     621,  4269,  3990,  2995,  2910,  1644,  2475,  2698,   630,  3990,
     617,  4302,  3449,  1574,  1352,  1353,  1354,  3991,  2448,  4584,
    3583,  -540,  5126,  2727,  3548,  1617,  1396,  3452,  1362,  1363,
   -1735,  3992,  3396,  3649,  2921,  1827,  1828,  1829,  4332,  1799,
    2917,  1746,  1069,  1051,  4003,  1362,  1363,  4704,  3875,  1069,
    1051,  2376,  1847,  4593,  1746,  4171,   966,  4280,  4996,  1362,
    1363,  2686,  1485,  5235,  3557,  3558, -2922,  2363,  1362,  1363,
    1397,  2285,  1746,  2121, -1735, -1020,   650,   647,  3576,  3577,
    2793,  3398,  2033,  4836,  3585,  4184,  3587, -2316,  -648,  4094,
    4536,  4705,  1919,  4606,  3680,  1923,  3607,  1362,  1363, -2928,
     978,  1362,  1363,  4143,  3881,  1017,  -649,  4143,  2075,  3985,
    1126,  2853,  3988,  3989, -1775,  2303,  4602,  5339,  3650,  4952,
    1474,   720,  5153,  2378,  1950,  1951,  1126,  2171,  1955,  4007,
     582,  2987,  1676,  5154,  5300, -2758,  5049,  1111,  1011,  1011,
    1692,  1701,  1011,  -532,  4270,  1970,  1971,   618,  4020,   750,
    3581,   693,  1717,  2175,  3650,  5263,  4501,  2172,  4719,  3436,
    1489,  1186,  2300,  1568,  3762,  3763,  3764,   134,  1717,  2381,
    1800,  1362,  1363,  2350,  1801,  4369,  1011,  2897,  1418,  1419,
    3250,  1362,  1363,  1362,  1363,  1564,  3999,  5120,  1802,  1609,
    2590,  1775,  3888, -3007,  4743,  2309,  2921,  4927,  1609,  1221,
    1465,  2360,  2328,  1362,  1363,  1362,  1363,  1362,  1363,  3990,
    2478,  2256,  4172,   751,  4537,  4870,  1794,  4547,  2354,  2687,
    1265,   302,  1647,   304,  3991,  4021,  1623,  1613,  2844,  3234,
    4908,   154,   155,  4996,  2657,  2834,  2696,   576,  3992,  1666,
     577,  2560,  2398,   583, -2524,  2922,  4298,  4299,  3703,  1069,
    3997,   158,  2845,  3974,  2454,  2122,   957,  4997,  2437,  2585,
    4119,   969,  2379,  2627,  3573,  4909,   160,  3182,  2399,  3137,
    2038,  3975,  -535,  4300,  2743,  4282,  2379,  4370,  1706,  2363,
    1707,  1708,  1709,  1710,  1711,  2329,  1614,  1867,  5190,   629,
     957, -2846,   136,  2310,  2279,  1222,  4282,  2257,  2728,  4077,
    2354,  2364,  2164,  2382,  5264,  3549,  4548,  1292,  1127,  1128,
    1718,  1767,  4927,  3889, -3007,  4725,  1266,  2070,  1569,  1718,
    2185,  4371,  1187,  3961,  1127,  1128,  1362,  1363,   694,  2631,
    1803, -3024,  2173, -2758,  3437,  2379,  2351,  5340,  3265,  4851,
   -2847,  2312,  4491,  1362,  1363,  3287,  1568,  1112,   712,  4144,
    2076,  2176,  1790,  4144,  4777,  1637,  2923,  2312,  1677,   712,
    1011,  2034,  4824,  5217,   752,  1362,  1363,  2591, -2922,  1197,
     706,   964,  5155,  1362,  1363,   706,  1364,  3412,   976,  1365,
    4638,  2304,  1364,  2364,  2794,  1365,  1490,  1565,  1400,  5265,
     968,  4271,  1021,  -535,  1364,   739,   302,  1365,   304,  1798,
    4787,  1362,  1363,  1018,   706,  2882,  2153,  2922,  1062,  4575,
    2709,  2879,  2757,  2865,  4502,  1685, -1775,  1398,  1119,  2319,
   -2846,  4095,  2632,  4461, -2108,  5231,   979,   584,  2170,  4292,
    1364,  2030,  4997,  1365,  2688,   977,  1486,  1139,  4594,  2228,
    4748,  2123,  2231,  1022,  3425,  1804,  2234,  1364,  2237,  1749,
    1365,  2997,  1612,  2998,  2914,  4560,  4609,  2211,  2915,  1568,
     967,  1364,  2063,   706,  1365,  3550,  1175,  3453,   739, -2847,
    1364,   739,  1750,  1365,  2036,  1120,  2252,  2253,  2254,  4503,
    4914, -1735,  4694,   706,  1834,  1835,  4188,  1592,  3651,  2729,
    4192,  1795,  3159,   692,  2610,  1207,  2062,  4383,  4706,  1364,
    2077,  1569,  1365,  1364,   692,  2613,  1365,   692,  2616,  4393,
    1175,  3583,  2354,  3105,  3380,  1894,  3908,  1231,  1999,  4399,
    4651,  4401,  3983,  2476,  3651,  1910,  3984,  3211,  1913,  1191,
    3288,  4117,  3965,  4320,  2994,  2020,  5127,  1618,  2995,  2607,
    1926,  1927,  1928,  1796,  2924,  3221,  3941,  3394,   743,  1469,
    3768,  4163,  2248,  1937,  2803,  4053,  4012,  4013,  4014,  4662,
    4429,  1204,  2925,  2131,  2358,  4018,  4514,  -540,  3875,   926,
    1412,  2061,  4026,  1364, -1775,  1505,  1365,  1293,  1362,  1363,
    1047,   619,  2913,  1364,  4272,  1364,  1365,  2436,  1365,  3980,
    3980,  1767,  1012,  2705,  2711,  2364,  2741,  3581,  3244,  2040,
    3581,  3581,  3168,  2363,  4538,  1364,  1648,  1364,  1365,  1364,
    1365,  4837,  1365, -2928,  1569,   651,   648,  3581,  3942,  4799,
    1686, -1020,  2468,  1362,  1363,  1121,  3993,  1362,  1363,  1796,
    4442,  3955,  4017,  3993,  -648,  2492,  3581,  3980,  3980,  4024,
    4025,  4052,  1475,  4285,  3006, -2928,  1359,  1360,  4004,  2033,
    1366,  3978,  -649,  1366,  2448,  4628,  1366,  2926,  4998,   959,
   -1775,  4728,  4685,  2918,  2993,  1395,  2330,  3894,  1366,  3103,
    3395,  3559,  2596,  1169,  2919,  2586,  1404,   571,  1406,  3652,
    1408,  1175,   571,  1466,   706,  1129,   571,  2493,  1405,  -532,
    1796,  2154,   649,  1410,  2124,  1450,  4762,  1415,  2051,  5301,
    2293,  1340,  4858,  4149,  1366,  1573,  2138,  1577,  3102,  4432,
    1580,  1585,  1362,  1363,  2264,  3094,  2529,  3382,  2265,  4174,
    2533,  1366,  2511,  2512,  2925,  1608,  2204,  4532,  1364, -1697,
    3235,  1365,  1479,  1411, -2524,  1366,  1796,  1416,  1624,  1169,
    2561,  1362,  1363,  3138,  1366,  1364,  4696,   692,  1365,  1496,
    1499,  1649,  2562,  1502,  1976,  1362,  1363,  2232,  2106,  4494,
    1796,   156,  2513,  2514,  3158,  1509,  1796,  1364,  1362,  1363,
    1365,  1690,  1690,  1366,   721,  1364,  1650,  1366,  1365,  2359,
    2632,  1362,  1363,  3789,  3790,  5105,   706,   692,  5047, -1775,
   -2524,  2564,  2565,   692,  5128,  2147,  5130,  5131,  1475,  3566,
    2360,  3568, -2846,  1364,  1767,  2095,  1365,  2622,  2727,  5106,
    1362,  1363,   959,  1559,  2623,  1492,  2288,  2289,  1332,   706,
    4214,   706,  3289,  3271,   706,   706,  1362,  1363,  2292,  4839,
    4668,  4222,  2453,  3993,  1225,  3380,  2354, -2846,  5203,   706,
    2156,  1096,  4579,  4236,  4237,  1851,   150,  1366,  1362,  1363,
    2165, -2847,  1027,  3998,  3504,  1521, -2905,  1366,  1219,  1366,
   -2909,  1530,  1687,  4290,  2015,  2582,  2583,  3433,  4702,  4954,
    1593, -2135,  1592,  1362,  1363,  3434,  2466,  3112,  3113,  1366,
    4783,  1366,   692,  1366,  2338,  3875, -2847,  4508,  4509,  1670,
    2454,  1362,  1363,   662,  3912,  5200,  5201,  3604,  3605,  1443,
    3000,  3913,  5210,  2383,  4179,  1682,  2761,  3929,  4525,  4215,
    2766,  3130,   575,   739,  1333,   739,  1852,  1681,  4526,  2364,
    1715,  3135,  1895,  4187,  2106,  1896,  2779,  4191,  2034,  3282,
    1705,   959,  4950,  4660,  2527,   722,  2799,  3853,  2914,  4596,
     151,  1011,  2915,  4600,   723,   663,   724,  4603,  4604,   692,
    1853,   725,  3875,  2679,  1379,   706,  1683,  1684,  3276,   571,
   -2908,  1653,   692,  1722,  2909,  2106,  3760,  3425,  2264,  1612,
    1774,  1851,  2265,  2033,  3738,  5251,  3456,  3077,  1192,  5004,
    1364,   692,  4752,  1365,  4917,  1749,  3770,  2722,  2723,  1362,
    1363,  1816,  4753,  1524,  2336, -2135,  3367,  3668, -2906,  3185,
    4779,  2646,  1366,  3239,  3240,  1409,  3669,  2224,  1750,  2224,
    2224,  1982,  2227,  4083,  2227,  2227,  3057,  1765,  5016,  1366,
    3613,  3614,  2997,  3962,  2998,  1364,  1854,   664,  1365,  1364,
    1028,  3387,  1365,  1293,  5335,  1688,  2107,  3632,  3633,  3457,
     614,  1366,  1852,  3145,  3105,  1654,  5045,  2019,  3904,  1366,
     692,  4929,  3008,  1293,  3805,  4949,  2328,  2797,  1716,  1814,
    2484,   957,  1362,  1363,  1362,  1363,   580,  2467,   692,  4934,
    2802,    14,  4527,  2805,  2806,  5133,  1853,  1366, -3059,  2213,
    1362,  1363,  2157,  2728, -2907,  2354,  1362,  1363,  3531,  3532,
    1362,  1363,  1362,  1363,  3537,  2064,  2486,  2816,  1362,  1363,
     604,  2016,  3545,  3546,  2358,  2994,  2690,  2871,  3553,  2995,
    1969,  3245,  4827,  2328,  1364,  1855,  4955,  1365,  1911,  2913,
    3116,  3117,  3111,  1362,  1363,   706,  4431,  2017,  4797,  3793,
    5172,  5173, -2912,  2741,  4801,  4434,  1930,   731,  2600,  2329,
    3854,  2214,  4734,  1364,  1609,  3110,  1365,  3352,  1991,  1362,
    1363,  4733,  1854, -1296,  2615,  3120,   615,  1364, -2905,  1397,
    1365,   706, -2909,  2024,  5197,  1096,  3658,  2027,  2063,  1382,
    1364, -3007,  1178,  1365,  2948,   706,  1778,  2691,  5204,  1658,
     706,   692,  1638,  1364,  3565,  4770,  1365,  -546,   158,  1968,
    5253,  3806,  3194,  1220,  2448,    27,  2329,  3581,  4984,  2993,
    4985,  4350,  2107,  4815,  2181,  1336,  1362,  1363,  1293,   706,
    4216,  2692,  1364,  3875,   957,  1365,  1362,  1363,  4780,  3665,
    1362,  1363,  2033,  2634,  2635,  3905,  1179,   706,  1364, -2135,
    5243,  1365,  2077,  4754,  4956,   706, -1296,  3717,  2108,  5017,
    2088,  1855,  2091,  2107,  3516,  3174,  4935,   692,   641,  2898,
    1364,   643,  2034,  1365,  1366,  1593,   739,  4918,  5159,  1362,
    1363,  2111, -2908,  2608, -2135,  1718,   628,  3517,  1362,  1363,
    -546,   652,  2479,  1968,  2729,  1364,   692,  5336,  1365,  1796,
    3269,  1362,  1363,  1362,  1363,  2182,  3970,  2693,   692,  5205,
     692, -2349, -3007,  1364,  3079,  2770,  1365,  1362,  1363,  1366,
   -2906,  1337,  -548,  1366,  2097,  4599,  1362,  1363,  4132,  4133,
    4134,   665,  2642,  2018,  2290,  1530,   706,   706,  2489,  2726,
    2159,  3675,  3676,  1180,  3963,  1236,  5206,   660,   706,  2166,
    3784,  1362,  1363,   957,  3416,  4781,   670,   666,   706,  4231,
    2360,  3013,  1362,  1363,  2601,  4563,  4059,  1362,  1363,  5095,
    2186,  1856,  1559,   739,  2215,  5018,  2294,  -232,  1530,   728,
    4055,   571,   571,   571,   692,   692,   571,   706,   692,  3783,
    3153,  2899,  2205,  2206,  2207,   667,  2694,  2210,  2359,  3794,
    2229,   571,  3105,   706,  5054, -2135, -2907,   571,  1366,  4916,
    3418,  1364,  2230,  4351,  1365,  1162,  3372,  3807,  2236,   959,
    4957,  5096,  3081,  1612,  2340,  4380,   654,  2490,   692,  1362,
    1363,  1362,  1363,   671,  1096, -2135,  2837,  1366,  2824,  1897,
    2841,  2842,  1898,  -548,  1857,  4232,  1011,  1823,  4755,    42,
    2454,  1366,  2208,  2209, -2912,  3000,  2212,  2748,  3928,   668,
    3824, -2135,  2235,  3971,  1366,  1401, -2349,   706,   706,  1823,
    2491,  1362,  1363,  3825,  2224,  5254,  1659,  1366,  1823,  2227,
     673,  1823,  2650,  2498,  1364, -2349,  1364,  1365,  2453,  1365,
     706,  2295,  2296,  2297,   692,   692,  2247,  1856,  2999,  1362,
    1363,  3227,  1364,  2948,  3134,  1365,  1366,  4710,  1364,  1362,
    1363,  1365,  1364,   972,  1364,  1365,  1031,  1365,  5208,  1767,
    1364,  2034,  1366,  1365,   749,  2499,  1398,  1391,  1392,  1393,
    1394,  5233,  3556,  3808,  5237,   921,   696,  3220,   706,  2183,
    2330,  2502,   655,  4322,  1366,  1364,  1639,  4060,  1365,  4326,
    3373,  1823,  4233,  4330,  4331,  1749,  3708,  3709,  3710,  4335,
    1011,  5097,  2298,  2299,  2393,   692,  4760,  5363,  2062,  1366,
    5261,  1364,  3228,  2125,  1365,   158,  2126,  1181,  1750,  2900,
     692,  1851,  1454,  4008,  3361,  1824,  3798,  1366,  2507,  1568,
    2901,  2876,  2771,  3958,  3959,  3960,  2602,  2330,  2902,  1535,
    2362,  1231,  2651,  2465,  1153,    57,  2516,  1846,   699,  1362,
    1363,  4196,  3567,  2603,   973,  4996,  1918,  1612, -2514,  1922,
    1362,  1363,  4005,  2913,  2038,  2575,  4006,  2813,  1364,  1505,
    3948,  1365,  2695,  2395,  3210,    60,  4061, -1296,  1364,   701,
    -749,  1365,  1364,  2061,  4958,  1365,  2814,  1032,  5311,  4737,
    1362,  1363,  1852,  4744,  4745,  3674,  3909,  4009,  1968,  1182,
    3262,  1183,  1362,  1363,  4525,  3746,  2741, -1339,  3910,  1717,
    1455,  -546,  2618,  1163,  4526,  1456,  1154,  4044,  4047,  4050,
    4059,  1364,  3229,  3734,  1365,  1366,  3374,  5317,  5318,  1954,
    1364,   974,  3630,  1365,   702,  3909,   302,  2718,   304,  1609,
    1293,  2528,  1164,  1364,  2517,  1364,  1365,  3924,  1365,  2903,
   -2545, -2681,  4885,   692,  4465,  1362,  1363,  1362,  1363,  1364,
    3592,  1457,  1365,   692,  2482,  1400,  1362,  1363,  1364,  2877,
    3826,  1365,  4969,  1033,  1362,  1363,  1362,  1363,  1458,  3214,
    1362,  1363,  2127,  4484,  1569,  2622,  4875,  2719,  4877,  3035,
    1362,  1363,  4309,  1364,  3040,  4970,  1365,  2871,  1366,  3086,
    1366,  3215,  3375,  2597,  1364,  3115,  4466,  1365,  5224,  1364,
    3048,  3230,  1365, -2514,  1362,  1363,  1366,  2518,   302,  2523,
     304,  2540,  1366,  -749,   576,  3087,  1366,   577,  1366,   675,
    2993,  2549, -2514,  4485,  1366,  2535,  1767,  1362,  1363,  1362,
    1363,  2543,  3216,  1362,  1363,  2546,  4115,  2551,  2904,  1362,
    1363,  3194,  2624,   692,  4997,  3067,  3158,  5051,  5052,  1366,
    1718,   957,  3925,  1568,  4868,   692,   692,   715,  4527,  1362,
    1363,  1364,  2398,  1364,  1365,   149,  1365,  2765,  2552,   692,
    3154,   925,  1762,  1763,  1450,  1366,  4169,   136,  1011,  1450,
    5027,  3376,  2653,  4170,  1362,  1363,  1362,  1363,  2399,  2661,
    2661,  4060,  2661,  4206,  2554, -2545, -2681,  1362,  1363,  1011,
    1025,  2398,  4062,  1364,   719,  5013,  1365,  1011,  1011,   731,
    3263,  2625,  3128,   706, -2545, -2681,   692,  4207,   732,  1811,
     739,  1169,   692,  1362,  1363,   959,  2700,  2399,   727,  1362,
    1363,  1364,  1366,  2704,  1365,  1716,  1362,  1363,   744,  3205,
     576,  1364,  1366,   577,  1365,  4634,  1366,   706,   706,   692,
    4185,   692,  1362,  1363,  4278,  4278,   747,  2660,  2660,   150,
    2660,  2555,    60,  3131,  1293,   706,  1061,   138,  2359,  1799,
    2661,  2661,  2661,  4880,  2755,  2756,  1559,  3773,  4252,   746,
    4064,   706,  4601,  5075,  2684,  1366,  4260,  2818,  3749,  1505,
    1492,  1717,  3572,  2690,  1366,  4310,  5271,  4238,  1559,  1362,
    1363,  2721,  3595,  2948,  2559,   915,  2859,  1366,  1569,  1366,
    1612,  4223,  4224,  2577,  1362,  1363,  4228,  1521,  2790,   917,
    4235,  1609,   931,  1366,  4239,  1011,  3611,  1586,  3612,  4254,
    4256,  4258,  1366,  3380,   965,  4259,  2519,  3231,  2660,  2660,
    2660,  1364,  3625,  4424,  1365,  4111,  1729,  1362,  1363,  4113,
    2483,  2871,  1364,   151,  2519,  1365,  3000,  1366,  2453,  3797,
    -749,  4452,   692,  2999,  2691,  3726,  3726,  3726,  1366,  2784,
     981,  2787,  4176,  1366,   576,  1014,  3635,   577,  4715,  2811,
    1109,  4716,  1364,  1016,  3741,  1365,  5195,   692,  3380,  3380,
    1670,  2827,  3636,  5194,  1364,  2054,  2796,  1365,  2692,  3927,
    1800,   134,  2839,   571,  1801, -2019,   571,  1362,  1363,  1362,
    1363,  1036,   576, -2136,  2840,   577,  3982,  3377,  1802,  3776,
    2858,   302,  3380,   304,  4323,  4182,  2863,   787,  4057,  1038,
    2804, -2019,  1474,  1116,  3882,  1366,   302,  1366,   304,  2875,
    5188,  5189,  1718,   741,  2487,  2488,  3526,  1364,  1140,  1364,
    1365,  4345,  1365,  2576,  1011,  2823,  4446, -2019,  1364,  4085,
    4086,  1365,  2460,  4022,  4023,  1028,  1364,   677,  1364,  1365,
    1138,  1365,  1364,  -939,  2693,  1365,  4400,  1366,  4402,   636,
    1573,  1522,  1364, -2019,  1730,  1365,   636,  4100,  3007,  1148,
    1362,  1363,  1573,   706,  1258,  1259,  5216,   692,   795,   692,
    2480,  1150,  2946,  2508,  1400,  1366,  1364,   135,  1151,  1365,
    4409,  2886,  2309,  1362,  1363,  1366,  4062,  1152, -1775,   968,
    2893,  2894,  1166,  3631,  1159,  4108,   136,  4293,  1195,  1364,
    1192,  1364,  1365,  2485,  1365,  1364,  1185, -2136,  1365,  1205,
    4460,  1364,  1362,  1363,  1365,  2201,  2202,  1362,  1363,  2524,
    1400,  2481,  1400,  -749,  3194,  1968,  1209,  2741,  1213, -1231,
    1803,  1364, -1231,  2694,  1365,  2932,  1226,  1362,  1363, -3054,
    2063,  3002,  1731,  1233,  3005,  1306,  1234, -2108,  1303,   154,
     155,  1235, -1775,  1343,  4493,  4497,  1364,  2071,  1364,  1365,
    2072,  1365,  4170,  2073,   706,  4500, -1775,  1968,  3108,  1364,
    1237,  1609,  1365,  1331,  3269,   137,   706,  1238,   812,  1239,
    2310,  1362,  1363,  1362,  1363,  1366,  1344,  1345,  4154,  1767,
    1767,  1767, -1775,  1362,  1363,  1364,  1366,   957,  1365,  3133,
    1315,  1364, -1600,  2500,  1365,  1362,  1363,  1242,  1364,   138,
   -1775,  1365,  1657,  4990,  2501,  4881,  1243, -1775,  1662,  1663,
    1459,  1362,  1363,  4278,  1364,  1011,  1366,  1365,  1244,  1362,
    1363,  1505,  2525,  1916,  1399,  2354,  2537,  1400,  1366,  1011,
    1011,  1011,  1011, -1775,  2506,  1804,  1169,  1169,  1169, -1775,
    1245, -1775,  1246,  5364,  1362,  1363,  2515,  3173,  2538,  1400,
    1069,  1051, -1775,  3084,  2154,  2154,  2154,   831,   139,  1362,
    1363,  1364,  2337,  3673,  1365,  1247, -1775,  1362,  1363,  1362,
    1363, -1775,   706,  1362,  1363,  1248,  1364,  1729,  1249,  1365,
   -1775,  1366,  1718,  1366,  1362,  1363,  2539,  1400,  3928,  1250,
    4586,  3123,  1366,  5001,  4168,  2734,  5008,  3129,  1968,  2520,
    1366,   706,  1366,   706,   706,  4339,  1366,  1251,  1169,  1364,
    2531,  1252,  1365,  1362,  1363,  1253,  1366,  1129,  2532,  1625,
    2536,  1403,  5222,  1422,  2542,  1407,  3802,  2812,  2547,  1400,
     706, -2136,  1362,  1363,  2544,  1987,  1362,  1363,  1362,  1363,
    1366,  1134,  1135,  1254,  1136,  1255,  1137,  1256,  1362,  1363,
   -1775,  1626,  1362,  1363,  3143,  3144,  2735,  2736,  2545,  2695,
    3166,  3167,  2033,  1366,  1260,  1366, -2136,  1262,  2663,  1366,
    2664,  1364,  1263,  1698,  1365,  1366,    60,  3273,  3274,  4177,
    1400,  2550, -1775,  2553,  1362,  1363,  4595,  2556,  3883,  1264,
    1362,  1363, -1775,  2568,  1267,  1366,  4157,  1268,  4882,   692,
    1269,  4607,  3749,  1851,  1270,  1627,  4611,   140,  1271,  4613,
    1628,  3198,  1612,  2588,  3346,  1730,  3201,  2735,  2736,  1096,
    1366,  1272,  1366,  1273,   706,   706,  1274,  2605,  3390,  3391,
   -1775,  1451,  5001,  1366,   706,  3591,  2488,    60,  3570,  5008,
    3596,  5222,  1753,  2765,  1573,  4409,  3594,  1400,  2752,  2753,
    2754,  3602,  1364,  3627,  1400,  1365,  4044,  1062,  4047,  1366,
    4050,  1732,  1733,  2737,  1735,  1366,  1737,  3181,  1460,  3241,
    3118,  1275,  1366,  1453,  1852,  1364,  1462,  3603,  1365,  3726,
    3438,  2441,  2813,  3606,  1738,  1276, -1775, -2136,  1366,   141,
    3609,    77,  2363,   865,  2999,  1969,  3752,  3753,  4667,  3758,
    3759,  2814,  1277,  1731,  1364,  1463,  3610,  1365,  1853,  1364,
    1278,  3280,  1365,  2363, -1775,  2815,   571, -2136,  1968,  1279,
    4376,   692,   692, -3054,  1280,  3746,  1281,  3285,   706,  1364,
     154,   155,  1365,  1069,  1051,  1366,  4732,  4123,  1400,  1282,
    4771,  1988,  4657, -2136,  4376,  1379,  4137,  4138,  2224,  2441,
    1366,  3567,  1471,  2227,  1096,   142,  1285,   706,   706,  3444,
    3445,  1379,  1286, -1775,  3446,  3447,  3448,  1480,  3615, -2108,
    2441,  4769,  4766,  1364,  1287,  1364,  1365,  1288,  1365,  1294,
    1629,  4416,  4417,  1366,  1854,  1364,  1295,  1011,  1365,  3293,
    3294,  4418,  4419,  2314,   706,  2415,  2416,  1364,  1296,  2816,
    1365,  3616,  4420,  4421,  1379,  2341, -1939,  4218,  4219,  4220,
    4765,  2429,  4767,  1364,  4221,  1687,  1365,  4427,  4430,  2342,
   -1775,  1364,  4443, -3054,  1365,  3525,  4447,  1400,  3383,  3384,
    3385,  3386, -1775,  3388,  3389,  4462,  1400, -2108,  4476,  4477,
    1297,  2034,  1298,  5001,  5008,  1366,  1364,  4847,  4848,  1365,
    1299,  4517,  1300, -1775, -1775,  1301, -1775,  2354,  2989,  1630,
    1473,  1364,  2618,  3620,  1365,  4487,  4488,  4616,  4617,  1364,
    1475,  1364,  1365,  1855,  1365,  1364,  2690,  2896,  1365,  2989,
    4240,  4631,  4632, -1775, -1775,  4681,  1364, -1775, -1775,  1365,
    1302,  3533,  3534,  1304,  3536,  1307,  3538,  3539,  3540,  3541,
    3542,  3543,  3544,  4168,  3247,  3547,  2415,  2416,  3552,  4889,
    4635,  4636,  3555,  4637,  4632,  1364,  4726,  4727,  1365,  4730,
    4727,  1308,  2429,  1309,  4679,  2354,  1366,  4794,  4795,  4807,
    4712,  1192,  1379,  1310,  1364,  2817,  1631,  1365,  1364,  1311,
    1364,  1365,  4962,  1365,  3621,  1312,  2354,  2691,  2441,  1366,
    1364,  4915,  1313,  1365,  1364,  4890,  1314,  1365,  4846,  3759,
    1382,  2431,  2432,  4598,  4093,  4880,  1472,  3622,  4860,  4727,
    5014,  5015,  1316,  1989,  2865,  1317,  1382,  1318,  1366,  4620,
    1319,  2692,  1320,  1366,  1011,  2442,  1364,  1321,  1688,  1365,
    1990,  1169,  1364,  1322,  2033,  1365,  3623,  1323,  2690,  3444,
    3445,  3624,  4253,  1366,  3446,  3447,  3448,  2343,  2364,  2154,
    1379,  1324,  2818,  1325,  1061,  5257,  1450,  4891,  2653,  1382,
    4983,  3626,  1479,   706,   706,   706,  4124,  5065,  5066,  2364,
     692, -3059,  1732,  1733,  1734,  1735,  1736,  1737,  5077,  5078,
    5093,  3759,  1326,  4409,  4951,  1327,  3732,  1366,  4585,  1366,
    5094,  3759,  2548,  2442,   706,  1738,  5294,  2693,  1328,  1366,
    1969,  1596,  2033,  1329,  5298,  3629,  1482,  3634,  1632,  2691,
    1330,  1366,  2431,  2432,  2442,  1334,  1293,  3637,  2443,  1335,
     706,   706,   706,  2033,  1338,  5056,  2344,  1366,  1484,  3639,
    5104,  3391,  5142,  4488,  1874,  1366,  5209,  4727,  3716,  1369,
    2690,  5316,  4841,  2692,  4255,  3641,  1339,  2859,  1633,  1856,
    5211,  4727,  4277,  3643,  1342,  2345,  5212,  4727,  5241,  5242,
    1366,  1346,  4861,  1597,  2354,  1347,  4864,  4822,   302,  1488,
     304,  3017,  1348,  3465,  1349,  1366,  3787,  2741,  3644,  5046,
    5249,  4727,  1370,  1366,  1350,  1366,  2694,  1382,  3800,  1366,
    1351,  4315,   706,  3645,  1384,  1385,  1402,  3018,   571,  1598,
    1366,  4105,  1510,  4106,  4325,  -939,   692,  4107,  3295,  3812,
    1968,  2691,  5250,  4727,  5258,  4727,  1506,  4339,  4440,  2693,
    5268,  4488,  3727,  3728,  4790,  1511,  1096,  2690,  1515,  1366,
    1532,  4257,  4066,  2346,   692,  4067,  1534,  1384,  1385,  1550,
    1371,  5280,  5281,  4068,  1552,  2692,  3855,  4445,  1366,  1878,
    3876,  1553,  1366,  1554,  1366,  1372,  3019,  1957,  1958,  3020,
    1555,  2858,  3886,  4069,  1366,  1382,  4451,  3021,  1366,  1563,
    4453,  1590,  4454,  3296,  3815,  1591,  5148,  3901,  1609,  3903,
    1595,  2444,  4455,  5149,  5290,  4040,  4456,  3022,  5295,  4727,
    5352,  5353,  2442,  1619,  1096,  1620,  4995,  1622,  2691,  1621,
    1366,  2033,  3842,  4474,  4475,  1641,  1366,  1645,  2694,  1646,
    1651,   154,   155,  2034,  4070,  1096,  1660,  2812,  4816,  1672,
    2690,  2693,  4893,  1661,  4867,  1674,  1671,  1679,  1744,  4328,
    1745,  4894,  2692,  3900,  1746,  2347,  1389,  1390,  1391,  1392,
    1393,  1394,  1752,  5225,  1754,  3876,  1373,  1756,  1851,  2986,
    1387,  1388,  1389,  1390,  1391,  1392,  1393,  1394,  1759,  1760,
    1879,  1764,  1772,  1773,  1882,  1384,  1385,  1781,  1474,  1780,
    1782,  1791,  1883,  1808,  5218,  1809,  1817,  4881,  1819,  3968,
    4071,  2034,  1397,  1823,  1830,  2443,  1849,  1850,  1861,  1868,
    1915,  2691,  5192,  1387,  1388,  1389,  1390,  1391,  1392,  1393,
    1394,  1900,  2034,  1916,  3023,  4798,  3909,  1917,  2693,  1929,
    2694,  1935,  3297,  1505,  5219,  5220,  1939,  3562,  3924,  1852,
    1941,  2004,  2695,  1947,  1948,  2692,  1379,  1965,  1975,    60,
    4478,  1979,  4033,  1968,  4038,  1998,  2028,  2029,  1011,  2037,
    4961,  1599,  2045,  1384,  1385,  5274,  2046,  2047,  2665,  4822,
    2048,  2049,  5275,  3374, -1775,  2050,  4377,  4378,  2052,  4895,
    2053,  2065,  2883,  2884,  2666,  2066,  4244,  2067,  4245,  1884,
    4721,  2098,  2813,  3734,  4051,  4385,  2068,  2094,  4054,  2895,
    2103,  2112,  2113,  2114,  5269,  1379,  4396,  4072,  2907,  2908,
    4073,  2814,  2117,  1096,  4403,  4404,  2118,  2694,  2119,  2133,
    5308,  2693,  2134,  2135,  3298,  2815,  2142, -2732,  1378,  2145,
    2149,  2150,  4818,  2151,  3024,  4246,  2152,  3299, -1775,  1600,
    2160,  1387,  1388,  1389,  1390,  1391,  1392,  1393,  1394,  3375,
    2162,  2161, -1775,  3925,  2667,  1886,  2167,  2668,  5307,  2196,
    4247,  2198,  3300,  3301,  2695,  1612,  3617,  -749,  2444,  4585,
    3302,  3303,  3304,  2199,  4561,  2203, -1775,  1379, -1775,  4565,
    4566,  4671,   587,  3909,  2238,   759,  2982,  2983,  2984,  2985,
    4882,  2239,  2240,  2241,  2244,  3910, -1775,  4200,  4805,  2243,
    2034,  4248,  2398, -1775,  4122,  2245,  4074,  1505,  2261,  2816,
    2694,  1601,  2276,  2280,  3901,  2282,  5048,  2277,   674,  2286,
   -1775,  1389,  1390,  1391,  1392,  1393,  1394,  2291,  2399, -1775,
    2308,  2317,  2322,  1716,  1602, -1775,  2327, -1775,  3376,  2339,
    2361,  4506, -2341,  2385,   588,  1379,  2377,  2386, -1775,  2388,
    2402,  2669,  2403,  2405,  2406,  2439,  4672,  2455,  3133,  2457,
    1603,  1382, -1775,  5076,  2463,  2496,  2695, -1775,  2469,  2471,
    3900,  4673,  2472,  2505,  3732,  2473, -1775,  1604,   787,  2495,
     589,  2497,  2503,  1374,  1375,  1376,  2504,  3198,  4294,  4166,
    2509,  2519,  2521,  4173,  1968,   706,  5038,  5039,  2566,  5041,
    2522,  4961,  1887,  1573,  3025,  1062,  1559,  2526,  2567,  2579,
    -749,  1265,  2530,  2534, -1415,   675,   675,  2541,  2557,  1889,
    1382,  2670,   590,  2558,  2563,  2578,  2580,  2581,  4652,  1969,
    2599,  2604,  2614,  1394, -1570,  1332,  1011,  1336,  2627,  2630,
    2656,   793,  2685,  2699,  2716,  2817, -1775,  2742,  4939,   795,
    2812,  2725,  4075,  2695,  2744,  2749,  3305,  2750,  -969,  2398,
    2751,  2758,  2760,  2767,  2768,  1380,  2769,  4178,  2772,  2773,
    2785,  2791,   706,   591,   635,  2792,  3026,  2774, -1775,  2775,
    3926,  2776,  4076,   802,   803,  2399,  5174,  2789, -1775,  2795,
    2798,  1381,  1382,  3876,   692,  4265,  2807,  2808,  5030,  1011,
    3927,  2822,  2821,  2829,  2830,  2851,  3027,  2847,  2862,  2861,
    2868,  2848,  1718,  2872,  1573,  2885,  4289,   706,  2887,  2930,
    1362,  1363,  2818,  2888,  4225,  4226, -1775,  2889,  2892,  4249,
    2024,  2890,  4308,  5139,  2933,  5140,  5141,  4243,  2891,  1384,
    1385,  2937,  2949,  2951,  3876,  2953,  2695,  2956,  4321,  4319,
    3876,  4324,  2980,  4038,  5147,  2981,  1011,  2957,  4736,   812,
    1382,  2958,  4264,  2988,  2959,  4038,  4336,  4334,  2960,  4341,
    1969,  5073,  4288,  2961,  3377,  4343,  4344,   692,  2962,  2812,
    4038,  4250, -1775,   154,   155,  3876,  3007,  2963,  4307,  3011,
    2964,  2965,  2966,  3016,  5285,  3003,  3041,  2967,  1384,  1385,
    4355,  2968,  2969,  2970,  3042,  2813,  3043,   571,  2971,  2972,
   -1775,  2973,  5262,  5119,  2974,  2975,   -69, -1608,  4363,  2976,
    2977,  3146,   592,  2978,  2814,   823,  2623,  2979,   706,  1870,
    1871,  1872,  1873,  1874,  3149,  3058,  3150,  3911,  2815,  3126,
    3151,  3059,  3099,  4390,  3160,  4342,  4353,   830,   831,  3072,
    2946,  3095,  3161,  3114,  3141,  1968,  3147,  -749,  1796, -1775,
    3136,  3125,  5346,  3142,  1011,  2671,  2672,  2673,  3162,  1968,
    1384,  1385,  5285,  1011,  3525,  1968,  5356,  1383,  3148,   593,
    3156,  1968,  5346,  3164,  3172,  3175,  3178,  3187,  5356,  3180,
    3199,  3202,  3203,  3206,  3207,  1387,  1388,  1389,  1390,  1391,
    1392,  1393,  1394,  3208,   594,  3212,  1870,  1871,  1872,  1873,
    1874,  2175,  2176,  3238,  3223,   676, -1775,  3242,  3213,  2264,
    3258,  3275,  2816,  5273,  3259,  3260,  3277, -1775, -1775,  3278,
    4541,  3286,  3292,  3347,  2813,  3348, -1941,  3358,  1384,  1385,
    -149,  3353,  3359,  3365,  3370,  1875,  1876,  1877,  1878, -1775,
   -1775,  3371, -1775,  2814,  1386,  1388,  1389,  1390,  1391,  1392,
    1393,  1394,  1536,   677,   677,  3454,  1475,  2815,  3439,  3440,
     595,  3515,  1537,  3441,  3518,   596,  3519,  3520,  3560, -1775,
   -1775,  3528,  3732, -1775, -1775,  3529,   933,  1538,  3530,  3564,
    1969,  2464,  3573,  3586,  3578,   597,  3588,  3582,  3664,  1539,
    1540,  1541,  3670,  3678,  3589,  3705,  3686,  3590, -1941,  3713,
    3718,   596,  -765,  3597,  1011,  3646,  5328,  3598,  3663,  1542,
    4889,   598,  1875,  1876,  1877,  1878,  1387,  1388,  1389,  1390,
    1391,  1392,  1393,  1394,  3561,  4522,  3711,  4982,   599,  3706,
    3656,  3657,  3672,  3677,   706,  1573,  4545,  4545,  3682,   678,
    -749,  2816,  3968,  3735,  3736,  2711,  3739,   679,  2817,  1879,
     857,  1880,  1881,  1882,  3742,  4674,  4890,  3743,  4675,  3755,
    3754,  1883,  3740,  3748,  3751,  3761,  4880,   934,  3765,   863,
    3766,  3769,  3777,  4510,   865,  4676,  3788,  3778,   866,  3780,
    3792,  3795,  3799,  4524,  1387,  1388,  1389,  1390,  1391,  1392,
    1393,  1394,  3876,  3282,  3801,  3803,  3810,  3814,  3836,   692,
    3839,  4564,   936,  3416,  3887,  3891,  4570,  4549,  3892,  3896,
    4550,  3909,  1364,  3917,  3919,  1365,  3921,  3922,  4891,   937,
    3920,  3923,   759,  3930,  3931,  2818,  1879,  3935,  1880,  1881,
    1882,  3932,  3936,  3129,  3938,  3966,  4591,  3939,  1883,  3944,
    3945,  3946,  2079,  3953,  3973,  4038,  3876,  3986,  2080,   706,
    3876,  4590,  4038,  4592,  3876,  3876,  5360,  4016,  1884,  3876,
    4038,  2081,  3987,  4011,  4028,  4038,  4030,  4562,  4038,  4982,
    4031,  4039,  4088,  4040,  4615,  3687,  4065,  2817,  4084,  4089,
    3309,  4097,  3310,  2585,  4096,  3688,  4109,  3651,   941,  4125,
    4118,  4626, -1705,  4672,  4129,  5357,  4126,  4130,  4131,  4140,
    3689,  4892,  4142,  4147,  2125,  4148,  4156,  4151,  4673,  4189,
    2946,  4190,  3690,  3691,  3692,   787,  4202,  3311,  4203,  4209,
     942,  4210,  4266,  1885,  1886,  4267,   943,  4212,  4268,   302,
    4648,   304,  3693,  4213,  4522,  1884,  3312,  4038,  4275,  4316,
    4971,  4282, -1891,  4647,  3313,  4622,  4311,  4327,  4972,  1543,
    4329,  4354,  4357,  4361,  2818,  4358,  4364,  4365,  4368,  4381,
    4386,  4021,  4384,  4397,  4294,  4410,  -939,  3883,  1544,  4412,
     944,  4415,  4422,  3314,  4413,  4425,  4426,  4973,   793,  4427,
    4428,  4433,  4430,  4435,  4437,  4438,   795,  4439,  1746,  4448,
    4444,  3315,  4449,  4450,  4458,  4464,  4469,  4459,  4471,  4481,
    1885,  1886,  4472,  4483,  4489,  4492, -1675,  4477, -1680,  4513,
    4692,  1424,  1011,  4309,  4540,  4542,  4551,  4558,  4552,  4557,
     802,   803,  -660,  4571,  3316,  4559,  4573,  4577, -2108,  4578,
    3818,  4580,  3820,  3822,  3823,  1424,  4581,  3201,  4588,  4589,
    3827,  4605,  3452,  4614,  3831,  3832,  3833,  3834,  3835,  4608,
    3837,  3838,  4623,  3840,  3841,  4522,  3843,  3844,  3845,  3846,
    3847,  3848,  3849,  3850,  3851,  3852,  4545,  4621,  3856,  3857,
    3858,  1887,   154,   155,  4833,   692,  4639,  4640,  4650,  4659,
    4661,  4664,  4665,  4893,  4666,  4738,  1366,  1888,  1889,  3876,
    3876,  4680,  4894,  4686,  4300,  4687,   812,  4670,  4699,   302,
    4688,   304,  4701,  4697,  4720,  2024,  4711,  4722,  4856,  4741,
    3317,  4724,  4712,  4717,  4974,  4269,  4729,  3318,  1425,  4739,
    3876,  2082,  4718,  1545,  4758,  3876,  4768,  2021,  4750,  4772,
    4774,  4775,  1969,  3915,  4782,  3319,  4038,  4776,  4881,  4803,
    4806,  4789,  1425,  4810,  4811,   947,  1426,  3933,  1887,  1427,
    4812,  4825,  4823,  2083,  4814,  4817,  4828,  4824,  4827,  4829,
    4390,  2084,   823,  4802,  1888,  1889,  4831,  4835,  2341,  4843,
    1426,  4845,  3694,  1427,  4850,  4982,  4009,  4853,  4863,  4859,
    4873,  4903,  2342,  4865,   830,   831,  4904,  1546,  4905,  4906,
    1717,  3695,  1428,  4937,  3321,   950,  4945,  4948,  4975,  4953,
    4986,  4964,  5005,  5019,  1547,  5021,  5029,  5023,  5024,   951,
    2085,   692,  5033,  5026,  3322,  1429,  1428,  5028,  4976,  5034,
    4895,   302,  5035,   304,  5036,  5040,  5042,  5043,  5050, -2981,
    5055,   910,  5057,  5063,  5060,  5070,  4522,  5071,  5080,  1429,
    5072,  5083,  5084,  5089,  4977,   302,  5092,   304,  5100,  5114,
    5122,  4545,  5123,  5136,  5129,  5137,  5144,  4923,  5145,  5152,
    3876,  1011,  2086,  4872,  5176,  5151,  5161,  1009,  5164,   910,
    5180,  5181,  5182,  5183,  4902,  5186,  5187,  1009,  3412,  4832,
    3398,  3323,  5202,  3324,  1430,  5213,  5227,  5221,  5226,  5228,
    1106,  3325,  5231,   954,  5252,  5246,  3876,  5255,  5256,  5276,
    2765,  5277,  5278,  5289,   910,  4931,   692,  5297,  1430,  1431,
    5299,  5296,  5312,  5315,  5309,  5320,   955,  5323,   956,  4940,
    4944,  5327,  5326,  5329,  3696,  5332,  5068,  5333,  4648,  5347,
    5359,  4882,  1507,  1431,  3209,  1514,  3554,  2043,  4655,  4653,
    3684,  4647,  4654,  1640,  3830,  4994,  3697,  3907,  1699,  4723,
    4993,  5103,  5248,  1758,  4991,  1969,  4855,  4633,  4800,  4968,
    4852,  4649,  4946,  4407,   646,  1108,  5185,  3201,  2746,  3201,
    2343,  2649,  3701,  4479,  4930,  2955,  3326,  2946,  3722,   910,
    4146,  1212,  3171,  3169,  1810,  3170,  2375,  2626,  3327,  5010,
    4751,  3949,  4866,  3423,  4610,  4150,  4690,   857,  4482,  4155,
    2714,  5163,  4674,   910,  4963,  4675,  5230,  4693,   910,  5325,
    3698,  5288,  5314,  3862,   706,  5091,   863,  4165,  4496,  2833,
    3947,   865,  4819,  4349,  4556,   866,  5321,  3699,  3952,  5053,
    5138,  1432,  5032,  4569,  3328,  3329,  3330,  4000,  4078,  4630,
    1433,  3331,  4027,  5037,  5160,  1096,  4112,  5031,  3368,  2344,
    4379,  4114,   910,  5293,  3648,  1432,   683,  4110,  3332,  1434,
    5025,  3333,  4978,   684,  1433,  5259,  5121,  5260,  5191,  5067,
    5118,  4392,   910,  3950,   154,   155,  4869,  1435,  2345,  4862,
    4348,  3334,  1665,  1434,  3184,  2262,  4933,  1766,  3246,  2936,
    5157,  4778,  2440,  2394,  3157,  2724,  3715,  4141,  5175,  1743,
    3335,  1435,  4587,  5150,  2326,  3662,  3362,  2881,  2409,  3034,
    4128,  3032,  3681,  2022,  3785,  3270,   692,  3264,  4504,  1914,
    4120,  3254,   910,   910,   910,   910,  1436,  4988,  3968,  1437,
    4849,  5244,  4414,  5245,   910,  1848,  3121,  4463,  4764,  5125,
    4763,  4678,  5069,  4785,  4669,  4545,  3774,  4545,  4545,  2864,
    1436,  4703,  4761,  1437,  5135,  3001,  2346,  3885,   685,  1438,
    2096,  3190,  2140,  4490,  3155,  4160,  4195,  4159,  -660,  5158,
    1122,  4227,  5247,   910,  4230,  1442,  5112,  2217,  1232,   576,
    2462,  2800,   577,  1438,  5102,  1102,  2801,  3243,  1712,  3133,
    4944,  1105,   690,  4731,  2643,  2148,  1969,  4145,  5310,  4907,
    5324,  5044,  4968,  5358,  5361,  2410,  1341,  2411,  3786,  2825,
    5134,  4164,   706,  3222,  2874,  4175,   910,  1064,  2777,  2598,
    1065,  3219,  2780,  3218,  5184,  2284,  1046,  2697,  3957,  2158,
    2087,  3204,  1009,  1009,  1551,  2929,  1009,  3279,  3702,  4830,
    3969,  1048,  5305,  5199,  1557,  3782,  4545,  4545,  4186,  3256,
    5287,  4505,  1145,  4545,  5322,  1146,  1702,  1147,  2347,     0,
    1703,  5168,  5169,  1704,  2287,     0,     0,     0,     0,     0,
    1009,  2412,  2413,     0,  2414,  2415,  2416,  2417,  2418,     0,
    2419,  2420,  2421,  2422,  2423,  2424,  2425,  2426,  2427,     0,
    2428,  2429,  2430,     0,     0,     0,     0,     0,     0,  5198,
       0,     0,     0,   706,     0,     0,  3525,  3525,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4545,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  5362,  5349,     0,     0,
    5238,  5239,     0,  5351,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   706,     0,     0,     0,     0,     0,
    5291,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2431,  2432,     0,     0,     0,     0,     0,     0,     0,
     910,     0,     0,   910,  1009,     0,     0,  1969,     0,     0,
       0,   706,     0,     0,     0,     0,     0,   706,     0,     0,
       0,  1969,     0,     0,     0,     0,     0,  1969,   910,   910,
    5319,     0,     0,  1969,     0,     0,     0,   910,   910,   910,
     910,   910,   910,   910,   910,   910,   910,   910,   910,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   910,   910,
       0,   910,   910,   910,     0,     0,     0,     0,   910,   910,
     910,     0,     0,   910,   910,   910,   910,   910,   910,     0,
     910,     0,   910,   910,     0,     0,     0,     0,     0,     0,
     910,   910,     0,   910,   910,   910,   910,   910,     0,     0,
       0,     0,   910,   910,   910,   910,     0,   910,   910,   910,
       0,   910,     0,   910,   910,   910,   910,   910,     0,     0,
     910,     0,     0,   910,   910,     0,     0,     0,   910,     0,
       0,     0,   910,   910,   910,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   910,   910,   910,     0,     0,     0,
       0,     0,     0,     0,   910,     0,     0,     0,     0,     0,
       0,   910,   910,   910,   910,     0,     0,     0,     0,     0,
       0,     0,   910,   910,   910,     0,   910,   910,   910,   910,
     910,     0,   910,   910,   910,   910,   910,   910,   910,   910,
       0,     0,     0,   910,     0,   910,     0,     0,  3397,     0,
       0,     0,     0,     0,  3398,     0,  3399,  3309,  3400,  3310,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3309,     0,  3310,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  -909,  -909,     0,  3311,     0,     0,     0,     0,     0,
       0,     0,  3401,  -909,     0,     0,     0,  3311,  3402,     0,
       0,     0,     0,  3312,  3403,     0,     0,     0,     0,     0,
       0,  3313,     0,     0,     0,     0,  3312,     0,     0,     0,
       0,     0,   910,     0,  3313,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3404,     0,     0,     0,   910,     0,
    3314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3314,     0,  1746,     0,     0,  3315,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1746,     0,
       0,  3315,     0,     0,  3309,     0,  3310,     0,     0,     0,
    3405,  3406,     0,     0,     0,     0,     0,     0,     0,  3407,
       0,  3316,     0,     0,     0,     0,     0,     0,  3408,     0,
       0,     0, -1049,     0,  3316,     0,     0,   910,  -909,  -909,
       0,  3311,     0,     0,  3409,     0,     0,     0,     0,     0,
    -909,     0,   910,     0,     0,     0,     0,     0,     0,  1013,
    3312,     0,     0,     0,     0,     0,     0,     0,  3313,     0,
    3410,     0,     0,     0,     0,     0,  2225,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1124,     0,   302,  3314,   304,     0,
       0,     0,     0,     0,     0,     0,     0,  3317,     0,   302,
       0,   304,  1746,     0,  3318,  3315,   910,  3411,     0,     0,
    3317,     0,     0,     0,     0,     0,     0,  3318,     0,     0,
       0,     0,  3319,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3319,     0,     0,  3316,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1211,
    3412,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3321,     0,     0,     0,     0,     0,     0,  1240,     0,
       0,     0,     0,     0,  3321,     0,     0,     0,     0,     0,
       0,  3322,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   302,  3322,   304,     0,     0,  3413,     0,
       0,     0,     0,     0,  3317,     0,     0,     0,     0,     0,
       0,  3318,  1284,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1009,     0,     0,     0,  3319,
       0,     0,  1305,     0,     0,     0,     0,     0,     0,  3309,
       0,  3310,     0,     0,     0,     0,     0,  3414,  3323,     0,
    3324,     0,  3415,     0,     0,     0,     0,     0,  3325,     0,
       0,  3323,     0,  3324,     0,   910,     0,     0,  3416,     0,
       0,  3325,     0,     0,     0,     0,  3311,     0,     0,     0,
       0,     0,     0,     0,     0,  1356,     0,     0,  3321,     0,
       0,     0,     0,     0,     0,  3312,     0,     0,     0,     0,
       0,     0,     0,  3313,     0,     0,     0,     0,  3322,  3417,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3418,  3419,  3420,  3421,     0,     0,
       0,     0,  3314,  1421,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3326,     0,     0,     0,  1746,     0,     0,
    3315,     0,     0,     0,     0,  3327,  3326,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3327,     0,
       0,     0,     0,     0,     0,  3323,  1481,  3324,     0,     0,
       0,     0,     0,  3316,     0,  3325,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   910,   910,   910,     0,     0,
       0,  3328,  3329,  3330,     0,     0,     0,     0,  3331,     0,
       0,   910,     0,     0,  3328,  3329,  3330,     0,     0,     0,
       0,  3331,     0,     0,     0,  3332,     0,     0,  3333,     0,
       0,     0,     0,   910,     0,     0,     0,     0,  3332,   910,
       0,  3333,   910,     0,   910,     0,     0,     0,  3334,     0,
     910,     0,   910,   910,     0,     0,     0,     0,   302,     0,
     304,  3334,     0,     0,     0,     0,  3422,  3335,     0,  3317,
    3326,     0,     0,     0,     0,     0,  3318,     0,     0,   910,
    3335,     0,  3327,     0,     0,     0,     0,     0,  1442,     0,
       0,     0,     0,     0,  3319,     0,  5081,  5082,     0,     0,
    5085,  5086,  5087,  5088,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  5113,     0,     0,     0,     0,     0,  3328,  3329,
    3330,  3880,     0,     0,     0,  3331,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1049,     0,
       0,     0,  3332,  3321,     0,  3333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   910,     0,     0,     0,     0,
       0,     0,     0,  3322,   910,  3334,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3335,     0,     0,     0,     0,   910,
       0,     0,     0,     0,     0,     0,     0,     0,  5170,  5171,
    1788,     0,     0,  1789,     0,     0,     0,  5179,     0,     0,
     910,     0,     0,   910,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   910,  1821,  1822,
    3323,     0,  3324,     0,     0,     0,     0,  1832,  1833,     0,
    3325,  1836,  1837,  1838,  1839,  1842,  1843,  1844,  1845,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1862,  1863,
       0,  1864,  1865,  1866,     0,     0,     0,     0,  1892,  1893,
       0,     0,     0,  1902,  1903,  1904,  1905,  1906,  1907,     0,
    1909,     0,  1912,     0,     0,     0,     0,     0,     0,     0,
    1920,  1921,     0,  1924,  1925,     0,     0,     0,     0,     0,
    1009,     0,  1931,  1932,  1933,  1934,     0,  1936,     0,     0,
       0,  1940,     0,  1942,  1943,  1944,  1945,  1946,     0,     0,
    1949,     0,     0,  1952,  1953,  3326,     0,     0,  1956,     0,
       0,     0,  1959,  1963,  1964,     0,     0,  3327,     0,     0,
       0,     0,     0,     0,  1972,  1973,  1974,     0,     0,     0,
     910,     0,     0,     0,  1978,     0,     0,     0,     0,     0,
       0,  1983,  1984,  1985,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3328,  3329,  3330,     0,     0,     0,     0,
    3331,     0,     0,     0,     0,  2025,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3332,     0,     0,
    3333,     0,     0,     0,  1009,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   910,     0,
    3334,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3335,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2100,     0,     0,     0,     0,     0,     0,     0,
       0,   910,     0,     0,     0,   910,     0,     0,  2116,     0,
     910,   910,     0,     0,     0,     0,     0,     0,     0,   910,
       0,   910,     0,   910,   910,   910,   910,     0,     0,   910,
       0,     0,     0,     0,     0,     0,     0,   910,     0,     0,
     910,     0,   910,     0,   910,   910,     0,   910,     0,   910,
       0,   910,   910,   910,   910,     0,   910,     0,   910,     0,
       0,   910,     0,     0,     0,     0,     0,     0,     0,     0,
     910,     0,     0,     0,     0,     0,     0,  2169,   910,     0,
       0,   910,     0,   910,     0,     0,   910,   910,     0,   910,
     910,     0,  2191,     0,   910,   910,   910,     0,     0,     0,
     910,   910,   910,     0,   910,     0,   910,     0,   910,     0,
     910,     0,   910,     0,     0,     0,     0,     0,   910,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   910,     0,     0,     0,     0,     0,
     910,     0,     0,   910,     0,     0,     0,     0,     0,   910,
       0,     0,     0,   910,     0,     0,  2251,   910,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3309,     0,
    3310,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  -909,  -909,     0,  3311,     0,     0,     0,     0,
       0,     0,  1009,     0,  -909,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3312,     0,     0,     0,     0,     0,
       0,     0,  3313,  1009,     0,     0,     0,     0,     0,     0,
       0,  1009,  1009,   910,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3314,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1746,     0,     0,  3315,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4346,   910,     0,     0,     0,
       0,  3398,     0,  3399,     0,     0,     0,     0,     0,     0,
       0,     0,  3316,     0,   910,     0,     0,  3309,     0,  3310,
       0,     0,     0,     0,     0,     0,  2225,     0,  2225,  2225,
       0,     0,     0,     0,     0,  2474,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3401,
       0,     0,     0,     0,  3311,     0,     0,     0,     0,  1009,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3312,     0,     0,     0,     0,     0,     0,
       0,  3313,     0,     0,     0,  3344,     0,   302,     0,   304,
       0,  3404,     0,     0,     0,   910,     0,     0,  3317,     0,
       0,     0,   910,     0,     0,  3318,     0,     0,     0,     0,
    3314,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3319,     0,  1746,     0,     0,  3315,     0,
    3381,     0,     0,     0,     0,     0,     0,  3405,  3320,     0,
       0,     0,  3381,  3381,     0,     0,  4347,     0,     0,     0,
       0,  3344,     0,     0,     0,  3408,     0,     0,     0,     0,
       0,  3316,     0,     0,     0,  2570,  2572,  2574,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3321,     0,     0,     0,     0,     0,  1009,   910,
       0,     0,     0,     0,     0,     0,     0,  3410,     0,     0,
       0,     0,  3322,  2606,     0,     0,     0,     0,     0,     0,
       0,     0,  2611,     0,  2612,     0,     0,     0,     0,  3381,
    3381,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   302,     0,   304,     0,
       0,     0,     0,     0,   910,     0,     0,  3317,   910,  2640,
       0,     0,     0,     0,  3318,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3323,
       0,  3324,  3319,     0,     0,     0,     0,   910,   910,  3325,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3412,     0,     0,
       0,     0,     0,   910,     0,     0,     0,     0,     0,     0,
       0,     0,   910,     0,   910,     0,   910,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3321,     0,     0,     0,  2720,     0,     0,     0,     0,
       0,     0,     0,     0,  2733,     0,     0,     0,   910,     0,
       0,  3322,     0,   910,     0,  3413,     0,     0,     0,     0,
       0,     0,     0,     0,  3326,     0,     0,     0,     0,  2191,
       0,   910,     0,     0,     0,     0,  3327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1009,
    2778,     0,     0,     1,     0,     2,     0,     0,     0,     0,
     910,     0,     0,  1009,  1009,  1009,  1009,  2788,   910,  3415,
       0,     0,     0,     3,     0,     0,     0,     4,  3323,     0,
    3324,     0,  3328,  3329,  3330,     0,     0,     0,  3325,  3331,
       0,     5,     6,     0,     0,     7,     0,     0,     0,     8,
       0,     0,     0,     0,     9,    10,  3332,     0,     0,  3333,
       0,     0,     0,     0,     0,   910,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    11,     0,     0,     0,  3334,
       0,     0,     0,  2225,     0,     0,     0,     0,     0,     0,
       0,     0,  3419,     0,    12,     0,     0,     0,  3335,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      13,     0,     0,  3326,     0,     0,     0,     0,     0,    14,
       0,    15,    16,     0,     0,  3327,     0,     0,     0,     0,
    2873,     0,     0,     0,    17,     0,    18,     0,     0,     0,
       0,  3344,     0,     0,     0,     0,     0,     0,     0,    19,
    3336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    20,     0,     0,     0,     0,
       0,  3328,  3329,  3330,     0,     0,  3344,     0,  3331,     0,
       0,     0,     0,     0,    21,     0,     0,     0,     0,     0,
       0,     0,     0,   910,     0,  3332,     0,     0,  3333,     0,
       0,     0,    22,     0,     0,    23,     0,     0,  2952,     0,
       0,    24,     0,     0,     0,    25,     0,     0,  3334,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
       0,     0,     0,     0,     0,     0,     0,  3335,     0,     0,
       0,     0,     0,    27,     0,    28,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3344,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,  3010,     0,     0,     0,  3012,     0,     0,     0,     0,
    3014,  3015,     0,    30,     0,     0,     0,    31,     0,  1839,
       0,  3033,     0,  1839,    32,  3036,  3037,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3044,     0,     0,
    3045,     0,  3046,     0,  3047,     0,     0,  3049,     0,  3050,
       0,  3051,  3052,  3053,  3054,     0,  3055,     0,  3056,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3060,     0,     0,     0,     0,     0,     0,     0,  3061,     0,
       0,  3062,     0,  3063,     0,     0,  3064,  3065,     0,  3066,
       0,  1009,     0,     0,  3069,  3070,  3071,     0,     0,     0,
    3073,  3074,  3075,     0,  3076,     0,  3078,     0,  3080,     0,
    3082,     0,  3083,     0,     0,     0,     0,     0,  3085,     0,
       0,     0,     0,     0,    33,     0,  3381,     0,     0,     0,
       0,     0,     0,     0,  3109,     0,     0,   910,     0,     0,
       0,     0,     0,    34,     0,    35,     0,     0,     0,  3119,
       0,     0,     0,  3124,     0,     0,     0,     0,     0,     0,
       0,    36,     0,     0,     0,     0,     0,     0,     0,     0,
     910,     0,     0,    37,     0,     0,   910,   910,     0,   910,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     910,     0,     0,     0,     0,   910,     0,     0,   910,    38,
     910,   910,    39,     0,    40,     0,    41,    42,     0,     0,
      43,    44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    45,     0,     0,    46,     0,     0,     0,     1,
       0,     2,     0,     0,     0,     0,    47,     0,     0,     0,
       0,   910,     0,  1124,     0,     0,     0,     0,     0,     3,
       0,    48,     0,     4,     0,     0,    49,    50,    51,     0,
       0,     0,     0,     0,     0,     0,     0,     5,     6,     0,
       0,     7,     0,     0,     0,     8,   910,     0,     0,     0,
       9,    10,     0,     0,     0,     0,     0,     0,  1009,    52,
       0,     0,     0,     0,     0,     0,  2191,    53,     0,     0,
       0,    11,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   910,     0,  2191,     0,     0,     0,     0,     0,
      12,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,     0,    13,     0,     0,     0,
       0,     0,     0,     0,     0,    14,    55,    15,    16,     0,
      56,     0,   910,    57,     0,     0,     0,     0,    58,     0,
      17,     0,    18,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    59,    60,     0,  3349,     0,     0,     0,     0,
      61,    20,  3357,     0,     0,     0,    62,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    22,     0,
       0,    23,     0,     0,     0,  3344,     0,    24,     0,     0,
       0,    25,   910,     0,     0,     0,     0,     0,     0,     0,
     910,     0,     0,     0,     0,    26,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,    28,     0,     0,     0,     0,     0,     0,     0,  3527,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3344,     0,     0,     0,     0,     0,    30,
       0,     0,     0,    31,     0,     0,     0,     0,     0,     0,
      32,     0,     0,     0,     0,   910,   910,     0,     0,     0,
       0,     0,     0,     0,  3569,     0,     0,     0,  3571,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3600,  3601,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   910,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3628,     0,     0,     0,     0,     0,     0,
       0,     0,  3638,     0,  3640,     0,  3642,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
       0,    35,     0,   910,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,     0,
       0,  2640,     0,     0,     0,     0,     0,     0,     0,    37,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     910,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3721,     0,  1009,     0,     0,    38,     0,     0,    39,     0,
      40,     0,    41,    42,     0,     0,    43,    44,     0,     0,
       0,     0,   910,     0,     0,     0,     0,     0,    45,     0,
       0,    46,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    47,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2191,     0,    48,   910,     0,
       0,     0,    49,    50,    51,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1066,     0,     0,     0,    52,     0,     0,     0,     0,
       1,     0,     2,    53,  1067,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1017,  1068,     0,     0,     0,
       0,     0,     0,     0,     4,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     5,     6,
    1069,  1051,     0,     0,     0,     0,     8,     0,     0,    54,
       0,     9,    10,  1070,     0,     0,     0,     0,     0,   910,
       0,     0,    55,     0,     0,   910,    56,     0,     0,    57,
       0,     0,    11,     0,    58,     0,     0,     0,     0,  1071,
       0,  1072,     0,  1073,     0,     0,     0,     0,     0,     0,
       0,    12,     0,  3349,     0,     0,     0,  1074,    59,    60,
       0,     0,     0,     0,     0,     0,    61,     0,     0,     0,
       0,     0,    62,     0,     0,     0,     0,    13,     0,     0,
      15,    16,     0,     0,     0,     0,    14,     0,    15,    16,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    17,     0,    18,     0,     0,     0,     0,     0, -2108,
    1075,     0,     0,     0,  1076,     0,     0,  1077,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    20,     0,     0,     0,     0,     0,     0,     0,
    1009,     0,     0,     0,     0,     0,     0,  2225,     0,     0,
       0,    21,  1078,     0,  1079,     0,     0,     0,     0,     0,
       0,     0,  1080,     0,     0,  1081,     0,     0,     0,    22,
       0,   910,    23,     0,     0,     0,     0,     0,    24,     0,
       0,     0,    25,     0,     0,   302,     0,   304,     0,   910,
       0,     0,     0,     0,     0,  1082,  1083,     0,     0,     0,
       0,     0,   910,  1009,     0,     0,     0,     0,     0,     0,
      27,     0,    28,     0,     0,     0,     0,     0,     0,     0,
    1084,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    29,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1085,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,    31,     0,     0,     0,     0,     0,
    1009,     0,     0,     0,     0,     0,     0,  4058,     0,     0,
       0,     0,     0,  1086,     0,     0,     0,     0,     0,     0,
    3344,     0,   910,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4087,     0,     0,     0,     0,     0,  4091,  4092,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4099,     0,     0,     0,     0,  4101,     0,     0,  4102,     0,
    4103,  4104,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1087,     0,     0,     0,     0,     0,     0,     0,
       0,    33,     0,     0,     0,     0,     0,     0,  1009,     0,
       0,     0,     0,     0,     0,     0,     0,  1009,     0,     0,
      34,  1088,    35,     0,     0,     0,   910,     0,     0,     0,
       0,     0,     0,     0,     0,  1089,  1090,     0,    36,  1091,
    1092,     0,     0,     0,     0,     0,  2640,     0,     0,     0,
      37,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   910,  1093,   910,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,    39,
       0,    40,  2640,     0,    42,     0,     0,    43,    44,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
       0,     0,    46,     0,     0,     0,     0,     0,     0,     0,
       0,  4888,     0,    47,  4888,     0,     0,  1094,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    48,     0,
    1095,     0,  2640,    49,    50,    51,     0,     0,     0,     0,
       0,   910,  3459,  3460,     0,     0,     0,     0,  3461,     0,
    3462,     0,  3463,  3464,     0,     0,     0,     0,  1009,     0,
       0,     0,     0, -2777,     0,     0,    52,  1096,     0,  3465,
       0,     0,     0,     0,    53,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1097,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   910,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      54,     0,  3349,     0,     0,     0,  5003,     0,  3466,  5003,
    4303,  3467,     0,    55,     0,     0,     0,    56,     0,  3468,
      57,     0,     0,     0,     0,    58,     0, -2777,     0,  4888,
       0,     0,     0,     0,     0,  1098,   910,     0,     0,  3469,
       0,     0,     0,     0,  4888,     0,     0,     0,     0,     0,
      60,     0,     0,     0,     0,     0,     0,    61,     0,  3470,
       0,     0,     0,    62,     0,     0,     0,     0,   910,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   910,     0,     0,  4359,  4360,     0,  3471,     0,
    3472,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3473,  3474,     0,     0,
    3459,  3460,     0,     0,     0,     0,  3461,     0,  3462,     0,
    3463,  3464,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3465,     0,     0,
    5003,     0,     0,  4405,     0,  5003,     0,     0,     0,     0,
       0,     0,  5003,     0,     0,     0,  3475,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3476,     0,
       0,     0,     0,     0,     0,   910,  3466,  3477,  3478,  3467,
    3479,     0,     0,  3349,     0,     0,     0,  3468,   910,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   910,     0,
       0,     0,     0,     0,     0,     0,     0,  3469,     0,     0,
       0,     0,     0,     0,     0,  3480,  3481,  3482,     0,     0,
    3349,     0,     0,     0,     0,     0,  1009,  3470,     0,     0,
       0,     0,     0,  5003,     0,  3483,  3484,  3485,     0,  5193,
       0,     0,     0,  3486,     0,     0,  3487,     0,     0,     0,
       0,     0,  2640,     0,     0,     0,  3471,     0,  3472,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3488,     0,  3489,     0,  3473,  3474,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4512,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3490,  3491,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3475,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  5003,     0,  5003,  5003,     0,     0,
       0,   910,  3492,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3476,     0,     0,   910,
       0,     0,     0,     0,     0,  3477,  3478,     0,  3479,     0,
       0,     0,     0,     0,     0,  5003,     0,     0,     0,     0,
       0,     0,     0,  5003,     0,     0,  3493,     0,     0,  4576,
       0,     0,     0,     0,     0,  3349,     0,     0,     0,     0,
       0,     0,     0,  3480,  3481,  3482,     0,     0,  3494,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    5003,     0,  3495,  3483,  3484,  3485,     0,     0,     0,     0,
       0,  3486,     0,     0,  3487,     0,     0,   910,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3488,     0,
    3489,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1009,     0,     0,     0,     0,
       0,  3496,     0,     0,     0,  3497,     0,   910,  3498,  3499,
    3500,  3501,     0,     0,     0,     0,     0,     0,     0,  3490,
    3491,     0,  3502,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3492,     0,  3503,  3504,     0,     0,     0,     0,     0,     0,
       0,  4663,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3349,
       0,  3505,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2640,     0,  4713,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3494,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3495,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4735,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3496,
       0,     0,     0,  3497,     0,     0,  3498,  3499,  3500,  3501,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4714,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3503,  3504,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3505,
       0,     0,     0,     0,     0,     0,  3349,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4842,     0,  4844,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1356,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  5062,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   161,     0,   162,   755,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   756,     0,   171,   172,   173,   174,   175,   176,   177,
     757,   179,     0,   180,     0,     0,   758,   181,   759,   760,
     761,   182,   762,     0,   183,   184,   185,  1960,   186,     0,
     187,   188,     0,     0,   189,   763,   764,   190,   191,     0,
     192,   765,   766,   194,   195,     0,   196,   197,   198,   199,
     200,   767,   202,     0,   768,   204,   769,   770,   771,   772,
     773,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   774,   224,     0,
     225,   775,   776,   226,     0,  5143,   227,   777,   778,   228,
     779,   780,   229,     0,   230,   781,   231,   782,  5156,   232,
     233,   234,   783,   784,   785,     0,     0,     0,  2640,   786,
     237,   787,     0,     0,   788,   789,   239,     0,   240,     0,
     790,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,   791,     0,   269,
     270,   271,   272,   792,   793,   273,   274,     0,   275,   794,
     276,   277,   795,     0,   278,   279,   280,     0,     0,     0,
     796,   282,     0,   283,     0,   284,     0,   285,   286,   797,
     288,   798,   290,   291,   292,     0,   293,     0,   799,   800,
     801,   294,   295,   296,     0,   297,   802,   803,     0,   298,
     299,     0,     0,     0,   804,   301,   302,   303,   304,   805,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,   806,   311,   312,     0,   807,     0,     0,
     313,  5267,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   808,   809,     0,
    1961,   325,     0,   810,   326,   327,     0,     0,     0,     0,
       0,   811,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,   812,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   813,   355,
     356,   357,   358,   814,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   815,   367,     0,     0,   816,
     369,   370,   817,   371,     0,   372,   818,   819,   820,   821,
     822,   377,   378,   379,   380,   381,   382,     0,   823,   383,
       0,     0,   384,   824,   825,   387,   388,   389,   390,   826,
     827,   391,   828,   392,   393,   394,   395,   396,     0,   829,
     830,   831,   397,     0,   832,   398,   399,   400,   833,     0,
     402,   403,   404,   405,     0,   406,   407,  2640,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,   834,   412,     0,   413,     0,   414,   415,   835,   836,
     417,   418,   419,   420,   837,   838,   423,   839,   424,   425,
       0,   426,   427,   428,   840,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   841,   437,   438,   439,     0,   842,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,   843,   844,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   845,     0,   846,   466,   467,   468,   469,   470,   847,
       0,   472,   848,   474,   849,   475,   476,   477,   478,     0,
     850,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,   851,   852,   508,   509,   510,
       0,   511,   512,   853,   514,   515,   516,   854,   855,   517,
     518,   519,   520,   856,   521,   522,     0,     0,   523,   524,
     525,   526,     0,   857,   527,   528,     0,   529,   858,   859,
     860,   861,     0,     0,     0,     0,  1962,   534,   535,   536,
       0,   862,   863,   864,   538,   539,   540,   865,   541,   542,
     543,   866,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   867,   552,     0,     0,
     868,   869,   870,   871,   553,     0,     0,   554,   555,   872,
       0,   873,   556,   557,   558,   559,   560,   874,   875,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,     0,   876,     0,     0,     0,     0,     0,
       0,     0,   877,   878,     0,     0,     0,     0,   879,   880,
       0,     0,   881,   882,     0,     0,   883,   884,   161,     0,
     162,   755,   164,   165,   166,   167,  2187,     0,   168,     0,
       0,     0,   169,     0,     0,   756,     0,   171,   172,   173,
     174,   175,   176,   177,   757,   179,     0,   180,     0,     0,
    2188,   181,   759,   760,   761,   182,   762,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,   763,
     764,   190,   191,     0,   192,   765,   766,   194,   195,     0,
     196,   197,   198,   199,   200,   767,   202,     0,   768,   204,
     769,   770,   771,   772,   773,     0,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,   774,   224,     0,   225,   775,   776,   226,     0,     0,
     227,   777,   778,   228,   779,   780,   229,     0,   230,   781,
     231,   782,     0,   232,   233,   234,   783,   784,   785,     0,
       0,     0,     0,   786,   237,   787,     0,     0,   788,  2189,
     239,     0,   240,     0,   790,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,   247,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,   253,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,   791,     0,   269,   270,   271,   272,   792,   793,   273,
     274,     0,   275,   794,   276,   277,   795,     0,   278,   279,
     280,     0,     0,     0,   796,   282,     0,   283,     0,   284,
       0,   285,   286,   797,   288,   798,   290,   291,   292,     0,
     293,     0,   799,   800,   801,   294,   295,   296,     0,   297,
     802,   803,     0,   298,   299,     0,     0,     0,   804,   301,
     302,   303,   304,   805,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,   806,   311,   312,
       0,   807,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,     0,     0,   321,
     322,   808,   809,     0,     0,   325,     0,   810,   326,   327,
       0,     0,     0,     0,     0,   811,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,   812,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   813,   355,   356,   357,   358,   814,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   815,
     367,     0,     0,   816,   369,   370,   817,   371,     0,   372,
     818,   819,   820,   821,   822,   377,   378,   379,   380,   381,
     382,     0,   823,   383,     0,     0,   384,   824,   825,   387,
     388,   389,   390,   826,   827,   391,   828,   392,   393,   394,
     395,   396,     0,   829,   830,   831,   397,     0,   832,   398,
     399,   400,   833,  2190,   402,   403,   404,   405,     0,   406,
     407,     0,     0,     0,     0,     0,   408,     0,     0,     0,
       0,   409,   410,   411,     0,   834,   412,     0,   413,     0,
     414,   415,   835,   836,   417,   418,   419,   420,   837,   838,
     423,   839,   424,   425,     0,   426,   427,   428,   840,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   841,   437,
     438,   439,     0,   842,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,     0,   454,   455,   456,
     843,   844,   457,     0,   458,     0,   459,   460,     0,   461,
     462,     0,   463,     0,   464,   845,     0,   846,   466,   467,
     468,   469,   470,   847,     0,   472,   848,   474,   849,   475,
     476,   477,   478,     0,   850,   480,     0,     0,     0,   481,
     482,   483,   484,   485,     0,     0,     0,   486,     0,     0,
       0,   487,     0,   488,   489,   490,   491,   492,   493,     0,
     494,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,   505,   506,     0,     0,     0,   507,   851,
     852,   508,   509,   510,     0,   511,   512,   853,   514,   515,
     516,   854,   855,   517,   518,   519,   520,   856,   521,   522,
       0,     0,   523,   524,   525,   526,     0,   857,   527,   528,
       0,   529,   858,   859,   860,   861,     0,     0,     0,     0,
       0,   534,   535,   536,     0,   862,   863,   864,   538,   539,
     540,   865,   541,   542,   543,   866,   544,   545,     0,   546,
     547,     0,     0,   548,     0,     0,   549,     0,   550,     0,
     867,   552,     0,     0,   868,   869,   870,   871,   553,     0,
       0,   554,   555,   872,     0,   873,   556,   557,   558,   559,
     560,   874,   875,     0,     0,     0,     0,     0,     0,     0,
     563,   564,     0,   565,   566,   567,     0,     0,   876,     0,
       0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
       0,     0,   879,   880,     0,     0,   881,   882,     0,     0,
     883,   884,   161,     0,   162,   755,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   756,
       0,   171,   172,   173,   174,   175,   176,   177,   757,   179,
       0,   180,     0,     0,   758,   181,   759,   760,   761,   182,
     762,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,   763,   764,   190,   191,     0,   192,   765,
     766,   194,   195,     0,   196,   197,   198,   199,   200,   767,
     202,     0,   768,   204,   769,   770,   771,   772,   773,     0,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,     0,   220,   221,   222,   774,   224,     0,   225,   775,
     776,   226,     0,     0,   227,   777,   778,   228,   779,   780,
     229,     0,   230,   781,   231,   782,     0,   232,   233,   234,
     783,   784,   785,     0,     0,     0,     0,   786,   237,   787,
       0,     0,   788,   789,   239,     0,   240,     0,   790,     0,
       0,   241,     0,   242,   243,   244,   245,   246,     0,     0,
       0,     0,   247,     0,     0,     0,   248,   249,   250,     0,
       0,     0,   251,   252,     0,   253,   254,     0,   255,   256,
     257,     0,   258,   259,     0,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,   791,     0,   269,   270,   271,
     272,   792,   793,   273,   274,     0,   275,   794,   276,   277,
     795,     0,   278,   279,   280,     0,     0,     0,   796,   282,
    2569,   283,     0,   284,     0,   285,   286,   797,   288,   798,
     290,   291,   292,     0,   293,     0,   799,   800,   801,   294,
     295,   296,     0,   297,   802,   803,     0,   298,   299,     0,
       0,     0,   804,   301,   302,   303,   304,   805,     0,     0,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
       0,   806,   311,   312,     0,   807,     0,     0,   313,     0,
     314,   315,     0,   316,   317,   318,     0,     0,   319,     0,
     320,     0,     0,   321,   322,   808,   809,     0,     0,   325,
       0,   810,   326,   327,     0,     0,     0,     0,     0,   811,
     329,     0,   330,     0,   331,     0,   332,   333,     0,     0,
     812,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   813,   355,   356,   357,
     358,   814,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,   365,   815,   367,     0,     0,   816,   369,   370,
     817,   371,     0,   372,   818,   819,   820,   821,   822,   377,
     378,   379,   380,   381,   382,     0,   823,   383,     0,     0,
     384,   824,   825,   387,   388,   389,   390,   826,   827,   391,
     828,   392,   393,   394,   395,   396,     0,   829,   830,   831,
     397,     0,   832,   398,   399,   400,   833,     0,   402,   403,
     404,   405,     0,   406,   407,     0,     0,     0,     0,     0,
     408,     0,     0,     0,     0,   409,   410,   411,     0,   834,
     412,     0,   413,     0,   414,   415,   835,   836,   417,   418,
     419,   420,   837,   838,   423,   839,   424,   425,     0,   426,
     427,   428,   840,     0,   430,     0,   431,   432,   433,   434,
     435,     0,   841,   437,   438,   439,     0,   842,   440,     0,
     441,     0,     0,     0,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,   453,
       0,   454,   455,   456,   843,   844,   457,     0,   458,     0,
     459,   460,     0,   461,   462,     0,   463,     0,   464,   845,
       0,   846,   466,   467,   468,   469,   470,   847,     0,   472,
     848,   474,   849,   475,   476,   477,   478,     0,   850,   480,
       0,     0,     0,   481,   482,   483,   484,   485,     0,     0,
       0,   486,     0,     0,     0,   487,     0,   488,   489,   490,
     491,   492,   493,     0,   494,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
       0,     0,   503,     0,     0,     0,   504,   505,   506,     0,
       0,     0,   507,   851,   852,   508,   509,   510,     0,   511,
     512,   853,   514,   515,   516,   854,   855,   517,   518,   519,
     520,   856,   521,   522,     0,     0,   523,   524,   525,   526,
       0,   857,   527,   528,     0,   529,   858,   859,   860,   861,
       0,     0,     0,     0,     0,   534,   535,   536,     0,   862,
     863,   864,   538,   539,   540,   865,   541,   542,   543,   866,
     544,   545,     0,   546,   547,     0,     0,   548,     0,     0,
     549,     0,   550,     0,   867,   552,     0,     0,   868,   869,
     870,   871,   553,     0,     0,   554,   555,   872,     0,   873,
     556,   557,   558,   559,   560,   874,   875,     0,     0,     0,
       0,     0,     0,     0,   563,   564,     0,   565,   566,   567,
       0,     0,   876,     0,     0,     0,     0,     0,     0,     0,
     877,   878,     0,     0,     0,     0,   879,   880,     0,     0,
     881,   882,     0,     0,   883,   884,   161,     0,   162,   755,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   756,     0,   171,   172,   173,   174,   175,
     176,   177,   757,   179,     0,   180,     0,     0,   758,   181,
     759,   760,   761,   182,   762,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   763,   764,   190,
     191,     0,   192,   765,   766,   194,   195,     0,   196,   197,
     198,   199,   200,   767,   202,     0,   768,   204,   769,   770,
     771,   772,   773,     0,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,   774,
     224,     0,   225,   775,   776,   226,     0,     0,   227,   777,
     778,   228,   779,   780,   229,     0,   230,   781,   231,   782,
       0,   232,   233,   234,   783,   784,   785,     0,     0,     0,
       0,   786,   237,   787,     0,     0,   788,   789,   239,     0,
     240,     0,   790,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,   247,     0,     0,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,   253,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,   791,
       0,   269,   270,   271,   272,   792,   793,   273,   274,     0,
     275,   794,   276,   277,   795,     0,   278,   279,   280,     0,
       0,     0,   796,   282,  2571,   283,     0,   284,     0,   285,
     286,   797,   288,   798,   290,   291,   292,     0,   293,     0,
     799,   800,   801,   294,   295,   296,     0,   297,   802,   803,
       0,   298,   299,     0,     0,     0,   804,   301,   302,   303,
     304,   805,     0,     0,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,     0,   806,   311,   312,     0,   807,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
       0,     0,   319,     0,   320,     0,     0,   321,   322,   808,
     809,     0,     0,   325,     0,   810,   326,   327,     0,     0,
       0,     0,     0,   811,   329,     0,   330,     0,   331,     0,
     332,   333,     0,     0,   812,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     813,   355,   356,   357,   358,   814,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   815,   367,     0,
       0,   816,   369,   370,   817,   371,     0,   372,   818,   819,
     820,   821,   822,   377,   378,   379,   380,   381,   382,     0,
     823,   383,     0,     0,   384,   824,   825,   387,   388,   389,
     390,   826,   827,   391,   828,   392,   393,   394,   395,   396,
       0,   829,   830,   831,   397,     0,   832,   398,   399,   400,
     833,     0,   402,   403,   404,   405,     0,   406,   407,     0,
       0,     0,     0,     0,   408,     0,     0,     0,     0,   409,
     410,   411,     0,   834,   412,     0,   413,     0,   414,   415,
     835,   836,   417,   418,   419,   420,   837,   838,   423,   839,
     424,   425,     0,   426,   427,   428,   840,     0,   430,     0,
     431,   432,   433,   434,   435,     0,   841,   437,   438,   439,
       0,   842,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,     0,     0,   447,   448,   449,   450,
     451,     0,   452,   453,     0,   454,   455,   456,   843,   844,
     457,     0,   458,     0,   459,   460,     0,   461,   462,     0,
     463,     0,   464,   845,     0,   846,   466,   467,   468,   469,
     470,   847,     0,   472,   848,   474,   849,   475,   476,   477,
     478,     0,   850,   480,     0,     0,     0,   481,   482,   483,
     484,   485,     0,     0,     0,   486,     0,     0,     0,   487,
       0,   488,   489,   490,   491,   492,   493,     0,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,   505,   506,     0,     0,     0,   507,   851,   852,   508,
     509,   510,     0,   511,   512,   853,   514,   515,   516,   854,
     855,   517,   518,   519,   520,   856,   521,   522,     0,     0,
     523,   524,   525,   526,     0,   857,   527,   528,     0,   529,
     858,   859,   860,   861,     0,     0,     0,     0,     0,   534,
     535,   536,     0,   862,   863,   864,   538,   539,   540,   865,
     541,   542,   543,   866,   544,   545,     0,   546,   547,     0,
       0,   548,     0,     0,   549,     0,   550,     0,   867,   552,
       0,     0,   868,   869,   870,   871,   553,     0,     0,   554,
     555,   872,     0,   873,   556,   557,   558,   559,   560,   874,
     875,     0,     0,     0,     0,     0,     0,     0,   563,   564,
       0,   565,   566,   567,     0,     0,   876,     0,     0,     0,
       0,     0,     0,     0,   877,   878,     0,     0,     0,     0,
     879,   880,     0,     0,   881,   882,     0,     0,   883,   884,
     161,     0,   162,   755,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   756,     0,   171,
     172,   173,   174,   175,   176,   177,   757,   179,     0,   180,
       0,     0,   758,   181,   759,   760,   761,   182,   762,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,   763,   764,   190,   191,     0,   192,   765,   766,   194,
     195,     0,   196,   197,   198,   199,   200,   767,   202,     0,
     768,   204,   769,   770,   771,   772,   773,     0,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,     0,
     220,   221,   222,   774,   224,     0,   225,   775,   776,   226,
       0,     0,   227,   777,   778,   228,   779,   780,   229,     0,
     230,   781,   231,   782,     0,   232,   233,   234,   783,   784,
     785,     0,     0,     0,     0,   786,   237,   787,     0,     0,
     788,   789,   239,     0,   240,     0,   790,     0,     0,   241,
       0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
     247,     0,     0,     0,   248,   249,   250,     0,     0,     0,
     251,   252,     0,   253,   254,     0,   255,   256,   257,     0,
     258,   259,     0,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,   791,     0,   269,   270,   271,   272,   792,
     793,   273,   274,     0,   275,   794,   276,   277,   795,     0,
     278,   279,   280,     0,     0,     0,   796,   282,  2573,   283,
       0,   284,     0,   285,   286,   797,   288,   798,   290,   291,
     292,     0,   293,     0,   799,   800,   801,   294,   295,   296,
       0,   297,   802,   803,     0,   298,   299,     0,     0,     0,
     804,   301,   302,   303,   304,   805,     0,     0,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,     0,   806,
     311,   312,     0,   807,     0,     0,   313,     0,   314,   315,
       0,   316,   317,   318,     0,     0,   319,     0,   320,     0,
       0,   321,   322,   808,   809,     0,     0,   325,     0,   810,
     326,   327,     0,     0,     0,     0,     0,   811,   329,     0,
     330,     0,   331,     0,   332,   333,     0,     0,   812,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   813,   355,   356,   357,   358,   814,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   815,   367,     0,     0,   816,   369,   370,   817,   371,
       0,   372,   818,   819,   820,   821,   822,   377,   378,   379,
     380,   381,   382,     0,   823,   383,     0,     0,   384,   824,
     825,   387,   388,   389,   390,   826,   827,   391,   828,   392,
     393,   394,   395,   396,     0,   829,   830,   831,   397,     0,
     832,   398,   399,   400,   833,     0,   402,   403,   404,   405,
       0,   406,   407,     0,     0,     0,     0,     0,   408,     0,
       0,     0,     0,   409,   410,   411,     0,   834,   412,     0,
     413,     0,   414,   415,   835,   836,   417,   418,   419,   420,
     837,   838,   423,   839,   424,   425,     0,   426,   427,   428,
     840,     0,   430,     0,   431,   432,   433,   434,   435,     0,
     841,   437,   438,   439,     0,   842,   440,     0,   441,     0,
       0,     0,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,   453,     0,   454,
     455,   456,   843,   844,   457,     0,   458,     0,   459,   460,
       0,   461,   462,     0,   463,     0,   464,   845,     0,   846,
     466,   467,   468,   469,   470,   847,     0,   472,   848,   474,
     849,   475,   476,   477,   478,     0,   850,   480,     0,     0,
       0,   481,   482,   483,   484,   485,     0,     0,     0,   486,
       0,     0,     0,   487,     0,   488,   489,   490,   491,   492,
     493,     0,   494,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,     0,     0,
     503,     0,     0,     0,   504,   505,   506,     0,     0,     0,
     507,   851,   852,   508,   509,   510,     0,   511,   512,   853,
     514,   515,   516,   854,   855,   517,   518,   519,   520,   856,
     521,   522,     0,     0,   523,   524,   525,   526,     0,   857,
     527,   528,     0,   529,   858,   859,   860,   861,     0,     0,
       0,     0,     0,   534,   535,   536,     0,   862,   863,   864,
     538,   539,   540,   865,   541,   542,   543,   866,   544,   545,
       0,   546,   547,     0,     0,   548,     0,     0,   549,     0,
     550,     0,   867,   552,     0,     0,   868,   869,   870,   871,
     553,     0,     0,   554,   555,   872,     0,   873,   556,   557,
     558,   559,   560,   874,   875,     0,     0,     0,     0,     0,
       0,     0,   563,   564,     0,   565,   566,   567,     0,     0,
     876,     0,     0,     0,     0,     0,     0,     0,   877,   878,
       0,     0,     0,     0,   879,   880,     0,     0,   881,   882,
       0,     0,   883,   884,   161,     0,   162,   755,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   756,     0,   171,   172,   173,   174,   175,   176,   177,
     757,   179,     0,   180,     0,     0,   758,   181,   759,   760,
     761,   182,   762,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,   763,   764,   190,   191,     0,
     192,   765,   766,   194,   195,     0,   196,   197,   198,   199,
     200,   767,   202,     0,   768,   204,   769,   770,   771,   772,
     773,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   774,   224,     0,
     225,   775,   776,   226,     0,     0,   227,   777,   778,   228,
     779,   780,   229,     0,   230,   781,   231,   782,     0,   232,
     233,   234,   783,   784,   785,     0,     0,     0,     0,   786,
     237,   787,     0,     0,   788,  2636,   239,     0,   240,     0,
     790,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,   791,     0,   269,
     270,   271,   272,   792,   793,   273,   274,     0,   275,   794,
     276,   277,   795,     0,   278,   279,   280,     0,     0,     0,
     796,   282,     0,   283,     0,   284,     0,   285,   286,   797,
     288,   798,   290,   291,   292,     0,   293,     0,   799,   800,
     801,   294,   295,   296,     0,   297,   802,   803,     0,   298,
     299,     0,     0,     0,   804,   301,   302,   303,   304,   805,
       0,  2637,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,   806,   311,   312,     0,   807,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   808,   809,     0,
       0,   325,     0,   810,   326,   327,     0,     0,     0,     0,
       0,   811,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,   812,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   813,   355,
     356,   357,   358,   814,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   815,   367,     0,     0,   816,
     369,   370,   817,   371,     0,   372,   818,   819,   820,   821,
     822,   377,   378,   379,   380,   381,   382,     0,   823,   383,
       0,     0,   384,   824,   825,   387,   388,   389,   390,   826,
     827,   391,   828,   392,   393,   394,   395,   396,     0,   829,
     830,   831,   397,     0,   832,   398,   399,   400,   833,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,   834,   412,     0,   413,     0,   414,   415,   835,   836,
     417,   418,   419,   420,   837,   838,   423,   839,   424,   425,
       0,   426,   427,   428,   840,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   841,   437,   438,   439,     0,   842,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,   843,   844,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   845,     0,   846,   466,   467,   468,   469,   470,   847,
       0,   472,   848,   474,   849,   475,   476,   477,   478,     0,
     850,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,   851,   852,   508,   509,   510,
       0,   511,   512,   853,   514,   515,   516,   854,   855,   517,
     518,   519,   520,   856,   521,   522,     0,     0,   523,   524,
     525,   526,     0,   857,   527,   528,     0,   529,   858,   859,
     860,   861,     0,     0,     0,     0,     0,   534,   535,   536,
       0,   862,   863,   864,   538,   539,   540,   865,   541,   542,
     543,   866,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   867,   552,     0,     0,
     868,   869,   870,   871,   553,     0,     0,   554,   555,   872,
       0,   873,   556,   557,   558,   559,   560,   874,   875,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,     0,   876,     0,     0,     0,     0,     0,
       0,     0,   877,   878,     0,     0,     0,     0,   879,   880,
       0,     0,   881,   882,     0,     0,   883,   884,   161,     0,
     162,   755,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   756,     0,   171,   172,   173,
     174,   175,   176,   177,   757,   179,     0,   180,     0,     0,
     758,   181,   759,   760,   761,   182,   762,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,   763,
     764,   190,   191,     0,   192,   765,   766,   194,   195,     0,
     196,   197,   198,   199,   200,   767,   202,     0,   768,   204,
     769,   770,   771,   772,   773,     0,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,   774,   224,     0,   225,   775,   776,   226,     0,     0,
     227,   777,   778,   228,   779,   780,   229,     0,   230,   781,
     231,   782,     0,   232,   233,   234,   783,   784,   785,     0,
       0,     0,     0,   786,   237,   787,     0,     0,   788,   789,
     239,     0,   240,     0,   790,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,   247,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,   253,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,   791,     0,   269,   270,   271,   272,   792,   793,   273,
     274,     0,   275,   794,   276,   277,   795,     0,   278,   279,
     280,     0,     0,     0,   796,   282,     0,   283,     0,   284,
       0,   285,   286,   797,   288,   798,   290,   291,   292,     0,
     293,     0,   799,   800,   801,   294,   295,   296,     0,   297,
     802,   803,     0,   298,   299,     0,     0,     0,   804,   301,
     302,   303,   304,   805,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,   806,   311,   312,
       0,   807,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,     0,     0,   321,
     322,   808,   809,     0,     0,   325,     0,   810,   326,   327,
       0,     0,     0,     0,     0,   811,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,   812,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   813,   355,   356,   357,   358,   814,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   815,
     367,     0,     0,   816,   369,   370,   817,   371,     0,   372,
     818,   819,   820,   821,   822,   377,   378,   379,   380,   381,
     382,     0,   823,   383,     0,     0,   384,   824,   825,   387,
     388,   389,   390,   826,   827,   391,   828,   392,   393,   394,
     395,   396,     0,   829,   830,   831,   397,     0,   832,   398,
     399,   400,   833,     0,   402,   403,   404,   405,     0,   406,
     407,     0,     0,     0,     0,     0,   408,     0,     0,     0,
       0,   409,   410,   411,     0,   834,   412,     0,   413,     0,
     414,   415,   835,   836,   417,   418,   419,   420,   837,   838,
     423,   839,   424,   425,     0,   426,   427,   428,   840,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   841,   437,
     438,   439,     0,   842,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,     0,   454,   455,   456,
     843,   844,   457,     0,   458,     0,   459,   460,     0,   461,
     462,     0,   463,     0,   464,   845,     0,   846,   466,   467,
     468,   469,   470,   847,     0,   472,   848,   474,   849,   475,
     476,   477,   478,     0,   850,   480,     0,     0,     0,   481,
     482,   483,   484,   485,     0,     0,     0,   486,     0,     0,
       0,   487,     0,   488,   489,   490,   491,   492,   493,     0,
     494,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,   505,   506,     0,     0,     0,   507,   851,
     852,   508,   509,   510,     0,   511,   512,   853,   514,   515,
     516,   854,   855,   517,   518,   519,   520,   856,   521,   522,
       0,     0,   523,   524,   525,   526,     0,   857,   527,   528,
       0,   529,   858,   859,   860,   861,     0,     0,     0,     0,
       0,   534,   535,   536,     0,   862,   863,   864,   538,   539,
     540,   865,   541,   542,   543,   866,   544,   545,     0,   546,
     547,     0,     0,   548,     0,     0,   549,     0,   550,     0,
     867,   552,     0,     0,   868,   869,   870,   871,   553,     0,
       0,   554,   555,   872,     0,   873,   556,   557,   558,   559,
     560,   874,   875,     0,     0,     0,     0,     0,     0,     0,
     563,   564,     0,   565,   566,   567,     0,     0,   876,     0,
       0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
       0,     0,   879,   880,     0,     0,   881,   882,     0,     0,
     883,   884,   161,     0,   162,   755,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   756,
       0,   171,   172,   173,   174,   175,   176,   177,   757,   179,
       0,   180,     0,     0,   758,   181,   759,   760,   761,   182,
     762,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,   763,   764,   190,   191,     0,   192,   765,
     766,   194,   195,     0,   196,   197,   198,   199,   200,   767,
     202,     0,   768,   204,   769,   770,   771,   772,   773,     0,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,     0,   220,   221,   222,   774,   224,     0,   225,   775,
     776,   226,     0,     0,   227,   777,   778,   228,   779,   780,
     229,     0,   230,   781,   231,   782,     0,   232,   233,   234,
     783,   784,   785,     0,     0,     0,     0,   786,   237,   787,
       0,     0,   788,   789,   239,     0,   240,     0,   790,     0,
       0,   241,     0,   242,   243,   244,   245,   246,     0,     0,
       0,     0,   247,     0,     0,     0,   248,   249,   250,     0,
       0,     0,   251,   252,     0,   253,   254,     0,   255,   256,
     257,     0,   258,   259,     0,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,   791,     0,   269,   270,   271,
     272,   792,   793,   273,   274,     0,   275,   794,   276,   277,
     795,     0,   278,   279,   280,     0,     0,     0,   796,   282,
       0,   283,     0,   284,     0,   285,   286,   797,   288,   798,
     290,   291,   292,     0,   293,     0,   799,   800,   801,   294,
     295,   296,     0,   297,   802,   803,     0,   298,   299,     0,
       0,     0,   804,   301,   302,   303,   304,   805,     0,     0,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
       0,   806,   311,   312,     0,   807,     0,     0,   313,     0,
     314,   315,     0,   316,   317,   318,     0,     0,   319,     0,
     320,     0,     0,   321,   322,   808,   809,     0,     0,   325,
       0,   810,   326,   327,     0,     0,     0,     0,     0,   811,
     329,     0,   330,     0,   331,     0,   332,   333,     0,     0,
     812,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   813,   355,   356,   357,
     358,   814,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,   365,   815,   367,     0,     0,   816,   369,   370,
     817,   371,     0,   372,   818,   819,   820,   821,   822,   377,
     378,   379,   380,   381,   382,     0,   823,   383,     0,     0,
     384,   824,   825,   387,   388,   389,   390,   826,   827,   391,
     828,   392,   393,   394,   395,   396,     0,   829,   830,   831,
     397,     0,   832,   398,   399,   400,   833,     0,   402,   403,
     404,   405,     0,   406,   407,     0,     0,     0,     0,     0,
     408,     0,     0,     0,     0,   409,   410,   411,     0,   834,
     412,     0,   413,     0,   414,   415,   835,   836,   417,   418,
     419,   420,   837,   838,   423,   839,   424,   425,     0,   426,
     427,   428,   840,     0,   430,     0,   431,   432,   433,   434,
     435,     0,   841,   437,   438,   439,     0,   842,   440,     0,
     441,     0,     0,     0,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,   453,
       0,   454,   455,   456,   843,   844,   457,     0,   458,     0,
     459,   460,     0,   461,   462,     0,   463,     0,   464,   845,
       0,   846,   466,   467,   468,   469,   470,   847,     0,   472,
     848,   474,   849,   475,   476,   477,   478,     0,   850,   480,
       0,     0,     0,   481,   482,   483,   484,   485,     0,     0,
       0,   486,     0,     0,     0,   487,     0,   488,   489,   490,
     491,   492,   493,     0,   494,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
       0,     0,   503,     0,     0,     0,   504,   505,   506,     0,
       0,     0,   507,   851,   852,   508,   509,   510,     0,   511,
     512,   853,   514,   515,   516,   854,   855,   517,   518,   519,
     520,   856,   521,   522,     0,     0,   523,   524,   525,   526,
       0,   857,   527,   528,     0,   529,   858,   859,   860,   861,
       0,     0,     0,     0,     0,   534,   535,   536,     0,   862,
     863,   864,   538,   539,   540,   865,   541,   542,   543,   866,
     544,   545,     0,   546,   547,     0,     0,   548,     0,     0,
     549,     0,   550,     0,   867,   552,     0,     0,   868,   869,
     870,   871,   553,     0,     0,   554,   555,   872,     0,   873,
     556,   557,   558,   559,   560,   874,   875,     0,     0,     0,
       0,     0,     0,     0,   563,   564,     0,   565,   566,   567,
       0,     0,   876,     0,     0,     0,     0,     0,     0,     0,
     877,   878,     0,     0,     0,     0,   879,  1283,     0,     0,
     881,   882,     0,     0,   883,   884,   161,     0,   162,   755,
     164,   165,   166,   167,  1992,     0,   168,     0,     0,     0,
    1993,     0,     0,   756,     0,   171,   172,   173,   174,   175,
     176,   177,   757,   179,     0,   180,     0,     0,   758,   181,
     759,   760,   761,   182,   762,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   763,   764,   190,
     191,     0,   192,   765,   766,   194,   195,     0,   196,   197,
     198,   199,   200,   767,   202,     0,   768,   204,   769,   770,
     771,   772,   773,     0,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,   774,
     224,     0,   225,   775,   776,   226,     0,     0,   227,   777,
     778,   228,   779,   780,   229,     0,   230,   781,   231,   782,
       0,   232,   233,   234,   783,   784,   785,     0,     0,     0,
       0,   786,   237,   787,     0,     0,   788,   789,   239,     0,
     240,     0,   790,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,   247,     0,     0,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,   253,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,   791,
       0,   269,   270,   271,   272,   792,   793,   273,   274,     0,
     275,   794,   276,   277,   795,     0,   278,   279,   280,     0,
       0,     0,   796,   282,     0,   283,     0,   284,     0,   285,
     286,   797,   288,   798,   290,   291,   292,     0,   293,     0,
     799,   800,   801,   294,   295,   296,     0,   297,   802,   803,
       0,   298,   299,     0,     0,     0,   804,   301,   302,   303,
     304,   805,     0,     0,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,     0,   806,   311,   312,     0,   807,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
       0,     0,   319,     0,   320,     0,     0,   321,   322,   808,
     809,     0,     0,   325,     0,   810,   326,   327,     0,     0,
       0,     0,     0,   811,   329,     0,   330,     0,   331,     0,
     332,   333,     0,     0,   812,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     813,   355,   356,   357,   358,   814,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   815,   367,     0,
       0,   816,   369,   370,   817,   371,     0,   372,   818,   819,
     820,   821,   822,   377,   378,   379,   380,   381,   382,     0,
     823,   383,     0,     0,   384,   824,   825,   387,   388,   389,
     390,   826,     0,   391,   828,   392,   393,   394,   395,   396,
       0,   829,   830,   831,   397,     0,   832,   398,   399,   400,
     833,     0,   402,   403,   404,   405,     0,   406,   407,     0,
       0,     0,     0,     0,   408,     0,     0,     0,     0,   409,
     410,   411,     0,   834,   412,     0,   413,     0,   414,   415,
     835,   836,   417,   418,   419,   420,   837,   838,   423,   839,
     424,   425,     0,   426,   427,   428,   840,     0,   430,     0,
     431,   432,   433,   434,   435,     0,   841,   437,   438,   439,
       0,   842,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,     0,     0,   447,   448,   449,   450,
     451,     0,   452,   453,     0,   454,   455,   456,   843,   844,
     457,     0,   458,     0,   459,   460,     0,   461,   462,     0,
     463,     0,   464,   845,     0,   846,   466,   467,   468,   469,
     470,   847,     0,   472,   848,   474,   849,   475,   476,   477,
     478,     0,   850,   480,     0,     0,     0,   481,   482,   483,
     484,   485,     0,     0,     0,   486,     0,     0,     0,   487,
       0,   488,   489,   490,   491,   492,   493,     0,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,   505,   506,     0,     0,     0,   507,   851,   852,   508,
     509,   510,     0,   511,   512,   853,   514,   515,   516,   854,
     855,   517,   518,   519,   520,   856,   521,   522,     0,     0,
     523,   524,   525,   526,     0,   857,   527,   528,     0,   529,
     858,   859,   860,   861,     0,     0,     0,     0,     0,   534,
     535,   536,     0,   862,   863,   864,   538,   539,   540,   865,
     541,   542,   543,   866,   544,   545,     0,   546,   547,     0,
       0,   548,     0,     0,   549,     0,   550,     0,   867,   552,
       0,     0,   868,   869,   870,   871,   553,     0,     0,   554,
     555,   872,     0,   873,   556,   557,   558,   559,   560,   874,
     875,     0,     0,     0,     0,     0,     0,     0,   563,   564,
       0,   565,   566,   567,     0,     0,   876,     0,     0,     0,
       0,     0,     0,     0,   877,   878,     0,     0,     0,     0,
     879,   880,     0,     0,   881,   882,     0,     0,   883,   884,
     161,     0,   162,   755,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   756,     0,   171,
     172,   173,   174,   175,   176,   177,   757,   179,     0,   180,
       0,     0,   758,   181,   759,   760,   761,   182,   762,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,   763,   764,   190,   191,     0,   192,   765,   766,   194,
     195,     0,   196,   197,   198,   199,   200,   767,   202,     0,
     768,   204,   769,   770,   771,   772,   773,     0,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,     0,
     220,   221,   222,   774,   224,     0,   225,   775,   776,   226,
       0,     0,   227,   777,   778,   228,   779,   780,   229,     0,
     230,   781,   231,   782,     0,   232,   233,   234,   783,   784,
     785,     0,     0,     0,     0,   786,   237,   787,     0,     0,
     788,   789,   239,     0,   240,     0,   790,     0,     0,   241,
       0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
     247,     0,     0,     0,   248,   249,   250,     0,     0,     0,
     251,   252,     0,   253,   254,     0,   255,   256,   257,     0,
     258,   259,     0,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,   791,     0,   269,   270,   271,   272,   792,
     793,   273,   274,     0,   275,   794,   276,   277,   795,     0,
     278,   279,   280,     0,     0,     0,   796,   282,     0,   283,
       0,   284,     0,   285,   286,   797,   288,   798,   290,   291,
     292,     0,   293,     0,   799,   800,   801,   294,   295,   296,
       0,   297,   802,   803,     0,   298,   299,     0,     0,     0,
     804,   301,   302,   303,   304,   805,     0,     0,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,     0,   806,
     311,   312,     0,   807,     0,     0,   313,     0,   314,   315,
       0,   316,   317,   318,     0,     0,   319,     0,   320,     0,
       0,   321,   322,   808,   809,     0,     0,   325,     0,   810,
     326,   327,     0,     0,     0,     0,     0,   811,   329,     0,
     330,     0,   331,     0,   332,   333,     0,     0,   812,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   813,   355,   356,   357,   358,   814,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   815,   367,     0,     0,   816,   369,   370,   817,   371,
       0,   372,   818,   819,   820,   821,   822,   377,   378,   379,
     380,   381,   382,     0,   823,   383,     0,     0,   384,   824,
     825,   387,   388,   389,   390,   826,   827,   391,   828,   392,
     393,   394,   395,   396,     0,   829,   830,   831,   397,     0,
     832,   398,   399,   400,   833,     0,   402,   403,   404,   405,
       0,   406,   407,     0,     0,     0,     0,     0,   408,     0,
       0,     0,     0,   409,   410,   411,     0,   834,   412,     0,
     413,     0,   414,   415,   835,   836,   417,   418,   419,   420,
     837,   838,   423,   839,   424,   425,     0,   426,   427,   428,
     840,     0,   430,     0,   431,   432,   433,   434,   435,     0,
     841,   437,   438,   439,     0,   842,   440,     0,   441,     0,
       0,     0,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,   453,     0,   454,
     455,   456,   843,   844,   457,     0,   458,     0,   459,   460,
       0,   461,   462,     0,   463,     0,   464,   845,     0,   846,
     466,   467,   468,   469,   470,   847,     0,   472,   848,   474,
     849,   475,   476,   477,   478,     0,   850,   480,     0,     0,
       0,   481,   482,   483,   484,   485,     0,     0,     0,   486,
       0,     0,     0,   487,     0,   488,   489,   490,   491,   492,
     493,     0,   494,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,     0,     0,
     503,     0,     0,     0,   504,   505,   506,     0,     0,     0,
     507,   851,   852,   508,   509,   510,     0,   511,   512,   853,
     514,   515,   516,   854,   855,   517,   518,   519,   520,   856,
     521,   522,     0,     0,   523,   524,   525,   526,     0,   857,
     527,   528,     0,   529,   858,   859,   860,   861,     0,     0,
       0,     0,     0,   534,   535,   536,     0,   862,   863,   864,
     538,   539,   540,   865,   541,   542,   543,   866,   544,   545,
       0,   546,   547,     0,     0,   548,     0,     0,   549,     0,
     550,     0,  2099,   552,     0,     0,   868,   869,   870,   871,
     553,     0,     0,   554,   555,   872,     0,   873,   556,   557,
     558,   559,   560,   874,   875,     0,     0,     0,     0,     0,
       0,     0,   563,   564,     0,   565,   566,   567,     0,     0,
     876,     0,     0,     0,     0,     0,     0,     0,   877,   878,
       0,     0,     0,     0,   879,   880,     0,     0,   881,   882,
       0,     0,   883,   884,   161,     0,   162,   755,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   756,     0,   171,   172,   173,   174,   175,   176,   177,
     757,   179,     0,   180,     0,     0,   758,   181,   759,   760,
     761,   182,   762,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,   763,   764,   190,   191,     0,
     192,   765,   766,   194,   195,     0,   196,   197,   198,   199,
     200,   767,   202,     0,   768,   204,   769,   770,   771,   772,
     773,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   774,   224,     0,
     225,   775,   776,   226,     0,     0,   227,   777,   778,   228,
     779,   780,   229,     0,   230,   781,   231,   782,     0,   232,
     233,   234,   783,   784,   785,     0,     0,     0,     0,   786,
     237,   787,     0,     0,   788,   789,   239,     0,   240,     0,
     790,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,   791,     0,   269,
     270,   271,   272,   792,   793,   273,   274,     0,   275,   794,
     276,   277,   795,     0,   278,   279,   280,     0,     0,     0,
     796,   282,     0,   283,     0,   284,     0,   285,   286,   797,
     288,   798,   290,   291,   292,     0,   293,     0,   799,   800,
     801,   294,   295,   296,     0,   297,   802,   803,     0,   298,
     299,     0,     0,     0,   804,   301,   302,   303,   304,   805,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,   806,   311,   312,     0,  3009,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   808,   809,     0,
       0,   325,     0,   810,   326,   327,     0,     0,     0,     0,
       0,   811,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,   812,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   813,   355,
     356,   357,   358,   814,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   815,   367,     0,     0,   816,
     369,   370,   817,   371,     0,   372,   818,   819,   820,   821,
     822,   377,   378,   379,   380,   381,   382,     0,   823,   383,
       0,     0,   384,   824,   825,   387,   388,   389,   390,   826,
     827,   391,   828,   392,   393,   394,   395,   396,     0,   829,
     830,   831,   397,     0,   832,   398,   399,   400,   833,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,   834,   412,     0,   413,     0,   414,   415,   835,   836,
     417,   418,   419,   420,   837,   838,   423,   839,   424,   425,
       0,   426,   427,   428,   840,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   841,   437,   438,   439,     0,   842,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,   843,   844,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   845,     0,   846,   466,   467,   468,   469,   470,   847,
       0,   472,   848,   474,   849,   475,   476,   477,   478,     0,
     850,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,   851,   852,   508,   509,   510,
       0,   511,   512,   853,   514,   515,   516,   854,   855,   517,
     518,   519,   520,   856,   521,   522,     0,     0,   523,   524,
     525,   526,     0,   857,   527,   528,     0,   529,   858,   859,
     860,   861,     0,     0,     0,     0,     0,   534,   535,   536,
       0,   862,   863,   864,   538,   539,   540,   865,   541,   542,
     543,   866,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   867,   552,     0,     0,
     868,   869,   870,   871,   553,     0,     0,   554,   555,   872,
       0,   873,   556,   557,   558,   559,   560,   874,   875,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,     0,   876,     0,     0,     0,     0,     0,
       0,     0,   877,   878,     0,     0,     0,     0,   879,   880,
       0,     0,   881,   882,     0,     0,   883,   884,   161,     0,
     162,   755,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   756,     0,   171,   172,   173,
     174,   175,   176,   177,   757,   179,     0,   180,     0,     0,
     758,   181,   759,   760,   761,   182,   762,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,   763,
     764,   190,   191,     0,   192,   765,   766,   194,   195,     0,
     196,   197,   198,   199,   200,   767,   202,     0,   768,   204,
     769,   770,   771,   772,   773,     0,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,   774,   224,     0,   225,   775,   776,   226,     0,     0,
     227,   777,   778,   228,   779,   780,   229,     0,   230,   781,
     231,   782,     0,   232,   233,   234,   783,   784,   785,     0,
       0,     0,     0,   786,   237,   787,     0,     0,   788,   789,
     239,     0,   240,     0,   790,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,   247,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,   253,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,   791,     0,   269,   270,   271,   272,   792,   793,   273,
     274,     0,   275,   794,   276,   277,   795,     0,   278,   279,
     280,     0,     0,     0,   796,   282,     0,   283,     0,   284,
       0,   285,   286,   797,   288,   798,   290,   291,   292,     0,
     293,     0,   799,   800,   801,   294,   295,   296,     0,   297,
     802,   803,     0,   298,   299,     0,     0,     0,   804,   301,
     302,   303,   304,   805,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,   806,   311,   312,
       0,  3068,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,     0,     0,   321,
     322,   808,   809,     0,     0,   325,     0,   810,   326,   327,
       0,     0,     0,     0,     0,   811,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,   812,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   813,   355,   356,   357,   358,   814,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   815,
     367,     0,     0,   816,   369,   370,   817,   371,     0,   372,
     818,   819,   820,   821,   822,   377,   378,   379,   380,   381,
     382,     0,   823,   383,     0,     0,   384,   824,   825,   387,
     388,   389,   390,   826,   827,   391,   828,   392,   393,   394,
     395,   396,     0,   829,   830,   831,   397,     0,   832,   398,
     399,   400,   833,     0,   402,   403,   404,   405,     0,   406,
     407,     0,     0,     0,     0,     0,   408,     0,     0,     0,
       0,   409,   410,   411,     0,   834,   412,     0,   413,     0,
     414,   415,   835,   836,   417,   418,   419,   420,   837,   838,
     423,   839,   424,   425,     0,   426,   427,   428,   840,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   841,   437,
     438,   439,     0,   842,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,     0,   454,   455,   456,
     843,   844,   457,     0,   458,     0,   459,   460,     0,   461,
     462,     0,   463,     0,   464,   845,     0,   846,   466,   467,
     468,   469,   470,   847,     0,   472,   848,   474,   849,   475,
     476,   477,   478,     0,   850,   480,     0,     0,     0,   481,
     482,   483,   484,   485,     0,     0,     0,   486,     0,     0,
       0,   487,     0,   488,   489,   490,   491,   492,   493,     0,
     494,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,   505,   506,     0,     0,     0,   507,   851,
     852,   508,   509,   510,     0,   511,   512,   853,   514,   515,
     516,   854,   855,   517,   518,   519,   520,   856,   521,   522,
       0,     0,   523,   524,   525,   526,     0,   857,   527,   528,
       0,   529,   858,   859,   860,   861,     0,     0,     0,     0,
       0,   534,   535,   536,     0,   862,   863,   864,   538,   539,
     540,   865,   541,   542,   543,   866,   544,   545,     0,   546,
     547,     0,     0,   548,     0,     0,   549,     0,   550,     0,
     867,   552,     0,     0,   868,   869,   870,   871,   553,     0,
       0,   554,   555,   872,     0,   873,   556,   557,   558,   559,
     560,   874,   875,     0,     0,     0,     0,     0,     0,     0,
     563,   564,     0,   565,   566,   567,     0,     0,   876,     0,
       0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
       0,     0,   879,   880,     0,     0,   881,   882,     0,     0,
     883,   884,   161,     0,   162,   755,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   756,
       0,   171,   172,   173,   174,   175,   176,   177,   757,   179,
       0,   180,     0,     0,   758,   181,   759,   760,   761,   182,
     762,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,   763,   764,   190,   191,     0,   192,   765,
     766,   194,   195,     0,   196,   197,   198,   199,   200,   767,
     202,     0,   768,   204,   769,   770,   771,   772,   773,     0,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,     0,   220,   221,   222,   774,   224,     0,   225,   775,
     776,   226,     0,     0,   227,   777,   778,   228,   779,   780,
     229,     0,   230,   781,   231,   782,     0,   232,   233,   234,
     783,   784,   785,     0,     0,     0,     0,   786,   237,   787,
       0,     0,   788,   789,   239,     0,   240,     0,   790,     0,
       0,   241,     0,   242,   243,   244,   245,   246,     0,     0,
       0,     0,   247,     0,     0,     0,   248,   249,   250,     0,
       0,     0,   251,   252,     0,   253,   254,     0,   255,   256,
     257,     0,   258,   259,     0,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,   791,     0,   269,   270,   271,
     272,   792,   793,   273,   274,     0,   275,   794,   276,   277,
     795,     0,   278,   279,   280,     0,     0,     0,   796,   282,
       0,   283,     0,   284,     0,   285,   286,   797,   288,   798,
     290,   291,   292,     0,   293,     0,   799,   800,   801,   294,
     295,   296,     0,   297,   802,   803,     0,   298,   299,     0,
       0,     0,   804,   301,   302,   303,   304,   805,     0,     0,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
       0,   806,   311,   312,     0,   807,     0,     0,   313,     0,
     314,   315,     0,   316,   317,   318,     0,     0,   319,     0,
     320,     0,     0,   321,   322,   808,   809,     0,     0,   325,
       0,   810,   326,   327,     0,     0,     0,     0,     0,   811,
     329,     0,   330,     0,   331,     0,   332,   333,     0,     0,
     812,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   813,   355,   356,   357,
     358,   814,   359,   360,   361,  5282,     0,     0,     0,   362,
     363,   364,   365,   815,   367,     0,     0,   816,   369,   370,
     817,   371,     0,   372,   818,   819,   820,   821,   822,   377,
     378,   379,   380,   381,   382,     0,   823,   383,     0,     0,
     384,   824,   825,   387,   388,   389,   390,   826,     0,   391,
     828,   392,   393,   394,   395,   396,     0,   829,   830,   831,
     397,     0,   832,   398,   399,   400,   833,     0,   402,   403,
     404,   405,     0,   406,   407,     0,     0,     0,     0,     0,
     408,     0,     0,     0,     0,   409,   410,   411,     0,   834,
     412,     0,   413,     0,   414,   415,   835,   836,   417,   418,
     419,   420,   837,   838,   423,   839,   424,   425,     0,   426,
     427,   428,   840,     0,   430,     0,   431,   432,   433,   434,
     435,     0,   841,   437,   438,   439,     0,   842,   440,     0,
     441,     0,     0,     0,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,   453,
       0,   454,   455,   456,   843,   844,   457,     0,   458,     0,
     459,   460,     0,   461,   462,     0,   463,     0,   464,   845,
       0,   846,   466,   467,   468,   469,   470,   847,     0,   472,
     848,   474,   849,   475,   476,   477,   478,     0,   850,   480,
       0,     0,     0,   481,   482,   483,   484,   485,     0,     0,
       0,   486,     0,     0,     0,   487,     0,   488,   489,   490,
     491,   492,   493,     0,   494,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
       0,     0,   503,     0,     0,     0,   504,   505,   506,     0,
       0,     0,   507,   851,   852,   508,   509,   510,     0,   511,
     512,   853,   514,   515,   516,   854,   855,   517,   518,   519,
     520,   856,   521,   522,     0,     0,   523,   524,   525,   526,
       0,   857,   527,   528,     0,   529,   858,   859,   860,   861,
       0,     0,     0,     0,     0,   534,   535,   536,     0,   862,
     863,   864,   538,   539,   540,   865,   541,   542,   543,   866,
     544,   545,     0,   546,   547,     0,     0,   548,     0,     0,
     549,     0,   550,     0,   867,   552,     0,     0,   868,   869,
     870,   871,   553,     0,     0,   554,   555,   872,     0,   873,
     556,   557,   558,   559,   560,   874,   875,     0,     0,     0,
       0,     0,     0,     0,   563,   564,     0,   565,   566,   567,
       0,     0,   876,     0,     0,     0,     0,     0,     0,     0,
     877,   878,     0,     0,     0,     0,   879,   880,     0,     0,
     881,   882,     0,     0,   883,   884,   161,     0,   162,   755,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   756,     0,   171,   172,   173,   174,   175,
     176,   177,   757,   179,     0,   180,     0,     0,   758,   181,
     759,   760,   761,   182,   762,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,   763,   764,   190,
     191,     0,   192,   765,   766,   194,   195,     0,   196,   197,
     198,   199,   200,   767,   202,     0,   768,   204,   769,   770,
     771,   772,   773,     0,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,   774,
     224,     0,   225,   775,   776,   226,     0,     0,   227,   777,
     778,   228,   779,   780,   229,     0,   230,   781,   231,   782,
       0,   232,   233,   234,   783,   784,   785,     0,     0,     0,
       0,   786,   237,   787,     0,     0,   788,   789,   239,     0,
     240,     0,   790,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,   247,     0,     0,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,   253,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,   791,
       0,   269,   270,   271,   272,   792,   793,   273,   274,     0,
     275,   794,   276,   277,   795,     0,   278,   279,   280,     0,
       0,     0,   796,   282,     0,   283,     0,   284,     0,   285,
     286,   797,   288,   798,   290,   291,   292,     0,   293,     0,
     799,   800,   801,   294,   295,   296,     0,   297,   802,   803,
       0,   298,   299,     0,     0,     0,   804,   301,   302,   303,
     304,   805,     0,     0,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,     0,   806,   311,   312,     0,   807,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
       0,     0,   319,     0,   320,     0,     0,   321,   322,   808,
     809,     0,     0,   325,     0,   810,   326,   327,     0,     0,
       0,     0,     0,   811,   329,     0,   330,     0,   331,     0,
     332,   333,     0,     0,   812,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     813,   355,   356,   357,   358,   814,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   815,   367,     0,
       0,   816,   369,   370,   817,   371,     0,   372,   818,   819,
     820,   821,   822,   377,   378,   379,   380,   381,   382,     0,
     823,   383,     0,     0,   384,   824,   825,   387,   388,   389,
     390,   826,     0,   391,   828,   392,   393,   394,   395,   396,
       0,   829,   830,   831,   397,     0,   832,   398,   399,   400,
     833,     0,   402,   403,   404,   405,     0,   406,   407,     0,
       0,     0,     0,     0,   408,     0,     0,     0,     0,   409,
     410,   411,     0,   834,   412,     0,   413,     0,   414,   415,
     835,   836,   417,   418,   419,   420,   837,   838,   423,   839,
     424,   425,     0,   426,   427,   428,   840,     0,   430,     0,
     431,   432,   433,   434,   435,     0,   841,   437,   438,   439,
       0,   842,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,     0,     0,   447,   448,   449,   450,
     451,     0,   452,   453,     0,   454,   455,   456,   843,   844,
     457,     0,   458,     0,   459,   460,     0,   461,   462,     0,
     463,     0,   464,   845,     0,   846,   466,   467,   468,   469,
     470,   847,     0,   472,   848,   474,   849,   475,   476,   477,
     478,     0,   850,   480,     0,     0,     0,   481,   482,   483,
     484,   485,     0,     0,     0,   486,     0,     0,     0,   487,
       0,   488,   489,   490,   491,   492,   493,     0,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,   505,   506,     0,     0,     0,   507,   851,   852,   508,
     509,   510,     0,   511,   512,   853,   514,   515,   516,   854,
     855,   517,   518,   519,   520,   856,   521,   522,     0,     0,
     523,   524,   525,   526,     0,   857,   527,   528,     0,   529,
     858,   859,   860,   861,     0,     0,     0,     0,     0,   534,
     535,   536,     0,   862,   863,   864,   538,   539,   540,   865,
     541,   542,   543,   866,   544,   545,     0,   546,   547,     0,
       0,   548,     0,     0,   549,     0,   550,     0,   867,   552,
       0,     0,   868,   869,   870,   871,   553,     0,     0,   554,
     555,   872,     0,   873,   556,   557,   558,   559,   560,   874,
     875,     0,     0,     0,     0,     0,     0,     0,   563,   564,
       0,   565,   566,   567,     0,     0,   876,     0,     0,     0,
       0,     0,     0,     0,   877,   878,     0,     0,     0,     0,
     879,   880,     0,     0,   881,   882,     0,     0,   883,   884,
     161,     0,   162,   755,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   756,     0,   171,
     172,   173,   174,   175,   176,   177,   757,   179,     0,   180,
       0,     0,   758,   181,   759,   760,   761,   182,   762,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,   763,   764,   190,   191,     0,   192,   765,   766,   194,
     195,     0,   196,   197,   198,   199,   200,   767,   202,     0,
     768,   204,   769,   770,   771,   772,   773,     0,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,     0,
     220,   221,   222,   774,   224,     0,   225,   775,   776,   226,
       0,     0,   227,   777,   778,   228,   779,   780,   229,     0,
     230,   781,   231,   782,     0,   232,   233,   234,   783,   784,
     785,     0,     0,     0,     0,   786,   237,   787,     0,     0,
     788,   789,   239,     0,   240,     0,   790,     0,     0,   241,
       0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
     247,     0,     0,     0,   248,   249,   250,     0,     0,     0,
     251,   252,     0,   253,   254,     0,   255,   256,   257,     0,
     258,   259,     0,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,   791,     0,   269,   270,   271,   272,   792,
     793,   273,   274,     0,   275,   794,   276,   277,   795,     0,
     278,   279,   280,     0,     0,     0,   796,   282,     0,   283,
       0,   284,     0,   285,   286,   797,   288,   798,   290,   291,
     292,     0,   293,     0,   799,   800,   801,   294,   295,   296,
       0,   297,   802,   803,     0,   298,   299,     0,     0,     0,
     804,   301,   302,   303,   304,   805,     0,     0,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,     0,   806,
     311,   312,     0,  2007,     0,     0,   313,     0,   314,   315,
       0,   316,   317,   318,     0,     0,   319,     0,   320,     0,
       0,   321,   322,   808,   809,     0,     0,   325,     0,   810,
     326,   327,     0,     0,     0,     0,     0,   811,   329,     0,
     330,     0,   331,     0,   332,   333,     0,     0,   812,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   813,   355,   356,   357,   358,   814,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   815,   367,     0,     0,   816,   369,   370,   817,   371,
       0,   372,   818,   819,   820,   821,   822,   377,   378,   379,
     380,   381,   382,     0,   823,   383,     0,     0,   384,   824,
     825,   387,   388,   389,   390,   826,     0,   391,   828,   392,
     393,   394,   395,   396,     0,   829,   830,   831,   397,     0,
     832,   398,   399,   400,   833,     0,   402,   403,   404,   405,
       0,   406,   407,     0,     0,     0,     0,     0,   408,     0,
       0,     0,     0,   409,   410,   411,     0,   834,   412,     0,
     413,     0,   414,   415,   835,   836,   417,   418,   419,   420,
     837,   838,   423,   839,   424,   425,     0,   426,   427,   428,
     840,     0,   430,     0,   431,   432,   433,   434,   435,     0,
     841,   437,   438,   439,     0,   842,   440,     0,   441,     0,
       0,     0,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,   453,     0,   454,
     455,   456,   843,   844,   457,     0,   458,     0,   459,   460,
       0,   461,   462,     0,   463,     0,   464,   845,     0,   846,
     466,   467,   468,   469,   470,   847,     0,   472,   848,   474,
     849,   475,   476,   477,   478,     0,   850,   480,     0,     0,
       0,   481,   482,   483,   484,   485,     0,     0,     0,   486,
       0,     0,     0,   487,     0,   488,   489,   490,   491,   492,
     493,     0,   494,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,     0,     0,
     503,     0,     0,     0,   504,   505,   506,     0,     0,     0,
     507,   851,   852,   508,   509,   510,     0,   511,   512,   853,
     514,   515,   516,   854,   855,   517,   518,   519,   520,   856,
     521,   522,     0,     0,   523,   524,   525,   526,     0,   857,
     527,   528,     0,   529,   858,   859,   860,   861,     0,     0,
       0,     0,     0,   534,   535,   536,     0,   862,   863,   864,
     538,   539,   540,   865,   541,   542,   543,   866,   544,   545,
       0,   546,   547,     0,     0,   548,     0,     0,   549,     0,
     550,     0,   867,   552,     0,     0,   868,   869,   870,   871,
     553,     0,     0,   554,   555,   872,     0,   873,   556,   557,
     558,   559,   560,   874,   875,     0,     0,     0,     0,     0,
       0,     0,   563,   564,     0,   565,   566,   567,     0,     0,
     876,     0,     0,     0,     0,     0,     0,     0,   877,   878,
       0,     0,     0,     0,   879,   880,     0,     0,   881,   882,
       0,     0,   883,   884,   161,     0,   162,   755,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   756,     0,   171,   172,   173,   174,   175,   176,   177,
     757,   179,     0,   180,     0,     0,   758,   181,   759,   760,
     761,   182,   762,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,   763,   764,   190,   191,     0,
     192,   765,   766,   194,   195,     0,   196,   197,   198,   199,
     200,   767,   202,     0,   768,   204,   769,   770,   771,   772,
     773,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   774,   224,     0,
     225,   775,   776,   226,     0,     0,   227,   777,   778,   228,
     779,   780,   229,     0,   230,   781,   231,   782,     0,   232,
     233,   234,   783,   784,   785,     0,     0,     0,     0,   786,
     237,   787,     0,     0,   788,   789,   239,     0,   240,     0,
     790,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,   791,     0,   269,
     270,   271,   272,   792,   793,   273,   274,     0,   275,   794,
     276,   277,   795,     0,   278,   279,   280,     0,     0,     0,
     796,   282,     0,   283,     0,   284,     0,   285,   286,   797,
     288,   798,   290,   291,   292,     0,   293,     0,   799,   800,
     801,   294,   295,   296,     0,   297,   802,   803,     0,   298,
     299,     0,     0,     0,   804,   301,   302,   303,   304,   805,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,   806,   311,   312,     0,  2009,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   808,   809,     0,
       0,   325,     0,   810,   326,   327,     0,     0,     0,     0,
       0,   811,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,   812,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   813,   355,
     356,   357,   358,   814,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   815,   367,     0,     0,   816,
     369,   370,   817,   371,     0,   372,   818,   819,   820,   821,
     822,   377,   378,   379,   380,   381,   382,     0,   823,   383,
       0,     0,   384,   824,   825,   387,   388,   389,   390,   826,
       0,   391,   828,   392,   393,   394,   395,   396,     0,   829,
     830,   831,   397,     0,   832,   398,   399,   400,   833,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,   834,   412,     0,   413,     0,   414,   415,   835,   836,
     417,   418,   419,   420,   837,   838,   423,   839,   424,   425,
       0,   426,   427,   428,   840,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   841,   437,   438,   439,     0,   842,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,   843,   844,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   845,     0,   846,   466,   467,   468,   469,   470,   847,
       0,   472,   848,   474,   849,   475,   476,   477,   478,     0,
     850,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,   851,   852,   508,   509,   510,
       0,   511,   512,   853,   514,   515,   516,   854,   855,   517,
     518,   519,   520,   856,   521,   522,     0,     0,   523,   524,
     525,   526,     0,   857,   527,   528,     0,   529,   858,   859,
     860,   861,     0,     0,     0,     0,     0,   534,   535,   536,
       0,   862,   863,   864,   538,   539,   540,   865,   541,   542,
     543,   866,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   867,   552,     0,     0,
     868,   869,   870,   871,   553,     0,     0,   554,   555,   872,
       0,   873,   556,   557,   558,   559,   560,   874,   875,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,     0,   876,     0,     0,     0,     0,     0,
       0,     0,   877,   878,     0,     0,     0,     0,   879,   880,
       0,     0,   881,   882,     0,     0,   883,   884,   161,     0,
     162,   755,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   756,     0,   171,   172,   173,
     174,   175,   176,   177,   757,   179,     0,   180,     0,     0,
       0,   181,   759,   760,   761,   182,   762,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,   763,
     764,   190,   191,     0,   192,   765,   766,   194,   195,     0,
     196,   197,   198,   199,   200,   767,   202,     0,   768,   204,
     769,   770,   771,   772,   773,     0,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,   774,   224,     0,   225,   775,   776,   226,     0,     0,
     227,   777,   778,   228,   779,   780,   229,     0,   230,   781,
     231,   782,     0,   232,   233,   234,   783,   784,   785,     0,
       0,     0,     0,   786,   237,   787,     0,     0,   788,   789,
     239,     0,   240,     0,   790,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,   247,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,   253,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,   791,     0,   269,   270,   271,   272,   792,   793,   273,
     274,     0,   275,   794,   276,   277,   795,     0,   278,   279,
     280,     0,     0,     0,   796,   282,     0,   283,     0,   284,
       0,   285,   286,   797,   288,   798,   290,   291,   292,     0,
     293,     0,   799,   800,   801,   294,   295,   296,     0,   297,
     802,   803,     0,   298,   299,     0,     0,     0,   804,   301,
     302,   303,   304,   805,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,   806,   311,   312,
       0,  4920,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,     0,     0,   321,
     322,   808,   809,     0,     0,   325,     0,   810,   326,   327,
       0,     0,     0,     0,     0,   811,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,   812,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   813,   355,   356,   357,   358,   814,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   815,
     367,     0,     0,   816,   369,   370,   817,   371,     0,   372,
     818,   819,   820,   821,   822,   377,   378,   379,   380,   381,
     382,     0,   823,   383,     0,     0,   384,   824,   825,   387,
     388,   389,   390,     0,     0,   391,   828,   392,   393,   394,
     395,   396,     0,   829,   830,   831,   397,     0,   832,   398,
     399,   400,   833,     0,   402,   403,   404,   405,     0,   406,
     407,     0,     0,     0,     0,     0,   408,     0,     0,     0,
       0,   409,   410,   411,     0,   834,   412,     0,   413,     0,
     414,   415,   835,   836,   417,   418,   419,   420,   837,   838,
     423,   839,   424,   425,     0,   426,   427,   428,   840,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   841,   437,
     438,   439,     0,   842,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,     0,   454,   455,   456,
     843,   844,   457,     0,   458,     0,   459,   460,     0,   461,
     462,     0,   463,     0,   464,   845,     0,   846,   466,   467,
     468,   469,   470,   847,     0,   472,   848,   474,   849,   475,
     476,   477,   478,     0,   850,   480,     0,     0,     0,   481,
     482,   483,   484,   485,     0,     0,     0,   486,     0,     0,
       0,   487,     0,   488,   489,   490,   491,   492,   493,     0,
     494,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,   505,   506,     0,     0,     0,   507,   851,
     852,   508,   509,   510,     0,   511,   512,   853,   514,   515,
     516,   854,   855,   517,   518,   519,   520,   856,   521,   522,
       0,     0,   523,   524,   525,   526,     0,   857,   527,   528,
       0,   529,   858,   859,   860,   861,     0,     0,     0,     0,
       0,   534,   535,   536,     0,   862,   863,   864,   538,   539,
     540,   865,   541,   542,   543,   866,   544,   545,     0,   546,
     547,     0,     0,   548,     0,     0,   549,     0,   550,     0,
     867,   552,     0,     0,   868,   869,   870,   871,   553,     0,
       0,   554,   555,   872,     0,   873,   556,   557,   558,   559,
     560,   874,   875,     0,     0,     0,     0,     0,     0,     0,
     563,   564,     0,   565,   566,   567,     0,     0,   876,     0,
       0,     0,     0,     0,     0,     0,  4921,  4922,     0,     0,
       0,     0,     0,  4923,     0,     0,     0,   882,     0,     0,
     883,   884,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,   759,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
     202,     0,   203,   204,   205,   206,   207,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,     0,   220,   221,   222,   223,   224,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,     0,
     229,     0,   230,     0,   231,     0,     0,   232,   233,   234,
       0,     0,  2056,     0,     0,     0,     0,   236,   237,   787,
       0,     0,   238,     0,   239,     0,   240,     0,     0,     0,
       0,   241,     0,   242,   243,   244,   245,   246,     0,     0,
       0,     0,   247,     0,     0,     0,   248,   249,   250,     0,
       0,     0,   251,   252,     0,   253,   254,     0,   255,   256,
     257,     0,   258,   259,     0,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,     0,     0,   269,   270,   271,
     272,     0,   793,   273,   274,     0,   275,     0,   276,   277,
     795,     0,   278,   279,   280,     0,     0,     0,   281,   282,
       0,   283,     0,   284,     0,   285,   286,   287,   288,   289,
     290,   291,   292,     0,   293,     0,     0,     0,     0,   294,
     295,   296,     0,   297,   802,   803,     0,   298,   299,     0,
       0,     0,   300,   301,   302,   303,   304,     0,     0,     0,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
       0,     0,   311,   312,     0,     0,     0,     0,   313,     0,
     314,   315,     0,   316,   317,   318,     0,     0,   319,     0,
     320,     0,     0,   321,   322,   323,   324,     0,     0,   325,
       0,     0,   326,   327,     0,     0,     0,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,     0,     0,
     812,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,   823,   383,     0,     0,
     384,   385,   386,   387,   388,   389,   390,     0,     0,   391,
       0,   392,   393,   394,   395,   396,     0,     0,   830,   831,
     397,     0,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,     0,   406,   407,     0,     0,     0,     0,     0,
     408,     0,     0,     0,     0,   409,   410,   411,     0,     0,
     412,     0,   413,     0,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,     0,   424,   425,     0,   426,
     427,   428,   429,     0,   430,     0,   431,   432,   433,   434,
     435,     0,   436,   437,   438,   439,     0,     0,   440,     0,
     441,     0,     0,     0,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,   453,
       0,   454,   455,   456,     0,     0,   457,     0,   458,     0,
     459,   460,     0,   461,   462,     0,   463,     0,   464,   465,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,   474,     0,   475,   476,   477,   478,     0,   479,   480,
       0,     0,     0,   481,   482,   483,   484,   485,     0,     0,
       0,   486,     0,     0,     0,   487,     0,   488,   489,   490,
     491,   492,   493,     0,   494,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
       0,     0,   503,     0,     0,     0,   504,   505,   506,     0,
       0,     0,   507,     0,     0,   508,   509,   510,     0,   511,
     512,   513,   514,   515,   516,     0,     0,   517,   518,   519,
     520,     0,   521,   522,     0,     0,   523,   524,   525,   526,
       0,   857,   527,   528,     0,   529,  2057,   531,   532,  2058,
       0,     0,     0,     0,     0,   534,   535,   536,     0,     0,
     863,   537,   538,   539,   540,   865,   541,   542,   543,   866,
     544,   545,     0,   546,   547,     0,     0,   548,     0,     0,
     549,     0,   550,     0,   551,   552,     0,     0,     0,     0,
       0,     0,   553,     0,     0,   554,   555,     0,     0,     0,
     556,   557,   558,   559,   560,   561,   562,     0,     0,     0,
       0,     0,     0,     0,   563,   564,     0,   565,   566,   567,
       0,     0,   568,     0,     0,     0,     0,     0,     0,   161,
       0,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,   883,   884,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,  1050,  1051,   194,   195,
       0,   196,   197,   198,   199,   200,   201,   202,     0,   203,
     204,   205,   206,   207,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,     0,   220,
     221,   222,   223,   224,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,     0,   229,     0,   230,
       0,   231,     0,     0,   232,   233,   234,     0,     0,   235,
       0,     0,     0,     0,   236,   237,     0,     0,     0,   238,
    1052,   239,     0,   240,     0,     0,     0,     0,   241,     0,
     242,   243,   244,   245,   246,     0,     0,     0,     0,   247,
       0,     0,     0,   248,   249,   250,     0,     0,     0,   251,
     252,     0,   253,   254,     0,   255,   256,   257,     0,   258,
     259,     0,   260,   261,   262,   263,   264,   265,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,     0,     0,
     273,   274,     0,   275,     0,   276,   277,     0,     0,   278,
     279,   280,     0,     0,     0,   281,   282,     0,   283,     0,
     284,     0,   285,   286,   287,   288,   289,   290,  1053,   292,
       0,   293,     0,     0,     0,     0,   294,   295,   296,     0,
     297,     0,     0,     0,   298,   299,     0,     0,     0,   300,
     301,   302,   303,   304,     0,     0,     0,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,     0,     0,   311,
     312,     0,     0,     0,     0,   313,     0,   314,   315,     0,
     316,   317,   318,     0,     0,   319,     0,   320,     0,     0,
     321,   322,   323,   324,     0,     0,   325,     0,     0,   326,
     327,     0,     0,     0,     0,     0,   328,   329,     0,  1054,
       0,   331,     0,   332,   333,     0,     0,     0,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,     0,   373,   374,   375,   376,   377,   378,   379,  1055,
     381,   382,     0,     0,   383,     0,     0,   384,   385,   386,
     387,   388,   389,   390,     0,     0,   391,     0,   392,   393,
     394,   395,   396,     0,     0,     0,     0,   397,     0,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,     0,
     406,   407,     0,     0,     0,     0,     0,   408,     0,     0,
       0,     0,   409,   410,   411,     0,     0,   412,     0,   413,
       0,   414,   415,  1056,     0,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,   433,   434,   435,     0,   436,
     437,   438,   439,     0,     0,   440,     0,   441,     0,     0,
       0,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,     0,   454,   455,
     456,     0,     0,   457,     0,   458,     0,   459,   460,     0,
     461,   462,     0,   463,     0,   464,   465,     0,     0,  1057,
     467,   468,   469,   470,   471,     0,   472,   473,   474,     0,
     475,   476,   477,   478,     0,   479,   480,     0,     0,     0,
     481,   482,   483,  1058,   485,     0,     0,     0,   486,     0,
       0,     0,   487,     0,   488,   489,   490,   491,   492,   493,
       0,   494,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,     0,     0,   503,
       0,     0,     0,   504,   505,   506,     0,     0,     0,   507,
       0,     0,   508,   509,   510,     0,   511,   512,   513,   514,
     515,   516,     0,     0,   517,   518,   519,   520,     0,   521,
     522,     0,     0,   523,   524,   525,   526,     0,     0,   527,
     528,     0,   529,   530,   531,   532,   533,     0,     0,     0,
       0,     0,  1059,   535,   536,     0,     0,     0,   537,   538,
     539,   540,     0,   541,   542,   543,     0,   544,   545,     0,
     546,   547,     0,     0,   548,     0,     0,   549,     0,   550,
       0,   551,   552,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   554,   555,     0,     0,     0,   556,   557,   558,
     559,   560,   561,   562,     0,     0,     0,     0,     0,     0,
       0,   563,   564,     0,   565,   566,   567,     0,     0,   568,
       0,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,  1060,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,   202,     0,   203,   204,   205,   206,   207,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   223,   224,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,     0,   229,     0,   230,     0,   231,     0,     0,   232,
     233,   234,     0,     0,   235,     0,     0,     0,     0,   236,
     237,     0,     0,     0,   238,     0,   239,     0,   240,     0,
       0,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,     0,     0,   273,   274,     0,   275,     0,
     276,   277,     0,     0,   278,   279,   280,     0,     0,     0,
     281,   282,     0,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,     0,     0,     0,
       0,   294,   295,   296,     0,   297,     0,     0,     0,   298,
     299,     0,     0,     0,   300,   301,   302,   303,   304,     0,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,     0,   311,   312,     0,     0,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   323,   324,     0,
       0,   325,     0,     0,   326,   327,   704,     0,     0,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,     0,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,     0,   383,
       0,     0,   384,   385,   386,   387,   388,   389,   390,     0,
       0,   391,     0,   392,   393,   394,   395,   396,     0,     0,
       0,     0,   397,     0,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,     0,   412,     0,   413,     0,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,   426,   427,   428,   429,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,     0,     0,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,     0,     0,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   465,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,   474,     0,   475,   476,   477,   478,     0,
     479,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,     0,     0,   508,   509,   510,
       0,   511,   512,   513,   514,   515,   516,     0,     0,   517,
     518,   519,   520,     0,   521,   522,     0,     0,   523,   524,
     525,   526,     0,   158,   527,   528,     0,   529,   530,   531,
     532,   533,     0,     0,     0,     0,     0,   534,   535,   536,
       0,     0,     0,   537,   538,   539,   540,     0,   541,   542,
     543,     0,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   551,   552,     0,     0,
       0,     0,     0,     0,   553,     0,     0,   554,   555,     0,
       0,     0,   556,   557,   558,   559,   560,   561,   562,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,     0,   568,     0,     0,     0,     0,   161,
       0,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,  1579,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,   202,     0,   203,
     204,   205,   206,   207,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,     0,   220,
     221,   222,   223,   224,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,     0,   229,     0,   230,
       0,   231,     0,     0,   232,   233,   234,     0,     0,   235,
       0,     0,     0,     0,   236,   237,     0,     0,     0,   238,
       0,   239,     0,   240,     0,     0,     0,     0,   241,     0,
     242,   243,   244,   245,   246,     0,     0,     0,     0,   247,
       0,     0,     0,   248,   249,   250,     0,     0,     0,   251,
     252,     0,   253,   254,     0,   255,   256,   257,     0,   258,
     259,     0,   260,   261,   262,   263,   264,   265,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,     0,     0,
     273,   274,     0,   275,     0,   276,   277,     0,     0,   278,
     279,   280,     0,     0,     0,   281,   282,     0,   283,     0,
     284,     0,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,     0,     0,     0,     0,   294,   295,   296,     0,
     297,     0,     0,     0,   298,   299,     0,     0,     0,   300,
     301,   302,   303,   304,     0,     0,     0,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,     0,     0,   311,
     312,     0,     0,     0,     0,   313,     0,   314,   315,     0,
     316,   317,   318,     0,     0,   319,     0,   320,     0,     0,
     321,   322,   323,   324,     0,     0,   325,     0,     0,   326,
     327,   704,     0,     0,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,     0,     0,     0,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,     0,   383,     0,     0,   384,   385,   386,
     387,   388,   389,   390,     0,     0,   391,     0,   392,   393,
     394,   395,   396,     0,     0,     0,     0,   397,     0,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,     0,
     406,   407,     0,     0,     0,     0,     0,   408,     0,     0,
       0,     0,   409,   410,   411,     0,     0,   412,     0,   413,
       0,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,   433,   434,   435,     0,   436,
     437,   438,   439,     0,     0,   440,     0,   441,     0,     0,
       0,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,     0,   454,   455,
     456,     0,     0,   457,     0,   458,     0,   459,   460,     0,
     461,   462,     0,   463,     0,   464,   465,     0,     0,   466,
     467,   468,   469,   470,   471,     0,   472,   473,   474,     0,
     475,   476,   477,   478,     0,   479,   480,     0,     0,     0,
     481,   482,   483,   484,   485,     0,     0,     0,   486,     0,
       0,     0,   487,     0,   488,   489,   490,   491,   492,   493,
       0,   494,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,     0,     0,   503,
       0,     0,     0,   504,   505,   506,     0,     0,     0,   507,
       0,     0,   508,   509,   510,     0,   511,   512,   513,   514,
     515,   516,     0,     0,   517,   518,   519,   520,     0,   521,
     522,     0,     0,   523,   524,   525,   526,     0,   158,   527,
     528,     0,   529,   530,   531,   532,   533,     0,     0,     0,
       0,     0,   534,   535,   536,     0,     0,     0,   537,   538,
     539,   540,     0,   541,   542,   543,     0,   544,   545,     0,
     546,   547,     0,     0,   548,     0,     0,   549,     0,   550,
       0,   551,   552,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   554,   555,     0,     0,     0,   556,   557,   558,
     559,   560,   561,   562,     0,     0,     0,     0,     0,     0,
       0,   563,   564,     0,   565,   566,   567,     0,     0,   568,
       0,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,  1980,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,   202,     0,   203,   204,   205,   206,   207,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   223,   224,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,     0,   229,     0,   230,     0,   231,     0,     0,   232,
     233,   234,     0,     0,   235,     0,     0,     0,     0,   236,
     237,     0,     0,     0,   238,     0,   239,     0,   240,     0,
       0,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,     0,     0,   273,   274,     0,   275,     0,
     276,   277,     0,     0,   278,   279,   280,     0,     0,     0,
     281,   282,     0,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,     0,     0,     0,
       0,   294,   295,   296,     0,   297,     0,     0,     0,   298,
     299,     0,     0,     0,   300,   301,   302,   303,   304,     0,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,     0,   311,   312,     0,     0,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   323,   324,     0,
       0,   325,     0,     0,   326,   327,   704,     0,     0,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,     0,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,     0,   383,
       0,     0,   384,   385,   386,   387,   388,   389,   390,     0,
       0,   391,     0,   392,   393,   394,   395,   396,     0,     0,
       0,     0,   397,     0,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,     0,   412,     0,   413,     0,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,   426,   427,   428,   429,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,     0,     0,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,     0,     0,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   465,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,   474,     0,   475,   476,   477,   478,     0,
     479,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,     0,     0,   508,   509,   510,
       0,   511,   512,   513,   514,   515,   516,     0,     0,   517,
     518,   519,   520,     0,   521,   522,     0,     0,   523,   524,
     525,   526,     0,   158,   527,   528,     0,   529,   530,   531,
     532,   533,     0,     0,     0,     0,     0,   534,   535,   536,
       0,     0,     0,   537,   538,   539,   540,     0,   541,   542,
     543,     0,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   551,   552,     0,     0,
       0,     0,     0,     0,   553,     0,     0,   554,   555,     0,
       0,     0,   556,   557,   558,   559,   560,   561,   562,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,     0,   568,     0,     0,     0,     0,   161,
       0,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,  2854,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,  1050,  1051,   194,   195,
       0,   196,   197,   198,   199,   200,   201,   202,     0,   203,
     204,   205,   206,   207,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,     0,   220,
     221,   222,   223,   224,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,     0,   229,     0,   230,
       0,   231,     0,     0,   232,   233,   234,     0,     0,   235,
       0,     0,     0,     0,   236,   237,     0,     0,     0,   238,
    1052,   239,     0,   240,     0,     0,     0,     0,   241,     0,
     242,   243,   244,   245,   246,     0,     0,     0,     0,   247,
       0,     0,     0,   248,   249,   250,     0,     0,     0,   251,
     252,     0,   253,   254,     0,   255,   256,   257,     0,   258,
     259,     0,   260,   261,   262,   263,   264,   265,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,     0,     0,
     273,   274,     0,   275,     0,   276,   277,     0,     0,   278,
     279,   280,     0,     0,     0,   281,   282,     0,   283,     0,
     284,     0,   285,   286,   287,   288,   289,   290,  1053,   292,
       0,   293,     0,     0,     0,     0,   294,   295,   296,     0,
     297,     0,     0,     0,   298,   299,     0,     0,     0,   300,
     301,   302,   303,   304,     0,     0,     0,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,     0,     0,   311,
     312,     0,     0,     0,     0,   313,     0,   314,   315,     0,
     316,   317,   318,     0,     0,   319,     0,   320,     0,     0,
     321,   322,   323,   324,     0,     0,   325,     0,     0,   326,
     327,     0,     0,     0,     0,     0,   328,   329,     0,  1054,
       0,   331,     0,   332,   333,     0,     0,     0,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,     0,   373,   374,   375,   376,   377,   378,   379,  1055,
     381,   382,     0,     0,   383,     0,     0,   384,   385,   386,
     387,   388,   389,   390,     0,     0,   391,     0,   392,   393,
     394,   395,   396,     0,     0,     0,     0,   397,     0,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,     0,
     406,   407,     0,     0,     0,     0,     0,   408,     0,     0,
       0,     0,   409,   410,   411,     0,     0,   412,     0,   413,
       0,   414,   415,  1056,     0,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,   433,   434,   435,     0,   436,
     437,   438,   439,     0,     0,   440,     0,   441,     0,     0,
       0,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,     0,   454,   455,
     456,     0,     0,   457,     0,   458,     0,   459,   460,     0,
     461,   462,     0,   463,     0,   464,   465,     0,     0,  1057,
     467,   468,   469,   470,   471,     0,   472,   473,   474,     0,
     475,   476,   477,   478,     0,   479,   480,     0,     0,     0,
     481,   482,   483,  1058,   485,     0,     0,     0,   486,     0,
       0,     0,   487,     0,   488,   489,   490,   491,   492,   493,
       0,   494,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,     0,     0,   503,
       0,     0,     0,   504,   505,   506,     0,     0,     0,   507,
       0,     0,   508,   509,   510,     0,   511,   512,   513,   514,
     515,   516,     0,     0,   517,   518,   519,   520,     0,   521,
     522,     0,     0,   523,   524,   525,   526,     0,     0,   527,
     528,     0,   529,   530,   531,   532,   533,     0,     0,     0,
       0,     0,   534,   535,   536,     0,     0,     0,   537,   538,
     539,   540,     0,   541,   542,   543,     0,   544,   545,     0,
     546,   547,     0,     0,   548,     0,     0,   549,     0,   550,
       0,   551,   552,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   554,   555,     0,     0,     0,   556,   557,   558,
     559,   560,   561,   562,     0,     0,     0,     0,     0,     0,
       0,   563,   564,     0,   565,   566,   567,     0,     0,   568,
       0,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,  1060,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,   202,     0,   203,   204,   205,   206,   207,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   223,   224,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,     0,   229,     0,   230,     0,   231,     0,     0,   232,
     233,   234,     0,     0,   235,     0,     0,     0,     0,   236,
     237,     0,     0,     0,   238,     0,   239,     0,   240,     0,
       0,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,     0,     0,   273,   274,     0,   275,     0,
     276,   277,     0,     0,   278,   279,   280,     0,     0,     0,
     281,   282,     0,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,     0,     0,     0,
       0,   294,   295,   296,     0,   297,     0,     0,     0,   298,
     299,     0,     0,     0,   300,   301,   302,   303,   304,     0,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,     0,   311,   312,     0,     0,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   323,   324,     0,
       0,   325,     0,     0,   326,   327,     0,     0,     0,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,     0,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,     0,   383,
       0,     0,   384,   385,   386,   387,   388,   389,   390,     0,
       0,   391,     0,   392,   393,   394,   395,   396,     0,     0,
       0,     0,   397,     0,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,     0,   412,     0,   413,     0,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,   426,   427,   428,   429,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,     0,     0,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,     0,     0,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   465,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,   474,     0,   475,   476,   477,   478,     0,
     479,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,     0,     0,   508,   509,   510,
       0,   511,   512,   513,   514,   515,   516,     0,     0,   517,
     518,   519,   520,     0,   521,   522,     0,     0,   523,   524,
     525,   526,     0,     0,   527,   528,     0,   529,   530,   531,
     532,   533,     0,     0,     0,     0,     0,   534,   535,   536,
       0,     0,     0,   537,   538,   539,   540,     0,   541,   542,
     543,     0,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   551,   552,     0,     0,
       0,     0,     0,     0,   553,     0,     0,   554,   555,     0,
       0,     0,   556,   557,   558,   559,   560,   561,   562,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,     0,   568,     0,     0,     0,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
    5342,   168,     0,     0,     0,   169,   883,  5343,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,   202,
       0,   203,   204,   205,   206,   207,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,  1444,   218,   219,
       0,   220,   221,   222,   223,   224,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,     0,   229,
       0,   230,     0,   231,     0,     0,   232,   233,   234,     0,
       0,   235,     0,     0,     0,     0,   236,   237,     0,     0,
       0,   238,     0,   239,     0,   240,     0,     0,     0,     0,
     241,     0,   242,   243,   244,   245,   246,     0,     0,     0,
       0,   247,     0,     0,     0,   248,   249,   250,     0,     0,
       0,   251,   252,     0,   253,   254,     0,   255,   256,   257,
       0,   258,   259,     0,   260,   261,   262,   263,   264,   265,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
       0,     0,   273,   274,     0,   275,     0,   276,   277,     0,
       0,   278,   279,   280,     0,     0,     0,   281,   282,     0,
     283,     0,   284,     0,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,     0,     0,     0,     0,   294,   295,
     296,     0,   297,     0,     0,     0,   298,   299,     0,     0,
       0,   300,   301,   302,   303,   304,     0,     0,     0,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,     0,
       0,   311,   312,     0,     0,     0,     0,   313,     0,   314,
     315,     0,   316,   317,   318,     0,     0,   319,     0,   320,
       0,     0,   321,   322,   323,   324,     0,     0,   325,     0,
       0,   326,   327,     0,     0,     0,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,     0,     0,     0,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,     0,   383,     0,     0,   384,
     385,   386,   387,   388,   389,   390,     0,     0,   391,     0,
     392,   393,   394,   395,   396,     0,     0,     0,     0,   397,
       0,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,     0,   406,   407,     0,     0,     0,     0,     0,   408,
       0,     0,     0,     0,   409,   410,   411,     0,     0,   412,
       0,   413,     0,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,   433,   434,   435,
       0,   436,   437,   438,   439,     0,     0,   440,     0,   441,
       0,     0,     0,   442,   443,     0,   444,   445,   446,     0,
       0,   447,   448,   449,   450,   451,     0,   452,   453,     0,
     454,   455,   456,     0,     0,   457,     0,   458,     0,   459,
     460,     0,   461,   462,     0,   463,     0,   464,   465,     0,
       0,   466,   467,   468,   469,   470,   471,     0,   472,   473,
     474,     0,   475,   476,   477,   478,     0,   479,   480,     0,
       0,     0,   481,   482,   483,   484,   485,     0,     0,     0,
     486,     0,     0,     0,   487,     0,   488,   489,   490,   491,
     492,   493,     0,   494,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,     0,
       0,   503,     0,     0,     0,   504,   505,   506,     0,     0,
       0,   507,     0,     0,   508,   509,   510,     0,   511,   512,
     513,   514,   515,   516,     0,     0,   517,   518,   519,   520,
       0,   521,   522,     0,     0,   523,   524,   525,   526,     0,
       0,   527,   528,     0,   529,   530,   531,   532,   533,     0,
       0,     0,     0,     0,   534,   535,   536,     0,     0,     0,
     537,   538,   539,   540,     0,   541,   542,   543,     0,   544,
     545,     0,   546,   547,     0,     0,   548,     0,     0,   549,
       0,   550,     0,   551,   552,     0,     0,     0,     0,     0,
       0,   553,     0,     0,   554,   555,     0,     0,     0,   556,
     557,   558,   559,   560,   561,   562,     0,     0,     0,     0,
       0,     0,     0,   563,   564,     0,   565,   566,   567,     0,
       0,   568,     0,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,  1445,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,   202,     0,   203,   204,   205,   206,
     207,   208,   209,     0,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,   223,
     224,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,     0,   229,     0,   230,     0,   231,     0,
       0,   232,   233,   234,     0,     0,   235,     0,     0,     0,
       0,   236,   237,     0,     0,     0,   238,     0,   239,     0,
     240,     0,     0,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,   247,     0,     0,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,   253,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,     0,
       0,   269,   270,   271,   272,     0,     0,   273,   274,     0,
     275,     0,   276,   277,     0,     0,   278,   279,   280,     0,
       0,     0,   281,   282,     0,   283,     0,   284,     0,   285,
     286,   287,   288,   289,   290,   291,   292,     0,   293,     0,
       0,     0,     0,   294,   295,   296,     0,   297,     0,     0,
       0,   298,   299,     0,     0,     0,   300,   301,   302,   303,
     304,     0,     0,     0,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,     0,     0,   311,   312,     0,     0,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
       0,     0,   319,     0,   320,     0,     0,   321,   322,   323,
     324,     0,     0,   325,     0,     0,   326,   327,     0,     0,
       0,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,     0,     0,     0,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
       0,   383,     0,     0,   384,   385,   386,   387,   388,   389,
     390,     0,     0,   391,     0,   392,   393,   394,   395,   396,
       0,     0,     0,     0,   397,     0,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,     0,   406,   407,     0,
       0,     0,     0,     0,   408,     0,     0,     0,     0,   409,
     410,   411,     0,     0,   412,     0,   413,     0,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,   426,   427,   428,   429,     0,   430,     0,
     431,   432,   433,   434,   435,     0,   436,   437,   438,   439,
       0,     0,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,     0,     0,   447,   448,   449,   450,
     451,     0,   452,   453,     0,   454,   455,   456,     0,     0,
     457,     0,   458,     0,   459,   460,     0,   461,   462,     0,
     463,     0,   464,   465,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,   474,     0,   475,   476,   477,
     478,     0,   479,   480,     0,     0,     0,   481,   482,   483,
     484,   485,     0,     0,     0,   486,     0,     0,     0,   487,
       0,   488,   489,   490,   491,   492,   493,     0,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,   505,   506,     0,     0,     0,   507,     0,     0,   508,
     509,   510,     0,   511,   512,   513,   514,   515,   516,     0,
       0,   517,   518,   519,   520,     0,   521,   522,     0,     0,
     523,   524,   525,   526,     0,     0,   527,   528,     0,   529,
     530,   531,   532,   533,     0,     0,     0,     0,     0,   534,
     535,   536,     0,     0,     0,   537,   538,   539,   540,     0,
     541,   542,   543,     0,   544,   545,     0,   546,   547,     0,
       0,   548,     0,     0,   549,     0,   550,     0,   551,   552,
       0,     0,     0,     0,     0,     0,   553,     0,     0,   554,
     555,     0,     0,     0,   556,   557,   558,   559,   560,   561,
     562,     0,     0,     0,     0,     0,     0,     0,   563,   564,
       0,   565,   566,   567,     0,     0,   568,     0,     0,     0,
       0,     0,     0,   161,     0,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,   883,  5343,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,   202,     0,   203,   204,   205,   206,   207,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,     0,   220,   221,   222,   223,   224,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
       0,   229,     0,   230,     0,   231,     0,     0,   232,   233,
     234,     0,     0,   235,     0,     0,     0,     0,   236,   237,
       0,     0,     0,   238,     0,   239,     0,   240,     0,     0,
       0,     0,   241,     0,   242,   243,   244,   245,   246,     0,
       0,     0,     0,   247,     0,     0,     0,   248,   249,   250,
       0,     0,     0,   251,   252,     0,   253,   254,     0,   255,
     256,   257,     0,   258,   259,     0,   260,   261,   262,   263,
     264,   265,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,     0,     0,   273,   274,     0,   275,     0,   276,
     277,     0,     0,   278,   279,   280,     0,     0,     0,   281,
     282,     0,   283,     0,   284,     0,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   293,     0,     0,     0,     0,
     294,   295,   296,     0,   297,     0,     0,     0,   298,   299,
       0,     0,     0,   300,   301,   302,   303,   304,     0,     0,
       0,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,     0,     0,   311,   312,     0,     0,     0,     0,   313,
       0,   314,   315,     0,   316,   317,   318,     0,     0,   319,
       0,   320,     0,     0,   321,   322,   323,   324,     0,     0,
     325,     0,     0,   326,   327,     0,     0,     0,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,     0,
       0,     0,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,     0,   383,     0,
       0,   384,   385,   386,   387,   388,   389,   390,     0,     0,
     391,     0,   392,   393,   394,   395,   396,     0,     0,     0,
       0,   397,     0,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,     0,   406,   407,     0,     0,     0,     0,
       0,   408,     0,     0,     0,     0,   409,   410,   411,     0,
       0,   412,     0,   413,     0,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,   433,
     434,   435,     0,   436,   437,   438,   439,     0,     0,   440,
       0,   441,     0,     0,     0,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,     0,   454,   455,   456,     0,     0,   457,     0,   458,
       0,   459,   460,     0,   461,   462,     0,   463,     0,   464,
     465,     0,     0,   466,   467,   468,   469,   470,   471,     0,
     472,   473,   474,     0,   475,   476,   477,   478,     0,   479,
     480,     0,     0,     0,   481,   482,   483,   484,   485,     0,
       0,     0,   486,     0,     0,     0,   487,     0,   488,   489,
     490,   491,   492,   493,     0,   494,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,     0,     0,   503,     0,     0,     0,   504,   505,   506,
       0,     0,     0,   507,     0,     0,   508,   509,   510,     0,
     511,   512,   513,   514,   515,   516,     0,     0,   517,   518,
     519,   520,     0,   521,   522,     0,     0,   523,   524,   525,
     526,     0,     0,   527,   528,     0,   529,   530,   531,   532,
     533,     0,     0,     0,     0,     0,   534,   535,   536,     0,
       0,     0,   537,   538,   539,   540,     0,   541,   542,   543,
       0,   544,   545,     0,   546,   547,     0,     0,   548,     0,
       0,   549,     0,   550,     0,   551,   552,     0,     0,     0,
       0,     0,     0,   553,     0,     0,   554,   555,     0,     0,
       0,   556,   557,   558,   559,   560,   561,   562,     0,     0,
       0,     0,     0,     0,     0,   563,   564,     0,   565,   566,
     567,     0,     0,   568,     0,     0,     0,     0,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,  1445,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,   202,     0,   203,   204,
     205,   206,   207,   208,   209,     0,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,  3859,   220,   221,
     222,   223,   224,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,     0,   229,     0,   230,     0,
     231,     0,     0,   232,   233,   234,     0,     0,   235,     0,
       0,     0,     0,   236,   237,     0,     0,     0,   238,     0,
     239,     0,   240,     0,     0,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,   247,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,   253,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,     0,     0,   269,   270,   271,   272,     0,     0,   273,
     274,     0,   275,     0,   276,   277,     0,     0,   278,   279,
     280,     0,     0,     0,   281,   282,     0,   283,   675,   284,
       0,   285,   286,   287,   288,   289,   290,   291,   292,     0,
     293,     0,     0,     0,     0,   294,   295,   296,     0,   297,
       0,     0,     0,   298,   299,     0,     0,     0,   300,   301,
     302,   303,   304,     0,     0,     0,   305,   306,   307,   308,
     309,  2398,     0,   310,     0,     0,     0,     0,   311,   312,
       0,     0,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,  2399,     0,   321,
     322,   323,   324,     0,     0,   325,     0,     0,   326,   327,
       0,  3860,     0,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,     0,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,     0,   383,     0,     0,   384,   385,   386,   387,
     388,   389,   390,     0,     0,   391,     0,   392,   393,   394,
     395,   396,     0,     0,     0,     0,   397,     0,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,     0,   406,
     407,     0,     0,     0,     0,     0,   408,     0,     0,     0,
       0,   409,   410,   411,     0,     0,   412,     0,   413,     0,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,   426,   427,   428,   429,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   436,   437,
     438,   439,     0,     0,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,     0,   454,   455,   456,
       0,     0,   457,     0,   458,     0,   459,   460,     0,   461,
     462,     0,   463,     0,   464,   465,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,   474,     0,   475,
     476,   477,   478,     0,   479,   480, -2283,     0,     0,   481,
     482,   483,   484,   485,     0,     0,     0,   486,     0,     0,
       0,   487,     0,   488,   489,   490,   491,   492,   493,     0,
     494,   495,   496,   497,   498,   499,   677,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,   505,   506,     0,     0,     0,   507,     0,
       0,   508,   509,   510,     0,   511,   512,   513,   514,   515,
     516,     0,     0,   517,   518,   519,   520,     0,   521,   522,
       0,     0,   523,   524,   525,   526,     0,     0,   527,   528,
       0,   529,   530,   531,   532,   533,     0,     0,     0,     0,
       0,   534,   535,   536,     0,     0,     0,   537,   538,   539,
     540,     0,   541,   542,   543,     0,   544,   545,     0,   546,
     547,     0,     0,   548,     0,     0,   549,     0,   550,     0,
     551,   552,     0,     0,     0,     0,     0,     0,   553,     0,
       0,   554,   555,     0,     0,     0,   556,   557,   558,   559,
     560,   561,   562,     0,     0,     0,     0,    60,     0,     0,
     563,   564,     0,   565,   566,   567,     0,     0,   568,     0,
       0,     0,   161,     0,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
    3861,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
     202,     0,   203,   204,   205,   206,   207,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,  3859,   220,   221,   222,   223,   224,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,     0,
     229,     0,   230,     0,   231,     0,     0,   232,   233,   234,
       0,     0,   235,     0,     0,     0,     0,   236,   237,     0,
       0,     0,   238,     0,   239,     0,   240,     0,     0,     0,
       0,   241,     0,   242,   243,   244,   245,   246,     0,     0,
       0,     0,   247,     0,     0,     0,   248,   249,   250,     0,
       0,     0,   251,   252,     0,   253,   254,     0,   255,   256,
     257,     0,   258,   259,     0,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,     0,     0,   269,   270,   271,
     272,     0,     0,   273,   274,     0,   275,     0,   276,   277,
       0,     0,   278,   279,   280,     0,     0,     0,   281,   282,
       0,   283,   675,   284,     0,   285,   286,   287,   288,   289,
     290,   291,   292,     0,   293,     0,     0,     0,     0,   294,
     295,   296,     0,   297,     0,     0,     0,   298,   299,     0,
       0,     0,   300,   301,   302,   303,   304,     0,     0,     0,
     305,   306,   307,   308,   309,  2398,     0,   310,     0,     0,
       0,     0,   311,   312,     0,     0,     0,     0,   313,     0,
     314,   315,     0,   316,   317,   318,     0,     0,   319,     0,
     320,  2399,     0,   321,   322,   323,   324,     0,     0,   325,
       0,     0,   326,   327,     0,     0,     0,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,     0,     0,
       0,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,     0,   383,     0,     0,
     384,   385,   386,   387,   388,   389,   390,     0,     0,   391,
       0,   392,   393,   394,   395,   396,     0,     0,     0,     0,
     397,     0,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,     0,   406,   407,     0,     0,     0,     0,     0,
     408,     0,     0,     0,     0,   409,   410,   411,     0,     0,
     412,     0,   413,     0,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,     0,   424,   425,     0,   426,
     427,   428,   429,     0,   430,     0,   431,   432,   433,   434,
     435,     0,   436,   437,   438,   439,     0,     0,   440,     0,
     441,     0,     0,     0,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,   453,
       0,   454,   455,   456,     0,     0,   457,     0,   458,     0,
     459,   460,     0,   461,   462,     0,   463,     0,   464,   465,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,   474,     0,   475,   476,   477,   478,     0,   479,   480,
       0,     0,     0,   481,   482,   483,   484,   485,     0,     0,
       0,   486,     0,     0,     0,   487,     0,   488,   489,   490,
     491,   492,   493,     0,   494,   495,   496,   497,   498,   499,
     677,     0,     0,     0,     0,     0,   500,   501,     0,   502,
       0,     0,   503,     0,     0,     0,   504,   505,   506,     0,
       0,     0,   507,     0,     0,   508,   509,   510,     0,   511,
     512,   513,   514,   515,   516,     0,     0,   517,   518,   519,
     520,     0,   521,   522,     0,     0,   523,   524,   525,   526,
       0,     0,   527,   528,     0,   529,   530,   531,   532,   533,
       0,     0,     0,     0,     0,   534,   535,   536,     0,     0,
       0,   537,   538,   539,   540,     0,   541,   542,   543,     0,
     544,   545,     0,   546,   547,     0,     0,   548,     0,     0,
     549,     0,   550,     0,   551,   552,     0,     0,     0,     0,
       0,     0,   553,     0,     0,   554,   555,     0,     0,     0,
     556,   557,   558,   559,   560,   561,   562,     0,     0,     0,
       0,     0,     0,     0,   563,   564,     0,   565,   566,   567,
       0,     0,   568,     0,     0,     0,   161,     0,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,  3861,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,   202,     0,   203,   204,   205,   206,
     207,   208,   209,     0,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,   223,
     224,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,     0,   229,     0,   230,     0,   231,     0,
       0,   232,   233,   234,     0,     0,   235,     0,     0,     0,
       0,   236,   237,     0,     0,     0,   238,     0,   239,     0,
     240,     0,     0,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,   247,     0,     0,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,   253,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,     0,
       0,   269,   270,   271,   272,     0,     0,   273,   274,     0,
     275,     0,   276,   277,     0,     0,   278,   279,   280,     0,
       0,     0,   281,   282,     0,   283,     0,   284,     0,   285,
     286,   287,   288,   289,   290,   291,   292,     0,   293,     0,
       0,     0,     0,   294,   295,   296,     0,   297,     0,     0,
       0,   298,   299,     0,     0,     0,   300,   301,   302,   303,
     304,     0,     0,     0,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,     0,     0,   311,   312,     0,     0,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
       0,     0,   319,     0,   320,     0,     0,   321,   322,   323,
     324,     0,     0,   325,     0,     0,   326,   327,     0,     0,
       0,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,     0,     0,     0,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
       0,   383,     0,     0,   384,   385,   386,   387,   388,   389,
     390,     0,     0,   391,     0,   392,   393,   394,   395,   396,
       0,     0,     0,     0,   397,     0,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,     0,   406,   407,     0,
       0,     0,     0,     0,   408,     0,     0,     0,     0,   409,
     410,   411,     0,     0,   412,     0,   413,     0,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,   426,   427,   428,   429,     0,   430,     0,
     431,   432,   433,   434,   435,     0,   436,   437,   438,   439,
       0,     0,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,     0,     0,   447,   448,   449,   450,
     451,     0,   452,   453,     0,   454,   455,   456,     0,     0,
     457,     0,   458,     0,   459,   460,     0,   461,   462,     0,
     463,     0,   464,   465,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,   474,     0,   475,   476,   477,
     478,     0,   479,   480,     0,     0,     0,   481,   482,   483,
     484,   485,     0,     0,     0,   486,     0,     0,     0,   487,
       0,   488,   489,   490,   491,   492,   493,     0,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,   505,   506,     0,     0,     0,   507,     0,     0,   508,
     509,   510,     0,   511,   512,   513,   514,   515,   516,     0,
       0,   517,   518,   519,   520,     0,   521,   522,     0,     0,
     523,   524,   525,   526,     0,     0,   527,   528,     0,   529,
     530,   531,   532,   533,     0,     0,     0,     0,     0,   534,
     535,   536,     0,     0,     0,   537,   538,   539,   540,     0,
     541,   542,   543,     0,   544,   545,     0,   546,   547,     0,
       0,   548,     0,     0,   549,     0,   550,     0,   551,   552,
       0,     0,     0,     0,     0,     0,   553,     0,     0,   554,
     555,     0,     0,     0,   556,   557,   558,   559,   560,   561,
     562,     0,     0,     0,     0,    60,     0,     0,   563,   564,
       0,   565,   566,   567,     0,     0,   568,     0,     0,     0,
     161,     0,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,  3191,     0,   169,     0,     0,   170,   883,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,   202,     0,
     203,   204,   205,   206,   207,   208,   209,     0,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,     0,
     220,   221,   222,   223,   224,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,     0,   229,     0,
     230,     0,   231,     0,     0,   232,   233,   234,     0,     0,
     235,     0,     0,     0,     0,   236,   237,     0,     0,     0,
     238,     0,   239,     0,   240,     0,     0,     0,     0,   241,
       0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
     247,     0,     0,     0,   248,   249,   250,     0,     0,     0,
     251,   252,     0,   253,   254,     0,   255,   256,   257,     0,
     258,   259,     0,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,     0,     0,   269,   270,   271,   272,     0,
       0,   273,   274,     0,   275,     0,   276,   277,     0,     0,
     278,   279,   280,     0,     0,     0,   281,   282,     0,   283,
       0,   284,     0,   285,   286,   287,   288,   289,   290,   291,
     292,     0,   293,     0,     0,     0,     0,   294,   295,   296,
       0,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,   301,   302,   303,   304,     0,     0,     0,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,     0,     0,
     311,   312,     0,     0,     0,     0,   313,     0,   314,   315,
       0,   316,   317,   318,     0,     0,   319,     0,   320,     0,
       0,   321,   322,   323,   324,     0,     0,   325,     0,     0,
     326,   327,     0,     0,     0,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,     0,     0,     0,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,     0,   383,     0,     0,   384,   385,
     386,   387,   388,   389,   390,     0,     0,   391,     0,   392,
     393,   394,   395,   396,     0,     0,     0,     0,   397,     0,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
       0,   406,   407,     0,     0,     0,     0,     0,   408,     0,
       0,     0,     0,   409,   410,   411,     0,     0,   412,     0,
     413,     0,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,     0,   424,   425,     0,   426,   427,   428,
     429,     0,   430,     0,   431,   432,   433,   434,   435,     0,
     436,   437,   438,   439,     0,     0,   440,     0,   441,     0,
       0,     0,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,   453,     0,   454,
     455,   456,     0,     0,   457,     0,   458,     0,   459,   460,
       0,   461,   462,     0,   463,     0,   464,   465,     0,     0,
     466,   467,   468,   469,   470,   471,     0,   472,   473,   474,
       0,   475,   476,   477,   478,     0,   479,   480,     0,     0,
       0,   481,   482,   483,   484,   485,     0,     0,     0,   486,
       0,     0,     0,   487,     0,   488,   489,   490,   491,   492,
     493,     0,   494,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,     0,     0,
     503,     0,     0,     0,   504,   505,   506,     0,     0,     0,
     507,     0,     0,   508,   509,   510,     0,   511,   512,   513,
     514,   515,   516,     0,     0,   517,   518,   519,   520,     0,
     521,   522,     0,     0,   523,   524,   525,   526,     0,     0,
     527,   528,     0,   529,   530,   531,   532,   533,     0,     0,
       0,     0,     0,   534,   535,   536,     0,     0,     0,   537,
     538,   539,   540,     0,   541,   542,   543,     0,   544,   545,
       0,   546,   547,     0,     0,   548,     0,     0,   549,     0,
     550,     0,   551,   552,     0,     0,     0,     0,     0,     0,
     553,     0,     0,   554,   555,     0,     0,     0,   556,   557,
     558,   559,   560,   561,   562,     0,     0,     0,     0,     0,
       0,     0,   563,   564,     0,   565,   566,   567,     0,     0,
     568,     0,     0,     0,   161,     0,   162,   163,   164,   165,
     166,   167,     0,     0,   168,  1289,     0,     0,   169,     0,
       0,   170,   883,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,   202,     0,   203,   204,   205,   206,   207,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   223,   224,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,     0,   229,     0,   230,     0,   231,     0,     0,   232,
     233,   234,     0,     0,   235,     0,     0,     0,     0,   236,
     237,     0,     0,     0,   238,     0,   239,     0,   240,     0,
       0,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,     0,     0,   273,   274,     0,   275,     0,
     276,   277,     0,     0,   278,   279,   280,     0,     0,     0,
     281,   282,     0,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,     0,     0,     0,
       0,   294,   295,   296,     0,   297,     0,     0,     0,   298,
     299,     0,     0,     0,   300,   301,   302,   303,   304,     0,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,     0,   311,   312,     0,     0,  1526,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   323,   324,     0,
       0,   325,     0,     0,   326,   327,     0,     0,     0,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,     0,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,     0,   383,
       0,     0,   384,   385,   386,   387,   388,   389,   390,     0,
       0,   391,     0,   392,   393,   394,   395,   396,     0,     0,
       0,     0,   397,     0,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,     0,   412,     0,   413,     0,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,   426,   427,   428,   429,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,     0,     0,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,     0,     0,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   465,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,   474,     0,   475,   476,   477,   478,     0,
     479,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,     0,     0,   508,   509,   510,
       0,   511,   512,   513,   514,   515,   516,     0,     0,   517,
     518,   519,   520,     0,   521,   522,     0,     0,   523,   524,
     525,   526,     0,     0,   527,   528,     0,   529,   530,   531,
     532,   533,     0,     0,     0,     0,     0,   534,   535,   536,
       0,     0,     0,   537,   538,   539,   540,     0,   541,   542,
     543,     0,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   551,   552,     0,     0,
       0,     0,     0,     0,   553,     0,     0,   554,   555,     0,
       0,     0,   556,   557,   558,   559,   560,   561,   562,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,     0,   568,     0,     0,     0,   161,     0,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,   607,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,   202,     0,   203,   204,
     205,   206,   207,   208,   209,     0,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,   223,   224,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,     0,   229,     0,   230,     0,
     231,     0,     0,   232,   233,   234,     0,     0,   235,     0,
       0,     0,     0,   236,   237,     0,     0,     0,   238,     0,
     239,     0,   240,     0,     0,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,   247,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,   253,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,     0,     0,   269,   270,   271,   272,     0,     0,   273,
     274,     0,   275,     0,   276,   277,     0,     0,   278,   279,
     280,     0,     0,     0,   281,   282,     0,   283,     0,   284,
       0,   285,   286,   287,   288,   289,   290,   291,   292,     0,
     293,     0,     0,     0,     0,   294,   295,   296,     0,   297,
       0,     0,     0,   298,   299,     0,     0,     0,   300,   301,
     302,   303,   304,     0,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,     0,   311,   312,
       0,     0,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,     0,     0,   321,
     322,   323,   324,     0,     0,   325,     0,     0,   326,   327,
       0,     0,     0,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,     0,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,     0,   383,     0,     0,   384,   385,   386,   387,
     388,   389,   390,     0,     0,   391,     0,   392,   393,   394,
     395,   396,     0,     0,     0,     0,   397,     0,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,     0,   406,
     407,     0,     0,     0,     0,     0,   408,     0,     0,     0,
       0,   409,   410,   411,     0,     0,   412,     0,   413,     0,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,   426,   427,   428,   429,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   436,   437,
     438,   439,     0,     0,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,     0,   454,   455,   456,
       0,     0,   457,     0,   458,     0,   459,   460,     0,   461,
     462,     0,   463,     0,   464,   465,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,   474,     0,   475,
     476,   477,   478,     0,   479,   480,     0,     0,     0,   481,
     482,   483,   484,   485,     0,     0,     0,   486,     0,     0,
       0,   487,     0,   488,   489,   490,   491,   492,   493,     0,
     494,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,   505,   506,     0,     0,     0,   507,     0,
       0,   508,   509,   510,     0,   511,   512,   513,   514,   515,
     516,     0,     0,   517,   518,   519,   520,     0,   521,   522,
       0,     0,   523,   524,   525,   526,     0,     0,   527,   528,
       0,   529,   530,   531,   532,   533,     0,     0,     0,     0,
       0,   534,   535,   536,     0,     0,     0,   537,   538,   539,
     540,     0,   541,   542,   543,     0,   544,   545,     0,   546,
     547,     0,     0,   548,     0,     0,   549,     0,   550,     0,
     551,   552,     0,     0,     0,     0,     0,     0,   553,     0,
       0,   554,   555,     0,     0,     0,   556,   557,   558,   559,
     560,   561,   562,     0,     0,     0,     0,     0,     0,     0,
     563,   564,     0,   565,   566,   567,     0,     0,   568,     0,
       0,     0,     0,     0,     0,     0,     0,   161,  2659,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
     607,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,   202,     0,   203,   204,   205,
     206,   207,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,     0,   220,   221,   222,
     223,   224,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,     0,   229,     0,   230,     0,   231,
       0,     0,   232,   233,   234,     0,     0,   235,     0,     0,
       0,     0,   236,   237,     0,     0,     0,   238,     0,   239,
       0,   240,     0,     0,     0,     0,   241,     0,   242,   243,
     244,   245,   246,     0,     0,     0,     0,   247,     0,     0,
       0,   248,   249,   250,     0,     0,     0,   251,   252,     0,
     253,   254,     0,   255,   256,   257,     0,   258,   259,     0,
     260,   261,   262,   263,   264,   265,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,     0,     0,   273,   274,
       0,   275,     0,   276,   277,     0,     0,   278,   279,   280,
       0,     0,     0,   281,   282,     0,   283,     0,   284,     0,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
       0,     0,     0,     0,   294,   295,   296,     0,   297,     0,
       0,     0,   298,   299,     0,     0,     0,   300,   301,   302,
     303,   304,     0,     0,     0,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,     0,     0,   311,   312,     0,
       0,     0,     0,   313,     0,   314,   315,     0,   316,   317,
     318,     0,     0,   319,     0,   320,     0,     0,   321,   322,
     323,   324,     0,     0,   325,     0,     0,   326,   327,     0,
       0,     0,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,     0,     0,     0,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,     0,   383,     0,     0,   384,   385,   386,   387,   388,
     389,   390,     0,     0,   391,     0,   392,   393,   394,   395,
     396,     0,     0,     0,     0,   397,     0,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,     0,   406,   407,
       0,     0,     0,     0,     0,   408,     0,     0,     0,     0,
     409,   410,   411,     0,     0,   412,     0,   413,     0,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,   433,   434,   435,     0,   436,   437,   438,
     439,     0,     0,   440,     0,   441,     0,     0,     0,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   449,
     450,   451,     0,   452,   453,     0,   454,   455,   456,     0,
       0,   457,     0,   458,     0,   459,   460,     0,   461,   462,
       0,   463,     0,   464,   465,     0,     0,   466,   467,   468,
     469,   470,   471,     0,   472,   473,   474,     0,   475,   476,
     477,   478,     0,   479,   480,     0,     0,     0,   481,   482,
     483,   484,   485,     0,     0,     0,   486,     0,     0,     0,
     487,     0,   488,   489,   490,   491,   492,   493,     0,   494,
     495,   496,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,     0,     0,   503,     0,     0,
       0,   504,   505,   506,     0,     0,     0,   507,     0,     0,
     508,   509,   510,     0,   511,   512,   513,   514,   515,   516,
       0,     0,   517,   518,   519,   520,     0,   521,   522,     0,
       0,   523,   524,   525,   526,     0,     0,   527,   528,     0,
     529,   530,   531,   532,   533,     0,     0,     0,     0,     0,
     534,   535,   536,     0,     0,     0,   537,   538,   539,   540,
       0,   541,   542,   543,     0,   544,   545,     0,   546,   547,
       0,     0,   548,     0,     0,   549,     0,   550,     0,   551,
     552,     0,     0,     0,     0,     0,     0,   553,     0,     0,
     554,   555,     0,     0,     0,   556,   557,   558,   559,   560,
     561,   562,     0,     0,     0,     0,     0,     0,     0,   563,
     564,     0,   565,   566,   567,     0,     0,   568,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,  3951,     0,     0,   169,     0,     0,   170,  3861,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,   202,
       0,   203,   204,   205,   206,   207,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
       0,   220,   221,   222,   223,   224,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,     0,   229,
       0,   230,     0,   231,     0,     0,   232,   233,   234,     0,
       0,   235,     0,     0,     0,     0,   236,   237,     0,     0,
       0,   238,     0,   239,     0,   240,     0,     0,     0,     0,
     241,     0,   242,   243,   244,   245,   246,     0,     0,     0,
       0,   247,     0,     0,     0,   248,   249,   250,     0,     0,
       0,   251,   252,     0,   253,   254,     0,   255,   256,   257,
       0,   258,   259,     0,   260,   261,   262,   263,   264,   265,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
       0,     0,   273,   274,     0,   275,     0,   276,   277,     0,
       0,   278,   279,   280,     0,     0,     0,   281,   282,     0,
     283,     0,   284,     0,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,     0,     0,     0,     0,   294,   295,
     296,     0,   297,     0,     0,     0,   298,   299,     0,     0,
       0,   300,   301,   302,   303,   304,  4314,     0,     0,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,     0,
       0,   311,   312,     0,     0,     0,     0,   313,     0,   314,
     315,     0,   316,   317,   318,     0,     0,   319,     0,   320,
       0,     0,   321,   322,   323,   324,     0,     0,   325,     0,
       0,   326,   327,     0,     0,     0,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,     0,     0,     0,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,     0,   383,     0,     0,   384,
     385,   386,   387,   388,   389,   390,     0,     0,   391,     0,
     392,   393,   394,   395,   396,     0,     0,     0,     0,   397,
       0,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,     0,   406,   407,     0,     0,     0,     0,     0,   408,
       0,     0,     0,     0,   409,   410,   411,     0,     0,   412,
       0,   413,     0,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,   433,   434,   435,
       0,   436,   437,   438,   439,     0,     0,   440,     0,   441,
       0,     0,     0,   442,   443,     0,   444,   445,   446,     0,
       0,   447,   448,   449,   450,   451,     0,   452,   453,     0,
     454,   455,   456,     0,     0,   457,     0,   458,     0,   459,
     460,     0,   461,   462,     0,   463,     0,   464,   465,     0,
       0,   466,   467,   468,   469,   470,   471,     0,   472,   473,
     474,     0,   475,   476,   477,   478,     0,   479,   480,     0,
       0,     0,   481,   482,   483,   484,   485,     0,     0,     0,
     486,     0,     0,     0,   487,     0,   488,   489,   490,   491,
     492,   493,     0,   494,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,     0,
       0,   503,     0,     0,     0,   504,   505,   506,     0,     0,
       0,   507,     0,     0,   508,   509,   510,     0,   511,   512,
     513,   514,   515,   516,     0,     0,   517,   518,   519,   520,
       0,   521,   522,     0,     0,   523,   524,   525,   526,     0,
       0,   527,   528,     0,   529,   530,   531,   532,   533,     0,
       0,     0,     0,     0,   534,   535,   536,     0,     0,     0,
     537,   538,   539,   540,     0,   541,   542,   543,     0,   544,
     545,     0,   546,   547,     0,     0,   548,     0,     0,   549,
       0,   550,     0,   551,   552,     0,     0,     0,     0,     0,
       0,   553,     0,     0,   554,   555,     0,     0,     0,   556,
     557,   558,   559,   560,   561,   562,     0,     0,     0,     0,
       0,     0,     0,   563,   564,     0,   565,   566,   567,     0,
       0,   568,     0,     0,     0,   161,     0,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,  3861,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,   202,     0,   203,   204,   205,   206,   207,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,     0,   220,   221,   222,   223,   224,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,     0,   229,     0,   230,     0,   231,     0,     0,
     232,   233,   234,     0,     0,   235,     0,     0,     0,     0,
     236,   237,     0,     0,     0,   238,     0,   239,     0,   240,
       0,     0,     0,     0,   241,     0,   242,   243,   244,   245,
     246,     0,     0,     0,     0,   247,     0,     0,     0,   248,
     249,   250,     0,     0,     0,   251,   252,     0,   253,   254,
       0,   255,   256,   257,     0,   258,   259,     0,   260,   261,
     262,   263,   264,   265,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,     0,     0,   273,   274,     0,   275,
       0,   276,   277,     0,     0,   278,   279,   280,     0,     0,
       0,   281,   282,     0,   283,     0,   284,     0,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   293,     0,     0,
       0,     0,   294,   295,   296,     0,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,   301,   302,   303,   304,
       0,     0,     0,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,     0,     0,   311,   312,     0,     0,     0,
       0,   313,     0,   314,   315,     0,   316,   317,   318,     0,
       0,   319,     0,   320,     0,     0,   321,   322,   323,   324,
       0,     0,   325,     0,     0,   326,   327,     0,     0,     0,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,     0,     0,     0,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,     0,   371,     0,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,     0,
     383,     0,     0,   384,   385,   386,   387,   388,   389,   390,
       0,     0,   391,     0,   392,   393,   394,   395,   396,     0,
       0,     0,     0,   397,     0,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,     0,   406,   407,     0,     0,
       0,     0,     0,   408,     0,     0,     0,     0,   409,   410,
     411,     0,     0,   412,     0,   413,     0,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,     0,
       0,   440,     0,   441,     0,     0,     0,   442,   443,     0,
     444,   445,   446,     0,     0,   447,   448,   449,   450,   451,
       0,   452,   453,     0,   454,   455,   456,     0,     0,   457,
       0,   458,     0,   459,   460,     0,   461,   462,     0,   463,
       0,   464,   465,     0,     0,   466,   467,   468,   469,   470,
     471,     0,   472,   473,   474,     0,   475,   476,   477,   478,
       0,   479,   480,     0,     0,     0,   481,   482,   483,   484,
     485,     0,     0,     0,   486,     0,     0,     0,   487,     0,
     488,   489,   490,   491,   492,   493,     0,   494,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,     0,     0,   503,     0,     0,     0,   504,
     505,   506,     0,     0,     0,   507,     0,     0,   508,   509,
     510,     0,   511,   512,   513,   514,   515,   516,     0,     0,
     517,   518,   519,   520,     0,   521,   522,     0,     0,   523,
     524,   525,   526,     0,     0,   527,   528,     0,   529,   530,
     531,   532,   533,     0,     0,     0,     0,     0,   534,   535,
     536,     0,     0,     0,   537,   538,   539,   540,     0,   541,
     542,   543,     0,   544,   545,     0,   546,   547,     0,     0,
     548,     0,     0,   549,     0,   550,     0,   551,   552,     0,
       0,     0,     0,     0,     0,   553,     0,     0,   554,   555,
       0,     0,     0,   556,   557,   558,   559,   560,   561,   562,
       0,     0,     0,     0,     0,     0,     0,   563,   564,     0,
     565,   566,   567,     0,     0,   568,     0,     0,     0,   161,
       0,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,   607,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,   202,     0,   203,
     204,   205,   206,   207,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,     0,   220,
     221,   222,   223,   224,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,     0,   229,     0,   230,
       0,   231,     0,     0,   232,   233,   234,     0,     0,   235,
       0,     0,     0,     0,   236,   237,     0,     0,     0,   238,
       0,   239,     0,   240,     0,     0,     0,     0,   241,     0,
     242,   243,   244,   245,   246,     0,     0,     0,     0,   247,
       0,     0,     0,   248,   249,   250,     0,     0,     0,   251,
     252,     0,   253,   254,     0,   255,   256,   257,     0,   258,
     259,     0,   260,   261,   262,   263,   264,   265,     0,   266,
     267,   268,     0,     0,   269,   270,   686,   272,     0,     0,
     273,   274,     0,   275,     0,   276,   277,     0,     0,   278,
     279,   280,     0,     0,     0,   687,   282,     0,   283,     0,
     284,     0,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,     0,     0,     0,     0,   294,   295,   296,     0,
     297,     0,     0,     0,   298,   299,     0,     0,     0,   300,
     301,   302,   303,   304,     0,     0,     0,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,     0,     0,   311,
     312,     0,     0,     0,     0,   313,     0,   314,   315,     0,
     316,   317,   318,     0,     0,   319,     0,   320,     0,     0,
     321,   322,   323,   324,     0,     0,   325,     0,     0,   326,
     327,     0,     0,     0,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,     0,     0,     0,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,     0,   383,     0,     0,   384,   385,   386,
     387,   388,   389,   390,     0,     0,   391,     0,   392,   393,
     394,   395,   396,     0,     0,     0,     0,   397,     0,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,     0,
     406,   407,     0,     0,     0,     0,     0,   408,     0,     0,
       0,     0,   409,   410,   411,     0,     0,   412,     0,   413,
       0,   688,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,   433,   434,   435,     0,   436,
     437,   438,   439,     0,     0,   440,     0,   441,     0,     0,
       0,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,     0,   454,   455,
     456,     0,     0,   457,     0,   458,     0,   459,   460,     0,
     461,   462,     0,   463,     0,   464,   465,     0,     0,   466,
     467,   468,   469,   470,   471,     0,   472,   473,   474,     0,
     475,   476,   477,   478,     0,   479,   480,     0,     0,     0,
     481,   482,   483,   484,   485,     0,     0,     0,   486,     0,
       0,     0,   487,     0,   488,   489,   490,   491,   492,   493,
       0,   494,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,     0,     0,   503,
       0,     0,     0,   504,   505,   506,     0,     0,     0,   507,
       0,     0,   508,   509,   510,     0,   511,   512,   513,   514,
     515,   516,     0,     0,   517,   518,   519,   520,     0,   521,
     522,     0,     0,   523,   524,   525,   526,     0,     0,   527,
     528,     0,   529,   530,   531,   532,   533,     0,     0,     0,
       0,     0,   534,   535,   536,     0,     0,     0,   537,   538,
     539,   540,     0,   541,   542,   543,     0,   544,   545,     0,
     546,   547,     0,     0,   548,     0,     0,   549,     0,   550,
       0,   551,   552,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   554,   555,     0,     0,     0,   556,   557,   558,
     559,   560,   561,   562,     0,     0,     0,     0,     0,     0,
       0,   563,   564,     0,   565,   566,   567,     0,     0,   568,
       0,     0,     0,   161,     0,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,   607,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,   202,     0,   203,   204,   205,   206,   207,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,     0,   220,   221,   222,   223,   224,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
       0,   229,     0,   230,     0,   231,     0,     0,   232,   233,
     234,     0,     0,   235,     0,     0,     0,     0,   236,   237,
       0,     0,     0,   238,     0,   239,     0,   240,     0,     0,
       0,     0,   241,     0,   242,   243,   244,   245,   246,     0,
       0,     0,     0,   247,     0,     0,     0,   248,   249,   250,
       0,     0,     0,   251,   252,     0,   253,   254,     0,   255,
     256,   257,     0,   258,   259,     0,   260,   261,   262,   263,
     264,   265,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,     0,     0,   273,   274,     0,   275,     0,   276,
     277,     0,     0,   278,   279,   280,     0,     0,     0,   281,
     282,     0,   283,     0,   284,     0,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   293,     0,     0,     0,     0,
     294,   295,   296,     0,   297,     0,     0,     0,   298,   299,
       0,     0,     0,   300,   301,   302,   303,   304,     0,     0,
       0,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,     0,     0,   311,   312,     0,     0,     0,     0,   313,
       0,   314,   315,     0,   316,   317,   318,     0,     0,   319,
       0,   320,     0,     0,   321,   322,   323,   324,     0,     0,
     325,     0,     0,   326,   327,     0,     0,     0,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,     0,
       0,     0,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,     0,   383,     0,
       0,   384,   385,   386,   387,   388,   389,   390,     0,     0,
     391,     0,   392,   393,   394,   395,   396,     0,     0,     0,
       0,   397,     0,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,     0,   406,   407,     0,     0,     0,     0,
       0,   408,     0,     0,     0,     0,   409,   410,   411,     0,
       0,   412,     0,   413,     0,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,   433,
     434,   435,     0,   436,   437,   438,   439,     0,     0,   440,
       0,   441,     0,     0,     0,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,     0,   454,   455,   456,     0,     0,   457,     0,   458,
       0,   459,   460,     0,   461,   462,     0,   463,     0,   464,
     465,     0,     0,   466,   467,   468,   469,   470,   471,     0,
     472,   473,   474,     0,   475,   476,   477,   478,     0,   479,
     480,     0,     0,     0,   481,   482,   483,   484,   485,     0,
       0,     0,   486,     0,     0,     0,   487,     0,   488,   489,
     490,   491,   492,   493,     0,   494,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,     0,     0,   503,     0,     0,     0,   504,   505,   506,
       0,     0,     0,   507,     0,     0,   508,   509,   510,     0,
     511,   512,   513,   514,   515,   516,     0,     0,   517,   518,
     519,   520,     0,   521,   522,     0,     0,   523,   524,   525,
     526,     0,     0,   527,   528,     0,   529,   530,   531,   532,
     533,     0,     0,     0,     0,     0,   534,   535,   536,     0,
       0,     0,   537,   538,   539,   540,     0,   541,   542,   543,
       0,   544,   545,     0,   546,   547,     0,     0,   548,     0,
       0,   549,     0,   550,     0,   551,   552,     0,     0,     0,
       0,     0,     0,   553,     0,     0,   554,   555,     0,     0,
       0,   556,   557,   558,   559,   560,   561,   562,     0,     0,
       0,     0,     0,     0,     0,   563,   564,     0,   565,   566,
     567,     0,     0,   568,     0,     0,     0,   161,     0,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,   883,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,   202,     0,   203,   204,   205,
     206,   207,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,     0,   220,   221,   222,
     223,   224,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,     0,   229,     0,   230,     0,   231,
       0,     0,   232,   233,   234,     0,     0,   235,     0,     0,
       0,     0,   236,   237,     0,     0,     0,   238,     0,   239,
       0,   240,     0,     0,     0,     0,   241,     0,   242,   243,
     244,   245,   246,     0,     0,     0,     0,   247,     0,     0,
       0,   248,   249,   250,     0,     0,     0,   251,   252,     0,
     253,   254,     0,   255,   256,   257,     0,   258,   259,     0,
     260,   261,   262,   263,   264,   265,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,     0,     0,   273,   274,
       0,   275,     0,   276,   277,     0,     0,   278,   279,   280,
       0,     0,     0,   281,   282,     0,   283,     0,   284,     0,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
       0,     0,     0,     0,   294,   295,   296,     0,   297,     0,
       0,     0,   298,   299,     0,     0,     0,   300,   301,   302,
     303,   304,     0,     0,     0,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,     0,     0,   311,   312,     0,
       0,     0,     0,   313,     0,   314,   315,     0,   316,   317,
     318,     0,     0,   319,     0,   320,     0,     0,   321,   322,
     323,   324,     0,     0,   325,     0,     0,   326,   327,     0,
       0,     0,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,     0,     0,     0,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,     0,   383,     0,     0,   384,   385,   386,   387,   388,
     389,   390,     0,     0,   391,     0,   392,   393,   394,   395,
     396,     0,     0,     0,     0,   397,     0,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,     0,   406,   407,
       0,     0,     0,     0,     0,   408,     0,     0,     0,     0,
     409,   410,   411,     0,     0,   412,     0,   413,     0,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,   433,   434,   435,     0,   436,   437,   438,
     439,     0,     0,   440,     0,   441,     0,     0,     0,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   449,
     450,   451,     0,   452,   453,     0,   454,   455,   456,     0,
       0,   457,     0,   458,     0,   459,   460,     0,   461,   462,
       0,   463,     0,   464,   465,     0,     0,   466,   467,   468,
     469,   470,   471,     0,   472,   473,   474,     0,   475,   476,
     477,   478,     0,   479,   480,     0,     0,     0,   481,   482,
     483,   484,   485,     0,     0,     0,   486,     0,     0,     0,
     487,     0,   488,   489,   490,   491,   492,   493,     0,   494,
     495,   496,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,     0,     0,   503,     0,     0,
       0,   504,   505,   506,     0,     0,     0,   507,     0,     0,
     508,   509,   510,     0,   511,   512,   513,   514,   515,   516,
       0,     0,   517,   518,   519,   520,     0,   521,   522,     0,
       0,   523,   524,   525,   526,     0,     0,   527,   528,     0,
     529,   530,   531,   532,   533,     0,     0,     0,     0,     0,
     534,   535,   536,     0,     0,     0,   537,   538,   539,   540,
       0,   541,   542,   543,     0,   544,   545,     0,   546,   547,
       0,     0,   548,     0,     0,   549,     0,   550,     0,   551,
     552,     0,     0,     0,     0,     0,     0,   553,     0,     0,
     554,   555,     0,     0,     0,   556,   557,   558,   559,   560,
     561,   562,     0,     0,     0,     0,     0,     0,     0,   563,
     564,     0,   565,   566,   567,     0,     0,   568,     0,     0,
       0,   161,     0,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,     0,  3861,
     171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
     984,     0,     0,     0,     0,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,     0,     0,     0,
       0,   189,     7,     0,   190,   191,     0,   192,     0,     0,
       0,     0,     0,   196,   197,   198,   985,   200,   201,   202,
       0,   203,   204,     0,     0,     0,     0,     0,     0,   210,
       0,   212,     0,   214,   215,   216,   217,     0,   218,   219,
       0,   220,   221,   222,     0,   224,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,     0,   229,
       0,   230,     0,   231,     0,     0,   232,   233,   234,     0,
       0,   235,     0,     0,     0,     0,   236,     0,     0,     0,
       0,   238,     0,   239,     0,   240,     0,     0,     0,     0,
     241,     0,   242,   243,   244,   245,   246,     0,     0,     0,
       0,     0,     0,     0,     0,   248,   249,   250,     0,     0,
       0,   251,   252,     0,     0,   254,     0,   255,   256,   257,
       0,   258,   259,     0,   260,   261,   262,   263,   264,     0,
       0,     0,     0,   268,     0,     0,   269,   270,   271,   272,
       0,     0,   273,   274,   986,   275,     0,   276,   277,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   282,     0,
     283,     0,   284,     0,   285,   286,   287,   288,   289,     0,
     291,   292,     0,   293,     0,     0,     0,     0,     0,   295,
     296,     0,     0,     0,     0,     0,     0,   299,     0,     0,
       0,   300,   301,   302,   303,   304,    26,     0,     0,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,     0,
       0,   311,     0,     0,     0,     0,     0,   313,     0,   314,
     315,     0,   316,   317,   318,   987,     0,   319,     0,   320,
       0,     0,     0,   322,   323,   324,     0,     0,   325,   988,
       0,   326,   327,     0,     0,     0,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,     0,     0,     0,
       0,    32,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,     0,   383,     0,     0,   384,
     385,   386,   387,   388,   389,   390,     0,     0,   391,     0,
       0,   393,   394,   395,   396,     0,     0,     0,     0,   397,
       0,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     989,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   410,   411,     0,     0,     0,
       0,   413,     0,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,     0,   431,   432,   433,   434,   435,
       0,   436,   437,   438,   439,     0,     0,   440,     0,   441,
       0,     0,     0,   442,   443,     0,   444,   445,   446,     0,
       0,   447,   448,   449,   450,   451,     0,   452,     0,     0,
     454,     0,   456,    41,     0,   457,     0,     0,     0,   459,
       0,     0,   461,   462,     0,   463,   990,   464,   465,     0,
       0,   466,     0,   468,   469,   470,   471,     0,   472,   473,
     474,     0,   475,     0,   477,   478,     0,   479,     0,     0,
       0,     0,   481,   482,   483,   484,     0,     0,     0,     0,
     486,     0,     0,     0,     0,     0,     0,   489,     0,     0,
     492,   493,     0,   494,     0,   496,     0,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,     0,
       0,   503,     0,     0,     0,   504,     0,   506,     0,     0,
       0,   507,     0,     0,     0,   509,     0,     0,   511,   512,
     513,   514,   515,   516,     0,     0,   517,   518,   519,   520,
       0,   521,   522,     0,     0,   523,   524,   525,   526,     0,
       0,   527,   528,     0,     0,   530,   531,   532,   533,     0,
       0,     0,     0,     0,   534,   535,   536,     0,     0,     0,
       0,   538,   539,   540,     0,     0,   542,   543,     0,   544,
     545,     0,     0,     0,     0,     0,   548,     0,     0,   549,
       0,     0,     0,   551,   552,     0,     0,     0,     0,     0,
       0,   553,     0,     0,   554,   555,     0,     0,     0,   556,
     557,   558,   559,   560,   561,   562,     0,     0,     0,    59,
       0,     0,     0,   563,     0,     0,   565,     0,   567,     0,
     161,   568,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,  4804,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,   202,     0,
     203,   204,   205,   206,   207,   208,   209,     0,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,     0,
     220,   221,   222,   223,   224,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,  1167,     0,   229,     0,
     230,     0,   231,     0,     0,   232,   233,   234,     0,     0,
     235,     0,     0,     0,     0,   236,   237,     0,     0,     0,
     238,     0,   239,     0,   240,     0,     0,     0,     0,   241,
       0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
     247,     0,     0,     0,   248,   249,   250,     0,     0,     0,
     251,   252,     0,   253,   254,     0,   255,   256,   257,     0,
     258,   259,     0,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,     0,     0,   269,   270,   271,   272,     0,
       0,   273,   274,     0,   275,     0,   276,   277,     0,     0,
     278,   279,   280,     0,     0,     0,   281,   282,     0,   283,
       0,   284,     0,   285,   286,   287,   288,   289,   290,   291,
     292,     0,   293,     0,     0,     0,     0,   294,   295,   296,
       0,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,   301,   302,   303,   304,     0,     0,     0,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,     0,     0,
     311,   312,     0,     0,     0,     0,   313,     0,   314,   315,
       0,   316,   317,   318,     0,     0,   319,     0,   320,     0,
       0,   321,   322,   323,   324,     0,     0,   325,     0,     0,
     326,   327,   704,     0,     0,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,     0,     0,     0,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,     0,   383,     0,     0,   384,   385,
     386,   387,   388,   389,   390,     0,     0,   391,     0,   392,
     393,   394,   395,   396,     0,     0,     0,     0,   397,     0,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
       0,   406,   407,     0,     0,     0,     0,     0,   408,     0,
       0,     0,     0,   409,   410,   411,     0,     0,   412,     0,
     413,     0,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,     0,   424,   425,     0,   426,   427,   428,
     429,     0,   430,     0,   431,   432,   433,   434,   435,     0,
     436,   437,   438,   439,     0,     0,   440,     0,   441,     0,
       0,     0,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,   453,     0,   454,
     455,   456,     0,     0,   457,     0,   458,     0,   459,   460,
       0,   461,   462,     0,   463,     0,   464,   465,     0,     0,
     466,   467,   468,   469,   470,   471,     0,   472,   473,   474,
       0,   475,   476,   477,   478,     0,   479,   480,     0,     0,
       0,   481,   482,   483,   484,   485,     0,     0,     0,   486,
       0,     0,     0,   487,     0,   488,   489,   490,   491,   492,
     493,     0,   494,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,     0,     0,
     503,     0,     0,     0,   504,   505,   506,     0,     0,     0,
     507,     0,     0,   508,   509,   510,     0,   511,   512,   513,
     514,   515,   516,     0,     0,   517,   518,   519,   520,     0,
     521,   522,     0,     0,   523,   524,   525,   526,     0,   158,
     527,   528,     0,   529,   530,   531,   532,   533,     0,     0,
       0,     0,     0,   534,   535,   536,     0,     0,     0,   537,
     538,   539,   540,     0,   541,   542,   543,     0,   544,   545,
       0,   546,   547,     0,     0,   548,     0,     0,   549,     0,
     550,     0,   551,   552,     0,     0,     0,     0,     0,     0,
     553,     0,     0,   554,   555,     0,     0,     0,   556,   557,
     558,   559,   560,   561,   562,     0,     0,     0,     0,     0,
       0,     0,   563,   564,     0,   565,   566,   567,     0,   161,
     568,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,  1342,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,   202,     0,   203,
     204,   205,   206,   207,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,     0,   220,
     221,   222,   223,   224,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,     0,   229,     0,   230,
       0,   231,     0,     0,   232,   233,   234,     0,     0,   235,
       0,     0,     0,     0,   236,   237,     0,     0,     0,   238,
       0,   239,     0,   240,     0,     0,     0,     0,   241,     0,
     242,   243,   244,   245,   246,     0,     0,     0,     0,   247,
       0,     0,     0,   248,   249,   250,     0,     0,     0,   251,
     252,     0,   253,   254,     0,   255,   256,   257,     0,   258,
     259,     0,   260,   261,   262,   263,   264,   265,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,     0,     0,
     273,   274,     0,   275,     0,   276,   277,     0,     0,   278,
     279,   280,     0,     0,     0,   281,   282,     0,   283,     0,
     284,     0,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,     0,     0,     0,     0,   294,   295,   296,     0,
     297,     0,     0,     0,   298,   299,     0,     0,     0,   300,
     301,   302,   303,   304,     0,     0,     0,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,     0,     0,   311,
     312,     0,     0,     0,     0,   313,     0,   314,   315,     0,
     316,   317,   318,     0,     0,   319,     0,   320,     0,     0,
     321,   322,   323,   324,     0,     0,   325,     0,     0,   326,
     327,     0,     0,     0,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,     0,     0,     0,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,     0,   383,     0,     0,   384,   385,   386,
     387,   388,   389,   390,     0,     0,   391,     0,   392,   393,
     394,   395,   396,     0,     0,     0,     0,   397,     0,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,     0,
     406,   407,     0,     0,     0,     0,     0,   408,     0,     0,
       0,     0,   409,   410,   411,     0,     0,   412,     0,   413,
       0,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,   433,   434,   435,     0,   436,
     437,   438,   439,     0,     0,   440,     0,   441,     0,     0,
       0,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,     0,   454,   455,
     456,     0,     0,   457,     0,   458,     0,   459,   460,     0,
     461,   462,     0,   463,     0,   464,   465,     0,     0,   466,
     467,   468,   469,   470,   471,     0,   472,   473,   474,     0,
     475,   476,   477,   478,     0,   479,   480,     0,     0,     0,
     481,   482,   483,   484,   485,     0,     0,     0,   486,     0,
       0,     0,   487,     0,   488,   489,   490,   491,   492,   493,
       0,   494,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,     0,     0,   503,
       0,     0,     0,   504,   505,   506,     0,     0,     0,   507,
       0,     0,   508,   509,   510,     0,   511,   512,   513,   514,
     515,   516,     0,     0,   517,   518,   519,   520,     0,   521,
     522,     0,     0,   523,   524,   525,   526,     0,     0,   527,
     528,     0,   529,   530,   531,   532,   533,     0,     0,     0,
       0,     0,   534,   535,   536,     0,     0,     0,   537,   538,
     539,   540,     0,   541,   542,   543,     0,   544,   545,     0,
     546,   547,     0,     0,   548,     0,     0,   549,     0,   550,
       0,   551,   552,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   554,   555,     0,     0,     0,   556,   557,   558,
     559,   560,   561,   562,     0,     0,     0,     0,     0,     0,
       0,   563,   564,     0,   565,   566,   567,     0,   161,   568,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,  2021,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,   202,     0,   203,   204,
     205,   206,   207,   208,   209,     0,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,   223,   224,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,     0,   229,     0,   230,     0,
     231,     0,     0,   232,   233,   234,     0,     0,   235,     0,
       0,     0,     0,   236,   237,     0,     0,     0,   238,     0,
     239,     0,   240,     0,     0,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,   247,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,   253,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,     0,     0,   269,   270,   271,   272,     0,     0,   273,
     274,     0,   275,     0,   276,   277,     0,     0,   278,   279,
     280,     0,     0,     0,   281,   282,     0,   283,     0,   284,
       0,   285,   286,   287,   288,   289,   290,   291,   292,     0,
     293,     0,     0,     0,     0,   294,   295,   296,     0,   297,
       0,     0,     0,   298,   299,     0,     0,     0,   300,   301,
     302,   303,   304,     0,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,     0,   311,   312,
       0,     0,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,     0,     0,   321,
     322,   323,   324,     0,     0,   325,     0,     0,   326,   327,
       0,     0,     0,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,     0,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,     0,   383,     0,     0,   384,   385,   386,   387,
     388,   389,   390,     0,     0,   391,     0,   392,   393,   394,
     395,   396,     0,     0,     0,     0,   397,     0,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,     0,   406,
     407,     0,     0,     0,     0,     0,   408,     0,     0,     0,
       0,   409,   410,   411,     0,     0,   412,     0,   413,     0,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,   426,   427,   428,   429,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   436,   437,
     438,   439,     0,     0,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,     0,   454,   455,   456,
       0,     0,   457,     0,   458,     0,   459,   460,     0,   461,
     462,     0,   463,     0,   464,   465,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,   474,     0,   475,
     476,   477,   478,     0,   479,   480,     0,     0,     0,   481,
     482,   483,   484,   485,     0,     0,     0,   486,     0,     0,
       0,   487,     0,   488,   489,   490,   491,   492,   493,     0,
     494,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,   505,   506,     0,     0,     0,   507,     0,
       0,   508,   509,   510,     0,   511,   512,   513,   514,   515,
     516,     0,     0,   517,   518,   519,   520,     0,   521,   522,
       0,     0,   523,   524,   525,   526,     0,     0,   527,   528,
       0,   529,   530,   531,   532,   533,     0,     0,     0,     0,
       0,   534,   535,   536,     0,     0,     0,   537,   538,   539,
     540,     0,   541,   542,   543,     0,   544,   545,     0,   546,
     547,     0,     0,   548,     0,     0,   549,     0,   550,     0,
     551,   552,     0,     0,     0,     0,     0,     0,   553,     0,
       0,   554,   555,     0,     0,     0,   556,   557,   558,   559,
     560,   561,   562,     0,     0,     0,     0,     0,     0,     0,
     563,   564,     0,   565,   566,   567,     0,   161,   568,   162,
     163,   164,   165,   166,   167,     0,     0,   168,  2464,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,   202,     0,   203,   204,   205,
     206,   207,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,     0,   220,   221,   222,
     223,   224,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,     0,   229,     0,   230,     0,   231,
       0,     0,   232,   233,   234,     0,     0,   235,     0,     0,
       0,     0,   236,   237,     0,     0,     0,   238,     0,   239,
       0,   240,     0,     0,     0,     0,   241,     0,   242,   243,
     244,   245,   246,     0,     0,     0,     0,   247,     0,     0,
       0,   248,   249,   250,     0,     0,     0,   251,   252,     0,
     253,   254,     0,   255,   256,   257,     0,   258,   259,     0,
     260,   261,   262,   263,   264,   265,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,     0,     0,   273,   274,
       0,   275,     0,   276,   277,     0,     0,   278,   279,   280,
       0,     0,     0,   281,   282,     0,   283,     0,   284,     0,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
       0,     0,     0,     0,   294,   295,   296,     0,   297,     0,
       0,     0,   298,   299,     0,     0,     0,   300,   301,   302,
     303,   304,     0,     0,     0,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,     0,     0,   311,   312,     0,
       0,     0,     0,   313,     0,   314,   315,     0,   316,   317,
     318,     0,     0,   319,     0,   320,     0,     0,   321,   322,
     323,   324,     0,     0,   325,     0,     0,   326,   327,     0,
       0,     0,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,     0,     0,     0,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,     0,   383,     0,     0,   384,   385,   386,   387,   388,
     389,   390,     0,     0,   391,     0,   392,   393,   394,   395,
     396,     0,     0,     0,     0,   397,     0,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,     0,   406,   407,
       0,     0,     0,     0,     0,   408,     0,     0,     0,     0,
     409,   410,   411,     0,     0,   412,     0,   413,     0,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,   433,   434,   435,     0,   436,   437,   438,
     439,     0,     0,   440,     0,   441,     0,     0,     0,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   449,
     450,   451,     0,   452,   453,     0,   454,   455,   456,     0,
       0,   457,     0,   458,     0,   459,   460,     0,   461,   462,
       0,   463,     0,   464,   465,     0,     0,   466,   467,   468,
     469,   470,   471,     0,   472,   473,   474,     0,   475,   476,
     477,   478,     0,   479,   480,     0,     0,     0,   481,   482,
     483,   484,   485,     0,     0,     0,   486,     0,     0,     0,
     487,     0,   488,   489,   490,   491,   492,   493,     0,   494,
     495,   496,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,     0,     0,   503,     0,     0,
       0,   504,   505,   506,     0,     0,     0,   507,     0,     0,
     508,   509,   510,     0,   511,   512,   513,   514,   515,   516,
       0,     0,   517,   518,   519,   520,     0,   521,   522,     0,
       0,   523,   524,   525,   526,     0,     0,   527,   528,     0,
     529,   530,   531,   532,   533,     0,     0,     0,     0,     0,
     534,   535,   536,     0,     0,     0,   537,   538,   539,   540,
       0,   541,   542,   543,     0,   544,   545,     0,   546,   547,
       0,     0,   548,     0,     0,   549,     0,   550,     0,   551,
     552,     0,     0,     0,     0,     0,     0,   553,     0,     0,
     554,   555,     0,     0,     0,   556,   557,   558,   559,   560,
     561,   562,     0,     0,     0,     0,     0,     0,     0,   563,
     564,     0,   565,   566,   567,     0,   161,   568,   162,   163,
     164,   165,   166,   167,     0,     0,   168,  3707,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,   202,     0,   203,   204,   205,   206,
     207,   208,   209,     0,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,   223,
     224,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,     0,   229,     0,   230,     0,   231,     0,
       0,   232,   233,   234,     0,     0,   235,     0,     0,     0,
       0,   236,   237,     0,     0,     0,   238,     0,   239,     0,
     240,     0,     0,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,   247,     0,     0,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,   253,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,     0,
       0,   269,   270,   271,   272,     0,     0,   273,   274,     0,
     275,     0,   276,   277,     0,     0,   278,   279,   280,     0,
       0,     0,   281,   282,     0,   283,     0,   284,     0,   285,
     286,   287,   288,   289,   290,   291,   292,     0,   293,     0,
       0,     0,     0,   294,   295,   296,     0,   297,     0,     0,
       0,   298,   299,     0,     0,     0,   300,   301,   302,   303,
     304,     0,     0,     0,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,     0,     0,   311,   312,     0,     0,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
       0,     0,   319,     0,   320,     0,     0,   321,   322,   323,
     324,     0,     0,   325,     0,     0,   326,   327,     0,     0,
       0,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,     0,     0,     0,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
       0,   383,     0,     0,   384,   385,   386,   387,   388,   389,
     390,     0,     0,   391,     0,   392,   393,   394,   395,   396,
       0,     0,     0,     0,   397,     0,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,     0,   406,   407,     0,
       0,     0,     0,     0,   408,     0,     0,     0,     0,   409,
     410,   411,     0,     0,   412,     0,   413,     0,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,   426,   427,   428,   429,     0,   430,     0,
     431,   432,   433,   434,   435,     0,   436,   437,   438,   439,
       0,     0,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,     0,     0,   447,   448,   449,   450,
     451,     0,   452,   453,     0,   454,   455,   456,     0,     0,
     457,     0,   458,     0,   459,   460,     0,   461,   462,     0,
     463,     0,   464,   465,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,   474,     0,   475,   476,   477,
     478,     0,   479,   480,     0,     0,     0,   481,   482,   483,
     484,   485,     0,     0,     0,   486,     0,     0,     0,   487,
       0,   488,   489,   490,   491,   492,   493,     0,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,   505,   506,     0,     0,     0,   507,     0,     0,   508,
     509,   510,     0,   511,   512,   513,   514,   515,   516,     0,
       0,   517,   518,   519,   520,     0,   521,   522,     0,     0,
     523,   524,   525,   526,     0,     0,   527,   528,     0,   529,
     530,   531,   532,   533,     0,     0,     0,     0,     0,   534,
     535,   536,     0,     0,     0,   537,   538,   539,   540,     0,
     541,   542,   543,     0,   544,   545,     0,   546,   547,     0,
       0,   548,     0,     0,   549,     0,   550,     0,   551,   552,
       0,     0,     0,     0,     0,     0,   553,     0,     0,   554,
     555,     0,     0,     0,   556,   557,   558,   559,   560,   561,
     562,     0,     0,     0,     0,     0,     0,     0,   563,   564,
       0,   565,   566,   567,     0,   161,   568,   162,   163,   164,
     165,   166,   167,     0,     0,   168,  3902,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,   202,     0,   203,   204,   205,   206,   207,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,     0,   220,   221,   222,   223,   224,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,     0,   229,     0,   230,     0,   231,     0,     0,
     232,   233,   234,     0,     0,   235,     0,     0,     0,     0,
     236,   237,     0,     0,     0,   238,     0,   239,     0,   240,
       0,     0,     0,     0,   241,     0,   242,   243,   244,   245,
     246,     0,     0,     0,     0,   247,     0,     0,     0,   248,
     249,   250,     0,     0,     0,   251,   252,     0,   253,   254,
       0,   255,   256,   257,     0,   258,   259,     0,   260,   261,
     262,   263,   264,   265,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,     0,     0,   273,   274,     0,   275,
       0,   276,   277,     0,     0,   278,   279,   280,     0,     0,
       0,   281,   282,     0,   283,     0,   284,     0,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   293,     0,     0,
       0,     0,   294,   295,   296,     0,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,   301,   302,   303,   304,
       0,     0,     0,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,     0,     0,   311,   312,     0,     0,     0,
       0,   313,     0,   314,   315,     0,   316,   317,   318,     0,
       0,   319,     0,   320,     0,     0,   321,   322,   323,   324,
       0,     0,   325,     0,     0,   326,   327,     0,     0,     0,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,     0,     0,     0,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,     0,   371,     0,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,     0,
     383,     0,     0,   384,   385,   386,   387,   388,   389,   390,
       0,     0,   391,     0,   392,   393,   394,   395,   396,     0,
       0,     0,     0,   397,     0,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,     0,   406,   407,     0,     0,
       0,     0,     0,   408,     0,     0,     0,     0,   409,   410,
     411,     0,     0,   412,     0,   413,     0,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,     0,
       0,   440,     0,   441,     0,     0,     0,   442,   443,     0,
     444,   445,   446,     0,     0,   447,   448,   449,   450,   451,
       0,   452,   453,     0,   454,   455,   456,     0,     0,   457,
       0,   458,     0,   459,   460,     0,   461,   462,     0,   463,
       0,   464,   465,     0,     0,   466,   467,   468,   469,   470,
     471,     0,   472,   473,   474,     0,   475,   476,   477,   478,
       0,   479,   480,     0,     0,     0,   481,   482,   483,   484,
     485,     0,     0,     0,   486,     0,     0,     0,   487,     0,
     488,   489,   490,   491,   492,   493,     0,   494,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,     0,     0,   503,     0,     0,     0,   504,
     505,   506,     0,     0,     0,   507,     0,     0,   508,   509,
     510,     0,   511,   512,   513,   514,   515,   516,     0,     0,
     517,   518,   519,   520,     0,   521,   522,     0,     0,   523,
     524,   525,   526,     0,     0,   527,   528,     0,   529,   530,
     531,   532,   533,     0,     0,     0,     0,     0,   534,   535,
     536,     0,     0,     0,   537,   538,   539,   540,     0,   541,
     542,   543,     0,   544,   545,     0,   546,   547,     0,     0,
     548,     0,     0,   549,     0,   550,     0,   551,   552,     0,
       0,     0,     0,     0,     0,   553,     0,     0,   554,   555,
       0,     0,     0,   556,   557,   558,   559,   560,   561,   562,
       0,     0,     0,     0,     0,     0,     0,   563,   564,     0,
     565,   566,   567,     0,   161,   568,   162,   163,   164,   165,
     166,   167,     0,     0,   168,  4582,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,  1566,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,   202,     0,   203,   204,   205,   206,   207,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   223,   224,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,     0,   229,     0,   230,     0,   231,     0,     0,   232,
     233,   234,     0,     0,   235,     0,     0,     0,     0,   236,
     237,     0,     0,     0,   238,  1567,   239,     0,   240,     0,
       0,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,     0,     0,   273,   274,     0,   275,     0,
     276,   277,     0,     0,   278,   279,   280,     0,     0,     0,
     281,   282,     0,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,     0,     0,     0,
       0,   294,   295,   296,     0,   297,     0,     0,     0,   298,
     299,     0,     0,     0,   300,   301,   302,   303,   304,     0,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,     0,   311,   312,     0,     0,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   323,   324,     0,
       0,   325,     0,     0,   326,   327,   704,     0,     0,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,     0,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,     0,   383,
       0,     0,   384,   385,   386,   387,   388,   389,   390,     0,
       0,   391,     0,   392,   393,   394,   395,   396,     0,     0,
       0,     0,   397,     0,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,     0,   412,     0,   413,     0,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,   426,   427,   428,   429,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,     0,     0,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,     0,     0,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   465,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,   474,     0,   475,   476,   477,   478,     0,
     479,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,  1568,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,     0,     0,   508,   509,   510,
       0,   511,   512,   513,   514,   515,   516,     0,     0,   517,
     518,   519,   520,     0,   521,   522,     0,     0,   523,   524,
     525,   526,     0,   158,   527,   528,     0,   529,   530,   531,
     532,   533,     0,     0,     0,     0,     0,   534,   535,   536,
       0,     0,     0,   537,   538,   539,   540,     0,   541,   542,
     543,     0,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   551,   552,     0,     0,
       0,     0,     0,     0,   553,     0,     0,   554,   555,     0,
       0,     0,   556,   557,   558,   559,   560,   561,   562,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,     0,   568,     0,   161,  1569,   162,   163,
     164,   165,   166,   167,   932,   933,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,   202,     0,   203,   204,   205,   206,
     207,   208,   209,     0,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,   223,
     224,     0,   225,     0,     0,   226,   934,     0,   227,     0,
       0,   228,     0,   935,   229,     0,   230,     0,   231,     0,
       0,   232,   233,   234,     0,     0,   235,     0,     0,     0,
       0,   236,   237,     0,     0,     0,   238,     0,   239,     0,
     240,   936,     0,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,   247,     0,   937,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,   253,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   938,   263,   264,   265,     0,   266,   939,   268,     0,
       0,   269,   270,   271,   272,     0,     0,   273,   274,     0,
     940,     0,   276,   277,     0,     0,   278,   279,   280,     0,
       0,     0,   281,   282,     0,   283,     0,   284,     0,   285,
     286,   287,   288,   289,   290,   291,   292,   941,   293,     0,
       0,     0,     0,   294,   295,   296,     0,   297,     0,     0,
       0,   298,   299,     0,     0,     0,   300,   301,   302,   303,
     304,     0,     0,     0,   305,   306,   307,   308,   309,   942,
       0,   310,     0,     0,     0,   943,   311,   312,     0,     0,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
       0,     0,   319,     0,   320,     0,     0,   321,   322,   323,
     324,     0,     0,   325,     0,     0,   326,   327,   704,     0,
       0,     0,     0,   328,   329,     0,   330,     0,   331,   944,
     332,   333,     0,     0,     0,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
       0,   383,     0,     0,   384,   385,   386,   387,   388,   389,
     390,     0,     0,   391,     0,   392,   393,   394,   395,   396,
       0,     0,     0,     0,   397,     0,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,     0,   406,   407,     0,
       0,     0,     0,     0,   408,     0,     0,     0,     0,   409,
     410,   411,     0,     0,   412,     0,   413,     0,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,   426,   427,   428,   429,     0,   430,     0,
     945,   432,   433,   434,   946,     0,   436,   437,   438,   439,
       0,     0,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,   947,     0,   447,   448,   449,   450,
     451,     0,   948,   453,     0,   454,   455,   456,     0,     0,
     949,     0,   458,     0,   459,   460,     0,   461,   462,     0,
     463,     0,   464,   465,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,   474,     0,   475,   476,   477,
     478,     0,   479,   480,   950,     0,     0,   481,   482,   483,
     484,   485,     0,     0,     0,   486,     0,     0,   951,   952,
       0,   488,   489,   490,   491,   492,   493,     0,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,   505,   506,     0,     0,     0,   507,     0,     0,   508,
     509,   510,     0,   511,   512,   513,   514,   515,   516,     0,
       0,   953,   518,   519,   520,     0,   521,   522,     0,     0,
     523,   524,   525,   526,     0,   158,   527,   528,     0,   529,
     530,   531,   532,   533,     0,     0,     0,     0,     0,   534,
     535,   536,   954,     0,     0,   537,   538,   539,   540,     0,
     541,   542,   543,     0,   544,   545,     0,   546,   547,     0,
       0,   548,     0,     0,   549,   955,   550,   956,   551,   552,
       0,     0,     0,     0,     0,     0,   553,     0,     0,   554,
     555,     0,     0,     0,   556,   557,   558,   559,   560,   561,
     562,     0,     0,     0,     0,     0,     0,     0,   563,   564,
       0,   565,   566,   567,     0,   161,   568,  1040,   163,   164,
     165,   166,   167,  1041,   933,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,   202,     0,   203,   204,   205,   206,   207,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,     0,   220,   221,   222,   223,   224,
       0,   225,     0,     0,   226,   934,     0,   227,     0,     0,
     228,     0,   935,   229,     0,   230,     0,   231,     0,     0,
     232,   233,   234,     0,     0,   235,     0,     0,     0,     0,
     236,   237,     0,     0,     0,   238,     0,   239,     0,   240,
     936,     0,     0,     0,   241,     0,   242,   243,   244,   245,
     246,     0,     0,     0,     0,   247,     0,   937,     0,   248,
     249,   250,     0,     0,     0,   251,   252,     0,   253,   254,
       0,   255,   256,   257,     0,   258,   259,     0,   260,   261,
     938,   263,   264,   265,     0,   266,   939,   268,     0,     0,
     269,   270,   271,   272,     0,     0,   273,   274,     0,   940,
       0,   276,   277,     0,     0,   278,   279,   280,     0,     0,
       0,   281,   282,     0,   283,     0,   284,     0,   285,   286,
     287,   288,   289,   290,   291,   292,   941,   293,     0,     0,
       0,     0,   294,   295,   296,     0,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,   301,   302,   303,   304,
       0,     0,     0,   305,   306,   307,   308,   309,   942,     0,
     310,     0,     0,     0,   943,   311,   312,     0,     0,     0,
       0,   313,     0,   314,   315,     0,   316,   317,   318,     0,
       0,   319,     0,   320,     0,     0,   321,   322,   323,   324,
       0,     0,   325,     0,     0,   326,   327,   704,     0,     0,
       0,     0,   328,   329,     0,   330,     0,   331,   944,   332,
     333,     0,     0,     0,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,     0,   371,     0,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,     0,
     383,     0,     0,   384,   385,   386,   387,   388,   389,   390,
       0,     0,   391,     0,   392,   393,   394,   395,   396,     0,
       0,     0,     0,   397,     0,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,     0,   406,   407,     0,     0,
       0,     0,     0,   408,     0,     0,     0,     0,   409,   410,
     411,     0,     0,   412,     0,   413,     0,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,   426,   427,   428,   429,     0,   430,     0,   945,
     432,   433,   434,  1042,     0,   436,   437,   438,   439,     0,
       0,   440,     0,   441,     0,     0,     0,   442,   443,     0,
     444,   445,   446,   947,     0,   447,   448,   449,   450,   451,
       0,   948,   453,     0,   454,   455,   456,     0,     0,   949,
       0,   458,     0,   459,   460,     0,   461,   462,     0,   463,
       0,   464,   465,     0,     0,   466,   467,   468,   469,   470,
     471,     0,   472,   473,   474,     0,   475,   476,   477,   478,
       0,   479,   480,   950,     0,     0,   481,   482,   483,   484,
     485,     0,     0,     0,   486,     0,     0,   951,   952,     0,
     488,   489,   490,   491,   492,   493,     0,   494,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,     0,     0,   503,     0,     0,     0,   504,
     505,   506,     0,     0,     0,   507,     0,     0,   508,   509,
     510,     0,   511,   512,   513,   514,   515,   516,     0,     0,
     953,   518,   519,   520,     0,   521,   522,     0,     0,   523,
     524,   525,   526,     0,   158,   527,   528,     0,   529,   530,
     531,   532,   533,     0,     0,     0,     0,     0,   534,   535,
     536,   954,     0,     0,   537,   538,   539,   540,     0,   541,
     542,   543,     0,   544,   545,     0,   546,   547,     0,     0,
     548,     0,     0,   549,   955,   550,   956,   551,   552,     0,
       0,     0,     0,     0,     0,   553,     0,     0,   554,   555,
       0,     0,     0,   556,   557,   558,   559,   560,   561,   562,
       0,     0,     0,     0,     0,     0,     0,   563,   564,     0,
     565,   566,   567,     0,   161,   568,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,   202,     0,   203,   204,   205,   206,   207,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   223,   224,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,     0,   229,     0,   230,     0,   231,     0,     0,   232,
     233,   234,     0,     0,   235,     0,     0,     0,     0,   236,
     237,  2690,     0,     0,   238,     0,   239,     0,   240,     0,
       0,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,     0,     0,   273,   274,     0,   275,     0,
     276,   277,  2691,     0,   278,   279,   280,     0,     0,     0,
     281,   282,     0,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,     0,     0,     0,
       0,   294,   295,   296,     0,   297,  2692,     0,     0,   298,
     299,     0,     0,     0,   300,   301,   302,   303,   304,     0,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,     0,   311,   312,     0,     0,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   323,   324,     0,
       0,   325,     0,     0,   326,   327,     0,     0,     0,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,  2693,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,     0,   383,
       0,     0,   384,   385,   386,   387,   388,   389,   390,   154,
     155,   391,     0,   392,   393,   394,   395,   396,     0,     0,
       0,  2694,   397,     0,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,     0,   412,     0,   413,     0,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,   426,   427,   428,   429,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,     0,     0,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,     0,     0,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   465,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,   474,     0,   475,   476,   477,   478,     0,
     479,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,  4641,   635,  4642,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,     0,     0,   508,   509,   510,
       0,   511,   512,   513,   514,   515,   516,     0,     0,   517,
     518,   519,   520,     0,   521,   522,     0,     0,   523,   524,
     525,   526,     0,     0,   527,   528,     0,   529,   530,   531,
     532,   533,     0,     0,     0,     0,     0,   534,   535,   536,
       0,     0,     0,   537,   538,   539,   540,  2695,   541,   542,
     543,     0,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   551,   552,     0,     0,
       0,     0,     0,     0,   553,     0,     0,   554,   555,     0,
       0,     0,   556,   557,   558,   559,   560,   561,   562,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,   161,   568,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,   202,     0,   203,   204,   205,   206,   207,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,     0,   220,   221,   222,   223,   224,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
       0,   229,     0,   230,     0,   231,     0,     0,   232,   233,
     234,     0,     0,   235,     0,     0,     0,     0,   236,   237,
    1851,     0,     0,   238,  4286,   239,     0,   240,     0,     0,
       0,     0,   241,     0,   242,   243,   244,   245,   246,     0,
       0,     0,     0,   247,     0,     0,     0,   248,   249,   250,
       0,     0,     0,   251,   252,     0,   253,   254,     0,   255,
     256,   257,     0,   258,   259,     0,   260,   261,   262,   263,
     264,   265,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,     0,     0,   273,   274,     0,   275,     0,   276,
     277,  1852,     0,   278,   279,   280,     0,     0,     0,   281,
     282,     0,   283,     0,   284,     0,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   293,     0,     0,     0,     0,
     294,   295,   296,     0,   297,  3374,     0,     0,   298,   299,
       0,     0,     0,   300,   301,   302,   303,   304,     0,     0,
       0,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,     0,     0,   311,   312,     0,     0,     0,     0,   313,
       0,   314,   315,     0,   316,   317,   318,     0,     0,   319,
       0,   320,     0,     0,   321,   322,   323,   324,     0,     0,
     325,     0,     0,   326,   327,     0,     0,     0,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,     0,
       0,  3375,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,     0,   383,     0,
       0,   384,   385,   386,   387,   388,   389,   390,     0,     0,
     391,     0,   392,   393,   394,   395,   396,     0,     0,     0,
    3376,   397,     0,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,     0,   406,   407,     0,     0,     0,     0,
       0,   408,     0,     0,     0,     0,   409,   410,   411,     0,
       0,   412,     0,   413,     0,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,   433,
     434,   435,     0,   436,   437,   438,   439,     0,     0,   440,
       0,   441,     0,     0,     0,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,     0,   454,   455,   456,     0,     0,   457,     0,   458,
       0,   459,   460,     0,   461,   462,     0,   463,     0,   464,
     465,     0,     0,   466,   467,   468,   469,   470,   471,     0,
     472,   473,   474,     0,   475,   476,   477,   478,     0,   479,
     480,     0,     0,     0,   481,   482,   483,   484,   485,     0,
       0,     0,   486,     0,     0,     0,   487,     0,   488,   489,
     490,   491,   492,   493,     0,   494,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,     0,     0,   503,     0,     0,     0,   504,   505,   506,
       0,     0,     0,   507,     0,     0,   508,   509,   510,     0,
     511,   512,   513,   514,   515,   516,     0,     0,   517,   518,
     519,   520,     0,   521,   522,     0,     0,   523,   524,   525,
     526,     0,   158,   527,   528,     0,   529,   530,   531,   532,
     533,     0,     0,     0,     0,     0,   534,   535,   536,     0,
       0,     0,   537,   538,   539,   540,  3377,   541,   542,   543,
       0,   544,   545,     0,   546,   547,     0,     0,   548,     0,
       0,   549,     0,   550,     0,   551,   552,     0,     0,     0,
       0,     0,     0,   553,     0,     0,   554,   555,     0,     0,
       0,   556,   557,   558,   559,   560,   561,   562,     0,     0,
       0,     0,     0,     0,     0,   563,   564,     0,   565,   566,
     567,     0,   161,   568,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
     202,     0,   203,   204,   205,   206,   207,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,     0,   220,   221,   222,   223,   224,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,     0,
     229,     0,   230,     0,   231,     0,     0,   232,   233,   234,
       0,     0,   235,     0,     0,     0,     0,   236,   237,  1851,
       0,     0,   238,  5132,   239,     0,   240,     0,     0,     0,
       0,   241,     0,   242,   243,   244,   245,   246,     0,     0,
       0,     0,   247,     0,     0,     0,   248,   249,   250,     0,
       0,     0,   251,   252,     0,   253,   254,     0,   255,   256,
     257,     0,   258,   259,     0,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,     0,     0,   269,   270,   271,
     272,     0,     0,   273,   274,     0,   275,     0,   276,   277,
    1852,     0,   278,   279,   280,     0,     0,     0,   281,   282,
       0,   283,     0,   284,     0,   285,   286,   287,   288,   289,
     290,   291,   292,     0,   293,     0,     0,     0,     0,   294,
     295,   296,     0,   297,  3374,     0,     0,   298,   299,     0,
       0,     0,   300,   301,   302,   303,   304,     0,     0,     0,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
       0,     0,   311,   312,     0,     0,     0,     0,   313,     0,
     314,   315,     0,   316,   317,   318,     0,     0,   319,     0,
     320,     0,     0,   321,   322,   323,   324,     0,     0,   325,
       0,     0,   326,   327,     0,     0,     0,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,     0,     0,
    3375,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,     0,   383,     0,     0,
     384,   385,   386,   387,   388,   389,   390,     0,     0,   391,
       0,   392,   393,   394,   395,   396,     0,     0,     0,  3376,
     397,     0,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,     0,   406,   407,     0,     0,     0,     0,     0,
     408,     0,     0,     0,     0,   409,   410,   411,     0,     0,
     412,     0,   413,     0,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,     0,   424,   425,     0,   426,
     427,   428,   429,     0,   430,     0,   431,   432,   433,   434,
     435,     0,   436,   437,   438,   439,     0,     0,   440,     0,
     441,     0,     0,     0,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,   453,
       0,   454,   455,   456,     0,     0,   457,     0,   458,     0,
     459,   460,     0,   461,   462,     0,   463,     0,   464,   465,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,   474,     0,   475,   476,   477,   478,     0,   479,   480,
       0,     0,     0,   481,   482,   483,   484,   485,     0,     0,
       0,   486,     0,     0,     0,   487,     0,   488,   489,   490,
     491,   492,   493,     0,   494,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
       0,     0,   503,     0,     0,     0,   504,   505,   506,     0,
       0,     0,   507,     0,     0,   508,   509,   510,     0,   511,
     512,   513,   514,   515,   516,     0,     0,   517,   518,   519,
     520,     0,   521,   522,     0,     0,   523,   524,   525,   526,
       0,   158,   527,   528,     0,   529,   530,   531,   532,   533,
       0,     0,     0,     0,     0,   534,   535,   536,     0,     0,
       0,   537,   538,   539,   540,  3377,   541,   542,   543,     0,
     544,   545,     0,   546,   547,     0,     0,   548,     0,     0,
     549,     0,   550,     0,   551,   552,     0,     0,     0,     0,
       0,     0,   553,     0,     0,   554,   555,     0,     0,     0,
     556,   557,   558,   559,   560,   561,   562,     0,     0,     0,
       0,     0,     0,     0,   563,   564,     0,   565,   566,   567,
       0,   161,   568,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,   202,
       0,   203,   204,   205,   206,   207,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
       0,   220,   221,   222,   223,   224,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,     0,   229,
       0,   230,     0,   231,     0,     0,   232,   233,   234,     0,
       0,   235,     0,     0,     0,     0,   236,   237,  1851,     0,
       0,   238,  5196,   239,     0,   240,     0,     0,     0,     0,
     241,     0,   242,   243,   244,   245,   246,     0,     0,     0,
       0,   247,     0,     0,     0,   248,   249,   250,     0,     0,
       0,   251,   252,     0,   253,   254,     0,   255,   256,   257,
       0,   258,   259,     0,   260,   261,   262,   263,   264,   265,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
       0,     0,   273,   274,     0,   275,     0,   276,   277,  1852,
       0,   278,   279,   280,     0,     0,     0,   281,   282,     0,
     283,     0,   284,     0,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,     0,     0,     0,     0,   294,   295,
     296,     0,   297,  3374,     0,     0,   298,   299,     0,     0,
       0,   300,   301,   302,   303,   304,     0,     0,     0,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,     0,
       0,   311,   312,     0,     0,     0,     0,   313,     0,   314,
     315,     0,   316,   317,   318,     0,     0,   319,     0,   320,
       0,     0,   321,   322,   323,   324,     0,     0,   325,     0,
       0,   326,   327,     0,     0,     0,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,     0,     0,  3375,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,     0,   383,     0,     0,   384,
     385,   386,   387,   388,   389,   390,     0,     0,   391,     0,
     392,   393,   394,   395,   396,     0,     0,     0,  3376,   397,
       0,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,     0,   406,   407,     0,     0,     0,     0,     0,   408,
       0,     0,     0,     0,   409,   410,   411,     0,     0,   412,
       0,   413,     0,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,   433,   434,   435,
       0,   436,   437,   438,   439,     0,     0,   440,     0,   441,
       0,     0,     0,   442,   443,     0,   444,   445,   446,     0,
       0,   447,   448,   449,   450,   451,     0,   452,   453,     0,
     454,   455,   456,     0,     0,   457,     0,   458,     0,   459,
     460,     0,   461,   462,     0,   463,     0,   464,   465,     0,
       0,   466,   467,   468,   469,   470,   471,     0,   472,   473,
     474,     0,   475,   476,   477,   478,     0,   479,   480,     0,
       0,     0,   481,   482,   483,   484,   485,     0,     0,     0,
     486,     0,     0,     0,   487,     0,   488,   489,   490,   491,
     492,   493,     0,   494,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,     0,
       0,   503,     0,     0,     0,   504,   505,   506,     0,     0,
       0,   507,     0,     0,   508,   509,   510,     0,   511,   512,
     513,   514,   515,   516,     0,     0,   517,   518,   519,   520,
       0,   521,   522,     0,     0,   523,   524,   525,   526,     0,
     158,   527,   528,     0,   529,   530,   531,   532,   533,     0,
       0,     0,     0,     0,   534,   535,   536,     0,     0,     0,
     537,   538,   539,   540,  3377,   541,   542,   543,     0,   544,
     545,     0,   546,   547,     0,     0,   548,     0,     0,   549,
       0,   550,     0,   551,   552,     0,     0,     0,     0,     0,
       0,   553,     0,     0,   554,   555,     0,     0,     0,   556,
     557,   558,   559,   560,   561,   562,     0,     0,     0,     0,
       0,     0,     0,   563,   564,     0,   565,   566,   567,     0,
     161,   568,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,   202,     0,
     203,   204,   205,   206,   207,   208,   209,     0,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,     0,
     220,   221,   222,   223,   224,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,     0,   229,     0,
     230,     0,   231,     0,     0,   232,   233,   234,     0,     0,
     235,     0,     0,     0,     0,   236,   237,     0,     0,     0,
     238,     0,   239,     0,   240,     0,     0,     0,     0,   241,
       0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
     247,     0,     0,     0,   248,   249,   250,     0,     0,     0,
     251,   252,     0,   253,   254,     0,   255,   256,   257,     0,
     258,   259,     0,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,     0,     0,   269,   270,   271,   272,     0,
       0,   273,   274,     0,   275,     0,   276,   277,     0,     0,
     278,   279,   280,     0,     0,     0,   281,   282,     0,   283,
       0,   284,     0,   285,   286,   287,   288,   289,   290,   291,
     292,     0,   293,     0,     0,     0,     0,   294,   295,   296,
       0,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,   301,   302,   303,   304,     0,     0,     0,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,     0,     0,
     311,   312,     0,     0,     0,     0,   313,     0,   314,   315,
       0,   316,   317,   318,     0,     0,   319,     0,   320,     0,
       0,   321,   322,   323,   324,     0,     0,   325,     0,     0,
     326,   327,     0,     0,     0,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,     0,     0,  2218,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,     0,   383,     0,     0,   384,   385,
     386,   387,   388,   389,   390,     0,     0,   391,     0,   392,
     393,   394,   395,   396,     0,     0,     0,  2219,   397,     0,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
       0,   406,   407,     0,     0,     0,     0,     0,   408,     0,
       0,     0,     0,   409,   410,   411,     0,   834,   412,     0,
     413,     0,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,     0,   424,   425,     0,   426,   427,   428,
     429,     0,   430,     0,   431,   432,   433,   434,   435,     0,
     436,   437,   438,   439,     0,     0,   440,     0,   441,     0,
       0,     0,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,   453,     0,   454,
     455,   456,     0,     0,   457,     0,   458,     0,   459,   460,
       0,   461,   462,     0,   463,     0,   464,   465,     0,     0,
     466,   467,   468,   469,   470,   471,  2220,   472,   473,   474,
       0,   475,   476,   477,   478,     0,   479,   480,     0,     0,
       0,   481,   482,   483,   484,   485,     0,     0,     0,   486,
       0,     0,     0,   487,     0,   488,   489,   490,   491,   492,
     493,     0,   494,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,     0,     0,
     503,     0,     0,     0,   504,   505,   506,     0,     0,     0,
     507,     0,     0,   508,   509,   510,     0,   511,   512,   513,
     514,   515,   516,     0,     0,   517,   518,   519,   520,     0,
     521,   522,     0,     0,   523,   524,   525,   526,     0,     0,
     527,   528,     0,   529,   530,   531,   532,   533,     0,     0,
       0,     0,     0,   534,   535,   536,     0,     0,     0,   537,
     538,   539,   540,  2221,   541,   542,   543,     0,   544,   545,
       0,   546,   547,     0,     0,   548,     0,     0,   549,     0,
     550,     0,   551,   552,     0,     0,     0,     0,     0,     0,
     553,     0,     0,   554,   555,     0,     0,     0,   556,   557,
     558,   559,   560,   561,   562,     0,     0,     0,     0,     0,
       0,     0,   563,   564,     0,   565,   566,   567,     0,   161,
     568,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,   202,     0,   203,
     204,   205,   206,   207,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,     0,   220,
     221,   222,   223,   224,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,     0,   229,     0,   230,
       0,   231,     0,     0,   232,   233,   234,     0,     0,   235,
       0,     0,     0,     0,   236,   237,     0,     0,     0,   238,
       0,   239,     0,   240,     0,     0,     0,     0,   241,     0,
     242,   243,   244,   245,   246,     0,     0,     0,     0,   247,
       0,     0,     0,   248,   249,   250,     0,     0,     0,   251,
     252,     0,   253,   254,     0,   255,   256,   257,     0,   258,
     259,     0,   260,   261,   262,   263,   264,   265,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,     0,     0,
     273,   274,     0,   275,     0,   276,   277,     0,     0,   278,
     279,   280,     0,     0,     0,   281,   282,     0,   283,     0,
     284,     0,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,     0,     0,     0,     0,   294,   295,   296,     0,
     297,     0,     0,     0,   298,   299,     0,     0,     0,   300,
     301,   302,   303,   304,     0,     0,     0,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,     0,     0,   311,
     312,     0,     0,     0,     0,   313,     0,   314,   315,     0,
     316,   317,   318,     0,     0,   319,     0,   320,     0,     0,
     321,   322,   323,   324,     0,     0,   325,     0,     0,   326,
     327,     0,     0,     0,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,     0,     0,  2218,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,     0,   383,     0,     0,   384,   385,   386,
     387,   388,   389,   390,     0,     0,   391,     0,   392,   393,
     394,   395,   396,     0,     0,     0,  2219,   397,     0,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,     0,
     406,   407,     0,     0,     0,     0,     0,   408,     0,     0,
       0,     0,   409,   410,   411,     0,   834,   412,     0,   413,
       0,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,   433,   434,   435,     0,   436,
     437,   438,   439,     0,     0,   440,     0,   441,     0,     0,
       0,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,     0,   454,   455,
     456,     0,     0,   457,     0,   458,     0,   459,   460,     0,
     461,   462,     0,   463,     0,   464,   465,     0,     0,   466,
     467,   468,   469,   470,   471,  4656,   472,   473,   474,     0,
     475,   476,   477,   478,     0,   479,   480,     0,     0,     0,
     481,   482,   483,   484,   485,     0,     0,     0,   486,     0,
       0,     0,   487,     0,   488,   489,   490,   491,   492,   493,
       0,   494,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,     0,     0,   503,
       0,     0,     0,   504,   505,   506,     0,     0,     0,   507,
       0,     0,   508,   509,   510,     0,   511,   512,   513,   514,
     515,   516,     0,     0,   517,   518,   519,   520,     0,   521,
     522,     0,     0,   523,   524,   525,   526,     0,     0,   527,
     528,     0,   529,   530,   531,   532,   533,     0,     0,     0,
       0,     0,   534,   535,   536,     0,     0,     0,   537,   538,
     539,   540,  2221,   541,   542,   543,     0,   544,   545,     0,
     546,   547,     0,     0,   548,     0,     0,   549,     0,   550,
       0,   551,   552,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   554,   555,     0,     0,     0,   556,   557,   558,
     559,   560,   561,   562,     0,     0,     0,     0,     0,     0,
       0,   563,   564,     0,   565,   566,   567,     0,   161,   568,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,   202,     0,   203,   204,
     205,   206,   207,   208,   209,     0,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,   223,   224,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,  1167,   935,   229,     0,   230,     0,
     231,     0,     0,   232,   233,   234,     0,     0,   235,     0,
       0,     0,     0,   236,   237,     0,     0,     0,   238,     0,
     239,     0,   240,     0,     0,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,   247,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,   253,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,     0,     0,   269,   270,   271,   272,     0,     0,   273,
     274,     0,   275,     0,   276,   277,     0,     0,   278,   279,
     280,     0,     0,     0,   281,   282,     0,   283,     0,   284,
       0,   285,   286,   287,   288,   289,   290,   291,   292,     0,
     293,     0,     0,     0,     0,   294,   295,   296,     0,   297,
       0,     0,     0,   298,   299,     0,     0,     0,   300,   301,
     302,   303,   304,     0,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,     0,   311,   312,
       0,     0,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,     0,     0,   321,
     322,   323,   324,     0,     0,   325,     0,     0,   326,   327,
     704,     0,     0,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,     0,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,     0,   383,     0,     0,   384,   385,   386,   387,
     388,   389,   390,     0,     0,   391,     0,   392,   393,   394,
     395,   396,     0,     0,     0,     0,   397,     0,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,     0,   406,
     407,     0,     0,     0,     0,     0,   408,     0,     0,     0,
       0,   409,   410,   411,     0,     0,   412,     0,   413,     0,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,   426,   427,   428,   429,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   436,   437,
     438,   439,     0,     0,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,     0,   454,   455,   456,
       0,     0,   457,     0,   458,     0,   459,   460,     0,   461,
     462,     0,   463,     0,   464,   465,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,   474,     0,   475,
     476,   477,   478,     0,   479,   480,     0,     0,     0,   481,
     482,   483,   484,   485,     0,     0,     0,   486,     0,     0,
       0,   487,     0,   488,   489,   490,   491,   492,   493,     0,
     494,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,   505,   506,     0,     0,     0,   507,     0,
       0,   508,   509,   510,     0,   511,   512,   513,   514,   515,
     516,     0,     0,   517,   518,   519,   520,     0,   521,   522,
       0,     0,   523,   524,   525,   526,     0,   158,   527,   528,
       0,   529,   530,   531,   532,   533,     0,     0,     0,     0,
       0,   534,   535,   536,     0,     0,     0,   537,   538,   539,
     540,     0,   541,   542,   543,     0,   544,   545,     0,   546,
     547,     0,     0,   548,     0,     0,   549,     0,   550,     0,
     551,   552,     0,     0,     0,     0,     0,     0,   553,     0,
       0,   554,   555,     0,     0,     0,   556,   557,   558,   559,
     560,   561,   562,     0,     0,     0,     0,     0,     0,     0,
     563,   564,     0,   565,   566,   567,     0,   161,   568,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,  1581,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,   202,     0,   203,   204,   205,
     206,   207,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,     0,   220,   221,   222,
     223,   224,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,     0,   229,     0,   230,     0,   231,
       0,     0,   232,   233,   234,     0,     0,   235,     0,     0,
       0,     0,   236,   237,     0,     0,     0,   238,  1582,   239,
       0,   240,     0,     0,     0,     0,   241,     0,   242,   243,
     244,   245,   246,     0,     0,     0,     0,   247,     0,     0,
       0,   248,   249,   250,     0,     0,     0,   251,   252,     0,
     253,   254,     0,   255,   256,   257,     0,   258,   259,     0,
     260,   261,   262,   263,   264,   265,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,     0,     0,   273,   274,
       0,   275,     0,   276,   277,     0,     0,   278,   279,   280,
       0,     0,     0,   281,   282,     0,   283,     0,   284,     0,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
       0,     0,     0,     0,   294,   295,   296,     0,   297,     0,
       0,     0,   298,   299,     0,     0,     0,   300,   301,   302,
     303,   304,     0,     0,     0,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,     0,     0,   311,   312,     0,
       0,     0,     0,   313,     0,   314,   315,     0,   316,   317,
     318,     0,     0,   319,     0,   320,     0,     0,   321,   322,
     323,   324,     0,     0,   325,     0,     0,   326,   327,   704,
       0,     0,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,     0,     0,     0,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,     0,   383,     0,     0,   384,   385,   386,   387,   388,
     389,   390,     0,     0,   391,     0,   392,   393,   394,   395,
     396,     0,     0,     0,     0,   397,     0,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,     0,   406,   407,
       0,     0,     0,     0,     0,   408,     0,     0,     0,     0,
     409,   410,   411,     0,     0,   412,     0,   413,     0,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,   433,   434,   435,     0,   436,   437,   438,
     439,     0,     0,   440,     0,   441,     0,     0,     0,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   449,
     450,   451,     0,   452,   453,     0,   454,   455,   456,     0,
       0,   457,     0,   458,     0,   459,   460,     0,   461,   462,
       0,   463,     0,   464,   465,     0,     0,   466,   467,   468,
     469,   470,   471,     0,   472,   473,   474,     0,   475,   476,
     477,   478,     0,   479,   480,     0,     0,     0,   481,   482,
     483,   484,   485,     0,     0,     0,   486,     0,     0,     0,
     487,     0,   488,   489,   490,   491,   492,   493,     0,   494,
     495,   496,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,     0,     0,   503,     0,     0,
       0,   504,   505,   506,     0,     0,     0,   507,     0,     0,
     508,   509,   510,     0,   511,   512,   513,   514,   515,   516,
       0,     0,   517,   518,   519,   520,     0,   521,   522,     0,
       0,   523,   524,   525,   526,     0,   158,   527,   528,     0,
     529,   530,   531,   532,   533,     0,     0,     0,     0,     0,
     534,   535,   536,     0,     0,     0,   537,   538,   539,   540,
       0,   541,   542,   543,     0,   544,   545,     0,   546,   547,
       0,     0,   548,     0,     0,   549,     0,   550,     0,   551,
     552,     0,     0,     0,     0,     0,     0,   553,     0,     0,
     554,   555,     0,     0,     0,   556,   557,   558,   559,   560,
     561,   562,     0,     0,     0,     0,     0,     0,     0,   563,
     564,     0,   565,   566,   567,     0,   161,   568,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
    1126,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,   202,     0,   203,   204,   205,   206,
     207,   208,   209,     0,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,   223,
     224,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,     0,   229,     0,   230,     0,   231,     0,
       0,   232,   233,   234,     0,     0,   235,     0,     0,     0,
       0,   236,   237,     0,     0,     0,   238,     0,   239,     0,
     240,     0,     0,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,   247,     0,     0,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,   253,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,     0,
       0,   269,   270,   271,   272,     0,     0,   273,   274,     0,
     275,     0,   276,   277,     0,     0,   278,   279,   280,     0,
       0,     0,   281,   282,     0,   283,     0,   284,     0,   285,
     286,   287,   288,   289,   290,   291,   292,     0,   293,     0,
       0,     0,     0,   294,   295,   296,     0,   297,  1127,  1128,
       0,   298,   299,     0,     0,     0,   300,   301,   302,   303,
     304,     0,     0,     0,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,     0,     0,   311,   312,     0,     0,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
       0,     0,   319,     0,   320,     0,     0,   321,   322,   323,
     324,     0,     0,   325,     0,     0,   326,   327,     0,     0,
       0,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,     0,     0,     0,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
       0,   383,     0,     0,   384,   385,   386,   387,   388,   389,
     390,     0,     0,   391,     0,   392,   393,   394,   395,   396,
       0,     0,     0,     0,   397,     0,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,     0,   406,   407,     0,
       0,     0,     0,     0,   408,     0,     0,     0,     0,   409,
     410,   411,     0,     0,   412,     0,   413,     0,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,   426,   427,   428,   429,     0,   430,     0,
     431,   432,   433,   434,   435,     0,   436,   437,   438,   439,
       0,     0,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,     0,     0,   447,   448,   449,   450,
     451,     0,   452,   453,     0,   454,   455,   456,     0,     0,
     457,     0,   458,     0,   459,   460,     0,   461,   462,     0,
     463,     0,   464,   465,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,   474,     0,   475,   476,   477,
     478,     0,   479,   480,     0,     0,     0,   481,   482,   483,
     484,   485,     0,     0,     0,   486,     0,     0,     0,   487,
       0,   488,   489,   490,   491,   492,   493,     0,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,   505,   506,     0,     0,     0,   507,     0,     0,   508,
     509,   510,     0,   511,   512,   513,   514,   515,   516,     0,
       0,   517,   518,   519,   520,     0,   521,   522,     0,     0,
     523,   524,   525,   526,     0,  1129,   527,   528,     0,   529,
     530,   531,   532,   533,     0,     0,     0,     0,     0,   534,
     535,   536,     0,     0,     0,   537,   538,   539,   540,     0,
     541,   542,   543,     0,   544,   545,     0,   546,   547,     0,
       0,   548,     0,     0,   549,     0,   550,     0,   551,   552,
       0,     0,     0,     0,     0,     0,   553,     0,     0,   554,
     555,     0,     0,     0,   556,   557,   558,   559,   560,   561,
     562,     0,     0,     0,     0,     0,     0,     0,   563,   564,
       0,   565,   566,   567,     0,   161,   568,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,   202,     0,   203,   204,   205,   206,   207,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,     0,   220,   221,   222,   223,   224,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,     0,   229,     0,   230,     0,   231,     0,     0,
     232,   233,   234,     0,     0,   235,     0,     0,     0,     0,
     236,   237,     0,     0,     0,   238,     0,   239,     0,   240,
       0,     0,     0,     0,   241,     0,   242,   243,   244,   245,
     246,     0,     0,     0,     0,   247,     0,     0,     0,   248,
     249,   250,     0,     0,     0,   251,   252,     0,   253,   254,
       0,   255,   256,   257,     0,   258,   259,     0,   260,   261,
     262,   263,   264,   265,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,     0,     0,   273,   274,     0,   275,
       0,   276,   277,     0,     0,   278,   279,   280,     0,     0,
       0,   281,   282,     0,   283,     0,   284,     0,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   293,     0,     0,
       0,     0,   294,   295,   296,     0,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,   301,   302,   303,   304,
       0,     0,     0,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,     0,     0,   311,   312,     0,     0,     0,
       0,   313,     0,   314,   315,     0,   316,   317,   318,     0,
       0,   319,     0,   320,     0,     0,   321,   322,   323,   324,
       0,     0,   325,     0,     0,   326,   327,     0,     0,     0,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,     0,     0,  2218,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,     0,   371,     0,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,     0,
     383,     0,     0,   384,   385,   386,   387,   388,   389,   390,
       0,     0,   391,     0,   392,   393,   394,   395,   396,     0,
       0,     0,  2219,   397,     0,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,     0,   406,   407,     0,     0,
       0,     0,     0,   408,     0,     0,     0,     0,   409,   410,
     411,     0,   834,   412,     0,   413,     0,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,     0,
       0,   440,     0,   441,     0,     0,     0,   442,   443,     0,
     444,   445,   446,     0,     0,   447,   448,   449,   450,   451,
       0,   452,   453,     0,   454,   455,   456,     0,     0,   457,
       0,   458,     0,   459,   460,     0,   461,   462,     0,   463,
       0,   464,   465,     0,     0,   466,   467,   468,   469,   470,
     471,     0,   472,   473,   474,     0,   475,   476,   477,   478,
       0,   479,   480,     0,     0,     0,   481,   482,   483,   484,
     485,     0,     0,     0,   486,     0,     0,     0,   487,     0,
     488,   489,   490,   491,   492,   493,     0,   494,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,     0,     0,   503,     0,     0,     0,   504,
     505,   506,     0,     0,     0,   507,     0,     0,   508,   509,
     510,     0,   511,   512,   513,   514,   515,   516,     0,     0,
     517,   518,   519,   520,     0,   521,   522,     0,     0,   523,
     524,   525,   526,     0,     0,   527,   528,     0,   529,   530,
     531,   532,   533,     0,     0,     0,     0,     0,   534,   535,
     536,     0,     0,     0,   537,   538,   539,   540,  2221,   541,
     542,   543,     0,   544,   545,     0,   546,   547,     0,     0,
     548,     0,     0,   549,     0,   550,     0,   551,   552,     0,
       0,     0,     0,     0,     0,   553,     0,     0,   554,   555,
       0,     0,     0,   556,   557,   558,   559,   560,   561,   562,
       0,     0,     0,     0,     0,     0,     0,   563,   564,     0,
     565,   566,   567,     0,   161,   568,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,  1566,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,   202,     0,   203,   204,   205,   206,   207,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   223,   224,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,     0,   229,     0,   230,     0,   231,     0,     0,   232,
     233,   234,     0,     0,   235,     0,     0,     0,     0,   236,
     237,     0,     0,     0,   238,  1567,   239,     0,   240,     0,
       0,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,     0,     0,   273,   274,     0,   275,     0,
     276,   277,     0,     0,   278,   279,   280,     0,     0,     0,
     281,   282,     0,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,     0,     0,     0,
       0,   294,   295,   296,     0,   297,     0,     0,     0,   298,
     299,     0,     0,     0,   300,   301,   302,   303,   304,     0,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,     0,   311,   312,     0,     0,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   323,   324,     0,
       0,   325,     0,     0,   326,   327,   704,     0,     0,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,     0,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,     0,   383,
       0,     0,   384,   385,   386,   387,   388,   389,   390,     0,
       0,   391,     0,   392,   393,   394,   395,   396,     0,     0,
       0,     0,   397,     0,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,     0,   412,     0,   413,     0,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,   426,   427,   428,   429,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,     0,     0,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,     0,     0,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   465,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,   474,     0,   475,   476,   477,   478,     0,
     479,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,     0,     0,   508,   509,   510,
       0,   511,   512,   513,   514,   515,   516,     0,     0,   517,
     518,   519,   520,     0,   521,   522,     0,     0,   523,   524,
     525,   526,     0,   158,   527,   528,     0,   529,   530,   531,
     532,   533,     0,     0,     0,     0,     0,   534,   535,   536,
       0,     0,     0,   537,   538,   539,   540,     0,   541,   542,
     543,     0,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   551,   552,     0,     0,
       0,     0,     0,     0,   553,     0,     0,   554,   555,     0,
       0,     0,   556,   557,   558,   559,   560,   561,   562,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,   161,   568,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,   202,     0,   203,   204,   205,   206,   207,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,     0,   220,   221,   222,   223,   224,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,  1167,
       0,   229,     0,   230,     0,   231,     0,     0,   232,   233,
     234,     0,     0,   235,     0,     0,     0,     0,   236,   237,
       0,     0,     0,   238,     0,   239,     0,   240,     0,     0,
       0,     0,   241,     0,   242,   243,   244,   245,   246,     0,
       0,     0,     0,   247,     0,     0,     0,   248,   249,   250,
       0,     0,     0,   251,   252,     0,   253,   254,     0,   255,
     256,   257,     0,   258,   259,     0,   260,   261,   262,   263,
     264,   265,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,     0,     0,   273,   274,     0,   275,     0,   276,
     277,     0,     0,   278,   279,   280,     0,     0,     0,   281,
     282,     0,   283,     0,   284,     0,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   293,     0,     0,     0,     0,
     294,   295,   296,     0,   297,     0,     0,     0,   298,   299,
       0,     0,     0,   300,   301,   302,   303,   304,     0,     0,
       0,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,     0,     0,   311,   312,     0,     0,     0,     0,   313,
       0,   314,   315,     0,   316,   317,   318,     0,     0,   319,
       0,   320,     0,     0,   321,   322,   323,   324,     0,     0,
     325,     0,     0,   326,   327,   704,     0,     0,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,     0,
       0,     0,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,     0,   383,     0,
       0,   384,   385,   386,   387,   388,   389,   390,     0,     0,
     391,     0,   392,   393,   394,   395,   396,     0,     0,     0,
       0,   397,     0,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,     0,   406,   407,     0,     0,     0,     0,
       0,   408,     0,     0,     0,     0,   409,   410,   411,     0,
       0,   412,     0,   413,     0,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,   433,
     434,   435,     0,   436,   437,   438,   439,     0,     0,   440,
       0,   441,     0,     0,     0,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,     0,   454,   455,   456,     0,     0,   457,     0,   458,
       0,   459,   460,     0,   461,   462,     0,   463,     0,   464,
     465,     0,     0,   466,   467,   468,   469,   470,   471,     0,
     472,   473,   474,     0,   475,   476,   477,   478,     0,   479,
     480,     0,     0,     0,   481,   482,   483,   484,   485,     0,
       0,     0,   486,     0,     0,     0,   487,     0,   488,   489,
     490,   491,   492,   493,     0,   494,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,     0,     0,   503,     0,     0,     0,   504,   505,   506,
       0,     0,     0,   507,     0,     0,   508,   509,   510,     0,
     511,   512,   513,   514,   515,   516,     0,     0,   517,   518,
     519,   520,     0,   521,   522,     0,     0,   523,   524,   525,
     526,     0,   158,   527,   528,     0,   529,   530,   531,   532,
     533,     0,     0,     0,     0,     0,   534,   535,   536,     0,
       0,     0,   537,   538,   539,   540,     0,   541,   542,   543,
       0,   544,   545,     0,   546,   547,     0,     0,   548,     0,
       0,   549,     0,   550,     0,   551,   552,     0,     0,     0,
       0,     0,     0,   553,     0,     0,   554,   555,     0,     0,
       0,   556,   557,   558,   559,   560,   561,   562,     0,     0,
       0,     0,     0,     0,     0,   563,   564,     0,   565,   566,
     567,     0,   161,   568,   162,   163,   164,   165,   166,   167,
    1606,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
     202,     0,   203,   204,   205,   206,   207,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,     0,   220,   221,   222,   223,   224,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,     0,
     229,     0,   230,     0,   231,     0,     0,   232,   233,   234,
       0,     0,   235,     0,     0,     0,     0,   236,   237,     0,
       0,     0,   238,     0,   239,     0,   240,     0,     0,     0,
       0,   241,     0,   242,   243,   244,   245,   246,     0,     0,
       0,     0,   247,     0,     0,     0,   248,   249,   250,     0,
       0,     0,   251,   252,     0,   253,   254,     0,   255,   256,
     257,     0,   258,   259,     0,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,     0,     0,   269,   270,   271,
     272,     0,     0,   273,   274,     0,   275,     0,   276,   277,
       0,     0,   278,   279,   280,     0,     0,     0,   281,   282,
       0,   283,     0,   284,     0,   285,   286,   287,   288,   289,
     290,   291,   292,     0,   293,     0,     0,     0,     0,   294,
     295,   296,     0,   297,     0,     0,     0,   298,   299,     0,
       0,     0,   300,   301,   302,   303,   304,     0,     0,     0,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
       0,     0,   311,   312,     0,     0,     0,     0,   313,     0,
     314,   315,     0,   316,   317,   318,     0,     0,   319,     0,
     320,     0,     0,   321,   322,   323,   324,     0,     0,   325,
       0,     0,   326,   327,   704,     0,     0,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,     0,     0,
       0,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,     0,   383,     0,     0,
     384,   385,   386,   387,   388,   389,   390,     0,     0,   391,
       0,   392,   393,   394,   395,   396,     0,     0,     0,     0,
     397,     0,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,     0,   406,   407,     0,     0,     0,     0,     0,
     408,     0,     0,     0,     0,   409,   410,   411,     0,     0,
     412,     0,   413,     0,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,     0,   424,   425,     0,   426,
     427,   428,   429,     0,   430,     0,   431,   432,   433,   434,
     435,     0,   436,   437,   438,   439,     0,     0,   440,     0,
     441,     0,     0,     0,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,   453,
       0,   454,   455,   456,     0,     0,   457,     0,   458,     0,
     459,   460,     0,   461,   462,     0,   463,     0,   464,   465,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,   474,     0,   475,   476,   477,   478,     0,   479,   480,
       0,     0,     0,   481,   482,   483,   484,   485,     0,     0,
       0,   486,     0,     0,     0,   487,     0,   488,   489,   490,
     491,   492,   493,     0,   494,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
       0,     0,   503,     0,     0,     0,   504,   505,   506,     0,
       0,     0,   507,     0,     0,   508,   509,   510,     0,   511,
     512,   513,   514,   515,   516,     0,     0,   517,   518,   519,
     520,     0,   521,   522,     0,     0,   523,   524,   525,   526,
       0,   158,   527,   528,     0,   529,   530,   531,   532,   533,
       0,     0,     0,     0,     0,   534,   535,   536,     0,     0,
       0,   537,   538,   539,   540,     0,   541,   542,   543,     0,
     544,   545,     0,   546,   547,     0,     0,   548,     0,     0,
     549,     0,   550,     0,   551,   552,     0,     0,     0,     0,
       0,     0,   553,     0,     0,   554,   555,     0,     0,     0,
     556,   557,   558,   559,   560,   561,   562,     0,     0,     0,
       0,     0,     0,     0,   563,   564,     0,   565,   566,   567,
       0,   161,   568,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,   202,
       0,   203,   204,   205,   206,   207,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
       0,   220,   221,   222,   223,   224,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,   935,   229,
       0,   230,     0,   231,     0,     0,   232,   233,   234,     0,
       0,   235,     0,     0,     0,     0,   236,   237,     0,     0,
       0,   238,     0,   239,     0,   240,     0,     0,     0,     0,
     241,     0,   242,   243,   244,   245,   246,     0,     0,     0,
       0,   247,     0,     0,     0,   248,   249,   250,     0,     0,
       0,   251,   252,     0,   253,   254,     0,   255,   256,   257,
       0,   258,   259,     0,   260,   261,   262,   263,   264,   265,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
       0,     0,   273,   274,     0,   275,     0,   276,   277,     0,
       0,   278,   279,   280,     0,     0,     0,   281,   282,     0,
     283,     0,   284,     0,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,     0,     0,     0,     0,   294,   295,
     296,     0,   297,     0,     0,     0,   298,   299,     0,     0,
       0,   300,   301,   302,   303,   304,     0,     0,     0,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,     0,
       0,   311,   312,     0,     0,     0,     0,   313,     0,   314,
     315,     0,   316,   317,   318,     0,     0,   319,     0,   320,
       0,     0,   321,   322,   323,   324,     0,     0,   325,     0,
       0,   326,   327,   704,     0,     0,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,     0,     0,     0,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,     0,   383,     0,     0,   384,
     385,   386,   387,   388,   389,   390,     0,     0,   391,     0,
     392,   393,   394,   395,   396,     0,     0,     0,     0,   397,
       0,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,     0,   406,   407,     0,     0,     0,     0,     0,   408,
       0,     0,     0,     0,   409,   410,   411,     0,     0,   412,
       0,   413,     0,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,   433,   434,   435,
       0,   436,   437,   438,   439,     0,     0,   440,     0,   441,
       0,     0,     0,   442,   443,     0,   444,   445,   446,     0,
       0,   447,   448,   449,   450,   451,     0,   452,   453,     0,
     454,   455,   456,     0,     0,   457,     0,   458,     0,   459,
     460,     0,   461,   462,     0,   463,     0,   464,   465,     0,
       0,   466,   467,   468,   469,   470,   471,     0,   472,   473,
     474,     0,   475,   476,   477,   478,     0,   479,   480,     0,
       0,     0,   481,   482,   483,   484,   485,     0,     0,     0,
     486,     0,     0,     0,   487,     0,   488,   489,   490,   491,
     492,   493,     0,   494,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,     0,
       0,   503,     0,     0,     0,   504,   505,   506,     0,     0,
       0,   507,     0,     0,   508,   509,   510,     0,   511,   512,
     513,   514,   515,   516,     0,     0,   517,   518,   519,   520,
       0,   521,   522,     0,     0,   523,   524,   525,   526,     0,
     158,   527,   528,     0,   529,   530,   531,   532,   533,     0,
       0,     0,     0,     0,   534,   535,   536,     0,     0,     0,
     537,   538,   539,   540,     0,   541,   542,   543,     0,   544,
     545,     0,   546,   547,     0,     0,   548,     0,     0,   549,
       0,   550,     0,   551,   552,     0,     0,     0,     0,     0,
       0,   553,     0,     0,   554,   555,     0,     0,     0,   556,
     557,   558,   559,   560,   561,   562,     0,     0,     0,     0,
       0,     0,     0,   563,   564,     0,   565,   566,   567,     0,
     161,   568,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,   202,     0,
     203,   204,   205,   206,   207,   208,   209,     0,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,     0,
     220,   221,   222,   223,   224,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,     0,   229,     0,
     230,     0,   231,     0,     0,   232,   233,   234,     0,     0,
     235,     0,     0,     0,     0,   236,   237,     0,     0,     0,
     238,  2762,   239,     0,   240,     0,     0,     0,     0,   241,
       0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
     247,     0,     0,     0,   248,   249,   250,     0,     0,     0,
     251,   252,     0,   253,   254,     0,   255,   256,   257,     0,
     258,   259,     0,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,     0,     0,   269,   270,   271,   272,     0,
       0,   273,   274,     0,   275,     0,   276,   277,     0,     0,
     278,   279,   280,     0,     0,     0,   281,   282,     0,   283,
       0,   284,     0,   285,   286,   287,   288,   289,   290,   291,
     292,     0,   293,     0,     0,     0,     0,   294,   295,   296,
       0,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,   301,   302,   303,   304,     0,     0,     0,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,     0,     0,
     311,   312,     0,     0,     0,     0,   313,     0,   314,   315,
       0,   316,   317,   318,     0,     0,   319,     0,   320,     0,
       0,   321,   322,   323,   324,     0,     0,   325,     0,     0,
     326,   327,   704,     0,     0,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,     0,     0,     0,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,     0,   383,     0,     0,   384,   385,
     386,   387,   388,   389,   390,     0,     0,   391,     0,   392,
     393,   394,   395,   396,     0,     0,     0,     0,   397,     0,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
       0,   406,   407,     0,     0,     0,     0,     0,   408,     0,
       0,     0,     0,   409,   410,   411,     0,     0,   412,     0,
     413,     0,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,     0,   424,   425,     0,   426,   427,   428,
     429,     0,   430,     0,   431,   432,   433,   434,   435,     0,
     436,   437,   438,   439,     0,     0,   440,     0,   441,     0,
       0,     0,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,   453,     0,   454,
     455,   456,     0,     0,   457,     0,   458,     0,   459,   460,
       0,   461,   462,     0,   463,     0,   464,   465,     0,     0,
     466,   467,   468,   469,   470,   471,     0,   472,   473,   474,
       0,   475,   476,   477,   478,     0,   479,   480,     0,     0,
       0,   481,   482,   483,   484,   485,     0,     0,     0,   486,
       0,     0,     0,   487,     0,   488,   489,   490,   491,   492,
     493,     0,   494,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,     0,     0,
     503,     0,     0,     0,   504,   505,   506,     0,     0,     0,
     507,     0,     0,   508,   509,   510,     0,   511,   512,   513,
     514,   515,   516,     0,     0,   517,   518,   519,   520,     0,
     521,   522,     0,     0,   523,   524,   525,   526,     0,   158,
     527,   528,     0,   529,   530,   531,   532,   533,     0,     0,
       0,     0,     0,   534,   535,   536,     0,     0,     0,   537,
     538,   539,   540,     0,   541,   542,   543,     0,   544,   545,
       0,   546,   547,     0,     0,   548,     0,     0,   549,     0,
     550,     0,   551,   552,     0,     0,     0,     0,     0,     0,
     553,     0,     0,   554,   555,     0,     0,     0,   556,   557,
     558,   559,   560,   561,   562,     0,     0,     0,     0,     0,
       0,     0,   563,   564,     0,   565,   566,   567,     0,   161,
     568,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,  1566,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,   202,     0,   203,
     204,   205,   206,   207,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,     0,   220,
     221,   222,   223,   224,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,     0,   229,     0,   230,
       0,   231,     0,     0,   232,   233,   234,     0,     0,   235,
       0,     0,     0,     0,   236,   237,     0,     0,     0,   238,
       0,   239,     0,   240,     0,     0,     0,     0,   241,     0,
     242,   243,   244,   245,   246,     0,     0,     0,     0,   247,
       0,     0,     0,   248,   249,   250,     0,     0,     0,   251,
     252,     0,   253,   254,     0,   255,   256,   257,     0,   258,
     259,     0,   260,   261,   262,   263,   264,   265,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,     0,     0,
     273,   274,     0,   275,     0,   276,   277,     0,     0,   278,
     279,   280,     0,     0,     0,   281,   282,     0,   283,     0,
     284,     0,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,     0,     0,     0,     0,   294,   295,   296,     0,
     297,     0,     0,     0,   298,   299,     0,     0,     0,   300,
     301,   302,   303,   304,     0,     0,     0,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,     0,     0,   311,
     312,     0,     0,     0,     0,   313,     0,   314,   315,     0,
     316,   317,   318,     0,     0,   319,     0,   320,     0,     0,
     321,   322,   323,   324,     0,     0,   325,     0,     0,   326,
     327,   704,     0,     0,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,     0,     0,     0,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,     0,   383,     0,     0,   384,   385,   386,
     387,   388,   389,   390,     0,     0,   391,     0,   392,   393,
     394,   395,   396,     0,     0,     0,     0,   397,     0,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,     0,
     406,   407,     0,     0,     0,     0,     0,   408,     0,     0,
       0,     0,   409,   410,   411,     0,     0,   412,     0,   413,
       0,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,   426,   427,   428,   429,
       0,   430,     0,   431,   432,   433,   434,   435,     0,   436,
     437,   438,   439,     0,     0,   440,     0,   441,     0,     0,
       0,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,     0,   454,   455,
     456,     0,     0,   457,     0,   458,     0,   459,   460,     0,
     461,   462,     0,   463,     0,   464,   465,     0,     0,   466,
     467,   468,   469,   470,   471,     0,   472,   473,   474,     0,
     475,   476,   477,   478,     0,   479,   480,     0,     0,     0,
     481,   482,   483,   484,   485,     0,     0,     0,   486,     0,
       0,     0,   487,     0,   488,   489,   490,   491,   492,   493,
       0,   494,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,     0,     0,   503,
       0,     0,     0,   504,   505,   506,     0,     0,     0,   507,
       0,     0,   508,   509,   510,     0,   511,   512,   513,   514,
     515,   516,     0,     0,   517,   518,   519,   520,     0,   521,
     522,     0,     0,   523,   524,   525,   526,     0,   158,   527,
     528,     0,   529,   530,   531,   532,   533,     0,     0,     0,
       0,     0,   534,   535,   536,     0,     0,     0,   537,   538,
     539,   540,     0,   541,   542,   543,     0,   544,   545,     0,
     546,   547,     0,     0,   548,     0,     0,   549,     0,   550,
       0,   551,   552,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   554,   555,     0,     0,     0,   556,   557,   558,
     559,   560,   561,   562,     0,     0,     0,     0,     0,     0,
       0,   563,   564,     0,   565,   566,   567,     0,   161,   568,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,   202,     0,   203,   204,
     205,   206,   207,   208,   209,     0,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,   223,   224,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,     0,   229,     0,   230,     0,
     231,     0,     0,   232,   233,   234,     0,     0,   235,     0,
       0,     0,     0,   236,   237,     0,     0,     0,   238,     0,
     239,     0,   240,     0,     0,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,   247,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,   253,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,     0,     0,   269,   270,   271,   272,     0,     0,   273,
     274,     0,   275,     0,   276,   277,     0,     0,   278,   279,
     280,     0,     0,     0,   281,   282,     0,   283,     0,   284,
       0,   285,   286,   287,   288,   289,   290,   291,   292,     0,
     293,     0,     0,     0,     0,   294,   295,   296,     0,   297,
       0,     0,     0,   298,   299,     0,     0,     0,   300,   301,
     302,   303,   304,     0,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,     0,   311,   312,
       0,     0,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,     0,     0,   321,
     322,   323,   324,     0,     0,   325,     0,     0,   326,   327,
     704,     0,     0,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,     0,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,     0,   383,     0,     0,   384,   385,   386,   387,
     388,   389,   390,     0,     0,   391,     0,   392,   393,   394,
     395,   396,     0,     0,     0,     0,   397,     0,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,     0,   406,
     407,     0,     0,     0,     0,     0,   408,     0,     0,     0,
       0,   409,   410,   411,     0,     0,   412,     0,   413,     0,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,   426,   427,   428,   429,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   436,   437,
     438,   439,     0,     0,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,     0,   454,   455,   456,
       0,     0,   457,     0,   458,     0,   459,   460,     0,   461,
     462,     0,   463,     0,   464,   465,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,   474,     0,   475,
     476,   477,   478,     0,   479,   480,     0,     0,     0,   481,
     482,   483,   484,   485,     0,     0,     0,   486,     0,     0,
       0,   487,     0,   488,   489,   490,   491,   492,   493,     0,
     494,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,   505,   506,     0,     0,     0,   507,     0,
       0,   508,   509,   510,     0,   511,   512,   513,   514,   515,
     516,     0,     0,   517,   518,   519,   520,     0,   521,   522,
       0,     0,   523,   524,   525,   526,     0,   158,   527,   528,
       0,   529,   530,   531,   532,   533,     0,     0,     0,     0,
       0,   534,   535,   536,     0,     0,     0,   537,   538,   539,
     540,     0,   541,   542,   543,     0,   544,   545,     0,   546,
     547,     0,     0,   548,     0,     0,   549,     0,   550,     0,
     551,   552,     0,     0,     0,     0,     0,     0,   553,     0,
       0,   554,   555,     0,     0,     0,   556,   557,   558,   559,
     560,   561,   562,     0,     0,     0,     0,     0,     0,     0,
     563,   564,     0,   565,   566,   567,     0,   161,   568,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,   202,     0,   203,   204,   205,
     206,   207,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,     0,   220,   221,   222,
     223,   224,  2938,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,     0,   229,     0,   230,     0,   231,
       0,     0,   232,   233,   234,     0,     0,   235,     0,     0,
       0,     0,   236,   237,     0,     0,     0,   238,     0,   239,
       0,   240,     0,     0,     0,     0,   241,     0,   242,   243,
     244,   245,   246,     0,     0,     0,     0,   247,     0,     0,
       0,   248,   249,   250,     0,     0,     0,   251,   252,     0,
     253,   254,     0,   255,   256,   257,     0,   258,   259,     0,
     260,   261,   262,   263,   264,   265,     0,   266,   267,   268,
       0,  2939,   269,   270,   271,   272,     0,     0,   273,   274,
       0,   275,     0,   276,   277,     0,     0,   278,   279,   280,
       0,     0,     0,   281,   282,     0,   283,     0,   284,     0,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
       0,     0,     0,     0,   294,   295,   296,     0,   297,     0,
       0,     0,   298,   299,     0,     0,     0,   300,   301,   302,
     303,   304,     0,     0,     0,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,     0,     0,   311,   312,     0,
       0,     0,     0,   313,     0,   314,   315,     0,   316,   317,
     318,     0,     0,   319,     0,   320,     0,     0,   321,   322,
     323,   324,     0,     0,   325,     0,     0,   326,   327,     0,
       0,     0,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,     0,     0,     0,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,     0,   383,     0,     0,   384,   385,   386,   387,   388,
     389,   390,     0,     0,   391,     0,   392,   393,   394,   395,
     396,     0,     0,     0,     0,   397,     0,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,     0,   406,   407,
       0,     0,     0,     0,     0,   408,     0,     0,     0,     0,
     409,   410,   411,     0,     0,   412,     0,   413,     0,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,   433,   434,   435,     0,   436,   437,   438,
     439,     0,     0,   440,     0,   441,     0,     0,     0,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   449,
     450,   451,     0,   452,   453,     0,   454,   455,   456,     0,
       0,   457,     0,   458,     0,   459,   460,     0,   461,   462,
       0,   463,     0,   464,   465,     0,     0,   466,   467,   468,
     469,   470,   471,     0,   472,   473,   474,     0,   475,   476,
     477,   478,     0,   479,   480,     0,     0,     0,   481,   482,
     483,   484,   485,     0,     0,     0,   486,     0,     0,     0,
     487,     0,   488,   489,   490,   491,   492,   493,     0,   494,
     495,   496,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,     0,     0,   503,     0,     0,
       0,   504,   505,   506,     0,     0,     0,   507,     0,     0,
     508,   509,   510,     0,   511,   512,   513,   514,   515,   516,
       0,     0,   517,   518,   519,   520,     0,   521,   522,     0,
       0,   523,   524,   525,   526,     0,     0,   527,   528,     0,
     529,   530,   531,   532,   533,     0,     0,     0,     0,     0,
     534,   535,   536,     0,     0,     0,   537,   538,   539,   540,
       0,   541,   542,   543,     0,   544,   545,     0,   546,   547,
       0,     0,   548,     0,     0,   549,     0,   550,     0,   551,
     552,     0,     0,     0,     0,     0,     0,   553,     0,     0,
     554,   555,     0,     0,     0,   556,   557,   558,   559,   560,
     561,   562,     0,     0,     0,     0,     0,     0,     0,   563,
     564,     0,   565,   566,   567,     0,   161,   568,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,  3898,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,   202,     0,   203,   204,   205,   206,
     207,   208,   209,     0,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,   223,
     224,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,     0,   229,     0,   230,     0,   231,     0,
       0,   232,   233,   234,     0,     0,   235,     0,     0,     0,
       0,   236,   237,     0,     0,     0,   238,     0,   239,     0,
     240,     0,     0,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,   247,     0,     0,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,   253,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,     0,
       0,   269,   270,   271,   272,     0,     0,   273,   274,     0,
     275,     0,   276,   277,     0,     0,   278,   279,   280,     0,
       0,     0,   281,   282,     0,   283,     0,   284,     0,   285,
     286,   287,   288,   289,   290,   291,   292,     0,   293,     0,
       0,     0,     0,   294,   295,   296,     0,   297,     0,     0,
       0,   298,   299,     0,     0,     0,   300,   301,   302,   303,
     304,     0,     0,     0,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,     0,     0,   311,   312,     0,     0,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
       0,     0,   319,     0,   320,     0,     0,   321,   322,   323,
     324,     0,     0,   325,     0,     0,   326,   327,     0,     0,
       0,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,     0,     0,     0,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
       0,   383,     0,     0,   384,   385,   386,   387,   388,   389,
     390,     0,     0,   391,     0,   392,   393,   394,   395,   396,
       0,     0,     0,     0,   397,     0,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,     0,   406,   407,     0,
       0,     0,     0,     0,   408,     0,     0,     0,     0,   409,
     410,   411,     0,     0,   412,     0,   413,     0,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,   426,   427,   428,   429,     0,   430,     0,
     431,   432,   433,   434,   435,     0,   436,   437,   438,   439,
       0,     0,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,     0,     0,   447,   448,   449,   450,
     451,     0,   452,   453,     0,   454,   455,   456,     0,     0,
     457,     0,   458,     0,   459,   460,     0,   461,   462,     0,
     463,     0,   464,   465,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,   474,     0,   475,   476,   477,
     478,     0,   479,   480,     0,     0,     0,   481,   482,   483,
     484,   485,     0,     0,     0,   486,     0,     0,     0,   487,
       0,   488,   489,   490,   491,   492,   493,     0,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,   505,   506,     0,     0,     0,   507,     0,     0,   508,
     509,   510,     0,   511,   512,   513,   514,   515,   516,     0,
       0,   517,   518,   519,   520,     0,   521,   522,     0,     0,
     523,   524,   525,   526,     0,   158,   527,   528,     0,   529,
     530,   531,   532,   533,     0,     0,     0,     0,     0,   534,
     535,   536,     0,     0,     0,   537,   538,   539,   540,     0,
     541,   542,   543,     0,   544,   545,     0,   546,   547,     0,
       0,   548,     0,     0,   549,     0,   550,     0,   551,   552,
       0,     0,     0,     0,     0,     0,   553,     0,     0,   554,
     555,     0,     0,     0,   556,   557,   558,   559,   560,   561,
     562,     0,     0,     0,     0,     0,     0,     0,   563,   564,
       0,   565,   566,   567,     0,   161,   568,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,   202,     0,   203,   204,   205,   206,   207,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,     0,   220,   221,   222,   223,   224,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,     0,   229,     0,   230,     0,   231,     0,     0,
     232,   233,   234,     0,     0,   235,     0,     0,     0,     0,
     236,   237,     0,     0,     0,   238,     0,   239,     0,   240,
       0,     0,     0,     0,   241,     0,   242,   243,   244,   245,
     246,     0,     0,     0,     0,   247,     0,     0,     0,   248,
     249,   250,     0,     0,     0,   251,   252,     0,   253,   254,
       0,   255,   256,   257,     0,   258,   259,     0,   260,   261,
     262,   263,   264,   265,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,     0,     0,   273,   274,     0,   275,
       0,   276,   277,     0,     0,   278,   279,   280,     0,     0,
       0,   281,   282,     0,   283,     0,   284,     0,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   293,     0,     0,
       0,     0,   294,   295,   296,     0,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,   301,   302,   303,   304,
       0,     0,     0,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,     0,     0,   311,   312,     0,     0,     0,
       0,   313,     0,   314,   315,     0,   316,   317,   318,     0,
       0,   319,     0,   320,     0,     0,   321,   322,   323,   324,
       0,     0,   325,     0,     0,   326,   327,     0,     0,     0,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,     0,     0,     0,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,     0,   371,     0,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,     0,
     383,     0,     0,   384,   385,   386,   387,   388,   389,   390,
       0,     0,   391,     0,   392,   393,   394,   395,   396,     0,
       0,     0,     0,   397,     0,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,     0,   406,   407,     0,     0,
       0,     0,     0,   408,     0,     0,     0,     0,   409,   410,
     411,     0,     0,   412,     0,   413,     0,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,     0,
       0,   440,     0,   441,     0,     0,     0,   442,   443,     0,
     444,   445,   446,     0,     0,   447,   448,   449,   450,   451,
       0,   452,   453,     0,   454,   455,   456,     0,     0,   457,
       0,   458,     0,   459,   460,     0,   461,   462,     0,   463,
       0,   464,   465,     0,     0,   466,   467,   468,   469,   470,
     471,     0,   472,   473,   474,     0,   475,   476,   477,   478,
       0,   479,   480,     0,     0,     0,   481,   482,   483,   484,
     485,     0,     0,     0,   486,     0,     0,     0,   487,     0,
     488,   489,   490,   491,   492,   493,     0,   494,   495,   496,
     497,   498,   499,     0,     0,     0,   635,     0,     0,   500,
     501,     0,   502,     0,     0,   503,     0,     0,     0,   504,
     505,   506,     0,     0,     0,   507,     0,     0,   508,   509,
     510,     0,   511,   512,   513,   514,   515,   516,     0,     0,
     517,   518,   519,   520,     0,   521,   522,     0,     0,   523,
     524,   525,   526,     0,     0,   527,   528,     0,   529,   530,
     531,   532,   533,     0,     0,     0,     0,     0,   534,   535,
     536,     0,     0,     0,   537,   538,   539,   540,     0,   541,
     542,   543,     0,   544,   545,     0,   546,   547,     0,     0,
     548,     0,     0,   549,     0,   550,     0,   551,   552,     0,
       0,     0,     0,     0,     0,   553,     0,     0,   554,   555,
       0,     0,     0,   556,   557,   558,   559,   560,   561,   562,
       0,     0,     0,     0,     0,     0,     0,   563,   564,     0,
     565,   566,   567,     0,   161,   568,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,   202,     0,   203,   204,   205,   206,   207,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   223,   224,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,     0,   229,     0,   230,     0,   231,     0,     0,   232,
     233,   234,     0,     0,   235,     0,     0,     0,     0,   236,
     237,     0,     0,     0,   238,     0,   239,     0,   240,     0,
       0,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,     0,     0,   273,   274,     0,   275,     0,
     276,   277,     0,     0,   278,   279,   280,     0,     0,     0,
     281,   282,  1227,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,     0,     0,     0,
       0,   294,   295,   296,     0,   297,     0,     0,     0,   298,
     299,     0,     0,     0,   300,   301,   302,   303,   304,     0,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,     0,   311,   312,     0,     0,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   323,   324,     0,
       0,   325,     0,     0,   326,   327,     0,     0,     0,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,     0,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,     0,   383,
       0,     0,   384,   385,   386,   387,   388,   389,   390,     0,
       0,   391,     0,   392,   393,   394,   395,   396,     0,     0,
       0,     0,   397,     0,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,     0,   412,     0,   413,     0,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,   426,   427,   428,   429,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,     0,     0,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,     0,     0,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   465,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,   474,     0,   475,   476,   477,   478,     0,
     479,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,     0,     0,   508,   509,   510,
       0,   511,   512,   513,   514,   515,   516,     0,     0,   517,
     518,   519,   520,     0,   521,   522,     0,     0,   523,   524,
     525,   526,     0,     0,   527,   528,     0,   529,   530,   531,
     532,   533,     0,     0,     0,     0,     0,   534,   535,   536,
       0,     0,     0,   537,   538,   539,   540,     0,   541,   542,
     543,     0,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   551,   552,     0,     0,
       0,     0,     0,     0,   553,     0,     0,   554,   555,     0,
       0,     0,   556,   557,   558,   559,   560,   561,   562,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,   161,   568,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,   202,     0,   203,   204,   205,   206,   207,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,     0,   220,   221,   222,   223,   224,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
       0,   229,     0,   230,     0,   231,     0,     0,   232,   233,
     234,     0,     0,   235,     0,     0,     0,     0,   236,   237,
       0,     0,     0,   238,     0,   239,     0,   240,     0,     0,
       0,     0,   241,     0,   242,   243,   244,   245,   246,     0,
       0,     0,     0,   247,     0,     0,     0,   248,   249,   250,
       0,     0,     0,   251,   252,     0,   253,   254,     0,   255,
     256,   257,     0,   258,   259,     0,   260,   261,   262,   263,
     264,   265,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,     0,     0,   273,   274,     0,   275,     0,   276,
     277,     0,     0,   278,   279,   280,     0,     0,     0,   281,
     282,  1497,   283,     0,   284,     0,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   293,     0,     0,     0,     0,
     294,   295,   296,     0,   297,     0,     0,     0,   298,   299,
       0,     0,     0,   300,   301,   302,   303,   304,     0,     0,
       0,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,     0,     0,   311,   312,     0,     0,     0,     0,   313,
       0,   314,   315,     0,   316,   317,   318,     0,     0,   319,
       0,   320,     0,     0,   321,   322,   323,   324,     0,     0,
     325,     0,     0,   326,   327,     0,     0,     0,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,     0,
       0,     0,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,     0,   383,     0,
       0,   384,  1498,   386,   387,   388,   389,   390,     0,     0,
     391,     0,   392,   393,   394,   395,   396,     0,     0,     0,
       0,   397,     0,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,     0,   406,   407,     0,     0,     0,     0,
       0,   408,     0,     0,     0,     0,   409,   410,   411,     0,
       0,   412,     0,   413,     0,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,   433,
     434,   435,     0,   436,   437,   438,   439,     0,     0,   440,
       0,   441,     0,     0,     0,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,     0,   454,   455,   456,     0,     0,   457,     0,   458,
       0,   459,   460,     0,   461,   462,     0,   463,     0,   464,
     465,     0,     0,   466,   467,   468,   469,   470,   471,     0,
     472,   473,   474,     0,   475,   476,   477,   478,     0,   479,
     480,     0,     0,     0,   481,   482,   483,   484,   485,     0,
       0,     0,   486,     0,     0,     0,   487,     0,   488,   489,
     490,   491,   492,   493,     0,   494,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,     0,     0,   503,     0,     0,     0,   504,   505,   506,
       0,     0,     0,   507,     0,     0,   508,   509,   510,     0,
     511,   512,   513,   514,   515,   516,     0,     0,   517,   518,
     519,   520,     0,   521,   522,     0,     0,   523,   524,   525,
     526,     0,     0,   527,   528,     0,   529,   530,   531,   532,
     533,     0,     0,     0,     0,     0,   534,   535,   536,     0,
       0,     0,   537,   538,   539,   540,     0,   541,   542,   543,
       0,   544,   545,     0,   546,   547,     0,     0,   548,     0,
       0,   549,     0,   550,     0,   551,   552,     0,     0,     0,
       0,     0,     0,   553,     0,     0,   554,   555,     0,     0,
       0,   556,   557,   558,   559,   560,   561,   562,     0,     0,
       0,     0,     0,     0,     0,   563,   564,     0,   565,   566,
     567,     0,   161,   568,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
     202,     0,   203,   204,   205,   206,   207,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,     0,   220,   221,   222,   223,   224,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,     0,
     229,     0,   230,     0,   231,     0,     0,   232,   233,   234,
       0,     0,   235,     0,     0,     0,     0,   236,   237,     0,
       0,     0,   238,  1558,   239,     0,   240,     0,     0,     0,
       0,   241,     0,   242,   243,   244,   245,   246,     0,     0,
       0,     0,   247,     0,     0,     0,   248,   249,   250,     0,
       0,     0,   251,   252,     0,   253,   254,     0,   255,   256,
     257,     0,   258,   259,     0,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,     0,     0,   269,   270,   271,
     272,     0,     0,   273,   274,     0,   275,     0,   276,   277,
       0,     0,   278,   279,   280,     0,     0,     0,   281,   282,
       0,   283,     0,   284,     0,   285,   286,   287,   288,   289,
     290,   291,   292,     0,   293,     0,     0,     0,     0,   294,
     295,   296,     0,   297,     0,     0,     0,   298,   299,     0,
       0,     0,   300,   301,   302,   303,   304,     0,     0,     0,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
       0,     0,   311,   312,     0,     0,     0,     0,   313,     0,
     314,   315,     0,   316,   317,   318,     0,     0,   319,     0,
     320,     0,     0,   321,   322,   323,   324,     0,     0,   325,
       0,     0,   326,   327,     0,     0,     0,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,     0,     0,
       0,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,     0,   383,     0,     0,
     384,   385,   386,   387,   388,   389,   390,     0,     0,   391,
       0,   392,   393,   394,   395,   396,     0,     0,     0,     0,
     397,     0,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,     0,   406,   407,     0,     0,     0,     0,     0,
     408,     0,     0,     0,     0,   409,   410,   411,     0,     0,
     412,     0,   413,     0,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,     0,   424,   425,     0,   426,
     427,   428,   429,     0,   430,     0,   431,   432,   433,   434,
     435,     0,   436,   437,   438,   439,     0,     0,   440,     0,
     441,     0,     0,     0,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,   453,
       0,   454,   455,   456,     0,     0,   457,     0,   458,     0,
     459,   460,     0,   461,   462,     0,   463,     0,   464,   465,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,   474,     0,   475,   476,   477,   478,     0,   479,   480,
       0,     0,     0,   481,   482,   483,   484,   485,     0,     0,
       0,   486,     0,     0,     0,   487,     0,   488,   489,   490,
     491,   492,   493,     0,   494,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
       0,     0,   503,     0,     0,     0,   504,   505,   506,     0,
       0,     0,   507,     0,     0,   508,   509,   510,     0,   511,
     512,   513,   514,   515,   516,     0,     0,   517,   518,   519,
     520,     0,   521,   522,     0,     0,   523,   524,   525,   526,
       0,     0,   527,   528,     0,   529,   530,   531,   532,   533,
       0,     0,     0,     0,     0,   534,   535,   536,     0,     0,
       0,   537,   538,   539,   540,     0,   541,   542,   543,     0,
     544,   545,     0,   546,   547,     0,     0,   548,     0,     0,
     549,     0,   550,     0,   551,   552,     0,     0,     0,     0,
       0,     0,   553,     0,     0,   554,   555,     0,     0,     0,
     556,   557,   558,   559,   560,   561,   562,     0,     0,     0,
       0,     0,     0,     0,   563,   564,     0,   565,   566,   567,
       0,   161,   568,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,   202,
       0,   203,   204,   205,   206,   207,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
       0,   220,   221,   222,   223,   224,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,     0,   229,
       0,   230,     0,   231,     0,     0,   232,   233,   234,     0,
       0,   235,     0,     0,     0,     0,   236,   237,     0,     0,
       0,   238,  1558,   239,     0,   240,     0,     0,     0,     0,
     241,     0,   242,   243,   244,   245,   246,     0,     0,     0,
       0,   247,     0,     0,     0,   248,   249,   250,     0,     0,
       0,   251,   252,     0,   253,   254,     0,   255,   256,   257,
       0,   258,   259,     0,   260,   261,   262,   263,   264,   265,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
       0,     0,   273,   274,     0,   275,     0,   276,   277,     0,
       0,   278,   279,   280,     0,     0,     0,   281,   282,     0,
     283,     0,   284,     0,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,     0,     0,     0,     0,   294,   295,
     296,     0,   297,     0,     0,     0,   298,   299,     0,     0,
       0,   300,   301,   302,   303,   304,     0,     0,     0,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,     0,
       0,   311,   312,     0,     0,     0,     0,   313,     0,   314,
     315,     0,   316,   317,   318,     0,     0,   319,     0,   320,
       0,     0,   321,   322,   323,   324,     0,     0,   325,     0,
       0,   326,   327,     0,     0,     0,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,     0,     0,     0,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,     0,   383,     0,     0,   384,
     385,   386,   387,   388,   389,   390,     0,     0,   391,     0,
     392,   393,   394,   395,   396,     0,     0,     0,     0,   397,
       0,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,     0,   406,   407,     0,     0,     0,     0,     0,   408,
       0,     0,     0,     0,   409,   410,   411,     0,     0,   412,
       0,   413,     0,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,   433,   434,   435,
       0,   436,   437,   438,   439,     0,     0,   440,     0,   441,
       0,     0,     0,   442,   443,     0,   444,   445,   446,     0,
       0,   447,   448,   449,   450,   451,     0,   452,   453,     0,
     454,   455,   456,     0,     0,   457,     0,   458,     0,   459,
     460,     0,   461,   462,     0,   463,     0,   464,   465,     0,
       0,   466,   467,   468,   469,   470,   471,     0,   472,   473,
     474,     0,   475,   476,   477,   478,     0,   479,   480,     0,
       0,     0,   481,   482,   483,   484,   485,     0,     0,     0,
     486,     0,     0,     0,   487,     0,   488,   489,   490,   491,
     492,   493,     0,   494,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,     0,
       0,   503,     0,     0,     0,   504,   505,   506,     0,     0,
       0,   507,     0,     0,   508,   509,   510,     0,   511,   512,
     513,   514,   515,   516,     0,     0,   517,   518,   519,   520,
       0,   521,   522,     0,     0,   523,   524,   525,   526,     0,
       0,   527,   528,     0,   529,   530,   531,   532,   533,     0,
       0,     0,     0,     0,  2193,   535,   536,     0,     0,     0,
     537,   538,   539,   540,     0,   541,   542,   543,     0,   544,
     545,     0,   546,   547,     0,     0,   548,     0,     0,   549,
       0,   550,     0,   551,   552,     0,     0,     0,     0,     0,
       0,   553,     0,     0,   554,   555,     0,     0,     0,   556,
     557,   558,   559,   560,   561,   562,     0,     0,     0,     0,
       0,     0,     0,   563,   564,     0,   565,   566,   567,     0,
     161,   568,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,   170,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,     0,   180,
       0,     0,     0,   181,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,   187,   188,     0,     0,
     189,     0,     0,   190,   191,     0,   192,   193,     0,   194,
     195,     0,   196,   197,   198,   199,   200,   201,   202,     0,
     203,   204,   205,   206,   207,   208,   209,     0,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,   219,     0,
     220,   221,   222,   223,   224,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,     0,   229,     0,
     230,     0,   231,     0,     0,   232,   233,   234,     0,     0,
     235,     0,     0,     0,     0,   236,   237,     0,     0,     0,
     238,  2391,   239,     0,   240,     0,     0,     0,     0,   241,
       0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
     247,     0,     0,     0,   248,   249,   250,     0,     0,     0,
     251,   252,     0,   253,   254,     0,   255,   256,   257,     0,
     258,   259,     0,   260,   261,   262,   263,   264,   265,     0,
     266,   267,   268,     0,     0,   269,   270,   271,   272,     0,
       0,   273,   274,     0,   275,     0,   276,   277,     0,     0,
     278,   279,   280,     0,     0,     0,   281,   282,     0,   283,
       0,   284,     0,   285,   286,   287,   288,   289,   290,   291,
     292,     0,   293,     0,     0,     0,     0,   294,   295,   296,
       0,   297,     0,     0,     0,   298,   299,     0,     0,     0,
     300,   301,   302,   303,   304,     0,     0,     0,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,     0,     0,
     311,   312,     0,     0,     0,     0,   313,     0,   314,   315,
       0,   316,   317,   318,     0,     0,   319,     0,   320,     0,
       0,   321,   322,   323,   324,     0,     0,   325,     0,     0,
     326,   327,     0,     0,     0,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,     0,     0,     0,     0,
       0,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,     0,   383,     0,     0,   384,   385,
     386,   387,   388,   389,   390,     0,     0,   391,     0,   392,
     393,   394,   395,   396,     0,     0,     0,     0,   397,     0,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   405,
       0,   406,   407,     0,     0,     0,     0,     0,   408,     0,
       0,     0,     0,   409,   410,   411,     0,     0,   412,     0,
     413,     0,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,   423,     0,   424,   425,     0,   426,   427,   428,
     429,     0,   430,     0,   431,   432,   433,   434,   435,     0,
     436,   437,   438,   439,     0,     0,   440,     0,   441,     0,
       0,     0,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,   453,     0,   454,
     455,   456,     0,     0,   457,     0,   458,     0,   459,   460,
       0,   461,   462,     0,   463,     0,   464,   465,     0,     0,
     466,   467,   468,   469,   470,   471,     0,   472,   473,   474,
       0,   475,   476,   477,   478,     0,   479,   480,     0,     0,
       0,   481,   482,   483,   484,   485,     0,     0,     0,   486,
       0,     0,     0,   487,     0,   488,   489,   490,   491,   492,
     493,     0,   494,   495,   496,   497,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,     0,     0,
     503,     0,     0,     0,   504,   505,   506,     0,     0,     0,
     507,     0,     0,   508,   509,   510,     0,   511,   512,   513,
     514,   515,   516,     0,     0,   517,   518,   519,   520,     0,
     521,   522,     0,     0,   523,   524,   525,   526,     0,     0,
     527,   528,     0,   529,   530,   531,   532,   533,     0,     0,
       0,     0,     0,   534,   535,   536,     0,     0,     0,   537,
     538,   539,   540,     0,   541,   542,   543,     0,   544,   545,
       0,   546,   547,     0,     0,   548,     0,     0,   549,     0,
     550,     0,   551,   552,     0,     0,     0,     0,     0,     0,
     553,     0,     0,   554,   555,     0,     0,     0,   556,   557,
     558,   559,   560,   561,   562,     0,     0,     0,     0,     0,
       0,     0,   563,   564,     0,   565,   566,   567,     0,   161,
     568,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,   170,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,     0,   180,     0,
       0,     0,   181,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,   187,   188,     0,     0,   189,
       0,     0,   190,   191,     0,   192,   193,     0,   194,   195,
       0,   196,   197,   198,   199,   200,   201,   202,     0,   203,
     204,   205,   206,   207,   208,   209,     0,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,   219,     0,   220,
     221,   222,   223,   224,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,     0,   229,     0,   230,
       0,   231,     0,     0,   232,   233,   234,     0,     0,   235,
       0,     0,     0,     0,   236,   237,     0,     0,     0,   238,
       0,   239,     0,   240,     0,     0,     0,     0,   241,     0,
     242,   243,   244,   245,   246,     0,     0,     0,     0,   247,
       0,     0,     0,   248,   249,   250,     0,     0,     0,   251,
     252,     0,   253,   254,     0,   255,   256,   257,     0,   258,
     259,     0,   260,   261,   262,   263,   264,   265,     0,   266,
     267,   268,     0,     0,   269,   270,   271,   272,     0,     0,
     273,   274,     0,   275,     0,   276,   277,     0,     0,   278,
     279,   280,     0,     0,     0,   281,   282,     0,   283,     0,
     284,     0,   285,   286,   287,   288,   289,   290,   291,   292,
       0,   293,     0,     0,     0,     0,   294,   295,   296,     0,
     297,     0,     0,     0,   298,   299,     0,     0,     0,   300,
     301,   302,   303,   304,     0,     0,     0,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,     0,     0,   311,
     312,     0,     0,     0,     0,   313,     0,   314,   315,     0,
     316,   317,   318,     0,     0,   319,     0,   320,     0,     0,
     321,   322,   323,   324,     0,     0,   325,     0,     0,   326,
     327,     0,     0,     0,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,     0,     0,     0,     0,     0,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,     0,   383,     0,     0,   384,   385,   386,
     387,   388,   389,   390,     0,     0,   391,     0,   392,   393,
     394,   395,   396,     0,     0,     0,     0,   397,     0,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   405,     0,
     406,   407,     0,     0,     0,     0,     0,   408,     0,     0,
       0,     0,   409,   410,   411,     0,     0,   412,     0,   413,
       0,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,   423,     0,   424,   425,     0,   426,   427,   428,   429,
    3521,   430,     0,   431,   432,   433,   434,   435,     0,   436,
     437,   438,   439,     0,     0,   440,     0,   441,     0,     0,
       0,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,     0,   454,   455,
     456,     0,     0,   457,     0,   458,     0,   459,   460,     0,
     461,   462,     0,   463,     0,   464,   465,     0,     0,   466,
     467,   468,   469,   470,   471,     0,   472,   473,   474,     0,
     475,   476,   477,   478,     0,   479,   480,     0,     0,     0,
     481,   482,   483,   484,   485,     0,     0,     0,   486,     0,
       0,     0,   487,     0,   488,   489,   490,   491,   492,   493,
       0,   494,   495,   496,   497,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,     0,     0,   503,
       0,     0,     0,   504,   505,   506,     0,     0,     0,   507,
       0,     0,   508,   509,   510,     0,   511,   512,   513,   514,
     515,   516,     0,     0,   517,   518,   519,   520,     0,   521,
     522,     0,     0,   523,   524,   525,   526,     0,     0,   527,
     528,     0,   529,   530,   531,   532,   533,     0,     0,     0,
       0,     0,   534,   535,   536,     0,     0,     0,   537,   538,
     539,   540,     0,   541,   542,   543,     0,   544,   545,     0,
     546,   547,     0,     0,   548,     0,     0,   549,     0,   550,
       0,   551,   552,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   554,   555,     0,     0,     0,   556,   557,   558,
     559,   560,   561,   562,     0,     0,     0,     0,     0,     0,
       0,   563,   564,     0,   565,   566,   567,     0,   161,   568,
     162,   163,   164,   165,   166,   167,  4034,     0,   168,     0,
       0,     0,   169,     0,     0,   170,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,     0,   180,     0,     0,
       0,   181,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,   187,   188,     0,     0,   189,     0,
       0,   190,   191,     0,   192,   193,     0,   194,   195,     0,
     196,   197,   198,   199,   200,   201,   202,     0,   203,   204,
     205,   206,   207,   208,   209,     0,   210,   211,   212,   213,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,   223,   224,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,     0,   229,     0,   230,     0,
     231,     0,     0,   232,   233,   234,     0,     0,   235,     0,
       0,     0,     0,   236,   237,     0,     0,     0,   238,     0,
     239,     0,   240,     0,     0,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,   247,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,   253,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,   265,     0,   266,   267,
     268,     0,     0,   269,   270,   271,   272,     0,     0,   273,
     274,     0,   275,     0,   276,   277,     0,     0,   278,   279,
     280,     0,     0,     0,   281,   282,     0,   283,     0,   284,
       0,   285,   286,   287,   288,   289,   290,   291,   292,     0,
     293,     0,     0,     0,     0,   294,   295,   296,     0,   297,
       0,     0,     0,   298,   299,     0,     0,     0,   300,   301,
     302,   303,   304,     0,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,     0,   311,   312,
       0,     0,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,     0,     0,   321,
     322,   323,   324,     0,     0,   325,     0,     0,   326,   327,
       0,     0,     0,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,     0,     0,     0,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,     0,   383,     0,     0,   384,   385,   386,   387,
     388,   389,   390,     0,     0,   391,     0,   392,   393,   394,
     395,   396,     0,     0,     0,     0,   397,     0,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   405,     0,   406,
     407,     0,     0,     0,     0,     0,   408,     0,     0,     0,
       0,   409,   410,   411,     0,     0,   412,     0,   413,     0,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
     423,     0,   424,   425,     0,   426,   427,   428,   429,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   436,   437,
     438,   439,     0,     0,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,     0,   454,   455,   456,
       0,     0,   457,     0,   458,     0,   459,   460,     0,   461,
     462,     0,   463,     0,   464,   465,     0,     0,   466,   467,
     468,   469,   470,   471,     0,   472,   473,   474,     0,   475,
     476,   477,   478,     0,   479,   480,     0,     0,     0,   481,
     482,   483,   484,   485,     0,     0,     0,   486,     0,     0,
       0,   487,     0,   488,   489,   490,   491,   492,   493,     0,
     494,   495,   496,   497,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,   505,   506,     0,     0,     0,   507,     0,
       0,   508,   509,   510,     0,   511,   512,   513,   514,   515,
     516,     0,     0,   517,   518,   519,   520,     0,   521,   522,
       0,     0,   523,   524,   525,   526,     0,     0,   527,   528,
       0,   529,   530,   531,   532,   533,     0,     0,     0,     0,
       0,   534,   535,   536,     0,     0,     0,   537,   538,   539,
     540,     0,   541,   542,   543,     0,   544,   545,     0,   546,
     547,     0,     0,   548,     0,     0,   549,     0,   550,     0,
     551,   552,     0,     0,     0,     0,     0,     0,   553,     0,
       0,   554,   555,     0,     0,     0,   556,   557,   558,   559,
     560,   561,   562,     0,     0,     0,     0,     0,     0,     0,
     563,   564,     0,   565,   566,   567,     0,   161,   568,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,   170,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,     0,   180,     0,     0,     0,
     181,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,   187,   188,     0,     0,   189,     0,     0,
     190,   191,     0,   192,   193,     0,   194,   195,     0,   196,
     197,   198,   199,   200,   201,   202,     0,   203,   204,   205,
     206,   207,   208,   209,     0,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,   219,     0,   220,   221,   222,
     223,   224,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,     0,   229,     0,   230,     0,   231,
       0,     0,   232,   233,   234,     0,     0,   235,     0,     0,
       0,     0,   236,   237,     0,     0,     0,   238,     0,   239,
       0,   240,     0,     0,     0,     0,   241,     0,   242,   243,
     244,   245,   246,     0,     0,     0,     0,   247,     0,     0,
       0,   248,   249,   250,     0,     0,     0,   251,   252,     0,
     253,   254,     0,   255,   256,   257,     0,   258,   259,     0,
     260,   261,   262,   263,   264,   265,     0,   266,   267,   268,
       0,     0,   269,   270,   271,   272,     0,     0,   273,   274,
       0,   275,     0,   276,   277,     0,     0,   278,   279,   280,
       0,     0,     0,   281,   282,     0,   283,     0,   284,     0,
     285,   286,   287,   288,   289,   290,   291,   292,     0,   293,
       0,     0,     0,     0,   294,   295,   296,     0,   297,     0,
       0,     0,   298,   299,     0,     0,     0,   300,   301,   302,
     303,   304,     0,     0,     0,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,     0,     0,   311,   312,     0,
       0,     0,     0,   313,     0,   314,   315,     0,   316,   317,
     318,     0,     0,   319,     0,   320,     0,     0,   321,   322,
     323,   324,     0,     0,   325,     0,     0,   326,   327,     0,
       0,     0,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,     0,     0,     0,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,     0,   383,     0,     0,   384,   385,   386,   387,   388,
     389,   390,     0,     0,   391,     0,   392,   393,   394,   395,
     396,     0,     0,     0,     0,   397,     0,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   405,     0,   406,   407,
       0,     0,     0,     0,     0,   408,     0,     0,     0,     0,
     409,   410,   411,     0,     0,   412,     0,   413,     0,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,   423,
       0,   424,   425,     0,   426,   427,   428,   429,     0,   430,
       0,   431,   432,   433,   434,   435,     0,   436,   437,   438,
     439,     0,     0,   440,     0,   441,     0,     0,     0,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   449,
     450,   451,     0,   452,   453,     0,   454,   455,   456,     0,
       0,   457,     0,   458,     0,   459,   460,     0,   461,   462,
       0,   463,     0,   464,   465,     0,     0,   466,   467,   468,
     469,   470,   471,     0,   472,   473,   474,     0,   475,   476,
     477,   478,     0,   479,   480,     0,     0,     0,   481,   482,
     483,   484,   485,     0,     0,     0,   486,     0,     0,     0,
     487,     0,   488,   489,   490,   491,   492,   493,     0,   494,
     495,   496,   497,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,     0,     0,   503,     0,     0,
       0,   504,   505,   506,     0,     0,     0,   507,     0,     0,
     508,   509,   510,     0,   511,   512,   513,   514,   515,   516,
       0,     0,   517,   518,   519,   520,     0,   521,   522,     0,
       0,   523,   524,   525,   526,     0,   158,   527,   528,     0,
     529,   530,   531,   532,   533,     0,     0,     0,     0,     0,
     534,   535,   536,     0,     0,     0,   537,   538,   539,   540,
       0,   541,   542,   543,     0,   544,   545,     0,   546,   547,
       0,     0,   548,     0,     0,   549,     0,   550,     0,   551,
     552,     0,     0,     0,     0,     0,     0,   553,     0,     0,
     554,   555,     0,     0,     0,   556,   557,   558,   559,   560,
     561,   562,     0,     0,     0,     0,     0,     0,     0,   563,
     564,     0,   565,   566,   567,     0,   161,   568,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,   170,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,     0,   180,     0,     0,     0,   181,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,   187,   188,     0,     0,   189,     0,     0,   190,
     191,     0,   192,   193,     0,   194,   195,     0,   196,   197,
     198,   199,   200,   201,   202,     0,   203,   204,   205,   206,
     207,   208,   209,     0,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,   223,
     224,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,     0,   229,     0,   230,     0,   231,     0,
       0,   232,   233,   234,     0,     0,   235,     0,     0,     0,
       0,   236,   237,     0,     0,     0,   238,  4318,   239,     0,
     240,     0,     0,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,   247,     0,     0,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,   253,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   262,   263,   264,   265,     0,   266,   267,   268,     0,
       0,   269,   270,   271,   272,     0,     0,   273,   274,     0,
     275,     0,   276,   277,     0,     0,   278,   279,   280,     0,
       0,     0,   281,   282,     0,   283,     0,   284,     0,   285,
     286,   287,   288,   289,   290,   291,   292,     0,   293,     0,
       0,     0,     0,   294,   295,   296,     0,   297,     0,     0,
       0,   298,   299,     0,     0,     0,   300,   301,   302,   303,
     304,     0,     0,     0,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,     0,     0,   311,   312,     0,     0,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
       0,     0,   319,     0,   320,     0,     0,   321,   322,   323,
     324,     0,     0,   325,     0,     0,   326,   327,     0,     0,
       0,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,     0,     0,     0,     0,     0,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
       0,   383,     0,     0,   384,   385,   386,   387,   388,   389,
     390,     0,     0,   391,     0,   392,   393,   394,   395,   396,
       0,     0,     0,     0,   397,     0,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   405,     0,   406,   407,     0,
       0,     0,     0,     0,   408,     0,     0,     0,     0,   409,
     410,   411,     0,     0,   412,     0,   413,     0,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,   423,     0,
     424,   425,     0,   426,   427,   428,   429,     0,   430,     0,
     431,   432,   433,   434,   435,     0,   436,   437,   438,   439,
       0,     0,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,     0,     0,   447,   448,   449,   450,
     451,     0,   452,   453,     0,   454,   455,   456,     0,     0,
     457,     0,   458,     0,   459,   460,     0,   461,   462,     0,
     463,     0,   464,   465,     0,     0,   466,   467,   468,   469,
     470,   471,     0,   472,   473,   474,     0,   475,   476,   477,
     478,     0,   479,   480,     0,     0,     0,   481,   482,   483,
     484,   485,     0,     0,     0,   486,     0,     0,     0,   487,
       0,   488,   489,   490,   491,   492,   493,     0,   494,   495,
     496,   497,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,   505,   506,     0,     0,     0,   507,     0,     0,   508,
     509,   510,     0,   511,   512,   513,   514,   515,   516,     0,
       0,   517,   518,   519,   520,     0,   521,   522,     0,     0,
     523,   524,   525,   526,     0,     0,   527,   528,     0,   529,
     530,   531,   532,   533,     0,     0,     0,     0,     0,   534,
     535,   536,     0,     0,     0,   537,   538,   539,   540,     0,
     541,   542,   543,     0,   544,   545,     0,   546,   547,     0,
       0,   548,     0,     0,   549,     0,   550,     0,   551,   552,
       0,     0,     0,     0,     0,     0,   553,     0,     0,   554,
     555,     0,     0,     0,   556,   557,   558,   559,   560,   561,
     562,     0,     0,     0,     0,     0,     0,     0,   563,   564,
       0,   565,   566,   567,     0,   161,   568,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,   170,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,     0,   180,     0,     0,     0,   181,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,   187,   188,     0,     0,   189,     0,     0,   190,   191,
       0,   192,   193,     0,   194,   195,     0,   196,   197,   198,
     199,   200,   201,   202,     0,   203,   204,   205,   206,   207,
     208,   209,     0,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,   219,     0,   220,   221,   222,   223,   224,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,     0,   229,     0,   230,     0,   231,     0,     0,
     232,   233,   234,     0,     0,   235,     0,     0,     0,     0,
     236,   237,     0,     0,     0,   238,  4333,   239,     0,   240,
       0,     0,     0,     0,   241,     0,   242,   243,   244,   245,
     246,     0,     0,     0,     0,   247,     0,     0,     0,   248,
     249,   250,     0,     0,     0,   251,   252,     0,   253,   254,
       0,   255,   256,   257,     0,   258,   259,     0,   260,   261,
     262,   263,   264,   265,     0,   266,   267,   268,     0,     0,
     269,   270,   271,   272,     0,     0,   273,   274,     0,   275,
       0,   276,   277,     0,     0,   278,   279,   280,     0,     0,
       0,   281,   282,     0,   283,     0,   284,     0,   285,   286,
     287,   288,   289,   290,   291,   292,     0,   293,     0,     0,
       0,     0,   294,   295,   296,     0,   297,     0,     0,     0,
     298,   299,     0,     0,     0,   300,   301,   302,   303,   304,
       0,     0,     0,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,     0,     0,   311,   312,     0,     0,     0,
       0,   313,     0,   314,   315,     0,   316,   317,   318,     0,
       0,   319,     0,   320,     0,     0,   321,   322,   323,   324,
       0,     0,   325,     0,     0,   326,   327,     0,     0,     0,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,     0,     0,     0,     0,     0,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,     0,   371,     0,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,     0,
     383,     0,     0,   384,   385,   386,   387,   388,   389,   390,
       0,     0,   391,     0,   392,   393,   394,   395,   396,     0,
       0,     0,     0,   397,     0,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   405,     0,   406,   407,     0,     0,
       0,     0,     0,   408,     0,     0,     0,     0,   409,   410,
     411,     0,     0,   412,     0,   413,     0,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,   423,     0,   424,
     425,     0,   426,   427,   428,   429,     0,   430,     0,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,     0,
       0,   440,     0,   441,     0,     0,     0,   442,   443,     0,
     444,   445,   446,     0,     0,   447,   448,   449,   450,   451,
       0,   452,   453,     0,   454,   455,   456,     0,     0,   457,
       0,   458,     0,   459,   460,     0,   461,   462,     0,   463,
       0,   464,   465,     0,     0,   466,   467,   468,   469,   470,
     471,     0,   472,   473,   474,     0,   475,   476,   477,   478,
       0,   479,   480,     0,     0,     0,   481,   482,   483,   484,
     485,     0,     0,     0,   486,     0,     0,     0,   487,     0,
     488,   489,   490,   491,   492,   493,     0,   494,   495,   496,
     497,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,     0,     0,   503,     0,     0,     0,   504,
     505,   506,     0,     0,     0,   507,     0,     0,   508,   509,
     510,     0,   511,   512,   513,   514,   515,   516,     0,     0,
     517,   518,   519,   520,     0,   521,   522,     0,     0,   523,
     524,   525,   526,     0,     0,   527,   528,     0,   529,   530,
     531,   532,   533,     0,     0,     0,     0,     0,   534,   535,
     536,     0,     0,     0,   537,   538,   539,   540,     0,   541,
     542,   543,     0,   544,   545,     0,   546,   547,     0,     0,
     548,     0,     0,   549,     0,   550,     0,   551,   552,     0,
       0,     0,     0,     0,     0,   553,     0,     0,   554,   555,
       0,     0,     0,   556,   557,   558,   559,   560,   561,   562,
       0,     0,     0,     0,     0,     0,     0,   563,   564,     0,
     565,   566,   567,     0,   161,   568,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,   170,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,     0,   180,     0,     0,     0,   181,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
     187,   188,     0,     0,   189,     0,     0,   190,   191,     0,
     192,   193,     0,   194,   195,     0,   196,   197,   198,   199,
     200,   201,   202,     0,   203,   204,   205,   206,   207,   208,
     209,     0,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,   223,   224,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,     0,   229,     0,   230,     0,   231,     0,     0,   232,
     233,   234,     0,     0,   235,     0,     0,     0,     0,   236,
     237,     0,     0,     0,   238,     0,   239,     0,   240,     0,
       0,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,   247,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,   253,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,   265,     0,   266,   267,   268,     0,     0,   269,
     270,   271,   272,     0,     0,   273,   274,     0,   275,     0,
     276,   277,     0,     0,   278,   279,   280,     0,     0,     0,
     281,   282,     0,   283,     0,   284,     0,   285,   286,   287,
     288,   289,   290,   291,   292,     0,   293,     0,     0,     0,
       0,   294,   295,   296,     0,   297,     0,     0,     0,   298,
     299,     0,     0,     0,   300,   301,   302,   303,   304,     0,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,     0,   311,   312,     0,     0,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,     0,     0,
     319,     0,   320,     0,     0,   321,   322,   323,   324,     0,
       0,   325,     0,     0,   326,   327,     0,     0,     0,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,     0,     0,     0,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,     0,   383,
       0,     0,   384,   385,   386,   387,   388,   389,   390,     0,
       0,   391,     0,   392,   393,   394,   395,   396,     0,     0,
       0,     0,   397,     0,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   405,     0,   406,   407,     0,     0,     0,
       0,     0,   408,     0,     0,     0,     0,   409,   410,   411,
       0,     0,   412,     0,   413,     0,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,   423,     0,   424,   425,
       0,   426,   427,   428,   429,  4941,   430,     0,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,     0,     0,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,     0,   454,   455,   456,     0,     0,   457,     0,
     458,     0,   459,   460,     0,   461,   462,     0,   463,     0,
     464,   465,     0,     0,   466,   467,   468,   469,   470,   471,
       0,   472,   473,   474,     0,   475,   476,   477,   478,     0,
     479,   480,     0,     0,     0,   481,   482,   483,   484,   485,
       0,     0,     0,   486,     0,     0,     0,   487,     0,   488,
     489,   490,   491,   492,   493,     0,   494,   495,   496,   497,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,   505,
     506,     0,     0,     0,   507,     0,     0,   508,   509,   510,
       0,   511,   512,   513,   514,   515,   516,     0,     0,   517,
     518,   519,   520,     0,   521,   522,     0,     0,   523,   524,
     525,   526,     0,     0,   527,   528,     0,   529,   530,   531,
     532,   533,     0,     0,     0,     0,     0,   534,   535,   536,
       0,     0,     0,   537,   538,   539,   540,     0,   541,   542,
     543,     0,   544,   545,     0,   546,   547,     0,     0,   548,
       0,     0,   549,     0,   550,     0,   551,   552,     0,     0,
       0,     0,     0,     0,   553,     0,     0,   554,   555,     0,
       0,     0,   556,   557,   558,   559,   560,   561,   562,     0,
       0,     0,     0,     0,     0,     0,   563,   564,     0,   565,
     566,   567,     0,   161,   568,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
     170,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,     0,   180,     0,     0,     0,   181,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,   187,
     188,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     193,     0,   194,   195,     0,   196,   197,   198,   199,   200,
     201,   202,     0,   203,   204,   205,   206,   207,   208,   209,
       0,   210,   211,   212,   213,   214,   215,   216,   217,     0,
     218,   219,     0,   220,   221,   222,   223,   224,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
       0,   229,     0,   230,     0,   231,     0,     0,   232,   233,
     234,     0,     0,   235,     0,     0,     0,     0,   236,   237,
       0,     0,     0,   238,     0,   239,     0,   240,     0,     0,
       0,     0,   241,     0,   242,   243,   244,   245,   246,     0,
       0,     0,     0,   247,     0,     0,     0,   248,   249,   250,
       0,     0,     0,   251,   252,     0,   253,   254,     0,   255,
     256,   257,     0,   258,   259,     0,   260,   261,   262,   263,
     264,   265,     0,   266,   267,   268,     0,     0,   269,   270,
     271,   272,     0,     0,   273,   274,     0,   275,     0,   276,
     277,     0,     0,   278,   279,   280,     0,     0,     0,   281,
     282,     0,   283,     0,   284,     0,   285,   286,   287,   288,
     289,   290,   291,   292,     0,   293,     0,     0,     0,     0,
     294,   295,   296,     0,   297,     0,     0,     0,   298,   299,
       0,     0,     0,   300,   301,   302,   303,   304,     0,     0,
       0,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,     0,     0,   311,   312,     0,     0,     0,     0,   313,
       0,   314,   315,     0,   316,   317,   318,     0,     0,   319,
       0,   320,     0,     0,   321,   322,   323,   324,     0,     0,
     325,     0,     0,   326,   327,     0,     0,     0,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,     0,
       0,     0,     0,     0,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,     0,   383,     0,
       0,   384,   385,   386,   387,   388,   389,   390,     0,     0,
     391,     0,   392,   393,   394,   395,   396,     0,     0,     0,
       0,   397,     0,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   405,     0,   406,   407,     0,     0,     0,     0,
       0,   408,     0,     0,     0,     0,   409,   410,   411,     0,
       0,   412,     0,   413,     0,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,   423,     0,   424,   425,     0,
     426,   427,   428,   429,     0,   430,     0,   431,   432,   433,
     434,   435,     0,   436,   437,   438,   439,     0,     0,   440,
       0,   441,     0,     0,     0,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,     0,   454,   455,   456,     0,     0,   457,     0,   458,
       0,   459,   460,     0,   461,   462,     0,   463,     0,   464,
     465,     0,     0,   466,   467,   468,   469,   470,   471,     0,
     472,   473,   474,     0,   475,   476,   477,   478,     0,   479,
     480,     0,     0,     0,   481,   482,   483,   484,   485,     0,
       0,     0,   486,     0,     0,     0,   487,     0,   488,   489,
     490,   491,   492,   493,     0,   494,   495,   496,   497,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,     0,     0,   503,     0,     0,     0,   504,   505,   506,
       0,     0,     0,   507,     0,     0,   508,   509,   510,     0,
     511,   512,   513,   514,   515,   516,     0,     0,   517,   518,
     519,   520,     0,   521,   522,     0,     0,   523,   524,   525,
     526,     0,     0,   527,   528,     0,   529,   530,   531,   532,
     533,     0,     0,     0,     0,     0,   534,   535,   536,     0,
       0,     0,   537,   538,   539,   540,     0,   541,   542,   543,
       0,   544,   545,     0,   546,   547,     0,     0,   548,     0,
       0,   549,     0,   550,     0,   551,   552,     0,     0,     0,
       0,     0,     0,   553,     0,     0,   554,   555,     0,     0,
       0,   556,   557,   558,   559,   560,   561,   562,     0,     0,
       0,     0,     0,     0,     0,   563,   564,     0,   565,   566,
     567,     0,   161,   568,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,   170,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
       0,   180,     0,     0,     0,   181,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,   187,   188,
       0,     0,   189,     0,     0,   190,   191,     0,   192,   193,
       0,   194,   195,     0,   196,   197,   198,   199,   200,   201,
     202,     0,   203,   204,   205,   206,   207,   208,   209,     0,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
     219,     0,   220,   221,   222,   223,   224,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,     0,
     229,     0,   230,     0,   231,     0,     0,   232,   233,   234,
       0,     0,   235,     0,     0,     0,     0,   236,   237,     0,
       0,     0,   238,     0,   239,     0,   240,     0,     0,     0,
       0,   241,     0,   242,   243,   244,   245,   246,     0,     0,
       0,     0,   247,     0,     0,     0,   248,   249,   250,     0,
       0,     0,   251,   252,     0,   253,   254,     0,   255,   256,
     257,     0,   258,   259,     0,   260,   261,   262,   263,   264,
     265,     0,   266,   267,   268,     0,     0,   269,   270,   271,
     272,     0,     0,   273,   274,     0,   275,     0,   276,   277,
       0,     0,   278,   279,   280,     0,     0,     0,   281,   282,
       0,   283,     0,   284,     0,   285,   286,   287,   288,   289,
     290,   291,   292,     0,   293,     0,     0,     0,     0,   294,
     295,   296,     0,   297,     0,     0,     0,   298,   299,     0,
       0,     0,   300,   301,   302,   303,   304,     0,     0,     0,
     305,   601,   307,   308,   309,     0,     0,   310,     0,     0,
       0,     0,   311,   312,     0,     0,     0,     0,   313,     0,
     314,   315,     0,   316,   317,   318,     0,     0,   319,     0,
     320,     0,     0,   321,   322,   323,   324,     0,     0,   325,
       0,     0,   326,   327,     0,     0,     0,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,     0,     0,
       0,     0,     0,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,     0,   383,     0,     0,
     384,   385,   386,   387,   388,   389,   390,     0,     0,   391,
       0,   392,   393,   394,   395,   396,     0,     0,     0,     0,
     397,     0,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   405,     0,   406,   407,     0,     0,     0,     0,     0,
     408,     0,     0,     0,     0,   409,   410,   411,     0,     0,
     412,     0,   413,     0,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,   423,     0,   424,   425,     0,   426,
     427,   428,   429,     0,   430,     0,   431,   432,   433,   434,
     435,     0,   436,   437,   438,   439,     0,     0,   440,     0,
     441,     0,     0,     0,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,   453,
       0,   454,   455,   456,     0,     0,   457,     0,   458,     0,
     459,   460,     0,   461,   462,     0,   463,     0,   464,   465,
       0,     0,   466,   467,   468,   469,   470,   471,     0,   472,
     473,   474,     0,   475,   476,   477,   478,     0,   479,   480,
       0,     0,     0,   481,   482,   483,   484,   485,     0,     0,
       0,   486,     0,     0,     0,   487,     0,   488,   489,   490,
     491,   492,   493,     0,   494,   495,   496,   497,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
       0,     0,   503,     0,     0,     0,   504,   505,   506,     0,
       0,     0,   507,     0,     0,   508,   509,   510,     0,   511,
     512,   513,   514,   515,   516,     0,     0,   517,   518,   519,
     520,     0,   521,   522,     0,     0,   523,   524,   525,   526,
       0,     0,   527,   528,     0,   529,   530,   531,   532,   533,
       0,     0,     0,     0,     0,   534,   535,   536,     0,     0,
       0,   537,   538,   539,   540,     0,   541,   542,   543,     0,
     544,   545,     0,   546,   547,     0,     0,   548,     0,     0,
     549,     0,   550,     0,   551,   552,     0,     0,     0,     0,
       0,     0,   553,     0,     0,   554,   555,     0,     0,     0,
     556,   557,   558,   559,   560,   561,   562,     0,     0,     0,
       0,     0,     0,     0,   563,   564,     0,   565,   566,   567,
       0,   161,   568,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,   170,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,     0,
     180,     0,     0,     0,   181,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,   187,   188,     0,
       0,   189,     0,     0,   190,   191,     0,   192,   193,     0,
     194,   195,     0,   196,   197,   198,   199,   200,   201,   202,
       0,   203,   204,   205,   206,   207,   208,   209,     0,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,   219,
       0,   220,   221,   222,   223,   224,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,     0,   229,
       0,   230,     0,   231,     0,     0,   232,   233,   234,     0,
       0,   235,     0,     0,     0,     0,   236,   237,     0,     0,
       0,   238,     0,   239,     0,   240,     0,     0,     0,     0,
     241,     0,   242,   243,   244,   245,   246,     0,     0,     0,
       0,   247,     0,     0,     0,   248,   249,   250,     0,     0,
       0,   251,   252,     0,   253,   254,     0,   255,   256,   257,
       0,   258,   259,     0,   260,   261,   262,   263,   264,   265,
       0,   266,   267,   268,     0,     0,   269,   270,   271,   272,
       0,     0,   273,   274,     0,   275,     0,  2089,   277,     0,
       0,   278,   279,   280,     0,     0,     0,   281,   282,     0,
     283,     0,   284,     0,   285,   286,   287,   288,   289,   290,
     291,   292,     0,   293,     0,     0,     0,     0,   294,   295,
     296,     0,   297,     0,     0,     0,   298,   299,     0,     0,
       0,   300,   301,   302,   303,   304,     0,     0,     0,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,     0,
       0,   311,   312,     0,     0,     0,     0,   313,     0,   314,
     315,     0,   316,   317,   318,     0,     0,   319,     0,   320,
       0,     0,   321,   322,   323,   324,     0,     0,   325,     0,
       0,   326,   327,     0,     0,     0,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,     0,     0,     0,
       0,     0,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,     0,   383,     0,     0,   384,
    2090,   386,   387,   388,   389,   390,     0,     0,   391,     0,
     392,   393,   394,   395,   396,     0,     0,     0,     0,   397,
       0,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     405,     0,   406,   407,     0,     0,     0,     0,     0,   408,
       0,     0,     0,     0,   409,   410,   411,     0,     0,   412,
       0,   413,     0,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,   423,     0,   424,   425,     0,   426,   427,
     428,   429,     0,   430,     0,   431,   432,   433,   434,   435,
       0,   436,   437,   438,   439,     0,     0,   440,     0,   441,
       0,     0,     0,   442,   443,     0,   444,   445,   446,     0,
       0,   447,   448,   449,   450,   451,     0,   452,   453,     0,
     454,   455,   456,     0,     0,   457,     0,   458,     0,   459,
     460,     0,   461,   462,     0,   463,     0,   464,   465,     0,
       0,   466,   467,   468,   469,   470,   471,     0,   472,   473,
     474,     0,   475,   476,   477,   478,     0,   479,   480,     0,
       0,     0,   481,   482,   483,   484,   485,     0,     0,     0,
     486,     0,     0,     0,   487,     0,   488,   489,   490,   491,
     492,   493,     0,   494,   495,   496,   497,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,     0,
       0,   503,     0,     0,     0,   504,   505,   506,     0,     0,
       0,   507,     0,     0,   508,   509,   510,     0,   511,   512,
     513,   514,   515,   516,     0,     0,   517,   518,   519,   520,
       0,   521,   522,     0,     0,   523,   524,   525,   526,     0,
       0,   527,   528,     0,   529,   530,   531,   532,   533,     0,
       0,     0,     0,     0,   534,   535,   536,     0,     0,     0,
     537,   538,   539,   540,     0,   541,   542,   543,     0,   544,
     545,     0,   546,   547,     0,     0,   548,     0,     0,   549,
       0,   550,     0,   551,   552,     0,     0,     0,     0,     0,
       0,   553,     0,     0,   554,   555,     0,     0,     0,   556,
     557,   558,   559,   560,   561,   562,     0,     0,     0,     0,
       0,     0,     0,   563,   564,     0,   565,   566,   567,     0,
     161,   568,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,     0,     0,   984,
       0,     0,     0,     0,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,     0,     0,     0,     0,
     189,     7,     0,   190,   191,     0,   192,     0,     0,     0,
       0,     0,   196,   197,   198,   985,   200,   201,   202,     0,
     203,   204,     0,     0,     0,     0,     0,     0,   210,     0,
     212,     0,   214,   215,   216,   217,     0,   218,   219,     0,
     220,   221,   222,     0,   224,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,     0,   229,     0,
     230,     0,   231,     0,     0,   232,   233,   234,     0,     0,
     235,     0,     0,     0,     0,   236,     0,     0,     0,     0,
     238,     0,   239,     0,   240,     0,     0,     0,     0,   241,
       0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
       0,     0,     0,     0,   248,   249,   250,     0,  -393,  -393,
     251,   252,     0,  -393,   254,     0,   255,   256,   257,     0,
     258,   259,     0,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   268,     0,     0,   269,   270,   271,   272,     0,
       0,   273,   274,   986,   275,     0,   276,   277,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   282,     0,   283,
       0,   284,     0,   285,   286,   287,   288,   289,     0,   291,
     292,     0,   293,     0,     0,     0,     0,     0,   295,   296,
       0,     0,     0,     0,     0,     0,   299,     0,     0,     0,
     300,   301,   302,   303,   304,    26,     0,     0,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,     0,     0,
     311,     0,     0,     0,     0,     0,   313,     0,   314,   315,
       0,   316,   317,   318,   987,     0,   319,     0,   320,     0,
       0,     0,   322,   323,   324,     0,     0,   325,   988,     0,
     326,   327,     0,     0,     0,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,     0,     0,     0,     0,
      32,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,     0,   383,     0,     0,   384,   385,
     386,   387,   388,   389,   390,     0,     0,   391,     0,     0,
     393,   394,   395,   396,     0,     0,     0,     0,   397,     0,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   989,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   410,   411,     0,     0,     0,     0,
     413,     0,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,     0,     0,     0,     0,     0,     0,   427,   428,
     429,     0,   430,     0,   431,   432,   433,   434,   435,     0,
     436,   437,   438,   439,     0,     0,   440,     0,   441,     0,
       0,     0,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,     0,     0,   454,
       0,   456,    41,     0,   457,     0,     0,     0,   459,     0,
       0,   461,   462,     0,   463,   990,   464,   465,     0,     0,
     466,     0,   468,   469,   470,   471,     0,   472,   473,   474,
       0,   475,     0,   477,   478,     0,   479,     0,     0,     0,
       0,   481,   482,   483,   484,     0,     0,     0,     0,   486,
       0,     0,     0,     0,     0,     0,   489,     0,     0,   492,
     493,     0,   494,     0,   496,     0,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,     0,     0,
     503,     0,     0,     0,   504,     0,   506,     0,     0,     0,
     507,     0,     0,     0,   509,     0,     0,   511,   512,   513,
     514,   515,   516,     0,     0,   517,   518,   519,   520,     0,
     521,   522,     0,     0,   523,   524,   525,   526,     0,     0,
     527,   528,     0,     0,   530,   531,   532,   533,     0,     0,
       0,     0,     0,   534,   535,   536,     0,     0,     0,     0,
     538,   539,   540,     0,     0,   542,   543,     0,   544,   545,
       0,     0,     0,     0,     0,   548,     0,     0,   549,     0,
       0,     0,   551,   552,     0,     0,     0,     0,     0,     0,
     553,     0,     0,   554,   555,     0,     0,     0,   556,   557,
     558,   559,   560,   561,   562,     0,     0,     0,    59,     0,
       0,     0,   563,     0,     0,   565,     0,   567,     0,   161,
     568,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,     0,   984,     0,
       0,     0,     0,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,     0,     0,     0,     0,   189,
       7,     0,   190,   191,     0,   192,     0,     0,     0,     0,
       0,   196,   197,   198,   985,   200,   201,   202,     0,   203,
     204,     0,     0,     0,     0,     0,     0,   210,     0,   212,
       0,   214,   215,   216,   217,     0,   218,   219,     0,   220,
     221,   222,     0,   224,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,     0,   229,     0,   230,
       0,   231,     0,     0,   232,   233,   234,     0,     0,   235,
       0,     0,     0,     0,   236,     0,     0,     0,     0,   238,
       0,   239,     0,   240,     0,     0,     0,     0,   241,     0,
     242,   243,   244,   245,   246,     0,     0,     0,     0,     0,
       0,     0,     0,   248,   249,   250,     0,  -413,     0,   251,
     252,     0,  -413,   254,     0,   255,   256,   257,     0,   258,
     259,     0,   260,   261,   262,   263,   264,     0,     0,     0,
       0,   268,     0,     0,   269,   270,   271,   272,     0,     0,
     273,   274,   986,   275,     0,   276,   277,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   282,     0,   283,     0,
     284,     0,   285,   286,   287,   288,   289,     0,   291,   292,
       0,   293,     0,     0,     0,     0,     0,   295,   296,     0,
       0,     0,     0,     0,     0,   299,     0,     0,     0,   300,
     301,   302,   303,   304,    26,     0,     0,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,     0,     0,   311,
       0,     0,     0,     0,     0,   313,     0,   314,   315,     0,
     316,   317,   318,   987,     0,   319,     0,   320,     0,     0,
       0,   322,   323,   324,     0,     0,   325,   988,     0,   326,
     327,     0,     0,     0,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,     0,     0,     0,     0,    32,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,     0,   383,     0,     0,   384,   385,   386,
     387,   388,   389,   390,     0,     0,   391,     0,     0,   393,
     394,   395,   396,     0,     0,     0,     0,   397,     0,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   989,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   410,   411,     0,     0,     0,     0,   413,
       0,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,     0,   431,   432,   433,   434,   435,     0,   436,
     437,   438,   439,     0,     0,   440,     0,   441,     0,     0,
       0,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,     0,     0,   454,     0,
     456,    41,     0,   457,     0,     0,     0,   459,     0,     0,
     461,   462,     0,   463,   990,   464,   465,     0,     0,   466,
       0,   468,   469,   470,   471,     0,   472,   473,   474,     0,
     475,     0,   477,   478,     0,   479,     0,     0,     0,     0,
     481,   482,   483,   484,     0,     0,     0,     0,   486,     0,
       0,     0,     0,     0,     0,   489,     0,     0,   492,   493,
       0,   494,     0,   496,     0,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,     0,     0,   503,
       0,     0,     0,   504,     0,   506,     0,     0,     0,   507,
       0,     0,     0,   509,     0,     0,   511,   512,   513,   514,
     515,   516,     0,     0,   517,   518,   519,   520,     0,   521,
     522,     0,     0,   523,   524,   525,   526,     0,     0,   527,
     528,     0,     0,   530,   531,   532,   533,     0,     0,     0,
       0,     0,   534,   535,   536,     0,     0,     0,     0,   538,
     539,   540,     0,     0,   542,   543,     0,   544,   545,     0,
       0,     0,     0,     0,   548,     0,     0,   549,     0,     0,
       0,   551,   552,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   554,   555,     0,     0,     0,   556,   557,   558,
     559,   560,   561,   562,  -413,     0,     0,    59,     0,     0,
       0,   563,     0,     0,   565,     0,   567,     0,   161,   568,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,     0,     0,   984,     0,     0,
       0,     0,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,     0,     0,     0,     0,   189,     7,
       0,   190,   191,     0,   192,     0,     0,     0,     0,     0,
     196,   197,   198,   985,   200,   201,   202,     0,   203,   204,
       0,     0,     0,     0,     0,     0,   210,     0,   212,     0,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,     0,   224,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,     0,   229,     0,   230,     0,
     231,     0,     0,   232,   233,   234,     0,     0,   235,     0,
       0,     0,     0,   236,     0,     0,     0,     0,   238,     0,
     239,     0,   240,     0,     0,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,     0,     0,
       0,     0,   248,   249,   250,     0,  -410,     0,   251,   252,
       0,  -410,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,     0,     0,     0,     0,
     268,     0,     0,   269,   270,   271,   272,     0,     0,   273,
     274,   986,   275,     0,   276,   277,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   282,     0,   283,     0,   284,
       0,   285,   286,   287,   288,   289,     0,   291,   292,     0,
     293,     0,     0,     0,     0,     0,   295,   296,     0,     0,
       0,     0,     0,     0,   299,     0,     0,     0,   300,   301,
     302,   303,   304,    26,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,     0,   311,     0,
       0,     0,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,   987,     0,   319,     0,   320,     0,     0,     0,
     322,   323,   324,     0,     0,   325,   988,     0,   326,   327,
       0,     0,     0,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,     0,     0,    32,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,     0,   383,     0,     0,   384,   385,   386,   387,
     388,   389,   390,     0,     0,   391,     0,     0,   393,   394,
     395,   396,     0,     0,     0,     0,   397,     0,     0,   398,
     399,   400,   401,     0,   402,   403,   404,   989,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   410,   411,     0,     0,     0,     0,   413,     0,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,     0,     0,     0,     0,   427,   428,   429,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   436,   437,
     438,   439,     0,     0,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,     0,     0,   454,     0,   456,
      41,     0,   457,     0,     0,     0,   459,     0,     0,   461,
     462,     0,   463,   990,   464,   465,     0,     0,   466,     0,
     468,   469,   470,   471,     0,   472,   473,   474,     0,   475,
       0,   477,   478,     0,   479,     0,     0,     0,     0,   481,
     482,   483,   484,     0,     0,     0,     0,   486,     0,     0,
       0,     0,     0,     0,   489,     0,     0,   492,   493,     0,
     494,     0,   496,     0,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,     0,   506,     0,     0,     0,   507,     0,
       0,     0,   509,     0,     0,   511,   512,   513,   514,   515,
     516,     0,     0,   517,   518,   519,   520,     0,   521,   522,
       0,     0,   523,   524,   525,   526,     0,     0,   527,   528,
       0,     0,   530,   531,   532,   533,     0,     0,     0,     0,
       0,   534,   535,   536,     0,     0,     0,     0,   538,   539,
     540,     0,     0,   542,   543,     0,   544,   545,     0,     0,
       0,     0,     0,   548,     0,     0,   549,     0,     0,     0,
     551,   552,     0,     0,     0,     0,     0,     0,   553,     0,
       0,   554,   555,     0,     0,     0,   556,   557,   558,   559,
     560,   561,   562,  -410,     0,     0,    59,     0,     0,     0,
     563,     0,     0,   565,     0,   567,     0,   161,   568,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,     0,     0,   984,     0,     0,     0,
       0,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,     0,     0,     0,     0,   189,     7,     0,
     190,   191,     0,   192,     0,     0,     0,     0,     0,   196,
     197,   198,   985,   200,   201,   202,     0,   203,   204,     0,
       0,     0,     0,     0,     0,   210,     0,   212,     0,   214,
     215,   216,   217,     0,   218,   219,     0,   220,   221,   222,
       0,   224,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,     0,   229,     0,   230,     0,   231,
       0,     0,   232,   233,   234,     0,     0,   235,     0,     0,
       0,     0,   236,     0,     0,     0,     0,   238,     0,   239,
       0,   240,     0,     0,     0,     0,   241,     0,   242,   243,
     244,   245,   246,     0,     0,     0,     0,     0,     0,     0,
       0,   248,   249,   250,     0,     0,     0,   251,   252,     0,
    1504,   254,     0,   255,   256,   257,     0,   258,   259,     0,
     260,   261,   262,   263,   264,     0,     0,     0,     0,   268,
       0,     0,   269,   270,   271,   272,     0,     0,   273,   274,
     986,   275,     0,   276,   277,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,     0,   283,     0,   284,     0,
     285,   286,   287,   288,   289,     0,   291,   292,     0,   293,
       0,     0,     0,     0,     0,   295,   296,     0,     0,     0,
       0,     0,     0,   299,     0,     0,     0,   300,   301,   302,
     303,   304,    26,     0,     0,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,     0,     0,   311,     0,     0,
       0,     0,     0,   313,     0,   314,   315,     0,   316,   317,
     318,   987,     0,   319,     0,   320,     0,     0,     0,   322,
     323,   324,     0,     0,   325,   988,     0,   326,   327,     0,
       0,     0,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,     0,     0,     0,     0,    32,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,     0,   383,     0,     0,   384,   385,   386,   387,   388,
     389,   390,     0,     0,   391,     0,     0,   393,   394,   395,
     396,     0,     0,     0,     0,   397,     0,     0,   398,   399,
     400,   401,     0,   402,   403,   404,   989,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   410,   411,     0,     0,     0,     0,   413,     0,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,     0,     0,     0,     0,   427,   428,   429,     0,   430,
       0,   431,   432,   433,   434,   435,     0,   436,   437,   438,
     439,     0,     0,   440,     0,   441,     0,     0,     0,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   449,
     450,   451,     0,   452,     0,     0,   454,     0,   456,    41,
       0,   457,     0,     0,     0,   459,     0,     0,   461,   462,
       0,   463,   990,   464,   465,     0,     0,   466,     0,   468,
     469,   470,   471,     0,   472,   473,   474,     0,   475,     0,
     477,   478,     0,   479,     0,     0,     0,     0,   481,   482,
     483,   484,     0,     0,     0,     0,   486,     0,     0,     0,
       0,     0,     0,   489,     0,     0,   492,   493,     0,   494,
       0,   496,     0,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,     0,     0,   503,     0,     0,
       0,   504,     0,   506,     0,     0,     0,   507,     0,     0,
       0,   509,     0,     0,   511,   512,   513,   514,   515,   516,
       0,     0,   517,   518,   519,   520,     0,   521,   522,     0,
       0,   523,   524,   525,   526,     0,     0,   527,   528,     0,
       0,   530,   531,   532,   533,     0,     0,     0,     0,     0,
     534,   535,   536,     0,     0,     0,     0,   538,   539,   540,
       0,     0,   542,   543,     0,   544,   545,     0,     0,     0,
       0,     0,   548,     0,     0,   549,     0,     0,     0,   551,
     552,     0,     0,     0,     0,     0,     0,   553,     0,     0,
     554,   555,     0,     0,     0,   556,   557,   558,   559,   560,
     561,   562,     0,     0,     0,    59,     0,     0,     0,   563,
       0,     0,   565,     0,   567,     0,   161,   568,   162,   163,
     164,   165,   166,   167,     0,     0,   168,     0,     0,     0,
     169,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,     0,     0,   984,     0,     0,     0,     0,
       0,     0,     0,   182,     0,     0,   183,   184,   185,     0,
     186,     0,     0,     0,     0,     0,   189,     7,     0,   190,
     191,     0,   192,     0,     0,     0,     0,     0,   196,   197,
     198,   985,   200,   201,   202,     0,   203,   204,     0,     0,
       0,     0,     0,     0,   210,     0,   212,     0,   214,   215,
     216,   217,     0,   218,   219,     0,   220,   221,   222,     0,
     224,     0,   225,     0,     0,   226,     0,     0,   227,     0,
       0,   228,     0,     0,   229,     0,   230,     0,   231,     0,
       0,   232,   233,   234,     0,     0,   235,     0,     0,     0,
       0,   236,     0,     0,     0,     0,   238,     0,   239,     0,
     240,     0,     0,     0,     0,   241,     0,   242,   243,   244,
     245,   246,     0,     0,     0,     0,     0,     0,     0,     0,
     248,   249,   250,     0,     0,     0,   251,   252,     0,  -415,
     254,     0,   255,   256,   257,     0,   258,   259,     0,   260,
     261,   262,   263,   264,     0,     0,     0,     0,   268,     0,
       0,   269,   270,   271,   272,     0,     0,   273,   274,   986,
     275,     0,   276,   277,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   282,     0,   283,     0,   284,     0,   285,
     286,   287,   288,   289,     0,   291,   292,     0,   293,     0,
       0,     0,     0,     0,   295,   296,     0,     0,     0,     0,
       0,     0,   299,     0,     0,     0,   300,   301,   302,   303,
     304,    26,     0,     0,   305,   306,   307,   308,   309,     0,
       0,   310,     0,     0,     0,     0,   311,     0,     0,     0,
       0,     0,   313,     0,   314,   315,     0,   316,   317,   318,
     987,     0,   319,     0,   320,     0,     0,     0,   322,   323,
     324,     0,     0,   325,   988,     0,   326,   327,     0,     0,
       0,     0,     0,   328,   329,     0,   330,     0,   331,     0,
     332,   333,     0,     0,     0,     0,    32,     0,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
       0,   355,   356,   357,   358,     0,   359,   360,   361,     0,
       0,     0,     0,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,     0,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,
       0,   383,     0,     0,   384,   385,   386,   387,   388,   389,
     390,     0,     0,   391,     0,     0,   393,   394,   395,   396,
       0,     0,     0,     0,   397,     0,     0,   398,   399,   400,
     401,     0,   402,   403,   404,   989,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     410,   411,     0,     0,     0,     0,   413,     0,   414,   415,
     416,     0,   417,   418,   419,   420,   421,   422,     0,     0,
       0,     0,     0,     0,   427,   428,   429,     0,   430,     0,
     431,   432,   433,   434,   435,     0,   436,   437,   438,   439,
       0,     0,   440,     0,   441,     0,     0,     0,   442,   443,
       0,   444,   445,   446,     0,     0,   447,   448,   449,   450,
     451,     0,   452,     0,     0,   454,     0,   456,    41,     0,
     457,     0,     0,     0,   459,     0,     0,   461,   462,     0,
     463,   990,   464,   465,     0,     0,   466,     0,   468,   469,
     470,   471,     0,   472,   473,   474,     0,   475,     0,   477,
     478,     0,   479,     0,     0,     0,     0,   481,   482,   483,
     484,     0,     0,     0,     0,   486,     0,     0,     0,     0,
       0,     0,   489,     0,     0,   492,   493,     0,   494,     0,
     496,     0,   498,   499,     0,     0,     0,     0,     0,     0,
     500,   501,     0,   502,     0,     0,   503,     0,     0,     0,
     504,     0,   506,     0,     0,     0,   507,     0,     0,     0,
     509,     0,     0,   511,   512,   513,   514,   515,   516,     0,
       0,   517,   518,   519,   520,     0,   521,   522,     0,     0,
     523,   524,   525,   526,     0,     0,   527,   528,     0,     0,
     530,   531,   532,   533,     0,     0,     0,     0,     0,   534,
     535,   536,     0,     0,     0,     0,   538,   539,   540,     0,
       0,   542,   543,     0,   544,   545,     0,     0,     0,     0,
       0,   548,     0,     0,   549,     0,     0,     0,   551,   552,
       0,     0,     0,     0,     0,     0,   553,     0,     0,   554,
     555,     0,     0,     0,   556,   557,   558,   559,   560,   561,
     562,     0,     0,     0,    59,     0,     0,     0,   563,     0,
       0,   565,     0,   567,     0,   161,   568,   162,   163,   164,
     165,   166,   167,     0,     0,   168,     0,     0,     0,   169,
       0,     0,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,     0,     0,   984,     0,     0,     0,     0,     0,
       0,     0,   182,     0,     0,   183,   184,   185,     0,   186,
       0,     0,     0,     0,     0,   189,     7,     0,   190,   191,
       0,   192,     0,     0,     0,     0,     0,   196,   197,   198,
     985,   200,   201,   202,     0,   203,   204,     0,     0,     0,
       0,     0,     0,   210,     0,   212,     0,   214,   215,   216,
     217,     0,   218,   219,     0,   220,   221,   222,     0,   224,
       0,   225,     0,     0,   226,     0,     0,   227,     0,     0,
     228,     0,     0,   229,     0,   230,     0,   231,     0,     0,
     232,   233,   234,     0,     0,   235,     0,     0,     0,     0,
     236,     0,     0,     0,     0,   238,     0,   239,     0,   240,
       0,     0,     0,     0,   241,     0,   242,   243,   244,   245,
     246,     0,     0,     0,     0,     0,     0,     0,     0,   248,
     249,   250,     0,     0,     0,   251,   252,     0,  2947,   254,
       0,   255,   256,   257,     0,   258,   259,     0,   260,   261,
     262,   263,   264,     0,     0,     0,     0,   268,     0,     0,
     269,   270,   271,   272,     0,     0,   273,   274,   986,   275,
       0,   276,   277,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   282,     0,   283,     0,   284,     0,   285,   286,
     287,   288,   289,     0,   291,   292,     0,   293,     0,     0,
       0,     0,     0,   295,   296,     0,     0,     0,     0,     0,
       0,   299,     0,     0,     0,   300,   301,   302,   303,   304,
      26,     0,     0,   305,   306,   307,   308,   309,     0,     0,
     310,     0,     0,     0,     0,   311,     0,     0,     0,     0,
       0,   313,     0,   314,   315,     0,   316,   317,   318,   987,
       0,   319,     0,   320,     0,     0,     0,   322,   323,   324,
       0,     0,   325,   988,     0,   326,   327,     0,     0,     0,
       0,     0,   328,   329,     0,   330,     0,   331,     0,   332,
     333,     0,     0,     0,     0,    32,     0,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,     0,
     355,   356,   357,   358,     0,   359,   360,   361,     0,     0,
       0,     0,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,     0,   371,     0,   372,     0,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,     0,     0,
     383,     0,     0,   384,   385,   386,   387,   388,   389,   390,
       0,     0,   391,     0,     0,   393,   394,   395,   396,     0,
       0,     0,     0,   397,     0,     0,   398,   399,   400,   401,
       0,   402,   403,   404,   989,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   410,
     411,     0,     0,     0,     0,   413,     0,   414,   415,   416,
       0,   417,   418,   419,   420,   421,   422,     0,     0,     0,
       0,     0,     0,   427,   428,   429,     0,   430,     0,   431,
     432,   433,   434,   435,     0,   436,   437,   438,   439,     0,
       0,   440,     0,   441,     0,     0,     0,   442,   443,     0,
     444,   445,   446,     0,     0,   447,   448,   449,   450,   451,
       0,   452,     0,     0,   454,     0,   456,    41,     0,   457,
       0,     0,     0,   459,     0,     0,   461,   462,     0,   463,
     990,   464,   465,     0,     0,   466,     0,   468,   469,   470,
     471,     0,   472,   473,   474,     0,   475,     0,   477,   478,
       0,   479,     0,     0,     0,     0,   481,   482,   483,   484,
       0,     0,     0,     0,   486,     0,     0,     0,     0,     0,
       0,   489,     0,     0,   492,   493,     0,   494,     0,   496,
       0,   498,   499,     0,     0,     0,     0,     0,     0,   500,
     501,     0,   502,     0,     0,   503,     0,     0,     0,   504,
       0,   506,     0,     0,     0,   507,     0,     0,     0,   509,
       0,     0,   511,   512,   513,   514,   515,   516,     0,     0,
     517,   518,   519,   520,     0,   521,   522,     0,     0,   523,
     524,   525,   526,     0,     0,   527,   528,     0,     0,   530,
     531,   532,   533,     0,     0,     0,     0,     0,   534,   535,
     536,     0,     0,     0,     0,   538,   539,   540,     0,     0,
     542,   543,     0,   544,   545,     0,     0,     0,     0,     0,
     548,     0,     0,   549,     0,     0,     0,   551,   552,     0,
       0,     0,     0,     0,     0,   553,     0,     0,   554,   555,
       0,     0,     0,   556,   557,   558,   559,   560,   561,   562,
       0,     0,     0,    59,     0,     0,     0,   563,     0,     0,
     565,     0,   567,     0,   161,   568,   162,   163,   164,   165,
     166,   167,     0,     0,   168,     0,     0,     0,   169,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,     0,     0,   984,     0,     0,     0,     0,     0,     0,
       0,   182,     0,     0,   183,   184,   185,     0,   186,     0,
       0,     0,     0,     0,   189,     7,     0,   190,   191,     0,
     192,     0,     0,     0,     0,     0,   196,   197,   198,   985,
     200,   201,   202,     0,   203,   204,     0,     0,     0,     0,
       0,     0,   210,     0,   212,     0,   214,   215,   216,   217,
       0,   218,   219,     0,   220,   221,   222,     0,   224,     0,
     225,     0,     0,   226,     0,     0,   227,     0,     0,   228,
       0,     0,   229,     0,   230,     0,   231,     0,     0,   232,
     233,   234,     0,     0,   235,     0,     0,     0,     0,   236,
       0,     0,     0,     0,   238,     0,   239,     0,   240,     0,
       0,     0,     0,   241,     0,   242,   243,   244,   245,   246,
       0,     0,     0,     0,     0,     0,     0,     0,   248,   249,
     250,     0,     0,     0,   251,   252,     0,  3163,   254,     0,
     255,   256,   257,     0,   258,   259,     0,   260,   261,   262,
     263,   264,     0,     0,     0,     0,   268,     0,     0,   269,
     270,   271,   272,     0,     0,   273,   274,   986,   275,     0,
     276,   277,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   282,     0,   283,     0,   284,     0,   285,   286,   287,
     288,   289,     0,   291,   292,     0,   293,     0,     0,     0,
       0,     0,   295,   296,     0,     0,     0,     0,     0,     0,
     299,     0,     0,     0,   300,   301,   302,   303,   304,    26,
       0,     0,   305,   306,   307,   308,   309,     0,     0,   310,
       0,     0,     0,     0,   311,     0,     0,     0,     0,     0,
     313,     0,   314,   315,     0,   316,   317,   318,   987,     0,
     319,     0,   320,     0,     0,     0,   322,   323,   324,     0,
       0,   325,   988,     0,   326,   327,     0,     0,     0,     0,
       0,   328,   329,     0,   330,     0,   331,     0,   332,   333,
       0,     0,     0,     0,    32,     0,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,     0,   355,
     356,   357,   358,     0,   359,   360,   361,     0,     0,     0,
       0,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,     0,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,     0,     0,   383,
       0,     0,   384,   385,   386,   387,   388,   389,   390,     0,
       0,   391,     0,     0,   393,   394,   395,   396,     0,     0,
       0,     0,   397,     0,     0,   398,   399,   400,   401,     0,
     402,   403,   404,   989,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   410,   411,
       0,     0,     0,     0,   413,     0,   414,   415,   416,     0,
     417,   418,   419,   420,   421,   422,     0,     0,     0,     0,
       0,     0,   427,   428,   429,     0,   430,     0,   431,   432,
     433,   434,   435,     0,   436,   437,   438,   439,     0,     0,
     440,     0,   441,     0,     0,     0,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,     0,     0,   454,     0,   456,    41,     0,   457,     0,
       0,     0,   459,     0,     0,   461,   462,     0,   463,   990,
     464,   465,     0,     0,   466,     0,   468,   469,   470,   471,
       0,   472,   473,   474,     0,   475,     0,   477,   478,     0,
     479,     0,     0,     0,     0,   481,   482,   483,   484,     0,
       0,     0,     0,   486,     0,     0,     0,     0,     0,     0,
     489,     0,     0,   492,   493,     0,   494,     0,   496,     0,
     498,   499,     0,     0,     0,     0,     0,     0,   500,   501,
       0,   502,     0,     0,   503,     0,     0,     0,   504,     0,
     506,     0,     0,     0,   507,     0,     0,     0,   509,     0,
       0,   511,   512,   513,   514,   515,   516,     0,     0,   517,
     518,   519,   520,     0,   521,   522,     0,     0,   523,   524,
     525,   526,     0,     0,   527,   528,     0,     0,   530,   531,
     532,   533,     0,     0,     0,     0,     0,   534,   535,   536,
       0,     0,     0,     0,   538,   539,   540,     0,     0,   542,
     543,     0,   544,   545,     0,     0,     0,     0,     0,   548,
       0,     0,   549,     0,     0,     0,   551,   552,     0,     0,
       0,     0,     0,     0,   553,     0,     0,   554,   555,     0,
       0,     0,   556,   557,   558,   559,   560,   561,   562,     0,
       0,     0,    59,     0,     0,     0,   563,     0,     0,   565,
       0,   567,     0,   161,   568,   162,   163,   164,   165,   166,
     167,     0,     0,   168,     0,     0,     0,   169,     0,     0,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
       0,     0,   984,     0,     0,     0,     0,     0,     0,     0,
     182,     0,     0,   183,   184,   185,     0,   186,     0,     0,
       0,     0,     0,   189,     7,     0,   190,   191,     0,   192,
       0,     0,     0,     0,     0,   196,   197,   198,   985,   200,
     201,   202,     0,   203,   204,     0,     0,     0,     0,     0,
       0,   210,     0,   212,     0,   214,   215,   216,   217,     0,
     218,   219,     0,   220,   221,   222,     0,   224,     0,   225,
       0,     0,   226,     0,     0,   227,     0,     0,   228,     0,
       0,   229,     0,   230,     0,   231,     0,     0,   232,   233,
     234,     0,     0,   235,     0,     0,     0,     0,   236,     0,
       0,     0,     0,   238,     0,   239,     0,   240,     0,     0,
       0,     0,   241,     0,   242,   243,   244,   245,   246,     0,
       0,     0,     0,     0,     0,     0,     0,   248,   249,   250,
       0,     0,     0,   251,   252,     0,  3272,   254,     0,   255,
     256,   257,     0,   258,   259,     0,   260,   261,   262,   263,
     264,     0,     0,     0,     0,   268,     0,     0,   269,   270,
     271,   272,     0,     0,   273,   274,   986,   275,     0,   276,
     277,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     282,     0,   283,     0,   284,     0,   285,   286,   287,   288,
     289,     0,   291,   292,     0,   293,     0,     0,     0,     0,
       0,   295,   296,     0,     0,     0,     0,     0,     0,   299,
       0,     0,     0,   300,   301,   302,   303,   304,    26,     0,
       0,   305,   306,   307,   308,   309,     0,     0,   310,     0,
       0,     0,     0,   311,     0,     0,     0,     0,     0,   313,
       0,   314,   315,     0,   316,   317,   318,   987,     0,   319,
       0,   320,     0,     0,     0,   322,   323,   324,     0,     0,
     325,   988,     0,   326,   327,     0,     0,     0,     0,     0,
     328,   329,     0,   330,     0,   331,     0,   332,   333,     0,
       0,     0,     0,    32,     0,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,     0,   355,   356,
     357,   358,     0,   359,   360,   361,     0,     0,     0,     0,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,     0,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,     0,     0,   383,     0,
       0,   384,   385,   386,   387,   388,   389,   390,     0,     0,
     391,     0,     0,   393,   394,   395,   396,     0,     0,     0,
       0,   397,     0,     0,   398,   399,   400,   401,     0,   402,
     403,   404,   989,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   410,   411,     0,
       0,     0,     0,   413,     0,   414,   415,   416,     0,   417,
     418,   419,   420,   421,   422,     0,     0,     0,     0,     0,
       0,   427,   428,   429,     0,   430,     0,   431,   432,   433,
     434,   435,     0,   436,   437,   438,   439,     0,     0,   440,
       0,   441,     0,     0,     0,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
       0,     0,   454,     0,   456,    41,     0,   457,     0,     0,
       0,   459,     0,     0,   461,   462,     0,   463,   990,   464,
     465,     0,     0,   466,     0,   468,   469,   470,   471,     0,
     472,   473,   474,     0,   475,     0,   477,   478,     0,   479,
       0,     0,     0,     0,   481,   482,   483,   484,     0,     0,
       0,     0,   486,     0,     0,     0,     0,     0,     0,   489,
       0,     0,   492,   493,     0,   494,     0,   496,     0,   498,
     499,     0,     0,     0,     0,     0,     0,   500,   501,     0,
     502,     0,     0,   503,     0,     0,     0,   504,     0,   506,
       0,     0,     0,   507,     0,     0,     0,   509,     0,     0,
     511,   512,   513,   514,   515,   516,     0,     0,   517,   518,
     519,   520,     0,   521,   522,     0,     0,   523,   524,   525,
     526,     0,     0,   527,   528,     0,     0,   530,   531,   532,
     533,     0,     0,     0,     0,     0,   534,   535,   536,     0,
       0,     0,     0,   538,   539,   540,     0,     0,   542,   543,
       0,   544,   545,     0,     0,     0,     0,     0,   548,     0,
       0,   549,     0,     0,     0,   551,   552,     0,     0,     0,
       0,     0,     0,   553,     0,     0,   554,   555,     0,     0,
       0,   556,   557,   558,   559,   560,   561,   562,     0,     0,
       0,    59,     0,     0,     0,   563,     0,     0,   565,     0,
     567,     0,   161,   568,   162,   163,   164,   165,   166,   167,
       0,     0,   168,     0,     0,     0,   169,     0,     0,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,     0,
       0,   984,     0,     0,     0,     0,     0,     0,     0,   182,
       0,     0,   183,   184,   185,     0,   186,     0,     0,     0,
       0,     0,   189,     7,     0,   190,   191,     0,   192,     0,
       0,     0,     0,     0,   196,   197,   198,   985,   200,   201,
     202,     0,   203,   204,     0,     0,     0,     0,     0,     0,
     210,     0,   212,     0,   214,   215,   216,   217,     0,   218,
     219,     0,   220,   221,   222,     0,   224,     0,   225,     0,
       0,   226,     0,     0,   227,     0,     0,   228,     0,     0,
     229,     0,   230,     0,   231,     0,     0,   232,   233,   234,
       0,     0,   235,     0,     0,     0,     0,   236,     0,     0,
       0,     0,   238,     0,   239,     0,   240,     0,     0,     0,
       0,   241,     0,   242,   243,   244,   245,   246,     0,     0,
       0,     0,     0,     0,     0,     0,   248,   249,   250,     0,
       0,     0,   251,   252,     0,  3723,   254,     0,   255,   256,
     257,     0,   258,   259,     0,   260,   261,   262,   263,   264,
       0,     0,     0,     0,   268,     0,     0,   269,   270,   271,
     272,     0,     0,   273,   274,   986,   275,     0,   276,   277,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   282,
       0,   283,     0,   284,     0,   285,   286,   287,   288,   289,
       0,   291,   292,     0,   293,     0,     0,     0,     0,     0,
     295,   296,     0,     0,     0,     0,     0,     0,   299,     0,
       0,     0,   300,   301,   302,   303,   304,    26,     0,     0,
     305,   306,   307,   308,   309,     0,     0,   310,     0,     0,
       0,     0,   311,     0,     0,     0,     0,     0,   313,     0,
     314,   315,     0,   316,   317,   318,   987,     0,   319,     0,
     320,     0,     0,     0,   322,   323,   324,     0,     0,   325,
     988,     0,   326,   327,     0,     0,     0,     0,     0,   328,
     329,     0,   330,     0,   331,     0,   332,   333,     0,     0,
       0,     0,    32,     0,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,     0,   355,   356,   357,
     358,     0,   359,   360,   361,     0,     0,     0,     0,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,     0,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,     0,     0,   383,     0,     0,
     384,   385,   386,   387,   388,   389,   390,     0,     0,   391,
       0,     0,   393,   394,   395,   396,     0,     0,     0,     0,
     397,     0,     0,   398,   399,   400,   401,     0,   402,   403,
     404,   989,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   410,   411,     0,     0,
       0,     0,   413,     0,   414,   415,   416,     0,   417,   418,
     419,   420,   421,   422,     0,     0,     0,     0,     0,     0,
     427,   428,   429,     0,   430,     0,   431,   432,   433,   434,
     435,     0,   436,   437,   438,   439,     0,     0,   440,     0,
     441,     0,     0,     0,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,     0,
       0,   454,     0,   456,    41,     0,   457,     0,     0,     0,
     459,     0,     0,   461,   462,     0,   463,   990,   464,   465,
       0,     0,   466,     0,   468,   469,   470,   471,     0,   472,
     473,   474,     0,   475,     0,   477,   478,     0,   479,     0,
       0,     0,     0,   481,   482,   483,   484,     0,     0,     0,
       0,   486,     0,     0,     0,     0,     0,     0,   489,     0,
       0,   492,   493,     0,   494,     0,   496,     0,   498,   499,
       0,     0,     0,     0,     0,     0,   500,   501,     0,   502,
       0,     0,   503,     0,     0,     0,   504,     0,   506,     0,
       0,     0,   507,     0,     0,     0,   509,     0,     0,   511,
     512,   513,   514,   515,   516,     0,     0,   517,   518,   519,
     520,     0,   521,   522,     0,     0,   523,   524,   525,   526,
       0,     0,   527,   528,     0,     0,   530,   531,   532,   533,
       0,     0,     0,     0,     0,   534,   535,   536,     0,     0,
       0,     0,   538,   539,   540,     0,     0,   542,   543,     0,
     544,   545,     0,     0,     0,     0,     0,   548,     0,     0,
     549,     0,     0,     0,   551,   552,     0,     0,     0,     0,
       0,     0,   553,     0,     0,   554,   555,     0,     0,     0,
     556,   557,   558,   559,   560,   561,   562,     0,     0,     0,
      59,     0,     0,     0,   563,     0,     0,   565,     0,   567,
       0,   161,   568,   162,   163,   164,   165,   166,   167,     0,
       0,   168,     0,     0,     0,   169,     0,     0,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
     984,     0,     0,     0,     0,     0,     0,     0,   182,     0,
       0,   183,   184,   185,     0,   186,     0,     0,     0,     0,
       0,   189,     7,     0,   190,   191,     0,   192,     0,     0,
       0,     0,     0,   196,   197,   198,   985,   200,   201,   202,
       0,   203,   204,     0,     0,     0,     0,     0,     0,   210,
       0,   212,     0,   214,   215,   216,   217,     0,   218,   219,
       0,   220,   221,   222,     0,   224,     0,   225,     0,     0,
     226,     0,     0,   227,     0,     0,   228,     0,     0,   229,
       0,   230,     0,   231,     0,     0,   232,   233,   234,     0,
       0,   235,     0,     0,     0,     0,   236,     0,     0,     0,
       0,   238,     0,   239,     0,   240,     0,     0,     0,     0,
     241,     0,   242,   243,   244,   245,   246,     0,     0,     0,
       0,     0,     0,     0,     0,   248,   249,   250,     0,     0,
       0,   251,   252,     0,  -397,   254,     0,   255,   256,   257,
       0,   258,   259,     0,   260,   261,   262,   263,   264,     0,
       0,     0,     0,   268,     0,     0,   269,   270,   271,   272,
       0,     0,   273,   274,   986,   275,     0,   276,   277,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   282,     0,
     283,     0,   284,     0,   285,   286,   287,   288,   289,     0,
     291,   292,     0,   293,     0,     0,     0,     0,     0,   295,
     296,     0,     0,     0,     0,     0,     0,   299,     0,     0,
       0,   300,   301,   302,   303,   304,    26,     0,     0,   305,
     306,   307,   308,   309,     0,     0,   310,     0,     0,     0,
       0,   311,     0,     0,     0,     0,     0,   313,     0,   314,
     315,     0,   316,   317,   318,   987,     0,   319,     0,   320,
       0,     0,     0,   322,   323,   324,     0,     0,   325,   988,
       0,   326,   327,     0,     0,     0,     0,     0,   328,   329,
       0,   330,     0,   331,     0,   332,   333,     0,     0,     0,
       0,    32,     0,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,     0,   355,   356,   357,   358,
       0,   359,   360,   361,     0,     0,     0,     0,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,     0,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,     0,     0,   383,     0,     0,   384,
     385,   386,   387,   388,   389,   390,     0,     0,   391,     0,
       0,   393,   394,   395,   396,     0,     0,     0,     0,   397,
       0,     0,   398,   399,   400,   401,     0,   402,   403,   404,
     989,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   410,   411,     0,     0,     0,
       0,   413,     0,   414,   415,   416,     0,   417,   418,   419,
     420,   421,   422,     0,     0,     0,     0,     0,     0,   427,
     428,   429,     0,   430,     0,   431,   432,   433,   434,   435,
       0,   436,   437,   438,   439,     0,     0,   440,     0,   441,
       0,     0,     0,   442,   443,     0,   444,   445,   446,     0,
       0,   447,   448,   449,   450,   451,     0,   452,     0,     0,
     454,     0,   456,    41,     0,   457,     0,     0,     0,   459,
       0,     0,   461,   462,     0,   463,   990,   464,   465,     0,
       0,   466,     0,   468,   469,   470,   471,     0,   472,   473,
     474,     0,   475,     0,   477,   478,     0,   479,     0,     0,
       0,     0,   481,   482,   483,   484,     0,     0,     0,     0,
     486,     0,     0,     0,     0,     0,     0,   489,     0,     0,
     492,   493,     0,   494,     0,   496,     0,   498,   499,     0,
       0,     0,     0,     0,     0,   500,   501,     0,   502,     0,
       0,   503,     0,     0,     0,   504,     0,   506,     0,     0,
       0,   507,     0,     0,     0,   509,     0,     0,   511,   512,
     513,   514,   515,   516,     0,     0,   517,   518,   519,   520,
       0,   521,   522,     0,     0,   523,   524,   525,   526,     0,
       0,   527,   528,     0,     0,   530,   531,   532,   533,     0,
       0,     0,     0,     0,   534,   535,   536,     0,     0,     0,
       0,   538,   539,   540,     0,     0,   542,   543,     0,   544,
     545,     0,     0,     0,     0,     0,   548,     0,     0,   549,
       0,     0,     0,   551,   552,     0,     0,     0,     0,     0,
       0,   553,     0,     0,   554,   555,     0,     0,     0,   556,
     557,   558,   559,   560,   561,   562,     0,     0,     0,    59,
       0,     0,     0,   563,     0,     0,   565,     0,   567,     0,
     161,   568,   162,   163,   164,   165,   166,   167,     0,     0,
     168,     0,     0,     0,   169,     0,     0,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,     0,     0,   984,
       0,     0,     0,     0,     0,     0,     0,   182,     0,     0,
     183,   184,   185,     0,   186,     0,     0,     0,     0,     0,
     189,     7,     0,   190,   191,     0,   192,     0,     0,     0,
       0,     0,   196,   197,   198,   985,   200,   201,   202,     0,
     203,   204,     0,     0,     0,     0,     0,     0,   210,     0,
     212,     0,   214,   215,   216,   217,     0,   218,   219,     0,
     220,   221,   222,     0,   224,     0,   225,     0,     0,   226,
       0,     0,   227,     0,     0,   228,     0,     0,   229,     0,
     230,     0,   231,     0,     0,   232,   233,   234,     0,     0,
     235,     0,     0,     0,     0,   236,     0,     0,     0,     0,
     238,     0,   239,     0,   240,     0,     0,     0,     0,   241,
       0,   242,   243,   244,   245,   246,     0,     0,     0,     0,
       0,     0,     0,     0,   248,   249,   250,     0,     0,     0,
     251,   252,     0,     0,   254,     0,   255,   256,   257,     0,
     258,   259,     0,   260,   261,   262,   263,   264,     0,     0,
       0,     0,   268,     0,     0,   269,   270,   271,   272,     0,
       0,   273,   274,   986,   275,     0,   276,   277,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   282,     0,   283,
       0,   284,     0,   285,   286,   287,   288,   289,     0,   291,
     292,     0,   293,     0,     0,     0,     0,     0,   295,   296,
       0,     0,     0,     0,     0,     0,   299,     0,     0,     0,
     300,   301,   302,   303,   304,    26,     0,     0,   305,   306,
     307,   308,   309,     0,     0,   310,     0,     0,     0,     0,
     311,     0,     0,     0,     0,     0,   313,     0,   314,   315,
       0,   316,   317,   318,   987,     0,   319,     0,   320,     0,
       0,     0,   322,   323,   324,     0,     0,   325,   988,     0,
     326,   327,     0,     0,     0,     0,     0,   328,   329,     0,
     330,     0,   331,     0,   332,   333,     0,     0,     0,     0,
      32,     0,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,     0,   355,   356,   357,   358,     0,
     359,   360,   361,     0,     0,     0,     0,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,     0,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,     0,     0,   383,     0,     0,   384,   385,
     386,   387,   388,   389,   390,     0,     0,   391,     0,     0,
     393,   394,   395,   396,     0,     0,     0,     0,   397,     0,
       0,   398,   399,   400,   401,     0,   402,   403,   404,   989,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   410,   411,     0,     0,     0,     0,
     413,     0,   414,   415,   416,     0,   417,   418,   419,   420,
     421,   422,     0,     0,     0,     0,     0,     0,   427,   428,
     429,     0,   430,     0,   431,   432,   433,   434,   435,     0,
     436,   437,   438,   439,     0,     0,   440,     0,   441,     0,
       0,     0,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,     0,     0,   454,
       0,   456,    41,     0,   457,     0,     0,     0,   459,     0,
       0,   461,   462,     0,   463,   990,   464,   465,     0,     0,
     466,     0,   468,   469,   470,   471,     0,   472,   473,   474,
       0,   475,     0,   477,   478,     0,   479,     0,     0,     0,
       0,   481,   482,   483,   484,     0,     0,     0,     0,   486,
       0,     0,     0,     0,     0,     0,   489,     0,     0,   492,
     493,     0,   494,     0,   496,     0,   498,   499,     0,     0,
       0,     0,     0,     0,   500,   501,     0,   502,     0,     0,
     503,     0,     0,     0,   504,     0,   506,     0,     0,     0,
     507,     0,     0,     0,   509,     0,     0,   511,   512,   513,
     514,   515,   516,     0,     0,   517,   518,   519,   520,     0,
     521,   522,     0,     0,   523,   524,   525,   526,     0,     0,
     527,   528,     0,     0,   530,   531,   532,   533,     0,     0,
       0,     0,     0,   534,   535,   536,     0,     0,     0,     0,
     538,   539,   540,     0,     0,   542,   543,     0,   544,   545,
       0,     0,     0,     0,     0,   548,     0,     0,   549,     0,
       0,     0,   551,   552,     0,     0,     0,     0,     0,     0,
     553,     0,     0,   554,   555,     0,     0,     0,   556,   557,
     558,   559,   560,   561,   562,     0,     0,     0,    59,     0,
       0,     0,   563,     0,     0,   565,     0,   567,     0,   161,
     568,   162,   163,   164,   165,   166,   167,     0,     0,   168,
       0,     0,     0,   169,     0,     0,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,     0,     0,   984,     0,
       0,     0,     0,     0,     0,     0,   182,     0,     0,   183,
     184,   185,     0,   186,     0,     0,     0,     0,     0,   189,
       7,     0,   190,   191,     0,   192,     0,     0,     0,     0,
       0,   196,   197,   198,   985,   200,   201,   202,     0,   203,
     204,     0,     0,     0,     0,     0,     0,   210,     0,   212,
       0,   214,   215,   216,   217,     0,   218,   219,     0,   220,
     221,   222,     0,   224,     0,   225,     0,     0,   226,     0,
       0,   227,     0,     0,   228,     0,     0,   229,     0,   230,
       0,   231,     0,     0,   232,   233,   234,     0,     0,   235,
       0,     0,     0,     0,   236,     0,     0,     0,     0,   238,
       0,   239,     0,   240,     0,     0,     0,     0,   241,     0,
     242,   243,   244,   245,   246,     0,     0,     0,     0,     0,
       0,     0,     0,   248,   249,   250,     0,     0,     0,   251,
     252,     0,     0,   254,     0,   255,   256,   257,     0,   258,
     259,     0,   260,   261,   262,   263,   264,     0,     0,     0,
       0,   268,     0,     0,   269,   270,   271,   272,     0,     0,
     273,   274,   986,   275,     0,   276,   277,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   282,     0,   283,     0,
     284,     0,   285,   286,   287,   288,   289,     0,   291,   292,
       0,   293,     0,     0,     0,     0,     0,   295,   296,     0,
       0,     0,     0,     0,     0,   299,     0,     0,     0,   300,
     301,   302,   303,   304,    26,     0,     0,   305,   306,   307,
     308,   309,     0,     0,   310,     0,     0,     0,     0,   311,
       0,     0,     0,     0,     0,   313,     0,   314,   315,     0,
     316,   317,   318,   987,     0,   319,     0,   320,     0,     0,
       0,   322,   323,   324,     0,     0,   325,   988,     0,   326,
     327,     0,     0,     0,     0,     0,   328,   329,     0,   330,
       0,   331,     0,   332,   333,     0,     0,     0,     0,    32,
       0,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,     0,   355,   356,   357,   358,     0,   359,
     360,   361,     0,     0,     0,     0,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,     0,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,     0,     0,   383,     0,     0,   384,   385,   386,
     387,   388,   389,   390,     0,     0,   391,     0,     0,   393,
     394,   395,   396,     0,     0,     0,     0,   397,     0,     0,
     398,   399,   400,   401,     0,   402,   403,   404,   989,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   410,   411,     0,     0,     0,     0,   413,
       0,   414,   415,   416,     0,   417,   418,   419,   420,   421,
     422,     0,     0,     0,     0,     0,     0,   427,   428,   429,
       0,   430,     0,   431,   432,   433,   434,   435,     0,   436,
     437,   438,   439,     0,     0,   440,     0,   441,     0,     0,
       0,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,     0,     0,   454,     0,
     456,    41,     0,   457,     0,     0,     0,   459,     0,     0,
     461,   462,     0,   463,   990,   464,   465,     0,     0,   466,
       0,   468,   469,   470,   471,     0,   472,   473,   474,     0,
     475,     0,   477,   478,     0,   479,     0,     0,     0,     0,
     481,   482,   483,   484,     0,     0,     0,     0,   486,     0,
       0,     0,     0,     0,     0,   489,     0,     0,   492,   493,
       0,   494,     0,   496,     0,   498,   499,     0,     0,     0,
       0,     0,     0,   500,   501,     0,   502,     0,     0,   503,
       0,     0,     0,   504,     0,   506,     0,     0,     0,   507,
       0,     0,     0,   509,     0,     0,   511,   512,   513,   514,
     515,   516,     0,     0,   517,   518,   519,   520,     0,   521,
     522,     0,     0,   523,   524,   525,   526,     0,     0,   527,
     528,     0,     0,   530,   531,   532,   533,     0,     0,     0,
       0,     0,   534,   535,   536,     0,     0,     0,     0,   538,
     539,   540,     0,     0,   542,   543,     0,   544,   545,     0,
       0,     0,     0,     0,   548,     0,     0,  1525,     0,     0,
       0,   551,   552,     0,     0,     0,     0,     0,     0,   553,
       0,     0,   554,   555,     0,     0,     0,   556,   557,   558,
     559,   560,   561,   562,     0,     0,     0,    59,     0,     0,
       0,   563,     0,     0,   565,     0,   567,     0,   161,   568,
     162,   163,   164,   165,   166,   167,     0,     0,   168,     0,
       0,     0,   169,     0,     0,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,     0,     0,   984,     0,     0,
       0,     0,     0,     0,     0,   182,     0,     0,   183,   184,
     185,     0,   186,     0,     0,     0,     0,     0,   189,     7,
       0,   190,   191,     0,   192,     0,     0,     0,     0,     0,
     196,   197,   198,     0,   200,   201,   202,     0,   203,   204,
       0,     0,     0,     0,     0,     0,   210,     0,   212,     0,
     214,   215,   216,   217,     0,   218,   219,     0,   220,   221,
     222,     0,   224,     0,   225,     0,     0,   226,     0,     0,
     227,     0,     0,   228,     0,     0,   229,     0,   230,     0,
     231,     0,     0,   232,   233,   234,     0,     0,   235,     0,
       0,     0,     0,   236,     0,     0,     0,     0,   238,     0,
     239,     0,   240,     0,     0,     0,     0,   241,     0,   242,
     243,   244,   245,   246,     0,     0,     0,     0,     0,     0,
       0,     0,   248,   249,   250,     0,     0,     0,   251,   252,
       0,     0,   254,     0,   255,   256,   257,     0,   258,   259,
       0,   260,   261,   262,   263,   264,     0,     0,     0,     0,
     268,     0,     0,   269,   270,   271,   272,     0,     0,   273,
     274,     0,   275,     0,   276,   277,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   282,     0,   283,     0,   284,
       0,   285,   286,   287,   288,   289,     0,   291,   292,     0,
     293,     0,     0,     0,     0,     0,   295,   296,     0,     0,
       0,     0,     0,     0,   299,     0,     0,     0,   300,   301,
     302,   303,   304,    26,     0,     0,   305,   306,   307,   308,
     309,     0,     0,   310,     0,     0,     0,     0,   311,     0,
       0,     0,     0,     0,   313,     0,   314,   315,     0,   316,
     317,   318,     0,     0,   319,     0,   320,     0,     0,     0,
     322,   323,   324,     0,     0,   325,     0,     0,   326,   327,
       0,     0,     0,     0,     0,   328,   329,     0,   330,     0,
     331,     0,   332,   333,     0,     0,     0,     0,    32,     0,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,     0,   355,   356,   357,   358,     0,   359,   360,
     361,     0,     0,     0,     0,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
       0,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,     0,     0,   383,     0,     0,   384,   385,   386,   387,
     388,   389,   390,     0,     0,   391,     0,     0,   393,   394,
     395,   396,     0,     0,     0,     0,   397,     0,     0,   398,
     399,   400,   401,     0,   402,   403,   404,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   410,   411,     0,     0,     0,     0,   413,     0,
     414,   415,   416,     0,   417,   418,   419,   420,   421,   422,
       0,     0,     0,     0,     0,     0,   427,   428,   429,     0,
     430,     0,   431,   432,   433,   434,   435,     0,   436,   437,
     438,   439,     0,     0,   440,     0,   441,     0,     0,     0,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,     0,     0,   454,     0,   456,
      41,     0,   457,     0,     0,     0,   459,     0,     0,   461,
     462,     0,   463,   990,   464,   465,     0,     0,   466,     0,
     468,   469,   470,   471,     0,   472,   473,   474,     0,   475,
       0,   477,   478,     0,   479,     0,     0,     0,     0,   481,
     482,   483,   484,     0,     0,     0,     0,   486,     0,     0,
       0,     0,     0,     0,   489,     0,     0,   492,   493,     0,
     494,     0,   496,     0,   498,   499,     0,     0,     0,     0,
       0,     0,   500,   501,     0,   502,     0,     0,   503,     0,
       0,     0,   504,     0,   506,     0,     0,     0,   507,     0,
       0,     0,   509,     0,     0,   511,   512,   513,   514,   515,
     516,     0,     0,   517,   518,   519,   520,     0,   521,   522,
       0,     0,   523,   524,   525,   526,     0,     0,   527,   528,
       0,     0,   530,   531,   532,   533,     0,     0,     0,     0,
       0,   534,   535,   536,     0,     0,     0,     0,   538,   539,
     540,     0,     0,   542,   543,     0,   544,   545,     0,     0,
       0,     0,     0,   548,     0,     0,   549,     0,     0,     0,
     551,   552,     0,     0,     0,     0,     0,     0,   553,     0,
       0,   554,   555,     0,     0,     0,   556,   557,   558,   559,
     560,   561,   562,     0,     0,     0,    59,     0,     0,     0,
     563,     0,     0,   565,     0,   567,     0,   161,   568,   162,
     163,   164,   165,   166,   167,     0,     0,   168,     0,     0,
       0,   169,     0,     0,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   182,     0,     0,   183,   184,   185,
       0,   186,     0,     0,     0,     0,     0,   189,     0,     0,
     190,   191,     0,   192,     0,     0,     0,     0,     0,   196,
     197,   198,     0,   200,   201,   202,     0,   203,   204,     0,
       0,     0,     0,     0,     0,   210,     0,   212,     0,   214,
     215,   216,   217,     0,   218,   219,     0,   220,   221,   222,
       0,   224,     0,   225,     0,     0,   226,     0,     0,   227,
       0,     0,   228,     0,     0,   229,     0,   230,     0,   231,
       0,     0,   232,   233,   234,     0,     0,   235,     0,     0,
       0,     0,   236,     0,     0,     0,     0,   238,     0,   239,
       0,   240,     0,     0,     0,     0,   241,     0,   242,   243,
     244,   245,   246,     0,     0,     0,     0,     0,     0,     0,
       0,   248,   249,   250,     0,     0,     0,   251,   252,     0,
       0,   254,     0,   255,   256,   257,     0,   258,   259,     0,
     260,   261,   262,   263,   264,     0,     0,     0,     0,   268,
       0,     0,   269,   270,   271,   272,     0,     0,   273,   274,
       0,   275,     0,   276,   277,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   282,     0,   283,     0,   284,     0,
     285,   286,   287,   288,   289,     0,   291,   292,     0,   293,
       0,     0,     0,     0,     0,   295,   296,     0,     0,     0,
       0,     0,     0,   299,     0,     0,     0,   300,   301,   302,
     303,   304,     0,     0,     0,   305,   306,   307,   308,   309,
       0,     0,   310,     0,     0,     0,     0,   311,     0,     0,
       0,     0,     0,   313,     0,   314,   315,     0,   316,   317,
     318,     0,     0,   319,     0,   320,     0,     0,     0,   322,
     323,   324,     0,     0,   325,     0,     0,   326,   327,     0,
       0,     0,     0,     0,   328,   329,     0,   330,     0,   331,
       0,   332,   333,     0,     0,     0,     0,     0,     0,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,     0,   355,   356,   357,   358,     0,   359,   360,   361,
       0,     0,     0,     0,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,     0,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
       0,     0,   383,     0,     0,   384,   385,   386,   387,   388,
     389,   390,     0,     0,   391,     0,     0,   393,   394,   395,
     396,     0,     0,     0,     0,   397,     0,     0,   398,   399,
     400,   401,     0,   402,   403,   404,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   410,   411,     0,     0,     0,     0,   413,     0,   414,
     415,   416,     0,   417,   418,   419,   420,   421,   422,     0,
       0,     0,     0,     0,     0,   427,   428,   429,     0,   430,
       0,   431,   432,   433,   434,   435,     0,   436,   437,   438,
     439,     0,     0,   440,     0,   441,     0,     0,     0,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   449,
     450,   451,     0,   452,     0,     0,   454,     0,   456,     0,
       0,   457,     0,     0,     0,   459,     0,     0,   461,   462,
       0,   463,     0,   464,   465,     0,     0,   466,     0,   468,
     469,   470,   471,     0,   472,   473,   474,     0,   475,     0,
     477,   478,     0,   479,     0,     0,     0,     0,   481,   482,
     483,   484,     0,     0,     0,     0,   486,     0,     0,     0,
       0,     0,     0,   489,     0,     0,   492,   493,     0,   494,
       0,   496,     0,   498,   499,     0,     0,     0,     0,     0,
       0,   500,   501,     0,   502,     0,     0,   503,     0,     0,
       0,   504,     0,   506,     0,     0,     0,   507,     0,     0,
       0,   509,     0,     0,   511,   512,   513,   514,   515,   516,
       0,     0,   517,   518,   519,   520,     0,   521,   522,     0,
       0,   523,   524,   525,   526,     0,     0,   527,   528,     0,
       0,   530,   531,   532,   533,     0,     0,     0,     0,     0,
     534,   535,   536,     0,     0,     0,     0,   538,   539,   540,
       0,     0,   542,   543,     0,   544,   545,     0,     0,     0,
       0,     0,   548,     0,     0,   549,     0,     0,     0,   551,
     552,     0,     0,     0,     0,     0,     0,   553,     0,     0,
     554,   555,     0,     0,     0,   556,   557,   558,   559,   560,
     561,   562,     0,     0,     0,  3459,  3460,     0,     0,   563,
       0,  3461,   565,  3462,   567,  3463,  3464,   568,  3459,  3460,
       0,     0,     0,     0,  3461,     0,  3462,     0,  3463,  3464,
       0,     0,  3465,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3465,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3466,     0,     0,  3467,     0,     0,     0,     0,     0,
       0,     0,  3468,     0,  3466,     0,     0,  3467,     0,     0,
       0,     0,     0,     0,     0,  3468,     0,     0,     0,     0,
       0,     0,  3469,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3469,     0,     0,     0,     0,
       0,     0,  3470,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3470,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3471,     0,  3472,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3471,     0,  3472,     0,     0,  3473,
    3474,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3473,  3474,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3475,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3475,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3476,     0,     0,     0,     0,     0,     0,     0,     0,
    3477,  3478,     0,  3479,  3476,     0,     0,     0,     0,     0,
       0,     0,     0,  3477,  3478,     0,  3479,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3480,  3481,
    3482,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3480,  3481,  3482,     0,     0,     0,     0,  3483,  3484,
    3485,     0,     0,     0,     0,     0,  3486,     0,     0,  3487,
       0,  3483,  3484,  3485,     0,     0,     0,     0,     0,  3486,
       0,     0,  3487,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3488,     0,  3489,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3488,     0,  3489,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3490,  3491,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3490,  3491,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3492,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3492,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4567,     0,     0,
       0,  3494,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3494,  3495,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3495,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3496,     0,     0,     0,  3497,     0,
       0,  3498,  3499,  3500,  3501,     0,     0,  3496,     0,     0,
       0,  3497,     0,     0,  3498,  3499,  3500,  3501,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3503,  3504,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3503,  3504,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3505,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3505
};

static const yytype_int16 yycheck[] =
{
       6,   145,   153,   622,   645,   632,   991,   644,   645,  1156,
       3,     6,    21,   632,    20,  1157,  1745,  1492,    24,  1260,
    1444,   141,  1098,  1284,    33,  1055,  1056,  1727,  1346,  1722,
      36,    40,  1062,  1076,  1314,  1346,   676,  1521,    44,   679,
    1025,    47,  1271,  1358,  1814,    51,  1785,  1744,  1231,   699,
    1722,  1611,    58,     0,     4,  1098,   586,  1611,  2388,  3105,
    2845,   813,  1611,   987,   988,  2916,  1720,   699,  1588,  1723,
     587,   588,   589,  2916,  2874,   592,   593,   594,  2895,  3252,
     597,   598,   599,  2977,   606,  2594,    24,  1413,  1471,    45,
    2907,  2908,  2321,  1783,  2884,  1444,  3135,  1165,  1378,  1379,
    3416,   107,  1382,  1383,  1384,  1385,  1022,  1387,  1388,  1389,
    1390,  1391,  1392,  1393,  1394,  2285,  1369,  2092,   640,  3838,
    1165,  2480,   606,  3306,  1377,   758,  3711,  1716,  1074,   135,
    3358,   137,  3659,  2492,   140,   141,   142,  3506,  1747,  1118,
     648,  2493,   137,   651,  2150,   140,  2456,  2374,  2456,  2060,
    3106,  2374,   740,  1099,  2127,   743,   640,  3882,  1621,  3106,
    2164,   148,  3747,   153,  2808,  2916,  3566,  2984,  2985,   107,
      20,  4205,   153,   921,   153,  3397,  2811,    18,  1641,   153,
    1664,  3972,  3397,  3336,    13,  2820,  1649,  1650,    13,  3399,
      76,  3401,  3264,  2963,    20,  1757,    50,  3407,  1495,  3098,
      33,    54,    18,  3413,    17,    18,  3479,    17,    18,  3482,
      17,    18,  3797,    20,  2991,    27,  4213,  2907,  2908,  1198,
    3191,    20,    17,    18,   119,    85,  4010,    21,  3501,  2456,
      31,    66,    22,  2456,  2366,  1100,   163,  2110,    39,    22,
     121,  3894,  2930,   210,   877,   878,   879,    37,  1810,  4310,
    3022,   170,   140,   192,   113,    73,   889,    88,    17,    18,
     208,    51,  2911,    21,    67,  1237,  1238,  1239,  3931,    61,
      50,   136,    62,    63,    63,    17,    18,   208,  3431,    62,
      63,  1765,  1254,   157,   136,  3757,    70,  3874,    84,    17,
      18,   316,    92,   348,  2984,  2985,   410,    27,    17,    18,
      74,  1684,   136,   315,   252,   170,    13,    13,  3018,  3019,
     408,    12,   397,   136,  3024,  3783,  3026,   414,   170,    46,
     140,   252,  1294,  4335,  3124,  1297,   420,    17,    18,   170,
     233,    17,    18,   252,  3341,    37,   170,   252,   216,  3468,
      39,  2304,  3471,  3472,   170,   159,  4328,   301,   142,   207,
      20,   152,    55,   500,  1326,  1327,    39,   409,  1330,  3488,
     309,  2446,   280,    66,    84,   276,  4918,   474,   987,   988,
    1145,  1146,   991,   170,   209,  1347,  1348,   258,  3507,   252,
    3021,   533,   269,   276,   142,   441,  4169,   439,  4531,   439,
      90,   252,   158,   543,  3206,  3207,  3208,    12,   269,   137,
     192,    17,    18,   480,   196,   550,  1025,  2356,   925,   926,
     533,    17,    18,    17,    18,   515,  3479,  5006,   210,   299,
     533,  1196,    21,   299,   636,   210,    67,  4776,   299,   394,
      69,  1757,   184,    17,    18,    17,    18,    17,    18,    22,
      20,   489,  3758,   316,   264,   636,   192,   313,   260,   474,
     614,   247,    76,   249,    37,   671,    73,   213,   636,   176,
     578,   390,   391,    84,   684,   684,  2107,   605,    51,   155,
     608,   213,   258,   422,   170,   278,   685,   686,   684,    62,
      63,   614,   660,   148,  1810,   497,   606,   283,   210,   296,
    3663,   611,   712,   712,   710,   613,   258,   213,   284,   210,
    1416,   166,   299,   712,  2145,   717,   712,   652,  1148,    27,
    1150,  1151,  1152,  1153,  1154,   267,   272,  1269,  5107,   657,
     640,   170,   137,   308,  1671,   490,   717,   575,   467,  3592,
     260,   343,  1562,   271,   590,   394,   402,  1289,   237,   238,
     420,  1191,  4891,   142,   420,  4542,   710,  1463,   698,   420,
    1580,   696,   413,  3447,   237,   238,    17,    18,   710,    54,
     352,   684,   614,   474,   614,   712,   643,   521,  2817,  4712,
     170,   458,  4157,    17,    18,    49,   543,   684,   584,   498,
     458,   474,  1209,   498,  4596,  1093,   389,   458,   506,   595,
    1209,   676,   450,  5145,   467,    17,    18,   710,   712,   719,
     606,   607,   305,    17,    18,   611,   419,   308,   614,   422,
    4394,   425,   419,   343,   712,   422,   316,   717,   712,   675,
     717,   456,   628,   420,   419,   575,   247,   422,   249,  1217,
    4612,    17,    18,   335,   640,  2335,  1552,   278,   644,  4292,
    2124,  2334,  2162,  2315,  4171,    11,   316,   421,   654,  1725,
     299,   378,   505,  4121,   172,   710,   559,   606,  1574,  3887,
     419,  1409,   283,   422,   689,   615,   466,   673,   542,  1615,
    4568,   683,  1618,   629,  3425,   467,  1622,   419,  1624,  1747,
     422,  2991,  1725,  2991,  2911,  4272,  4339,  1603,  2911,   543,
     474,   419,  1444,   699,   422,   554,   702,   528,   648,   299,
     419,   651,  1747,   422,  2030,   655,  1652,  1653,  1654,  4181,
    4771,   659,  4495,   719,  1244,  1245,  3788,   298,   512,   658,
    3792,   467,  2685,   729,  2004,   731,  2150,  4000,   659,   419,
     608,   698,   422,   419,   740,  2015,   422,   743,  2018,  4012,
     746,  3513,   260,  3252,  3561,  1275,  3395,   753,  1381,  4022,
    4413,  4024,  3462,   680,   512,  1285,  3466,  2761,  1288,   715,
     234,  3660,  3450,  3916,  2991,  1398,   654,   585,  2991,  1998,
    1300,  1301,  1302,   712,   577,  2779,   626,  2909,   579,   674,
     640,  3752,  1647,  1313,  2247,  3562,  3496,  3497,  3498,  4442,
    4063,   729,   595,   626,  2356,  3505,  4196,   716,  3951,   600,
     920,  2150,  3512,   419,   474,  1790,   422,   813,    17,    18,
     626,   692,  2374,   419,   649,   419,   422,  1796,   422,  3460,
    3461,  1471,   623,  2120,   710,   343,  2141,  3468,  2803,  1417,
    3471,  3472,  2705,    27,   654,   419,   460,   419,   422,   419,
     422,   664,   422,   684,   698,   552,   552,  3488,   698,  4633,
     216,   716,  1824,    17,    18,   656,   646,    17,    18,   712,
    4088,   660,  3503,   646,   716,   660,  3507,  3508,  3509,  3510,
    3511,  3561,   698,  3880,  2463,   716,   882,   883,   667,   397,
     693,   710,   716,   693,  2446,   710,   693,   690,   684,  1411,
     716,  4544,  4477,   673,  2456,   888,   648,  4125,   693,  2592,
     712,  2986,   715,  1553,   684,   712,   912,   913,   914,   703,
     916,   917,   918,   552,   920,   614,   922,   712,   913,   716,
     712,  1553,   628,   918,  1512,   931,  4579,   922,  1436,   649,
    1705,   614,  4723,  3733,   693,  1055,  1524,  1057,  2592,  4068,
    1060,  1061,    17,    18,   710,  2586,  1918,  2896,   714,  3761,
    1922,   693,   711,   712,   595,  1075,  1596,  4991,   419,   711,
     677,   422,   968,   919,   660,   693,   712,   923,   585,  1619,
     712,    17,    18,   684,   693,   419,  4503,   983,   422,   985,
     986,   605,  1954,   989,   712,    17,    18,  1619,   398,  4162,
     712,   984,   711,   712,  2684,  1001,   712,   419,    17,    18,
     422,  1145,  1146,   693,  1155,   419,   630,   693,   422,  1757,
     505,    17,    18,  3262,  3263,   636,  1022,  1023,  4916,   689,
     716,   711,   712,  1029,  5021,  1533,  5023,  5024,   698,  3004,
    2356,  3006,   681,   419,  1684,   617,   422,   710,   192,   660,
      17,    18,  1564,  1049,   717,   983,  1686,  1687,   614,  1055,
     313,  1057,   526,  2823,  1060,  1061,    17,    18,  1698,  4695,
    4460,  3831,  1810,   646,   746,  3882,   260,   716,    54,  1075,
     216,   589,  4300,  3843,  3844,   132,   305,   693,    17,    18,
    1564,   681,   138,   666,   667,  1023,   410,   693,    59,   693,
     410,  1029,   458,  3883,    35,   711,   712,  3948,  4513,   207,
     681,   140,   298,    17,    18,  3948,   712,   711,   712,   693,
    4606,   693,  1118,   693,  1751,  4268,   716,  4189,  4190,  1125,
    2446,    17,    18,    34,  4346,  5122,  5123,   711,   712,   930,
    2456,  4346,  5129,  1773,  3778,  1141,  2166,  4347,   262,   402,
    2170,  2625,   335,  1093,   710,  1095,   203,  1140,   272,   343,
    1156,  2635,   122,  3788,   398,   125,  2186,  3792,   676,   509,
    1147,  1683,  4815,  4436,  1916,  1155,  2242,   150,  3395,  4322,
     399,  1790,  3395,  4326,  1155,    86,  1155,  4330,  4331,  1185,
     237,  1155,  4335,  2099,   152,  1191,  1142,  1143,  2829,  1195,
     410,   585,  1198,  2335,   712,   398,  3202,  3948,   710,  2242,
    1195,   132,   714,   397,  3177,  5202,    13,   213,   574,  4862,
     419,  1217,   167,   422,   437,  2283,  3220,  2133,  2134,    17,
      18,  1227,   177,  1024,  2833,   264,  2880,  4183,   410,   168,
    4599,  3142,   693,  2793,  2794,   917,  4183,  2791,  2283,  2793,
    2794,  1361,  2791,  3595,  2793,  2794,  2526,  1185,   214,   693,
     711,   712,  3562,   402,  3562,   419,   313,   168,   422,   419,
     316,  2902,   422,  1269,   206,   631,   676,   711,   712,    76,
     444,   693,   203,  2656,  3783,   669,  4912,  1397,   533,   693,
    1286,  4777,  2465,  1289,   133,  4812,   184,  2233,   213,  1227,
     712,  1411,    17,    18,    17,    18,   687,   711,  1304,   533,
    2246,   140,   426,  2249,  2250,  5030,   237,   693,   674,   310,
      17,    18,   458,   467,   410,   260,    17,    18,  2959,  2960,
      17,    18,    17,    18,  2965,  1445,   712,   378,    17,    18,
     110,   272,  2973,  2974,  2896,  3562,   132,  3566,  2979,  3562,
    1346,  2804,   450,   184,   419,   402,   110,   422,  1286,  2911,
    2611,  2612,  2605,    17,    18,  1361,  4066,   298,  4631,   410,
    5085,  5086,   410,  2678,  4637,  4075,  1304,   717,   195,   267,
     353,   372,  4555,   419,   299,  2604,   422,  2861,  1371,    17,
      18,  4554,   313,   184,  2017,  2614,   560,   419,   712,    74,
     422,  1397,   712,  1399,  5119,   589,  3096,  1403,  2150,   367,
     419,   299,     6,   422,  2389,  1411,  2385,   203,   394,   412,
    1416,  1417,   241,   419,  3003,  4588,   422,   184,   614,  2737,
     136,   270,  2737,   394,  2986,   264,   267,  4068,  4843,  2991,
    4845,     9,   676,  4661,   224,   614,    17,    18,  1444,  1445,
     703,   237,   419,  4596,  1564,   422,    17,    18,  4601,  3103,
      17,    18,   397,  2041,  2042,   710,    60,  1463,   419,   498,
    5179,   422,   608,   418,   228,  1471,   267,  3157,   712,   435,
    1476,   402,  1478,   676,    91,  2716,   710,  1483,    46,   118,
     419,   581,   676,   422,   693,   681,  1436,   710,  5073,    17,
      18,  1497,   712,   178,   533,   420,   527,   114,    17,    18,
     267,   608,   711,  2821,   658,   419,  1512,   449,   422,   712,
    2821,    17,    18,    17,    18,   305,    24,   313,  1524,   505,
    1526,   543,   420,   419,   213,   412,   422,    17,    18,   693,
     712,   710,   299,   693,  1484,  4325,    17,    18,  3708,  3709,
    3710,   452,  2050,   484,  1688,  1483,  1552,  1553,   712,  2137,
    1556,   711,   712,   157,   703,  2188,   542,   479,  1564,  1565,
    3253,    17,    18,  1683,   436,  4604,     0,   478,  1574,   201,
    2896,   617,    17,    18,   401,  4277,   132,    17,    18,   228,
    1586,   638,  1588,  1533,   585,   551,  1706,   711,  1526,   157,
    3565,  1597,  1598,  1599,  1600,  1601,  1602,  1603,  1604,  3253,
    2676,   240,  1597,  1598,  1599,   516,   402,  1602,  2356,   660,
    1616,  1617,  4121,  1619,  4930,   654,   712,  1623,   693,  4772,
     492,   419,  1617,   201,   422,   354,   137,   476,  1623,  2151,
     394,   280,   213,  2676,  1754,  3994,   444,   712,  1644,    17,
      18,    17,    18,   170,   589,   684,  2286,   693,  2275,   619,
    2290,  2291,   622,   420,   711,   287,  2275,    13,   613,   498,
    2986,   693,  1600,  1601,   712,  2991,  1604,  2151,  3407,   580,
     348,   710,  1622,   181,   693,   903,   698,  1683,  1684,    13,
     712,    17,    18,   361,  3238,   401,   689,   693,    13,  3238,
     452,    13,   403,   712,   419,   717,   419,   422,  2446,   422,
    1706,  1707,  1708,  1709,  1710,  1711,  1644,   638,  2456,    17,
      18,   132,   419,  2698,  2630,   422,   693,  4517,   419,    17,
      18,   422,   419,   138,   419,   422,   335,   422,  5127,  2379,
     419,   676,   693,   422,   584,   712,   421,   705,   706,   707,
     708,  5164,  2983,   592,  5167,   595,   698,  2777,  1754,   539,
     648,   712,   560,  3918,   693,   419,   585,   313,   422,  3924,
     271,    13,   394,  3928,  3929,  2833,  3149,  3150,  3151,  3934,
    2389,   420,  1710,  1711,  1780,  1781,  4576,  5362,  3202,   693,
     711,   419,   203,   300,   422,   614,   303,   391,  2833,   428,
    1796,   132,   518,   636,  2870,   151,  3271,   693,   712,   543,
     439,    13,   689,  3444,  3445,  3446,   633,   648,   447,  1037,
    1760,  1817,   523,  1819,   536,   654,   712,   151,   698,    17,
      18,  3796,  3005,   650,   239,    84,   151,  2870,   543,   151,
      17,    18,   667,  3395,  2750,   213,   671,   261,   419,  2824,
     712,   422,   638,  1781,  2760,   684,   402,   648,   419,   188,
      66,   422,   419,  3202,   618,   422,   280,   466,  5281,  4561,
      17,    18,   203,  4565,  4566,  3118,    82,   710,  3186,   473,
     294,   475,    17,    18,   262,  3186,  3191,   180,    94,   269,
     606,   648,  2026,   612,   272,   611,   608,  3528,  3529,  3530,
     132,   419,   313,  3173,   422,   693,   237,  5296,  5297,   151,
     419,   316,   210,   422,   228,    82,   247,   234,   249,   299,
    1916,  1917,   641,   419,   712,   419,   422,    94,   422,   558,
     543,   543,  4746,  1929,   469,    17,    18,    17,    18,   419,
      20,   657,   422,  1939,   711,   712,    17,    18,   419,   151,
     684,   422,   272,   552,    17,    18,    17,    18,   674,   474,
      17,    18,   469,   234,   698,   710,  4741,   284,  4743,  2489,
      17,    18,   717,   419,  2494,   295,   422,  4196,   693,    37,
     693,   496,   313,  1979,   419,  2608,   521,   422,  5151,   419,
    2510,   402,   422,   698,    17,    18,   693,   712,   247,   712,
     249,  1929,   693,   209,   605,    63,   693,   608,   693,   215,
    3562,  1939,   717,   284,   693,   712,  2656,    17,    18,    17,
      18,   712,   537,    17,    18,   712,  3657,   712,   657,    17,
      18,  3336,  2028,  2029,   283,  2555,  3716,  4921,  4922,   693,
     420,  2151,   209,   543,  4736,  2041,  2042,   657,   426,    17,
      18,   419,   258,   419,   422,   211,   422,  2167,   712,  2055,
    2677,   536,  1179,  1180,  2060,   693,  3756,   137,  2677,  2065,
    4884,   402,  2068,  3756,    17,    18,    17,    18,   284,  2075,
    2076,   313,  2078,     9,   712,   698,   698,    17,    18,  2698,
    2707,   258,   638,   419,   698,  4870,   422,  2706,  2707,   717,
     514,  2029,  2622,  2099,   717,   717,  2102,    33,   680,  1226,
    2050,  2751,  2108,    17,    18,  2627,  2112,   284,    25,    17,
      18,   419,   693,  2119,   422,   213,    17,    18,    18,  2751,
     605,   419,   693,   608,   422,  4387,   693,  2133,  2134,  2135,
    3784,  2137,    17,    18,  3873,  3874,   498,  2075,  2076,   305,
    2078,   712,   684,  2627,  2150,  2151,  2783,   250,  2896,    61,
    2156,  2157,  2158,    84,  2160,  2161,  2162,  3233,  3849,   228,
     402,  2167,  4327,  4963,  2102,   693,  3857,   591,   710,  3154,
    2108,   269,   617,   132,   693,  3904,  5222,   136,  2184,    17,
      18,  2131,    20,  3168,   712,   250,  2306,   693,   698,   693,
    3233,  3832,  3833,   712,    17,    18,  3837,  2135,  2204,   228,
    3841,   299,   146,   693,  3845,  2824,   712,   717,   712,  3850,
    3851,  3852,   693,  5030,   414,  3856,   704,   638,  2156,  2157,
    2158,   419,   712,   711,   422,  3652,    13,    17,    18,  3656,
     711,  4460,   419,   399,   704,   422,  3562,   693,  2986,  3269,
     456,   711,  2248,  2991,   203,  3169,  3170,  3171,   693,  2199,
     269,  2201,  3772,   693,   605,    50,   712,   608,  4520,  2265,
     553,  4523,   419,   213,  3180,   422,  5117,  2273,  5085,  5086,
    2276,  2277,   712,  5116,   419,  1442,  2232,   422,   237,   456,
     192,    12,  2288,  2289,   196,   660,  2292,    17,    18,    17,
      18,   665,   605,   140,  2289,   608,  3461,   638,   210,  3245,
    2306,   247,  5119,   249,  3919,  3780,  2312,   132,  3569,   542,
    2248,   660,    20,   553,  3344,   693,   247,   693,   249,  2325,
    5105,  5106,   420,   674,   711,   712,  2953,   419,   250,   419,
     422,  3946,   422,   711,  2953,  2273,   712,   712,   419,  3600,
    3601,   422,   717,  3508,  3509,   316,   419,   563,   419,   422,
     716,   422,   419,   284,   313,   422,  4023,   693,  4025,    44,
    2480,   674,   419,   712,   151,   422,    51,  3628,   717,   540,
      17,    18,  2492,  2379,   779,   780,   712,  2383,   203,  2385,
     660,   258,  2388,   711,   712,   693,   419,   118,   258,   422,
    4031,  2341,   210,    17,    18,   693,   638,   258,   106,   717,
    2350,  2351,   655,   711,   710,  3646,   137,  3891,   180,   419,
     574,   419,   422,   711,   422,   419,   608,   264,   422,   710,
    4120,   419,    17,    18,   422,  1592,  1593,    17,    18,   711,
     712,   711,   712,   649,  3749,  3753,   163,  3752,   626,   605,
     352,   419,   608,   402,   422,  2383,     6,    17,    18,   180,
    3202,  2457,   239,   710,  2460,   828,   710,   172,   665,   390,
     391,   710,   170,   868,  4161,  4165,   419,  1464,   419,   422,
    1467,   422,  4165,  1470,  2480,  4168,   184,  3795,  2598,   419,
     710,   299,   422,   856,  3795,   216,  2492,   710,   313,   710,
     308,    17,    18,    17,    18,   693,   869,   870,  3739,  3149,
    3150,  3151,   210,    17,    18,   419,   693,  2627,   422,  2629,
     665,   419,   427,   711,   422,    17,    18,   710,   419,   250,
     228,   422,  1110,  4853,   711,   456,   710,   235,  1116,  1117,
     935,    17,    18,  4272,   419,  3154,   693,   422,   710,    17,
      18,  3526,   711,   712,   427,   260,   711,   712,   693,  3168,
    3169,  3170,  3171,   261,   711,   467,  3206,  3207,  3208,   267,
     710,   269,   710,  5363,    17,    18,   711,  2711,   711,   712,
      62,    63,   280,  2579,  3206,  3207,  3208,   402,   309,    17,
      18,   419,    74,  3113,   422,   710,   294,    17,    18,    17,
      18,   299,  2598,    17,    18,   710,   419,    13,   710,   422,
     308,   693,   420,   693,    17,    18,   711,   712,  4347,   710,
    4310,  2617,   693,  4861,  3756,   542,  4864,  2623,  3936,   711,
     693,  2627,   693,  2629,  2630,  3936,   693,   710,  3278,   419,
     711,   710,   422,    17,    18,   710,   693,   614,   711,    13,
     711,   717,  5151,   660,   711,   188,  3278,   106,   711,   712,
    2656,   498,    17,    18,   711,   195,    17,    18,    17,    18,
     693,   664,   665,   710,   667,   710,   669,   710,    17,    18,
     378,    45,    17,    18,   711,   712,   664,   665,   711,   638,
     711,   712,   397,   693,   710,   693,   533,   710,  2076,   693,
    2078,   419,   710,   216,   422,   693,   684,   711,   712,  3775,
     712,   711,   410,   711,    17,    18,  4321,   711,  3345,   710,
      17,    18,   420,   711,   710,   693,  3746,   710,   649,  2725,
     710,  4336,   710,   132,   710,    99,  4341,   458,   710,  4344,
     104,  2737,  3775,   711,  2854,   151,  2742,   664,   665,   589,
     693,   710,   693,   710,  2750,  2751,   710,    18,   711,   712,
     458,   457,  5000,   693,  2760,   711,   712,   684,   711,  5007,
     711,  5270,  1167,  2883,  2884,  4406,   711,   712,  2156,  2157,
    2158,   711,   419,   711,   712,   422,  4417,  2783,  4419,   693,
    4421,   568,   569,   710,   571,   693,   573,  2725,   417,  2795,
      18,   710,   693,   518,   203,   419,   605,   711,   422,  3723,
    2920,    84,   261,   711,   591,   710,   514,   654,   693,   540,
     711,  2758,    27,   638,  3562,  2821,   711,   712,  4459,   711,
     712,   280,   710,   239,   419,   410,   711,   422,   237,   419,
     710,  2837,   422,    27,   542,   294,  2842,   684,  4156,   710,
    3987,  2847,  2848,   574,   710,  4156,   710,  2842,  2854,   419,
     390,   391,   422,    62,    63,   693,  4553,   711,   712,   710,
    4589,   401,  4422,   710,  4011,   152,   163,   164,  4422,    84,
     693,  4054,   626,  4422,   589,   606,   710,  2883,  2884,   340,
     341,   152,   710,   591,   345,   346,   347,   168,   711,   172,
      84,  4588,  4585,   419,   710,   419,   422,   710,   422,   710,
     274,   711,   712,   693,   313,   419,   710,  3526,   422,  2847,
    2848,   711,   712,  4585,  2920,   321,   322,   419,   710,   378,
     422,   711,   711,   712,   152,    84,   657,  3821,  3822,  3823,
    4584,   337,  4586,   419,  3828,   458,   422,   711,   712,    98,
     648,   419,  4089,   674,   422,  2951,   711,   712,  2898,  2899,
    2900,  2901,   660,  2903,  2904,   711,   712,   172,   711,   712,
     710,   676,   710,  5211,  5212,   693,   419,  4706,  4707,   422,
     710,  4200,   710,   681,   682,   710,   684,   260,   193,   353,
     712,   419,  3126,   711,   422,   711,   712,   711,   712,   419,
     698,   419,   422,   402,   422,   419,   132,   712,   422,   193,
     136,   711,   712,   711,   712,   226,   419,   715,   716,   422,
     710,  2961,  2962,   710,  2964,   710,  2966,  2967,  2968,  2969,
    2970,  2971,  2972,  4165,   319,  2975,   321,   322,  2978,    28,
     711,   712,  2982,   711,   712,   419,   711,   712,   422,   711,
     712,   710,   337,   710,  4468,   260,   693,   711,   712,   711,
     712,   574,   152,   710,   419,   514,   430,   422,   419,   710,
     419,   422,  4832,   422,   711,   710,   260,   203,    84,   693,
     419,  4771,   710,   422,   419,    74,   710,   422,   711,   712,
     367,   487,   488,  4324,  3614,    84,   410,   711,   711,   712,
     711,   712,   710,   633,  4766,   710,   367,   710,   693,  4360,
     710,   237,   710,   693,  3723,   388,   419,   710,   631,   422,
     650,  3761,   419,   710,   397,   422,   711,   710,   132,   340,
     341,   711,   136,   693,   345,   346,   347,   286,   343,  3761,
     152,   710,   591,   710,  3771,  5209,  3142,   136,  3144,   367,
    4840,   711,  3148,  3149,  3150,  3151,  3676,   711,   712,   343,
    3156,   674,   568,   569,   570,   571,   572,   573,   711,   712,
     711,   712,   710,  4804,  4818,   710,  3172,   693,  4310,   693,
     711,   712,   272,   388,  3180,   591,  5250,   313,   710,   693,
    3186,   118,   397,   710,  5258,   711,   252,   711,   562,   203,
     710,   693,   487,   488,   388,   710,  3202,   711,   481,   710,
    3206,  3207,  3208,   397,   710,  4934,   365,   693,   560,   711,
     711,   712,   711,   712,   130,   693,   711,   712,  3156,   174,
     132,  5295,  4697,   237,   136,   711,   710,  3347,   602,   638,
     711,   712,  3872,   711,   710,   394,   711,   712,   711,   712,
     693,   710,  4726,   180,   260,   710,  4730,  4671,   247,    52,
     249,    37,   710,    63,   710,   693,   715,  4572,   711,  4913,
     711,   712,   217,   693,   710,   693,   402,   367,  3274,   693,
     710,  3911,  3278,   711,   545,   546,   710,    63,  3284,   216,
     693,   711,    34,   711,  3921,   284,  3292,   711,    52,  3284,
    4608,   203,   711,   712,   711,   712,   716,  4608,   711,   313,
     711,   712,  3170,  3171,  4619,   719,   589,   132,   310,   693,
      52,   136,   122,   472,  3320,   125,   712,   545,   546,   417,
     275,   711,   712,   133,   410,   237,  3332,   711,   693,   245,
    3336,   213,   693,   410,   693,   290,   122,  1334,  1335,   125,
     527,  3347,  3348,   153,   693,   367,   711,   133,   693,   542,
     711,   553,   711,   117,  3292,   179,  5056,  3363,   299,  3365,
     710,   644,   711,  5056,   711,   712,   711,   153,   711,   712,
     711,   712,   388,   210,   589,   585,  4860,   560,   203,   605,
     693,   397,  3320,  4133,  4134,   585,   693,   310,   402,   171,
     210,   390,   391,   676,   204,   589,    93,   106,   711,   411,
     132,   313,   401,   712,   711,   601,   712,   170,   711,  3926,
     533,   410,   237,  3363,   136,   574,   703,   704,   705,   706,
     707,   708,   121,  5152,   718,  3431,   381,     6,   132,   712,
     701,   702,   703,   704,   705,   706,   707,   708,   416,   120,
     356,     4,   532,   674,   360,   545,   546,   712,    20,   272,
     436,   168,   368,    59,  5147,   490,   712,   456,   717,  3452,
     270,   676,    74,    13,   680,   481,   711,   711,   711,   711,
      10,   203,  5113,   701,   702,   703,   704,   705,   706,   707,
     708,   151,   676,   712,   270,  4632,    82,   717,   313,   210,
     402,   711,   256,  4478,  5148,  5149,   210,   712,    94,   203,
     711,   298,   638,   711,   711,   237,   152,   711,   711,   684,
    4137,   717,  3518,  4831,  3520,   710,   717,   410,  4137,   172,
    4831,   458,   310,   545,   546,  5225,   310,   310,   201,  4953,
     310,    52,  5225,   237,   106,   310,  3988,  3989,   310,   538,
     712,   712,  2337,  2338,   217,   698,    87,   605,    89,   465,
    4535,   246,   261,  4833,  3560,  4007,   710,   250,  3564,  2354,
     305,   213,   269,   710,  5218,   152,  4018,   377,  2363,  2364,
     380,   280,   315,   589,  4026,  4027,   716,   402,   712,   712,
    5273,   313,   626,   712,   348,   294,   436,   719,    35,   626,
     712,   698,  4668,   210,   380,   136,   712,   361,   170,   536,
     717,   701,   702,   703,   704,   705,   706,   707,   708,   313,
     712,   717,   184,   209,   287,   531,    74,   290,  5272,   712,
     161,   585,   386,   387,   638,  4668,   272,    66,   644,  4771,
     394,   395,   396,   272,  4274,   705,   208,   152,   210,  4279,
    4280,    35,   118,    82,   273,    39,  2441,  2442,  2443,  2444,
     649,   603,   197,   210,   179,    94,   228,  3801,  4643,   712,
     676,   202,   258,   235,  3670,   585,   476,  4652,   557,   378,
     402,   608,   712,   442,  3680,   188,  4917,   710,   118,   216,
     252,   703,   704,   705,   706,   707,   708,   180,   284,   261,
      50,   681,   705,   213,   631,   267,   711,   269,   402,   147,
     710,   410,   248,   712,   180,   152,   248,   441,   280,   134,
     711,   384,   712,    56,   680,   655,   110,   659,  3838,   712,
     657,   367,   294,  4964,   213,   705,   638,   299,   711,   711,
    3680,   125,   711,   213,  3740,   711,   308,   674,   132,   711,
     216,   711,   711,   698,   699,   700,   711,  3753,  3892,  3755,
     712,   704,   712,  3759,  5072,  3761,  4903,  4904,   712,  4906,
     711,  5072,   678,  3883,   550,  3771,  3772,   710,   712,   717,
     209,   614,   711,   711,   710,   215,   215,   711,   711,   695,
     367,   454,   258,   711,   711,   711,   711,   711,  4415,  3795,
     543,   710,   710,   708,   711,   614,  4415,   614,   712,   712,
     626,   195,   259,   269,   437,   514,   378,   710,  4793,   203,
     106,   626,   622,   638,    13,   226,   580,   213,   258,   258,
     712,   210,   210,   710,   710,   272,   296,  3777,   712,   712,
     213,   183,  3838,   309,   566,   521,   622,   717,   410,   717,
     436,   717,   652,   237,   238,   284,  5087,   711,   420,   717,
     466,   298,   367,  3859,  3860,  3861,   712,   653,  4888,  4478,
     456,   712,   542,   712,   210,   614,   652,   410,   272,   654,
     228,   410,   420,   712,  3994,   376,  3882,  3883,   574,   684,
      17,    18,   591,   574,  3834,  3835,   458,   574,   532,   430,
    3896,   574,  3898,  5040,   410,  5042,  5043,  3847,   574,   545,
     546,   210,   716,   710,  3910,   617,   638,   698,  3917,  3915,
    3916,  3920,   712,  3919,  5056,   655,  4535,   698,  4558,   313,
     367,   698,  3860,   309,   698,  3931,  3935,  3933,   698,  3938,
    3936,  4961,  3882,   698,   638,  3944,  3945,  3943,   698,   106,
    3946,   482,   514,   390,   391,  3951,   717,   698,  3898,   711,
     698,   698,   698,   168,  5234,   660,   711,   698,   545,   546,
    3966,   698,   698,   698,   268,   261,   268,  3973,   698,   698,
     542,   698,  5213,  5003,   698,   698,   452,   427,  3973,   698,
     698,     7,   458,   698,   280,   379,   717,   698,  3994,   126,
     127,   128,   129,   130,   626,   711,   626,   436,   294,   712,
     626,   711,   710,  4009,   689,  3943,  3956,   401,   402,   711,
    4016,   711,   305,   711,   698,  5333,   717,   456,   712,   591,
     712,   711,  5333,   712,  4643,   698,   699,   700,    90,  5347,
     545,   546,  5312,  4652,  4040,  5353,  5347,   484,   717,   515,
     712,  5359,  5353,   269,   710,   597,    12,   710,  5359,   626,
     533,   698,   417,   213,   213,   701,   702,   703,   704,   705,
     706,   707,   708,   213,   540,   614,   126,   127,   128,   129,
     130,   276,   474,   183,   712,   515,   648,   402,   614,   710,
     280,    20,   378,  5225,   280,   424,   357,   659,   660,     7,
    4210,   209,   410,   712,   261,   717,   536,    50,   545,   546,
     540,   544,   235,   717,   121,   242,   243,   244,   245,   681,
     682,   121,   684,   280,   561,   702,   703,   704,   705,   706,
     707,   708,    58,   563,   563,   493,   698,   294,   614,   614,
     606,   232,    68,   614,   712,   611,   716,   710,   228,   711,
     712,   710,  4148,   715,   716,   710,    14,    83,   710,   717,
    4156,   705,   710,   270,   710,   631,   270,   710,   533,    95,
      96,    97,   717,   436,   711,   417,   474,   711,   608,   410,
     252,   611,    20,   711,  4793,   710,  5323,   711,   711,   115,
      28,   657,   242,   243,   244,   245,   701,   702,   703,   704,
     705,   706,   707,   708,  2989,  4201,   710,  4838,   674,   705,
     712,   712,   711,   711,  4210,  4325,  4212,  4213,   711,   649,
     649,   378,  4205,    50,   710,   710,   698,   657,   514,   356,
     614,   358,   359,   360,   373,   619,    74,   497,   622,   717,
     533,   368,   710,   712,   711,   213,    84,   105,   711,   633,
     711,   474,   698,   410,   638,   639,   280,   712,   642,   711,
     280,   712,   683,  4203,   701,   702,   703,   704,   705,   706,
     707,   708,  4268,   509,   710,   710,   710,   121,   147,  4275,
     147,  4277,   140,   436,   712,   364,  4282,  4227,   710,   682,
    4230,    82,   419,   436,   436,   422,   626,   282,   136,   157,
     436,   606,    39,   282,   436,   591,   356,   436,   358,   359,
     360,   606,    50,  4309,   436,   710,  4315,   438,   368,   436,
     436,   436,   180,   614,   626,  4321,  4322,   451,   186,  4325,
    4326,  4314,  4328,  4316,  4330,  4331,  5356,   407,   465,  4335,
    4336,   199,   710,   710,   136,  4341,   210,  4275,  4344,  4980,
     210,   711,    50,   712,  4350,    58,   402,   514,   711,   535,
      28,   684,    30,   296,   711,    68,   711,   512,   226,    50,
     711,  4367,   711,   110,   191,  5350,   420,   308,   226,   160,
      83,   219,   292,   711,   300,   712,   712,   436,   125,   280,
    4386,   280,    95,    96,    97,   132,   509,    65,   560,   410,
     258,   688,   711,   530,   531,   711,   264,   710,   712,   247,
    4406,   249,   115,   710,  4410,   465,    84,  4413,   483,   250,
      84,   717,   711,  4406,    92,  4365,   710,   284,    92,   355,
     284,   402,    20,   410,   591,   453,   410,    84,   257,    37,
     407,   671,   671,   576,  4578,   710,   284,  5074,   374,   711,
     308,   617,   299,   121,   712,   711,   711,   121,   195,   711,
     711,    63,   712,   270,   711,   711,   203,   711,   136,   364,
     711,   139,   286,   466,   711,    50,    18,   712,   417,   269,
     530,   531,   684,   711,   711,   711,   660,   712,   660,   710,
    4486,    37,  5101,   717,   528,   710,   710,   284,   711,   710,
     237,   238,   170,    20,   172,   284,    76,   711,   172,   712,
    3295,    20,  3297,  3298,  3299,    37,   712,  4513,   711,   533,
    3305,   684,    88,   711,  3309,  3310,  3311,  3312,  3313,   712,
    3315,  3316,   155,  3318,  3319,  4531,  3321,  3322,  3323,  3324,
    3325,  3326,  3327,  3328,  3329,  3330,  4542,   552,  3333,  3334,
    3335,   678,   390,   391,  4688,  4551,   717,   698,   210,   402,
     712,   364,   190,   401,   711,  4561,   693,   694,   695,  4565,
    4566,   148,   410,   284,   712,   608,   313,   711,   660,   247,
     710,   249,   660,   711,   145,  4581,   711,   410,  4722,   660,
     258,   416,   712,   711,   258,    66,   710,   265,   144,   710,
    4596,   459,   712,   529,   301,  4601,   711,   710,   717,   188,
     188,   136,  4608,  3398,   608,   283,  4612,   136,   456,   402,
     212,  4617,   144,   183,   521,   483,   172,  3412,   678,   175,
     508,   185,   520,   491,   711,   711,    64,   450,   450,   417,
    4636,   499,   379,  4639,   694,   695,   654,   710,    84,   710,
     172,   710,   355,   175,   711,  5286,   710,   407,   402,   710,
     339,    50,    98,   711,   401,   402,    50,   593,   167,    50,
     269,   374,   218,   579,   342,   533,   717,   183,   342,    18,
     210,   596,   711,   410,   610,   710,   401,   710,   710,   547,
     548,  4687,    15,   284,   362,   241,   218,   284,   362,   654,
     538,   247,   136,   249,    20,    50,    50,    50,   710,   145,
     269,   586,   710,   169,   684,   520,  4712,   423,   616,   241,
     712,   147,   147,   710,   388,   247,   172,   249,   717,   433,
     710,  4727,   710,   393,   710,   665,   711,   710,   710,   533,
    4736,  5350,   600,  4739,   597,   711,   711,   622,   710,   624,
      50,    50,   710,   710,  4750,   210,   155,   632,   308,  4687,
      12,   429,   710,   431,   310,   710,   417,   711,    66,    66,
     645,   439,   710,   631,     5,   717,  4772,   410,   410,   417,
    4890,   417,   521,   711,   659,  4784,  4782,   140,   310,   335,
     711,   654,   712,   162,   248,   284,   654,    50,   656,  4795,
    4796,   520,   711,   252,   507,   402,  4947,   710,  4804,   542,
     712,   649,   996,   335,  2758,  1016,  2980,  1420,  4421,  4417,
    3136,  4804,  4419,  1095,  3307,  4859,   529,  3391,  1146,  4540,
    4857,  4993,  5187,  1176,  4854,  4831,  4718,  4386,  4636,  4835,
    4713,  4410,  4804,  4031,    51,   646,  5101,  4843,  2149,  4845,
     286,  2065,  3142,  4138,  4782,  2407,   524,  4853,  3167,   734,
    3723,   735,  2708,  2706,  1225,  2707,  1763,  2030,   536,  4866,
    4572,  3430,  4734,  2916,  4340,  3735,  4485,   614,  4148,  3740,
    2127,  5078,   619,   758,  4833,   622,  5162,  4488,   763,  5312,
     593,  5242,  5286,  3336,  4890,  4980,   633,  3754,  4165,  2283,
    3425,   638,   639,  3951,  4268,   642,  5303,   610,  3431,  4923,
    5036,   457,  4891,  4281,   582,   583,   584,  3479,  3592,  4373,
     466,   589,  3513,  4899,  5074,   589,  3653,  4890,  2883,   365,
    3991,  3656,   807,  5249,  3087,   457,    83,  3648,   606,   485,
    4880,   609,   606,    83,   466,  5211,  5007,  5212,  5108,  4945,
    5000,  4011,   827,  3430,   390,   391,  4737,   503,   394,  4727,
    3948,   629,  1122,   485,  2732,  1661,  4788,  1189,  2807,  2385,
    5066,  4597,  1807,  1781,  2684,  2135,  3156,  3717,  5088,  1159,
     648,   503,  4311,  5057,  1740,  3099,  2872,  2335,   154,  2488,
    3680,  2484,  3126,  1399,  3255,  2822,  4992,  2816,  4183,  1289,
    3664,  2810,   877,   878,   879,   880,   552,  4848,  4991,   555,
    4709,  5182,  4040,  5183,   889,  1254,  2615,  4125,  4581,  5015,
    4580,  4468,  4953,  4608,  4464,  5021,  3238,  5023,  5024,  2315,
     552,  4514,  4578,   555,  5030,  2457,   472,  3347,    83,   585,
    1483,  2736,  1526,  4156,  2678,  3748,  3795,  3747,   716,  5072,
     657,  3836,  5186,   928,  3839,   930,  4996,  1607,   754,   605,
    1817,  2243,   608,   585,  4992,   645,  2244,  2801,  1155,  5179,
    5066,   645,   107,  4551,  2053,  1534,  5072,  3720,  5279,  4756,
    5310,  4910,  5078,  5353,  5359,   251,   866,   253,  3256,  2276,
    5030,  3753,  5088,  2781,  2325,  3771,   971,   644,  2184,  1980,
     644,  2773,  2193,  2772,  5100,  1683,   640,  2108,  3443,  1554,
    1473,  2750,   987,   988,  1041,  2379,   991,  2836,  3144,  4683,
    3452,   641,  5270,  5119,  1048,  3252,  5122,  5123,  3786,  2810,
    5240,  4186,   680,  5129,  5306,   680,  1146,   680,   574,    -1,
    1146,  5081,  5082,  1146,  1685,    -1,    -1,    -1,    -1,    -1,
    1025,   317,   318,    -1,   320,   321,   322,   323,   324,    -1,
     326,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,    -1,    -1,    -1,    -1,    -1,    -1,  5119,
      -1,    -1,    -1,  5179,    -1,    -1,  5182,  5183,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  5202,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  5360,  5337,    -1,    -1,
    5170,  5171,    -1,  5343,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  5240,    -1,    -1,    -1,    -1,    -1,
    5246,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   487,   488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1205,    -1,    -1,  1208,  1209,    -1,    -1,  5333,    -1,    -1,
      -1,  5337,    -1,    -1,    -1,    -1,    -1,  5343,    -1,    -1,
      -1,  5347,    -1,    -1,    -1,    -1,    -1,  5353,  1233,  1234,
    5300,    -1,    -1,  5359,    -1,    -1,    -1,  1242,  1243,  1244,
    1245,  1246,  1247,  1248,  1249,  1250,  1251,  1252,  1253,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1263,  1264,
      -1,  1266,  1267,  1268,    -1,    -1,    -1,    -1,  1273,  1274,
    1275,    -1,    -1,  1278,  1279,  1280,  1281,  1282,  1283,    -1,
    1285,    -1,  1287,  1288,    -1,    -1,    -1,    -1,    -1,    -1,
    1295,  1296,    -1,  1298,  1299,  1300,  1301,  1302,    -1,    -1,
      -1,    -1,  1307,  1308,  1309,  1310,    -1,  1312,  1313,  1314,
      -1,  1316,    -1,  1318,  1319,  1320,  1321,  1322,    -1,    -1,
    1325,    -1,    -1,  1328,  1329,    -1,    -1,    -1,  1333,    -1,
      -1,    -1,  1337,  1338,  1339,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1349,  1350,  1351,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1359,    -1,    -1,    -1,    -1,    -1,
      -1,  1366,  1367,  1368,  1369,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1377,  1378,  1379,    -1,  1381,  1382,  1383,  1384,
    1385,    -1,  1387,  1388,  1389,  1390,  1391,  1392,  1393,  1394,
      -1,    -1,    -1,  1398,    -1,  1400,    -1,    -1,     6,    -1,
      -1,    -1,    -1,    -1,    12,    -1,    14,    28,    16,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      28,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    62,    63,    -1,    65,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    74,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    84,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    92,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    -1,  1487,    -1,    92,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,  1503,    -1,
     121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    -1,   136,    -1,    -1,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,
      -1,   139,    -1,    -1,    28,    -1,    30,    -1,    -1,    -1,
     148,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   157,
      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,   166,    -1,
      -1,    -1,   170,    -1,   172,    -1,    -1,  1572,    62,    63,
      -1,    65,    -1,    -1,   182,    -1,    -1,    -1,    -1,    -1,
      74,    -1,  1587,    -1,    -1,    -1,    -1,    -1,    -1,   624,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,
     208,    -1,    -1,    -1,    -1,    -1,  1611,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   659,    -1,   247,   121,   249,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   258,    -1,   247,
      -1,   249,   136,    -1,   265,   139,  1651,   255,    -1,    -1,
     258,    -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,
      -1,    -1,   283,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   734,
     308,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   342,    -1,    -1,    -1,    -1,    -1,    -1,   763,    -1,
      -1,    -1,    -1,    -1,   342,    -1,    -1,    -1,    -1,    -1,
      -1,   362,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   247,   362,   249,    -1,    -1,   366,    -1,
      -1,    -1,    -1,    -1,   258,    -1,    -1,    -1,    -1,    -1,
      -1,   265,   807,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1790,    -1,    -1,    -1,   283,
      -1,    -1,   827,    -1,    -1,    -1,    -1,    -1,    -1,    28,
      -1,    30,    -1,    -1,    -1,    -1,    -1,   415,   429,    -1,
     431,    -1,   420,    -1,    -1,    -1,    -1,    -1,   439,    -1,
      -1,   429,    -1,   431,    -1,  1830,    -1,    -1,   436,    -1,
      -1,   439,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   880,    -1,    -1,   342,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,   362,   477,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   492,   493,   494,   495,    -1,    -1,
      -1,    -1,   121,   928,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   524,    -1,    -1,    -1,   136,    -1,    -1,
     139,    -1,    -1,    -1,    -1,   536,   524,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   536,    -1,
      -1,    -1,    -1,    -1,    -1,   429,   971,   431,    -1,    -1,
      -1,    -1,    -1,   172,    -1,   439,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1960,  1961,  1962,    -1,    -1,
      -1,   582,   583,   584,    -1,    -1,    -1,    -1,   589,    -1,
      -1,  1976,    -1,    -1,   582,   583,   584,    -1,    -1,    -1,
      -1,   589,    -1,    -1,    -1,   606,    -1,    -1,   609,    -1,
      -1,    -1,    -1,  1998,    -1,    -1,    -1,    -1,   606,  2004,
      -1,   609,  2007,    -1,  2009,    -1,    -1,    -1,   629,    -1,
    2015,    -1,  2017,  2018,    -1,    -1,    -1,    -1,   247,    -1,
     249,   629,    -1,    -1,    -1,    -1,   634,   648,    -1,   258,
     524,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,  2044,
     648,    -1,   536,    -1,    -1,    -1,    -1,    -1,  2053,    -1,
      -1,    -1,    -1,    -1,   283,    -1,  4971,  4972,    -1,    -1,
    4975,  4976,  4977,  4978,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4997,    -1,    -1,    -1,    -1,    -1,   582,   583,
     584,   712,    -1,    -1,    -1,   589,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   716,    -1,
      -1,    -1,   606,   342,    -1,   609,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2130,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   362,  2139,   629,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   648,    -1,    -1,    -1,    -1,  2164,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5083,  5084,
    1205,    -1,    -1,  1208,    -1,    -1,    -1,  5092,    -1,    -1,
    2185,    -1,    -1,  2188,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2202,  1233,  1234,
     429,    -1,   431,    -1,    -1,    -1,    -1,  1242,  1243,    -1,
     439,  1246,  1247,  1248,  1249,  1250,  1251,  1252,  1253,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1263,  1264,
      -1,  1266,  1267,  1268,    -1,    -1,    -1,    -1,  1273,  1274,
      -1,    -1,    -1,  1278,  1279,  1280,  1281,  1282,  1283,    -1,
    1285,    -1,  1287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1295,  1296,    -1,  1298,  1299,    -1,    -1,    -1,    -1,    -1,
    2275,    -1,  1307,  1308,  1309,  1310,    -1,  1312,    -1,    -1,
      -1,  1316,    -1,  1318,  1319,  1320,  1321,  1322,    -1,    -1,
    1325,    -1,    -1,  1328,  1329,   524,    -1,    -1,  1333,    -1,
      -1,    -1,  1337,  1338,  1339,    -1,    -1,   536,    -1,    -1,
      -1,    -1,    -1,    -1,  1349,  1350,  1351,    -1,    -1,    -1,
    2325,    -1,    -1,    -1,  1359,    -1,    -1,    -1,    -1,    -1,
      -1,  1366,  1367,  1368,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   582,   583,   584,    -1,    -1,    -1,    -1,
     589,    -1,    -1,    -1,    -1,  1400,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   606,    -1,    -1,
     609,    -1,    -1,    -1,  2389,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2403,    -1,
     629,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   648,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2466,    -1,    -1,    -1,  2470,    -1,    -1,  1503,    -1,
    2475,  2476,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2484,
      -1,  2486,    -1,  2488,  2489,  2490,  2491,    -1,    -1,  2494,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2502,    -1,    -1,
    2505,    -1,  2507,    -1,  2509,  2510,    -1,  2512,    -1,  2514,
      -1,  2516,  2517,  2518,  2519,    -1,  2521,    -1,  2523,    -1,
      -1,  2526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2535,    -1,    -1,    -1,    -1,    -1,    -1,  1572,  2543,    -1,
      -1,  2546,    -1,  2548,    -1,    -1,  2551,  2552,    -1,  2554,
    2555,    -1,  1587,    -1,  2559,  2560,  2561,    -1,    -1,    -1,
    2565,  2566,  2567,    -1,  2569,    -1,  2571,    -1,  2573,    -1,
    2575,    -1,  2577,    -1,    -1,    -1,    -1,    -1,  2583,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2599,    -1,    -1,    -1,    -1,    -1,
    2605,    -1,    -1,  2608,    -1,    -1,    -1,    -1,    -1,  2614,
      -1,    -1,    -1,  2618,    -1,    -1,  1651,  2622,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
      30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    62,    63,    -1,    65,    -1,    -1,    -1,    -1,
      -1,    -1,  2677,    -1,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    92,  2698,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2706,  2707,  2708,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     6,  2761,    -1,    -1,    -1,
      -1,    12,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,    -1,  2779,    -1,    -1,    28,    -1,    30,
      -1,    -1,    -1,    -1,    -1,    -1,  2791,    -1,  2793,  2794,
      -1,    -1,    -1,    -1,    -1,  1830,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    -1,  2824,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    92,    -1,    -1,    -1,  2850,    -1,   247,    -1,   249,
      -1,   102,    -1,    -1,    -1,  2860,    -1,    -1,   258,    -1,
      -1,    -1,  2867,    -1,    -1,   265,    -1,    -1,    -1,    -1,
     121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   283,    -1,   136,    -1,    -1,   139,    -1,
    2895,    -1,    -1,    -1,    -1,    -1,    -1,   148,   298,    -1,
      -1,    -1,  2907,  2908,    -1,    -1,   157,    -1,    -1,    -1,
      -1,  2916,    -1,    -1,    -1,   166,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,  1960,  1961,  1962,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   342,    -1,    -1,    -1,    -1,    -1,  2953,  2954,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,
      -1,    -1,   362,  1998,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2007,    -1,  2009,    -1,    -1,    -1,    -1,  2984,
    2985,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,   249,    -1,
      -1,    -1,    -1,    -1,  3009,    -1,    -1,   258,  3013,  2044,
      -1,    -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   429,
      -1,   431,   283,    -1,    -1,    -1,    -1,  3042,  3043,   439,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,
      -1,    -1,    -1,  3068,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3077,    -1,  3079,    -1,  3081,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   342,    -1,    -1,    -1,  2130,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2139,    -1,    -1,    -1,  3113,    -1,
      -1,   362,    -1,  3118,    -1,   366,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   524,    -1,    -1,    -1,    -1,  2164,
      -1,  3136,    -1,    -1,    -1,    -1,   536,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3154,
    2185,    -1,    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,
    3165,    -1,    -1,  3168,  3169,  3170,  3171,  2202,  3173,   420,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,   429,    -1,
     431,    -1,   582,   583,   584,    -1,    -1,    -1,   439,   589,
      -1,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    65,    66,   606,    -1,    -1,   609,
      -1,    -1,    -1,    -1,    -1,  3220,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    86,    -1,    -1,    -1,   629,
      -1,    -1,    -1,  3238,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   493,    -1,   105,    -1,    -1,    -1,   648,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     131,    -1,    -1,   524,    -1,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,    -1,    -1,   536,    -1,    -1,    -1,    -1,
    2325,    -1,    -1,    -1,   155,    -1,   157,    -1,    -1,    -1,
      -1,  3306,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   170,
     710,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,
      -1,   582,   583,   584,    -1,    -1,  3341,    -1,   589,    -1,
      -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3358,    -1,   606,    -1,    -1,   609,    -1,
      -1,    -1,   223,    -1,    -1,   226,    -1,    -1,  2403,    -1,
      -1,   232,    -1,    -1,    -1,   236,    -1,    -1,   629,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   250,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   648,    -1,    -1,
      -1,    -1,    -1,   264,    -1,   266,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3425,    -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,
      -1,  2466,    -1,    -1,    -1,  2470,    -1,    -1,    -1,    -1,
    2475,  2476,    -1,   304,    -1,    -1,    -1,   308,    -1,  2484,
      -1,  2486,    -1,  2488,   315,  2490,  2491,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2502,    -1,    -1,
    2505,    -1,  2507,    -1,  2509,    -1,    -1,  2512,    -1,  2514,
      -1,  2516,  2517,  2518,  2519,    -1,  2521,    -1,  2523,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2535,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2543,    -1,
      -1,  2546,    -1,  2548,    -1,    -1,  2551,  2552,    -1,  2554,
      -1,  3526,    -1,    -1,  2559,  2560,  2561,    -1,    -1,    -1,
    2565,  2566,  2567,    -1,  2569,    -1,  2571,    -1,  2573,    -1,
    2575,    -1,  2577,    -1,    -1,    -1,    -1,    -1,  2583,    -1,
      -1,    -1,    -1,    -1,   415,    -1,  3561,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2599,    -1,    -1,  3572,    -1,    -1,
      -1,    -1,    -1,   434,    -1,   436,    -1,    -1,    -1,  2614,
      -1,    -1,    -1,  2618,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   452,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3605,    -1,    -1,   464,    -1,    -1,  3611,  3612,    -1,  3614,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3625,    -1,    -1,    -1,    -1,  3630,    -1,    -1,  3633,   490,
    3635,  3636,   493,    -1,   495,    -1,   497,   498,    -1,    -1,
     501,   502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   513,    -1,    -1,   516,    -1,    -1,    -1,    14,
      -1,    16,    -1,    -1,    -1,    -1,   527,    -1,    -1,    -1,
      -1,  3676,    -1,  2708,    -1,    -1,    -1,    -1,    -1,    34,
      -1,   542,    -1,    38,    -1,    -1,   547,   548,   549,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,
      -1,    56,    -1,    -1,    -1,    60,  3711,    -1,    -1,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,  3723,   580,
      -1,    -1,    -1,    -1,    -1,    -1,  2761,   588,    -1,    -1,
      -1,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3747,    -1,  2779,    -1,    -1,    -1,    -1,    -1,
     105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   634,    -1,    -1,   131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   140,   647,   142,   143,    -1,
     651,    -1,  3797,   654,    -1,    -1,    -1,    -1,   659,    -1,
     155,    -1,   157,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   683,   684,    -1,  2860,    -1,    -1,    -1,    -1,
     691,   186,  2867,    -1,    -1,    -1,   697,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,
      -1,   226,    -1,    -1,    -1,  3880,    -1,   232,    -1,    -1,
      -1,   236,  3887,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3895,    -1,    -1,    -1,    -1,   250,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
      -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2954,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3948,    -1,    -1,    -1,    -1,    -1,   304,
      -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,    -1,
     315,    -1,    -1,    -1,    -1,  3970,  3971,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3009,    -1,    -1,    -1,  3013,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3042,  3043,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4028,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3068,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3077,    -1,  3079,    -1,  3081,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   434,
      -1,   436,    -1,  4088,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   452,    -1,    -1,
      -1,  3136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   464,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3165,    -1,  4137,    -1,    -1,   490,    -1,    -1,   493,    -1,
     495,    -1,   497,   498,    -1,    -1,   501,   502,    -1,    -1,
      -1,    -1,  4157,    -1,    -1,    -1,    -1,    -1,   513,    -1,
      -1,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   527,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3220,    -1,   542,  4193,    -1,
      -1,    -1,   547,   548,   549,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    13,    -1,    -1,    -1,   580,    -1,    -1,    -1,    -1,
      14,    -1,    16,   588,    26,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,
      62,    63,    -1,    -1,    -1,    -1,    60,    -1,    -1,   634,
      -1,    65,    66,    75,    -1,    -1,    -1,    -1,    -1,  4294,
      -1,    -1,   647,    -1,    -1,  4300,   651,    -1,    -1,   654,
      -1,    -1,    86,    -1,   659,    -1,    -1,    -1,    -1,   101,
      -1,   103,    -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,    -1,  3358,    -1,    -1,    -1,   119,   683,   684,
      -1,    -1,    -1,    -1,    -1,    -1,   691,    -1,    -1,    -1,
      -1,    -1,   697,    -1,    -1,    -1,    -1,   131,    -1,    -1,
     142,   143,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   155,    -1,   157,    -1,    -1,    -1,    -1,    -1,   171,
     172,    -1,    -1,    -1,   176,    -1,    -1,   179,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4415,    -1,    -1,    -1,    -1,    -1,    -1,  4422,    -1,    -1,
      -1,   205,   214,    -1,   216,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   224,    -1,    -1,   227,    -1,    -1,    -1,   223,
      -1,  4446,   226,    -1,    -1,    -1,    -1,    -1,   232,    -1,
      -1,    -1,   236,    -1,    -1,   247,    -1,   249,    -1,  4464,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,    -1,    -1,
      -1,    -1,  4477,  4478,    -1,    -1,    -1,    -1,    -1,    -1,
     264,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     282,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   305,    -1,    -1,    -1,    -1,    -1,    -1,
     304,    -1,    -1,    -1,   308,    -1,    -1,    -1,    -1,    -1,
    4535,    -1,    -1,    -1,    -1,    -1,    -1,  3572,    -1,    -1,
      -1,    -1,    -1,   335,    -1,    -1,    -1,    -1,    -1,    -1,
    4555,    -1,  4557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3605,    -1,    -1,    -1,    -1,    -1,  3611,  3612,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3625,    -1,    -1,    -1,    -1,  3630,    -1,    -1,  3633,    -1,
    3635,  3636,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   415,    -1,    -1,    -1,    -1,    -1,    -1,  4643,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4652,    -1,    -1,
     434,   443,   436,    -1,    -1,    -1,  4661,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   457,   458,    -1,   452,   461,
     462,    -1,    -1,    -1,    -1,    -1,  3711,    -1,    -1,    -1,
     464,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4698,   486,  4700,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,   493,
      -1,   495,  3747,    -1,   498,    -1,    -1,   501,   502,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   513,
      -1,    -1,   516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4746,    -1,   527,  4749,    -1,    -1,   539,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   542,    -1,
     552,    -1,  3797,   547,   548,   549,    -1,    -1,    -1,    -1,
      -1,  4776,    36,    37,    -1,    -1,    -1,    -1,    42,    -1,
      44,    -1,    46,    47,    -1,    -1,    -1,    -1,  4793,    -1,
      -1,    -1,    -1,   585,    -1,    -1,   580,   589,    -1,    63,
      -1,    -1,    -1,    -1,   588,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   608,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4833,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     634,    -1,  3887,    -1,    -1,    -1,  4861,    -1,   122,  4864,
    3895,   125,    -1,   647,    -1,    -1,    -1,   651,    -1,   133,
     654,    -1,    -1,    -1,    -1,   659,    -1,   669,    -1,  4884,
      -1,    -1,    -1,    -1,    -1,   677,  4891,    -1,    -1,   153,
      -1,    -1,    -1,    -1,  4899,    -1,    -1,    -1,    -1,    -1,
     684,    -1,    -1,    -1,    -1,    -1,    -1,   691,    -1,   173,
      -1,    -1,    -1,   697,    -1,    -1,    -1,    -1,  4923,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4937,    -1,    -1,  3970,  3971,    -1,   202,    -1,
     204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   220,   221,    -1,    -1,
      36,    37,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
      46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,
    4995,    -1,    -1,  4028,    -1,  5000,    -1,    -1,    -1,    -1,
      -1,    -1,  5007,    -1,    -1,    -1,   270,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,
      -1,    -1,    -1,    -1,    -1,  5050,   122,   311,   312,   125,
     314,    -1,    -1,  4088,    -1,    -1,    -1,   133,  5063,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  5073,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   349,   350,   351,    -1,    -1,
    4125,    -1,    -1,    -1,    -1,    -1,  5101,   173,    -1,    -1,
      -1,    -1,    -1,  5108,    -1,   369,   370,   371,    -1,  5114,
      -1,    -1,    -1,   377,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,  4157,    -1,    -1,    -1,   202,    -1,   204,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     404,    -1,   406,    -1,   220,   221,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4193,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  5209,    -1,  5211,  5212,    -1,    -1,
      -1,  5216,   476,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,    -1,    -1,  5234,
      -1,    -1,    -1,    -1,    -1,   311,   312,    -1,   314,    -1,
      -1,    -1,    -1,    -1,    -1,  5250,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  5258,    -1,    -1,   520,    -1,    -1,  4294,
      -1,    -1,    -1,    -1,    -1,  4300,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   349,   350,   351,    -1,    -1,   542,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    5295,    -1,   556,   369,   370,   371,    -1,    -1,    -1,    -1,
      -1,   377,    -1,    -1,   380,    -1,    -1,  5312,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,    -1,
     406,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  5350,    -1,    -1,    -1,    -1,
      -1,   615,    -1,    -1,    -1,   619,    -1,  5362,   622,   623,
     624,   625,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   445,
     446,    -1,   636,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     476,    -1,   666,   667,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4446,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4464,
      -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4477,    -1,   520,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   542,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     556,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4557,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   615,
      -1,    -1,    -1,   619,    -1,    -1,   622,   623,   624,   625,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     636,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     666,   667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   695,
      -1,    -1,    -1,    -1,    -1,    -1,  4661,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4698,    -1,  4700,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4923,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4937,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,    -1,  5050,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,   116,   117,   118,  5063,   120,
     121,   122,   123,   124,   125,    -1,    -1,    -1,  5073,   130,
     131,   132,    -1,    -1,   135,   136,   137,    -1,   139,    -1,
     141,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,   229,   230,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,   250,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,   264,   265,   266,    -1,   268,    -1,    -1,
     271,  5216,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
     291,   292,    -1,   294,   295,   296,    -1,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,   313,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,   379,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,  5362,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,   525,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,   614,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,   627,   628,   629,   630,
      -1,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
     661,   662,   663,   664,   665,    -1,    -1,   668,   669,   670,
      -1,   672,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   704,    -1,    -1,    -1,    -1,   709,   710,
      -1,    -1,   713,   714,    -1,    -1,   717,   718,     5,    -1,
       7,     8,     9,    10,    11,    12,    13,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,    -1,    -1,   130,   131,   132,    -1,    -1,   135,   136,
     137,    -1,   139,    -1,   141,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,   236,
     237,   238,    -1,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,   250,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,   264,   265,   266,
      -1,   268,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,
     287,   288,   289,    -1,    -1,   292,    -1,   294,   295,   296,
      -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,   313,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,   363,   364,    -1,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,   379,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,    -1,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,   428,   429,   430,    -1,   432,   433,    -1,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,    -1,   503,   504,    -1,   506,
     507,    -1,   509,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,   520,    -1,   522,   523,   524,   525,   526,
     527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,
     537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,
      -1,   548,    -1,   550,   551,   552,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,   589,   590,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,   614,   615,   616,
      -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,    -1,   646,
     647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,
     657,   658,    -1,    -1,   661,   662,   663,   664,   665,    -1,
      -1,   668,   669,   670,    -1,   672,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,   688,    -1,   690,   691,   692,    -1,    -1,   695,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,    -1,
      -1,    -1,   709,   710,    -1,    -1,   713,   714,    -1,    -1,
     717,   718,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,    -1,    -1,   130,   131,   132,
      -1,    -1,   135,   136,   137,    -1,   139,    -1,   141,    -1,
      -1,   144,    -1,   146,   147,   148,   149,   150,    -1,    -1,
      -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,   227,    -1,   229,   230,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,   249,   250,    -1,    -1,
     253,   254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
      -1,   264,   265,   266,    -1,   268,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,
      -1,   294,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,
     303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,
     313,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
     353,   354,   355,   356,   357,    -1,    -1,   360,   361,   362,
     363,   364,    -1,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,    -1,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,   432,
     433,    -1,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,    -1,
     473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,   489,    -1,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   501,    -1,
     503,   504,    -1,   506,   507,    -1,   509,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,   520,    -1,   522,
     523,   524,   525,   526,   527,   528,   529,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,
      -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,   586,   587,   588,   589,   590,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,    -1,    -1,   609,   610,   611,   612,
      -1,   614,   615,   616,    -1,   618,   619,   620,   621,   622,
      -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,
     653,    -1,   655,    -1,   657,   658,    -1,    -1,   661,   662,
     663,   664,   665,    -1,    -1,   668,   669,   670,    -1,   672,
     673,   674,   675,   676,   677,   678,   679,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,
      -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     703,   704,    -1,    -1,    -1,    -1,   709,   710,    -1,    -1,
     713,   714,    -1,    -1,   717,   718,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
      -1,   130,   131,   132,    -1,    -1,   135,   136,   137,    -1,
     139,    -1,   141,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,    -1,
      -1,    -1,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,   250,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,   264,   265,   266,    -1,   268,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,    -1,   294,   295,   296,    -1,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,
     309,   310,    -1,    -1,   313,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
     379,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,
     429,   430,    -1,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
     489,    -1,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,
     509,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,   520,    -1,   522,   523,   524,   525,   526,   527,   528,
     529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,
      -1,   550,   551,   552,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,   586,   587,   588,
     589,   590,    -1,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,   614,   615,   616,    -1,   618,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,    -1,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,    -1,   646,   647,    -1,
      -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,
      -1,    -1,   661,   662,   663,   664,   665,    -1,    -1,   668,
     669,   670,    -1,   672,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,
      -1,   690,   691,   692,    -1,    -1,   695,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   703,   704,    -1,    -1,    -1,    -1,
     709,   710,    -1,    -1,   713,   714,    -1,    -1,   717,   718,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,    -1,    -1,   130,   131,   132,    -1,    -1,
     135,   136,   137,    -1,   139,    -1,   141,    -1,    -1,   144,
      -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,
     165,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,    -1,    -1,    -1,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,   241,    -1,    -1,    -1,
     245,   246,   247,   248,   249,   250,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,   264,
     265,   266,    -1,   268,    -1,    -1,   271,    -1,   273,   274,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,
      -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,   294,
     295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,
     305,    -1,   307,    -1,   309,   310,    -1,    -1,   313,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,
     355,   356,   357,    -1,    -1,   360,   361,   362,   363,   364,
      -1,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,   379,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,
      -1,    -1,    -1,   428,   429,   430,    -1,   432,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,    -1,   473,    -1,
      -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,   489,    -1,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,   501,    -1,   503,   504,
      -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,   520,    -1,   522,   523,   524,
     525,   526,   527,   528,   529,    -1,   531,   532,    -1,    -1,
      -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,   544,
      -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,   589,   590,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,    -1,    -1,   609,   610,   611,   612,    -1,   614,
     615,   616,    -1,   618,   619,   620,   621,   622,    -1,    -1,
      -1,    -1,    -1,   628,   629,   630,    -1,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
      -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,
     655,    -1,   657,   658,    -1,    -1,   661,   662,   663,   664,
     665,    -1,    -1,   668,   669,   670,    -1,   672,   673,   674,
     675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,    -1,
     695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,   704,
      -1,    -1,    -1,    -1,   709,   710,    -1,    -1,   713,   714,
      -1,    -1,   717,   718,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
     131,   132,    -1,    -1,   135,   136,   137,    -1,   139,    -1,
     141,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,   229,   230,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,   250,
      -1,   252,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,   264,   265,   266,    -1,   268,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,   294,   295,   296,    -1,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,   313,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,   379,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,   525,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,   614,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
     661,   662,   663,   664,   665,    -1,    -1,   668,   669,   670,
      -1,   672,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   704,    -1,    -1,    -1,    -1,   709,   710,
      -1,    -1,   713,   714,    -1,    -1,   717,   718,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,    -1,    -1,   130,   131,   132,    -1,    -1,   135,   136,
     137,    -1,   139,    -1,   141,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,   236,
     237,   238,    -1,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,   250,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,   264,   265,   266,
      -1,   268,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,
     287,   288,   289,    -1,    -1,   292,    -1,   294,   295,   296,
      -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,   313,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,   363,   364,    -1,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,   379,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,   428,   429,   430,    -1,   432,   433,    -1,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,    -1,   503,   504,    -1,   506,
     507,    -1,   509,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,   520,    -1,   522,   523,   524,   525,   526,
     527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,
     537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,
      -1,   548,    -1,   550,   551,   552,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,   589,   590,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,   614,   615,   616,
      -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,    -1,   646,
     647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,
     657,   658,    -1,    -1,   661,   662,   663,   664,   665,    -1,
      -1,   668,   669,   670,    -1,   672,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,   688,    -1,   690,   691,   692,    -1,    -1,   695,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,    -1,
      -1,    -1,   709,   710,    -1,    -1,   713,   714,    -1,    -1,
     717,   718,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,    -1,    -1,   130,   131,   132,
      -1,    -1,   135,   136,   137,    -1,   139,    -1,   141,    -1,
      -1,   144,    -1,   146,   147,   148,   149,   150,    -1,    -1,
      -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,   227,    -1,   229,   230,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,   249,   250,    -1,    -1,
     253,   254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
      -1,   264,   265,   266,    -1,   268,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,
      -1,   294,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,
     303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,
     313,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
     353,   354,   355,   356,   357,    -1,    -1,   360,   361,   362,
     363,   364,    -1,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,    -1,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,   432,
     433,    -1,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,    -1,
     473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,   489,    -1,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   501,    -1,
     503,   504,    -1,   506,   507,    -1,   509,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,   520,    -1,   522,
     523,   524,   525,   526,   527,   528,   529,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,
      -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,   586,   587,   588,   589,   590,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,    -1,    -1,   609,   610,   611,   612,
      -1,   614,   615,   616,    -1,   618,   619,   620,   621,   622,
      -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,
     653,    -1,   655,    -1,   657,   658,    -1,    -1,   661,   662,
     663,   664,   665,    -1,    -1,   668,   669,   670,    -1,   672,
     673,   674,   675,   676,   677,   678,   679,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,
      -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     703,   704,    -1,    -1,    -1,    -1,   709,   710,    -1,    -1,
     713,   714,    -1,    -1,   717,   718,     5,    -1,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
      -1,   130,   131,   132,    -1,    -1,   135,   136,   137,    -1,
     139,    -1,   141,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,   250,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,   264,   265,   266,    -1,   268,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,    -1,   294,   295,   296,    -1,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,
     309,   310,    -1,    -1,   313,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
     379,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,
     429,   430,    -1,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
     489,    -1,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,
     509,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,   520,    -1,   522,   523,   524,   525,   526,   527,   528,
     529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,
      -1,   550,   551,   552,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,   586,   587,   588,
     589,   590,    -1,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,   614,   615,   616,    -1,   618,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,    -1,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,    -1,   646,   647,    -1,
      -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,
      -1,    -1,   661,   662,   663,   664,   665,    -1,    -1,   668,
     669,   670,    -1,   672,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,
      -1,   690,   691,   692,    -1,    -1,   695,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   703,   704,    -1,    -1,    -1,    -1,
     709,   710,    -1,    -1,   713,   714,    -1,    -1,   717,   718,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,    -1,    -1,   130,   131,   132,    -1,    -1,
     135,   136,   137,    -1,   139,    -1,   141,    -1,    -1,   144,
      -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,
     165,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,   241,    -1,    -1,    -1,
     245,   246,   247,   248,   249,   250,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,   264,
     265,   266,    -1,   268,    -1,    -1,   271,    -1,   273,   274,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,
      -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,   294,
     295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,
     305,    -1,   307,    -1,   309,   310,    -1,    -1,   313,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,
     355,   356,   357,    -1,    -1,   360,   361,   362,   363,   364,
      -1,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,   379,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,
      -1,    -1,    -1,   428,   429,   430,    -1,   432,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,    -1,   473,    -1,
      -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,   489,    -1,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,   501,    -1,   503,   504,
      -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,   520,    -1,   522,   523,   524,
     525,   526,   527,   528,   529,    -1,   531,   532,    -1,    -1,
      -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,   544,
      -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,   589,   590,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,    -1,    -1,   609,   610,   611,   612,    -1,   614,
     615,   616,    -1,   618,   619,   620,   621,   622,    -1,    -1,
      -1,    -1,    -1,   628,   629,   630,    -1,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
      -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,
     655,    -1,   657,   658,    -1,    -1,   661,   662,   663,   664,
     665,    -1,    -1,   668,   669,   670,    -1,   672,   673,   674,
     675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,    -1,
     695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,   704,
      -1,    -1,    -1,    -1,   709,   710,    -1,    -1,   713,   714,
      -1,    -1,   717,   718,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
     131,   132,    -1,    -1,   135,   136,   137,    -1,   139,    -1,
     141,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,   229,   230,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,   250,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,   264,   265,   266,    -1,   268,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,   294,   295,   296,    -1,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,   313,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,   379,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,   525,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,   614,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
     661,   662,   663,   664,   665,    -1,    -1,   668,   669,   670,
      -1,   672,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   704,    -1,    -1,    -1,    -1,   709,   710,
      -1,    -1,   713,   714,    -1,    -1,   717,   718,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,    -1,    -1,   130,   131,   132,    -1,    -1,   135,   136,
     137,    -1,   139,    -1,   141,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,   236,
     237,   238,    -1,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,   250,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,   264,   265,   266,
      -1,   268,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,
     287,   288,   289,    -1,    -1,   292,    -1,   294,   295,   296,
      -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,   313,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,   363,   364,    -1,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,   379,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,   428,   429,   430,    -1,   432,   433,    -1,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,    -1,   503,   504,    -1,   506,
     507,    -1,   509,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,   520,    -1,   522,   523,   524,   525,   526,
     527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,
     537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,
      -1,   548,    -1,   550,   551,   552,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,   589,   590,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,   614,   615,   616,
      -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,    -1,   646,
     647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,
     657,   658,    -1,    -1,   661,   662,   663,   664,   665,    -1,
      -1,   668,   669,   670,    -1,   672,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,   688,    -1,   690,   691,   692,    -1,    -1,   695,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,    -1,
      -1,    -1,   709,   710,    -1,    -1,   713,   714,    -1,    -1,
     717,   718,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,    -1,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,    -1,    -1,   130,   131,   132,
      -1,    -1,   135,   136,   137,    -1,   139,    -1,   141,    -1,
      -1,   144,    -1,   146,   147,   148,   149,   150,    -1,    -1,
      -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,   227,    -1,   229,   230,   231,   232,
     233,   234,    -1,   236,   237,   238,    -1,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,   249,   250,    -1,    -1,
     253,   254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
      -1,   264,   265,   266,    -1,   268,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,
      -1,   294,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,
     303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,
     313,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,    -1,    -1,    -1,   352,
     353,   354,   355,   356,   357,    -1,    -1,   360,   361,   362,
     363,   364,    -1,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,    -1,    -1,
     383,   384,   385,   386,   387,   388,   389,   390,    -1,   392,
     393,   394,   395,   396,   397,   398,    -1,   400,   401,   402,
     403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,   432,
     433,    -1,   435,    -1,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,    -1,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,   470,   471,    -1,
     473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,   489,    -1,   491,   492,
      -1,   494,   495,   496,   497,   498,   499,    -1,   501,    -1,
     503,   504,    -1,   506,   507,    -1,   509,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,   520,    -1,   522,
     523,   524,   525,   526,   527,   528,   529,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,
      -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,   586,   587,   588,   589,   590,    -1,   592,
     593,   594,   595,   596,   597,   598,   599,   600,   601,   602,
     603,   604,   605,   606,    -1,    -1,   609,   610,   611,   612,
      -1,   614,   615,   616,    -1,   618,   619,   620,   621,   622,
      -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,   632,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,
     653,    -1,   655,    -1,   657,   658,    -1,    -1,   661,   662,
     663,   664,   665,    -1,    -1,   668,   669,   670,    -1,   672,
     673,   674,   675,   676,   677,   678,   679,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,
      -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     703,   704,    -1,    -1,    -1,    -1,   709,   710,    -1,    -1,
     713,   714,    -1,    -1,   717,   718,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,    -1,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,    -1,
      -1,   130,   131,   132,    -1,    -1,   135,   136,   137,    -1,
     139,    -1,   141,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,   250,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,   264,   265,   266,    -1,   268,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,    -1,   294,   295,   296,    -1,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,
     309,   310,    -1,    -1,   313,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
     379,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,   390,    -1,   392,   393,   394,   395,   396,   397,   398,
      -1,   400,   401,   402,   403,    -1,   405,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,
     429,   430,    -1,   432,   433,    -1,   435,    -1,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,    -1,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,   470,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
     489,    -1,   491,   492,    -1,   494,   495,   496,   497,   498,
     499,    -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,
     509,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,   520,    -1,   522,   523,   524,   525,   526,   527,   528,
     529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,
      -1,   550,   551,   552,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,   586,   587,   588,
     589,   590,    -1,   592,   593,   594,   595,   596,   597,   598,
     599,   600,   601,   602,   603,   604,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,   614,   615,   616,    -1,   618,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,    -1,   632,   633,   634,   635,   636,   637,   638,
     639,   640,   641,   642,   643,   644,    -1,   646,   647,    -1,
      -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,
      -1,    -1,   661,   662,   663,   664,   665,    -1,    -1,   668,
     669,   670,    -1,   672,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,
      -1,   690,   691,   692,    -1,    -1,   695,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   703,   704,    -1,    -1,    -1,    -1,
     709,   710,    -1,    -1,   713,   714,    -1,    -1,   717,   718,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,    -1,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,    -1,    -1,   130,   131,   132,    -1,    -1,
     135,   136,   137,    -1,   139,    -1,   141,    -1,    -1,   144,
      -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,
     165,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,    -1,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,   194,
     195,   196,   197,    -1,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,    -1,   229,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,   240,   241,    -1,    -1,    -1,
     245,   246,   247,   248,   249,   250,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,   264,
     265,   266,    -1,   268,    -1,    -1,   271,    -1,   273,   274,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,
      -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,   294,
     295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,
     305,    -1,   307,    -1,   309,   310,    -1,    -1,   313,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,
     355,   356,   357,    -1,    -1,   360,   361,   362,   363,   364,
      -1,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,   379,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,   394,
     395,   396,   397,   398,    -1,   400,   401,   402,   403,    -1,
     405,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,
      -1,    -1,    -1,   428,   429,   430,    -1,   432,   433,    -1,
     435,    -1,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,    -1,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,   470,   471,    -1,   473,    -1,
      -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,   489,    -1,   491,   492,    -1,   494,
     495,   496,   497,   498,   499,    -1,   501,    -1,   503,   504,
      -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,   520,    -1,   522,   523,   524,
     525,   526,   527,   528,   529,    -1,   531,   532,    -1,    -1,
      -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,   544,
      -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,   589,   590,    -1,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,    -1,    -1,   609,   610,   611,   612,    -1,   614,
     615,   616,    -1,   618,   619,   620,   621,   622,    -1,    -1,
      -1,    -1,    -1,   628,   629,   630,    -1,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
      -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,
     655,    -1,   657,   658,    -1,    -1,   661,   662,   663,   664,
     665,    -1,    -1,   668,   669,   670,    -1,   672,   673,   674,
     675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,    -1,
     695,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   703,   704,
      -1,    -1,    -1,    -1,   709,   710,    -1,    -1,   713,   714,
      -1,    -1,   717,   718,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,    -1,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,    -1,    -1,   130,
     131,   132,    -1,    -1,   135,   136,   137,    -1,   139,    -1,
     141,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,   229,   230,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,   250,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,   264,   265,   266,    -1,   268,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,   294,   295,   296,    -1,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,   313,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,   379,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
      -1,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
     401,   402,   403,    -1,   405,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,   432,   433,    -1,   435,    -1,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,   470,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,   497,   498,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,   525,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,   598,   599,   600,
     601,   602,   603,   604,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,   614,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,   632,   633,   634,   635,   636,   637,   638,   639,   640,
     641,   642,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
     661,   662,   663,   664,   665,    -1,    -1,   668,   669,   670,
      -1,   672,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   703,   704,    -1,    -1,    -1,    -1,   709,   710,
      -1,    -1,   713,   714,    -1,    -1,   717,   718,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,    -1,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,    -1,    -1,   130,   131,   132,    -1,    -1,   135,   136,
     137,    -1,   139,    -1,   141,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,   194,   195,   196,
     197,    -1,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,    -1,   229,   230,   231,   232,   233,   234,    -1,   236,
     237,   238,    -1,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,   250,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,   264,   265,   266,
      -1,   268,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,
     287,   288,   289,    -1,    -1,   292,    -1,   294,   295,   296,
      -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,   313,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,   363,   364,    -1,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,   379,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,   393,   394,   395,   396,
     397,   398,    -1,   400,   401,   402,   403,    -1,   405,   406,
     407,   408,   409,    -1,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,   428,   429,   430,    -1,   432,   433,    -1,   435,    -1,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,    -1,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,   470,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,   492,    -1,   494,   495,   496,
     497,   498,   499,    -1,   501,    -1,   503,   504,    -1,   506,
     507,    -1,   509,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,   520,    -1,   522,   523,   524,   525,   526,
     527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,
     537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,
      -1,   548,    -1,   550,   551,   552,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,   589,   590,    -1,   592,   593,   594,   595,   596,
     597,   598,   599,   600,   601,   602,   603,   604,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,   614,   615,   616,
      -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,   632,   633,   634,   635,   636,
     637,   638,   639,   640,   641,   642,   643,   644,    -1,   646,
     647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,
     657,   658,    -1,    -1,   661,   662,   663,   664,   665,    -1,
      -1,   668,   669,   670,    -1,   672,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,   688,    -1,   690,   691,   692,    -1,    -1,   695,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   703,   704,    -1,    -1,
      -1,    -1,    -1,   710,    -1,    -1,    -1,   714,    -1,    -1,
     717,   718,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,
     113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,   132,
      -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,
      -1,   144,    -1,   146,   147,   148,   149,   150,    -1,    -1,
      -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,    -1,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,    -1,   199,    -1,   201,   202,
     203,    -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,   234,    -1,   236,   237,   238,    -1,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,
     253,   254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,
      -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,
     303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,
     313,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
     353,   354,   355,   356,   357,    -1,    -1,   360,   361,   362,
      -1,   364,    -1,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,    -1,    -1,
     383,   384,   385,   386,   387,   388,   389,    -1,    -1,   392,
      -1,   394,   395,   396,   397,   398,    -1,    -1,   401,   402,
     403,    -1,    -1,   406,   407,   408,   409,    -1,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,
     433,    -1,   435,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,
     473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,   489,    -1,   491,   492,
      -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,
     503,   504,    -1,   506,   507,    -1,   509,    -1,   511,   512,
      -1,    -1,   515,   516,   517,   518,   519,   520,    -1,   522,
     523,   524,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,
      -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,
     593,   594,   595,   596,   597,    -1,    -1,   600,   601,   602,
     603,    -1,   605,   606,    -1,    -1,   609,   610,   611,   612,
      -1,   614,   615,   616,    -1,   618,   619,   620,   621,   622,
      -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,
     633,   634,   635,   636,   637,   638,   639,   640,   641,   642,
     643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,
     653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,
      -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,
     673,   674,   675,   676,   677,   678,   679,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,
      -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,   717,   718,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,
     136,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,
      -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,
     206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,
     246,   247,   248,   249,    -1,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,
     286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,
     296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,
      -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,    -1,   394,   395,
     396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,
      -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,   489,    -1,   491,   492,    -1,   494,   495,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,
     506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,   522,   523,   524,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,
     536,   537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,
      -1,    -1,   548,    -1,   550,   551,   552,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
      -1,    -1,   588,   589,   590,    -1,   592,   593,   594,   595,
     596,   597,    -1,    -1,   600,   601,   602,   603,    -1,   605,
     606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,
      -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,
     636,   637,    -1,   639,   640,   641,    -1,   643,   644,    -1,
     646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,
     676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   687,   688,    -1,   690,   691,   692,    -1,    -1,   695,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   718,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,
      -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,
      -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,
     201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,    -1,   295,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,    -1,   364,    -1,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,    -1,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,    -1,   394,   395,   396,   397,   398,    -1,    -1,
      -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,    -1,    -1,   600,
     601,   602,   603,    -1,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,   614,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,   640,
     641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,
      -1,    -1,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,    -1,   695,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   718,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,
      -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,
      -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,
     206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,
     246,   247,   248,   249,    -1,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,
     286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,
      -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,    -1,   394,   395,
     396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,
      -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,   489,    -1,   491,   492,    -1,   494,   495,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,
     506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,   522,   523,   524,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,
     536,   537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,
      -1,    -1,   548,    -1,   550,   551,   552,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
      -1,    -1,   588,   589,   590,    -1,   592,   593,   594,   595,
     596,   597,    -1,    -1,   600,   601,   602,   603,    -1,   605,
     606,    -1,    -1,   609,   610,   611,   612,    -1,   614,   615,
     616,    -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,
      -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,
     636,   637,    -1,   639,   640,   641,    -1,   643,   644,    -1,
     646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,
     676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   687,   688,    -1,   690,   691,   692,    -1,    -1,   695,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   718,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,
      -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,
      -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,
     201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,    -1,   295,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,    -1,   364,    -1,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,    -1,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,    -1,   394,   395,   396,   397,   398,    -1,    -1,
      -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,    -1,    -1,   600,
     601,   602,   603,    -1,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,   614,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,   640,
     641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,
      -1,    -1,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,    -1,   695,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   718,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,
     136,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,
      -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,
     206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,
     246,   247,   248,   249,    -1,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,
     286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,
     296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,
      -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,    -1,   394,   395,
     396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,
      -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,   489,    -1,   491,   492,    -1,   494,   495,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,
     506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,   522,   523,   524,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,
     536,   537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,
      -1,    -1,   548,    -1,   550,   551,   552,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
      -1,    -1,   588,   589,   590,    -1,   592,   593,   594,   595,
     596,   597,    -1,    -1,   600,   601,   602,   603,    -1,   605,
     606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,
      -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,
     636,   637,    -1,   639,   640,   641,    -1,   643,   644,    -1,
     646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,
     676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   687,   688,    -1,   690,   691,   692,    -1,    -1,   695,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,   718,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,
      -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,
      -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,
     201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,    -1,   364,    -1,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,    -1,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,    -1,   394,   395,   396,   397,   398,    -1,    -1,
      -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,    -1,    -1,   600,
     601,   602,   603,    -1,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,    -1,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,   640,
     641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,
      -1,    -1,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
     711,    15,    -1,    -1,    -1,    19,   717,   718,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,
      -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,
      -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,
     144,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,
      -1,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,   187,    -1,    -1,   190,   191,   192,   193,
      -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,    -1,
      -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,    -1,    -1,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,   253,
     254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,
     274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,
      -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,
      -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,
      -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,
     354,   355,   356,   357,    -1,    -1,   360,   361,   362,    -1,
     364,    -1,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,
     384,   385,   386,   387,   388,   389,    -1,    -1,   392,    -1,
     394,   395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,
      -1,    -1,   406,   407,   408,   409,    -1,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,   433,
      -1,   435,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,   473,
      -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,   489,    -1,   491,   492,    -1,
     494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,
     504,    -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,   522,   523,
     524,    -1,   526,   527,   528,   529,    -1,   531,   532,    -1,
      -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,
     544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,
     554,   555,    -1,   557,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,   593,
     594,   595,   596,   597,    -1,    -1,   600,   601,   602,   603,
      -1,   605,   606,    -1,    -1,   609,   610,   611,   612,    -1,
      -1,   615,   616,    -1,   618,   619,   620,   621,   622,    -1,
      -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,
     634,   635,   636,   637,    -1,   639,   640,   641,    -1,   643,
     644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,
      -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,
      -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,
     674,   675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,
      -1,   695,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   718,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
      -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,
     139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,    -1,
      -1,   190,   191,   192,   193,    -1,    -1,   196,   197,    -1,
     199,    -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,
      -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,    -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
      -1,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,    -1,    -1,   392,    -1,   394,   395,   396,   397,   398,
      -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,
     429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
     489,    -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,
     499,    -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,
     509,    -1,   511,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,    -1,   522,   523,   524,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,
      -1,   550,   551,   552,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,
     589,   590,    -1,   592,   593,   594,   595,   596,   597,    -1,
      -1,   600,   601,   602,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,    -1,   615,   616,    -1,   618,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,    -1,    -1,    -1,   634,   635,   636,   637,    -1,
     639,   640,   641,    -1,   643,   644,    -1,   646,   647,    -1,
      -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,
      -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,
     669,    -1,    -1,    -1,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,
      -1,   690,   691,   692,    -1,    -1,   695,    -1,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,   717,   718,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,
      -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,
      -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,
      -1,    -1,   144,    -1,   146,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,
      -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,   187,    -1,    -1,   190,   191,
     192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,
     202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,   211,
     212,    -1,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,   241,
      -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,
      -1,   253,   254,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,
      -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,
     292,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,
     302,   303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
     352,   353,   354,   355,   356,   357,    -1,    -1,   360,   361,
     362,    -1,   364,    -1,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,    -1,   380,    -1,
      -1,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,    -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,
      -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,
      -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,
      -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,    -1,   471,
      -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,   489,    -1,   491,
     492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,
      -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,   511,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
     522,   523,   524,    -1,   526,   527,   528,   529,    -1,   531,
     532,    -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,
      -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,
     552,   553,   554,   555,    -1,   557,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,
     572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,
     592,   593,   594,   595,   596,   597,    -1,    -1,   600,   601,
     602,   603,    -1,   605,   606,    -1,    -1,   609,   610,   611,
     612,    -1,    -1,   615,   616,    -1,   618,   619,   620,   621,
     622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,
      -1,    -1,   634,   635,   636,   637,    -1,   639,   640,   641,
      -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,
      -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,
      -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,
      -1,   673,   674,   675,   676,   677,   678,   679,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,
     692,    -1,    -1,   695,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   718,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,
     137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,
     197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,   215,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,    -1,    -1,    -1,   253,   254,   255,   256,
     257,   258,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,   284,    -1,   286,
     287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,
      -1,   298,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,    -1,   394,   395,   396,
     397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,
     407,   408,   409,    -1,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,   492,    -1,   494,   495,   496,
      -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,
     507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,    -1,   522,   523,   524,    -1,   526,
     527,   528,   529,    -1,   531,   532,   533,    -1,    -1,   536,
     537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,
      -1,   548,    -1,   550,   551,   552,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,   563,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,
      -1,   588,   589,   590,    -1,   592,   593,   594,   595,   596,
     597,    -1,    -1,   600,   601,   602,   603,    -1,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,   616,
      -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,   636,
     637,    -1,   639,   640,   641,    -1,   643,   644,    -1,   646,
     647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,
     657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,
      -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,    -1,   684,    -1,    -1,
     687,   688,    -1,   690,   691,   692,    -1,    -1,   695,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
     717,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,
     113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,
      -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,
      -1,   144,    -1,   146,   147,   148,   149,   150,    -1,    -1,
      -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,    -1,    -1,   190,   191,   192,
     193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,
      -1,    -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,
      -1,   214,   215,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,   234,    -1,   236,    -1,    -1,    -1,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,
     253,   254,   255,   256,   257,   258,    -1,   260,    -1,    -1,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,   284,    -1,   286,   287,   288,   289,    -1,    -1,   292,
      -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,
     303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
     353,   354,   355,   356,   357,    -1,    -1,   360,   361,   362,
      -1,   364,    -1,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,
     383,   384,   385,   386,   387,   388,   389,    -1,    -1,   392,
      -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,    -1,
     403,    -1,    -1,   406,   407,   408,   409,    -1,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,
     433,    -1,   435,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,
     473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,   489,    -1,   491,   492,
      -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,
     503,   504,    -1,   506,   507,    -1,   509,    -1,   511,   512,
      -1,    -1,   515,   516,   517,   518,   519,   520,    -1,   522,
     523,   524,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,
      -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
     563,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,
     593,   594,   595,   596,   597,    -1,    -1,   600,   601,   602,
     603,    -1,   605,   606,    -1,    -1,   609,   610,   611,   612,
      -1,    -1,   615,   616,    -1,   618,   619,   620,   621,   622,
      -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,
      -1,   634,   635,   636,   637,    -1,   639,   640,   641,    -1,
     643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,
     653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,
      -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,
     673,   674,   675,   676,   677,   678,   679,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,
      -1,    -1,   695,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   717,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
      -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,
     139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,    -1,
      -1,   190,   191,   192,   193,    -1,    -1,   196,   197,    -1,
     199,    -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,
      -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,    -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
      -1,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,    -1,    -1,   392,    -1,   394,   395,   396,   397,   398,
      -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,
     429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
     489,    -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,
     499,    -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,
     509,    -1,   511,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,    -1,   522,   523,   524,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,
      -1,   550,   551,   552,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,
     589,   590,    -1,   592,   593,   594,   595,   596,   597,    -1,
      -1,   600,   601,   602,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,    -1,   615,   616,    -1,   618,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,    -1,    -1,    -1,   634,   635,   636,   637,    -1,
     639,   640,   641,    -1,   643,   644,    -1,   646,   647,    -1,
      -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,
      -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,
     669,    -1,    -1,    -1,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,   684,    -1,    -1,   687,   688,
      -1,   690,   691,   692,    -1,    -1,   695,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,   711,    -1,    19,    -1,    -1,    22,   717,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,
     115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,
     135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,
      -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,
     165,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,    -1,
     185,   186,   187,    -1,    -1,   190,   191,   192,   193,    -1,
      -1,   196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,
     205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,
     245,   246,   247,   248,   249,    -1,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,
     265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,
      -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
     295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,
     305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,
     355,   356,   357,    -1,    -1,   360,   361,   362,    -1,   364,
      -1,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,    -1,    -1,   392,    -1,   394,
     395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,
      -1,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,
      -1,    -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,
     435,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,
      -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,   489,    -1,   491,   492,    -1,   494,
     495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,
      -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,
     515,   516,   517,   518,   519,   520,    -1,   522,   523,   524,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,    -1,
      -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,   544,
      -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,    -1,    -1,   588,   589,   590,    -1,   592,   593,   594,
     595,   596,   597,    -1,    -1,   600,   601,   602,   603,    -1,
     605,   606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,
     615,   616,    -1,   618,   619,   620,   621,   622,    -1,    -1,
      -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,
     635,   636,   637,    -1,   639,   640,   641,    -1,   643,   644,
      -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,
     655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,
     665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,
     675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,    -1,
     695,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,   710,    -1,    -1,    19,    -1,
      -1,    22,   717,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,
      -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,
      -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,
     201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,    -1,   265,   266,    -1,    -1,   269,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,    -1,   364,    -1,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,    -1,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,    -1,   394,   395,   396,   397,   398,    -1,    -1,
      -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,    -1,    -1,   600,
     601,   602,   603,    -1,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,    -1,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,   640,
     641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,
      -1,    -1,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,    -1,   695,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   717,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,
     137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,
     197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,    -1,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,
     287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,
      -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,    -1,   394,   395,   396,
     397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,
     407,   408,   409,    -1,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,   492,    -1,   494,   495,   496,
      -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,
     507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,    -1,   522,   523,   524,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,
     537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,
      -1,   548,    -1,   550,   551,   552,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,
      -1,   588,   589,   590,    -1,   592,   593,   594,   595,   596,
     597,    -1,    -1,   600,   601,   602,   603,    -1,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,   616,
      -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,   636,
     637,    -1,   639,   640,   641,    -1,   643,   644,    -1,   646,
     647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,
     657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,
      -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,   688,    -1,   690,   691,   692,    -1,    -1,   695,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,   705,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
     717,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,
      -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,
      -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
      -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,   197,
      -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,   207,
      -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
      -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,
     248,   249,    -1,    -1,    -1,   253,   254,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,
     288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,
      -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,   357,
      -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,   387,
     388,   389,    -1,    -1,   392,    -1,   394,   395,   396,   397,
     398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,
     408,   409,    -1,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,
     428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,
     478,    -1,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,   489,    -1,   491,   492,    -1,   494,   495,   496,    -1,
      -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,   507,
      -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,   522,   523,   524,    -1,   526,   527,
     528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,
     538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,
     548,    -1,   550,   551,   552,   553,   554,   555,    -1,   557,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,
      -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,
     588,   589,   590,    -1,   592,   593,   594,   595,   596,   597,
      -1,    -1,   600,   601,   602,   603,    -1,   605,   606,    -1,
      -1,   609,   610,   611,   612,    -1,    -1,   615,   616,    -1,
     618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,
     628,   629,   630,    -1,    -1,    -1,   634,   635,   636,   637,
      -1,   639,   640,   641,    -1,   643,   644,    -1,   646,   647,
      -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,
     658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,
     668,   669,    -1,    -1,    -1,   673,   674,   675,   676,   677,
     678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,    -1,   690,   691,   692,    -1,    -1,   695,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,   710,    -1,    -1,    19,    -1,    -1,    22,   717,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,
      -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,
      -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,
     144,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,
      -1,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,   187,    -1,    -1,   190,   191,   192,   193,
      -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,    -1,
      -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,    -1,    -1,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,   249,   250,    -1,    -1,   253,
     254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,
     274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,
      -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,
      -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,
      -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,
     354,   355,   356,   357,    -1,    -1,   360,   361,   362,    -1,
     364,    -1,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,
     384,   385,   386,   387,   388,   389,    -1,    -1,   392,    -1,
     394,   395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,
      -1,    -1,   406,   407,   408,   409,    -1,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,   433,
      -1,   435,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,   473,
      -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,   489,    -1,   491,   492,    -1,
     494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,
     504,    -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,   522,   523,
     524,    -1,   526,   527,   528,   529,    -1,   531,   532,    -1,
      -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,
     544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,
     554,   555,    -1,   557,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,   593,
     594,   595,   596,   597,    -1,    -1,   600,   601,   602,   603,
      -1,   605,   606,    -1,    -1,   609,   610,   611,   612,    -1,
      -1,   615,   616,    -1,   618,   619,   620,   621,   622,    -1,
      -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,
     634,   635,   636,   637,    -1,   639,   640,   641,    -1,   643,
     644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,
      -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,
      -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,
     674,   675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,
      -1,   695,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   717,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,
     110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,
      -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,
     160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,   187,    -1,    -1,
     190,   191,   192,   193,    -1,    -1,   196,   197,    -1,   199,
      -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,
      -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,   227,    -1,    -1,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,
     240,   241,    -1,    -1,    -1,   245,   246,   247,   248,   249,
      -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,   271,    -1,   273,   274,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,   289,
      -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,    -1,
      -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,   352,   353,   354,   355,   356,   357,    -1,    -1,
     360,   361,   362,    -1,   364,    -1,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,    -1,
     380,    -1,    -1,   383,   384,   385,   386,   387,   388,   389,
      -1,    -1,   392,    -1,   394,   395,   396,   397,   398,    -1,
      -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,
      -1,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
      -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,
     430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
      -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,   489,
      -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,   499,
      -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,   509,
      -1,   511,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,   522,   523,   524,    -1,   526,   527,   528,   529,
      -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,   539,
     540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,
     550,   551,   552,   553,   554,   555,    -1,   557,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,
     570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,
     590,    -1,   592,   593,   594,   595,   596,   597,    -1,    -1,
     600,   601,   602,   603,    -1,   605,   606,    -1,    -1,   609,
     610,   611,   612,    -1,    -1,   615,   616,    -1,   618,   619,
     620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,
     630,    -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,
     640,   641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,
     650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,
      -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,
      -1,    -1,    -1,   673,   674,   675,   676,   677,   678,   679,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,
     690,   691,   692,    -1,    -1,   695,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   717,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,
      -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,
      -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,
     206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,
     246,   247,   248,   249,    -1,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,
     286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,
     296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,
      -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,    -1,   394,   395,
     396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,
      -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,   489,    -1,   491,   492,    -1,   494,   495,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,
     506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,   522,   523,   524,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,
     536,   537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,
      -1,    -1,   548,    -1,   550,   551,   552,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
      -1,    -1,   588,   589,   590,    -1,   592,   593,   594,   595,
     596,   597,    -1,    -1,   600,   601,   602,   603,    -1,   605,
     606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,
      -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,
     636,   637,    -1,   639,   640,   641,    -1,   643,   644,    -1,
     646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,
     676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   687,   688,    -1,   690,   691,   692,    -1,    -1,   695,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   717,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,
      -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,
      -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,
      -1,    -1,   144,    -1,   146,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,
      -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,   187,    -1,    -1,   190,   191,
     192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,
     202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,   211,
     212,    -1,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,   241,
      -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,
      -1,   253,   254,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,
      -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,
     292,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,
     302,   303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
     352,   353,   354,   355,   356,   357,    -1,    -1,   360,   361,
     362,    -1,   364,    -1,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,    -1,   380,    -1,
      -1,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,    -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,
      -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,
      -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,
      -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,    -1,   471,
      -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,   489,    -1,   491,
     492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,
      -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,   511,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
     522,   523,   524,    -1,   526,   527,   528,   529,    -1,   531,
     532,    -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,
      -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,
     552,   553,   554,   555,    -1,   557,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,
     572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,
     592,   593,   594,   595,   596,   597,    -1,    -1,   600,   601,
     602,   603,    -1,   605,   606,    -1,    -1,   609,   610,   611,
     612,    -1,    -1,   615,   616,    -1,   618,   619,   620,   621,
     622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,
      -1,    -1,   634,   635,   636,   637,    -1,   639,   640,   641,
      -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,
      -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,
      -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,
      -1,   673,   674,   675,   676,   677,   678,   679,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,
     692,    -1,    -1,   695,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   717,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,
      -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,
      -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
      -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,   197,
      -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,   207,
      -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
      -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,
     248,   249,    -1,    -1,    -1,   253,   254,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,
     288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,
      -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,   357,
      -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,   387,
     388,   389,    -1,    -1,   392,    -1,   394,   395,   396,   397,
     398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,
     408,   409,    -1,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,
     428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,
     478,    -1,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,   489,    -1,   491,   492,    -1,   494,   495,   496,    -1,
      -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,   507,
      -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,   522,   523,   524,    -1,   526,   527,
     528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,
     538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,
     548,    -1,   550,   551,   552,   553,   554,   555,    -1,   557,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,
      -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,
     588,   589,   590,    -1,   592,   593,   594,   595,   596,   597,
      -1,    -1,   600,   601,   602,   603,    -1,   605,   606,    -1,
      -1,   609,   610,   611,   612,    -1,    -1,   615,   616,    -1,
     618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,
     628,   629,   630,    -1,    -1,    -1,   634,   635,   636,   637,
      -1,   639,   640,   641,    -1,   643,   644,    -1,   646,   647,
      -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,
     658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,
     668,   669,    -1,    -1,    -1,   673,   674,   675,   676,   677,
     678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,    -1,   690,   691,   692,    -1,    -1,   695,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,   717,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    83,
      -1,    85,    -1,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    -1,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,
      -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,
     144,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,
      -1,   165,   166,    -1,    -1,   169,    -1,   171,   172,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,    -1,
      -1,    -1,    -1,   187,    -1,    -1,   190,   191,   192,   193,
      -1,    -1,   196,   197,   198,   199,    -1,   201,   202,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
     224,   225,    -1,   227,    -1,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,
      -1,   245,   246,   247,   248,   249,   250,    -1,    -1,   253,
     254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,
      -1,   265,    -1,    -1,    -1,    -1,    -1,   271,    -1,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,    -1,   283,
      -1,    -1,    -1,   287,   288,   289,    -1,    -1,   292,   293,
      -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,
      -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,
     354,   355,   356,   357,    -1,    -1,   360,   361,   362,    -1,
     364,    -1,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,
     384,   385,   386,   387,   388,   389,    -1,    -1,   392,    -1,
      -1,   395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,
      -1,    -1,   406,   407,   408,   409,    -1,   411,   412,   413,
     414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,   473,
      -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,   489,    -1,   491,    -1,    -1,
     494,    -1,   496,   497,    -1,   499,    -1,    -1,    -1,   503,
      -1,    -1,   506,   507,    -1,   509,   510,   511,   512,    -1,
      -1,   515,    -1,   517,   518,   519,   520,    -1,   522,   523,
     524,    -1,   526,    -1,   528,   529,    -1,   531,    -1,    -1,
      -1,    -1,   536,   537,   538,   539,    -1,    -1,    -1,    -1,
     544,    -1,    -1,    -1,    -1,    -1,    -1,   551,    -1,    -1,
     554,   555,    -1,   557,    -1,   559,    -1,   561,   562,    -1,
      -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,   579,    -1,   581,    -1,    -1,
      -1,   585,    -1,    -1,    -1,   589,    -1,    -1,   592,   593,
     594,   595,   596,   597,    -1,    -1,   600,   601,   602,   603,
      -1,   605,   606,    -1,    -1,   609,   610,   611,   612,    -1,
      -1,   615,   616,    -1,    -1,   619,   620,   621,   622,    -1,
      -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,
      -1,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,    -1,    -1,    -1,    -1,    -1,   650,    -1,    -1,   653,
      -1,    -1,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,
      -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,
     674,   675,   676,   677,   678,   679,    -1,    -1,    -1,   683,
      -1,    -1,    -1,   687,    -1,    -1,   690,    -1,   692,    -1,
       5,   695,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   712,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,    -1,   110,   111,    -1,   113,    -1,
     115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,
     135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,
      -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,
     165,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,    -1,
     185,   186,   187,    -1,    -1,   190,   191,   192,   193,    -1,
      -1,   196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,
     205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,
     245,   246,   247,   248,   249,    -1,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,
     265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,
      -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
     295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,    -1,
     305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,
     355,   356,   357,    -1,    -1,   360,   361,   362,    -1,   364,
      -1,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,    -1,    -1,   392,    -1,   394,
     395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,
      -1,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,
      -1,    -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,
     435,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,
      -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,   489,    -1,   491,   492,    -1,   494,
     495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,
      -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,
     515,   516,   517,   518,   519,   520,    -1,   522,   523,   524,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,    -1,
      -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,   544,
      -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,    -1,    -1,   588,   589,   590,    -1,   592,   593,   594,
     595,   596,   597,    -1,    -1,   600,   601,   602,   603,    -1,
     605,   606,    -1,    -1,   609,   610,   611,   612,    -1,   614,
     615,   616,    -1,   618,   619,   620,   621,   622,    -1,    -1,
      -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,
     635,   636,   637,    -1,   639,   640,   641,    -1,   643,   644,
      -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,
     655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,
     665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,
     675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,     5,
     695,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,   710,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,
      -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,
      -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,
     206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,
     246,   247,   248,   249,    -1,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,
     286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,
     296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,
      -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,    -1,   394,   395,
     396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,
      -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,   489,    -1,   491,   492,    -1,   494,   495,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,
     506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,   522,   523,   524,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,
     536,   537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,
      -1,    -1,   548,    -1,   550,   551,   552,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
      -1,    -1,   588,   589,   590,    -1,   592,   593,   594,   595,
     596,   597,    -1,    -1,   600,   601,   602,   603,    -1,   605,
     606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,
      -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,
     636,   637,    -1,   639,   640,   641,    -1,   643,   644,    -1,
     646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,
     676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   687,   688,    -1,   690,   691,   692,    -1,     5,   695,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,   710,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,
     137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,
     197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,    -1,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,
     287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,
      -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,    -1,   394,   395,   396,
     397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,
     407,   408,   409,    -1,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,   492,    -1,   494,   495,   496,
      -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,
     507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,    -1,   522,   523,   524,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,
     537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,
      -1,   548,    -1,   550,   551,   552,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,
      -1,   588,   589,   590,    -1,   592,   593,   594,   595,   596,
     597,    -1,    -1,   600,   601,   602,   603,    -1,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,   616,
      -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,   636,
     637,    -1,   639,   640,   641,    -1,   643,   644,    -1,   646,
     647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,
     657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,
      -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,   688,    -1,   690,   691,   692,    -1,     5,   695,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,   705,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,
      -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,
      -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
      -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,   197,
      -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,   207,
      -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
      -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,
     248,   249,    -1,    -1,    -1,   253,   254,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,
     288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,
      -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,   357,
      -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,   387,
     388,   389,    -1,    -1,   392,    -1,   394,   395,   396,   397,
     398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,
     408,   409,    -1,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,
     428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,
     478,    -1,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,   489,    -1,   491,   492,    -1,   494,   495,   496,    -1,
      -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,   507,
      -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,   522,   523,   524,    -1,   526,   527,
     528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,
     538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,
     548,    -1,   550,   551,   552,   553,   554,   555,    -1,   557,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,
      -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,
     588,   589,   590,    -1,   592,   593,   594,   595,   596,   597,
      -1,    -1,   600,   601,   602,   603,    -1,   605,   606,    -1,
      -1,   609,   610,   611,   612,    -1,    -1,   615,   616,    -1,
     618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,
     628,   629,   630,    -1,    -1,    -1,   634,   635,   636,   637,
      -1,   639,   640,   641,    -1,   643,   644,    -1,   646,   647,
      -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,
     658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,
     668,   669,    -1,    -1,    -1,   673,   674,   675,   676,   677,
     678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,    -1,   690,   691,   692,    -1,     5,   695,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,   705,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
      -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,
     139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,    -1,
      -1,   190,   191,   192,   193,    -1,    -1,   196,   197,    -1,
     199,    -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,
      -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,    -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
      -1,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,    -1,    -1,   392,    -1,   394,   395,   396,   397,   398,
      -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,
     429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
     489,    -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,
     499,    -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,
     509,    -1,   511,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,    -1,   522,   523,   524,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,
      -1,   550,   551,   552,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,
     589,   590,    -1,   592,   593,   594,   595,   596,   597,    -1,
      -1,   600,   601,   602,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,    -1,   615,   616,    -1,   618,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,    -1,    -1,    -1,   634,   635,   636,   637,    -1,
     639,   640,   641,    -1,   643,   644,    -1,   646,   647,    -1,
      -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,
      -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,
     669,    -1,    -1,    -1,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,
      -1,   690,   691,   692,    -1,     5,   695,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,   705,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,
     110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,
      -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,
     160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,   187,    -1,    -1,
     190,   191,   192,   193,    -1,    -1,   196,   197,    -1,   199,
      -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,
      -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,   227,    -1,    -1,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,
     240,   241,    -1,    -1,    -1,   245,   246,   247,   248,   249,
      -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,   271,    -1,   273,   274,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,   289,
      -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,    -1,
      -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,   352,   353,   354,   355,   356,   357,    -1,    -1,
     360,   361,   362,    -1,   364,    -1,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,    -1,
     380,    -1,    -1,   383,   384,   385,   386,   387,   388,   389,
      -1,    -1,   392,    -1,   394,   395,   396,   397,   398,    -1,
      -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,
      -1,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
      -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,
     430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
      -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,   489,
      -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,   499,
      -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,   509,
      -1,   511,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,   522,   523,   524,    -1,   526,   527,   528,   529,
      -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,   539,
     540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,
     550,   551,   552,   553,   554,   555,    -1,   557,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,
     570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,
     590,    -1,   592,   593,   594,   595,   596,   597,    -1,    -1,
     600,   601,   602,   603,    -1,   605,   606,    -1,    -1,   609,
     610,   611,   612,    -1,    -1,   615,   616,    -1,   618,   619,
     620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,
     630,    -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,
     640,   641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,
     650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,
      -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,
      -1,    -1,    -1,   673,   674,   675,   676,   677,   678,   679,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,
     690,   691,   692,    -1,     5,   695,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,   705,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,
      -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,   135,   136,   137,    -1,   139,    -1,
      -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,
     201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,    -1,   295,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,    -1,   364,    -1,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,    -1,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,    -1,   394,   395,   396,   397,   398,    -1,    -1,
      -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,   543,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,    -1,    -1,   600,
     601,   602,   603,    -1,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,   614,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,   640,
     641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,
      -1,    -1,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,    -1,   695,    -1,     5,   698,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,   105,    -1,   107,    -1,
      -1,   110,    -1,   112,   113,    -1,   115,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,
     139,   140,    -1,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,   155,    -1,   157,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,    -1,
      -1,   190,   191,   192,   193,    -1,    -1,   196,   197,    -1,
     199,    -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,    -1,
      -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,
      -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,    -1,    -1,    -1,   253,   254,   255,   256,   257,   258,
      -1,   260,    -1,    -1,    -1,   264,   265,   266,    -1,    -1,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,    -1,    -1,   295,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,   308,
     309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
      -1,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,    -1,    -1,   392,    -1,   394,   395,   396,   397,   398,
      -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,
     429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,   483,    -1,   485,   486,   487,   488,
     489,    -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,
     499,    -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,
     509,    -1,   511,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,    -1,   522,   523,   524,    -1,   526,   527,   528,
     529,    -1,   531,   532,   533,    -1,    -1,   536,   537,   538,
     539,   540,    -1,    -1,    -1,   544,    -1,    -1,   547,   548,
      -1,   550,   551,   552,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,
     589,   590,    -1,   592,   593,   594,   595,   596,   597,    -1,
      -1,   600,   601,   602,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,   614,   615,   616,    -1,   618,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,   631,    -1,    -1,   634,   635,   636,   637,    -1,
     639,   640,   641,    -1,   643,   644,    -1,   646,   647,    -1,
      -1,   650,    -1,    -1,   653,   654,   655,   656,   657,   658,
      -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,
     669,    -1,    -1,    -1,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,
      -1,   690,   691,   692,    -1,     5,   695,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,   105,    -1,   107,    -1,    -1,
     110,    -1,   112,   113,    -1,   115,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,
     140,    -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,   155,    -1,   157,    -1,   159,
     160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,   187,    -1,    -1,
     190,   191,   192,   193,    -1,    -1,   196,   197,    -1,   199,
      -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,
      -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,    -1,    -1,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,
     240,   241,    -1,    -1,    -1,   245,   246,   247,   248,   249,
      -1,    -1,    -1,   253,   254,   255,   256,   257,   258,    -1,
     260,    -1,    -1,    -1,   264,   265,   266,    -1,    -1,    -1,
      -1,   271,    -1,   273,   274,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,   289,
      -1,    -1,   292,    -1,    -1,   295,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,    -1,   305,    -1,   307,   308,   309,
     310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,   352,   353,   354,   355,   356,   357,    -1,    -1,
     360,   361,   362,    -1,   364,    -1,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,    -1,
     380,    -1,    -1,   383,   384,   385,   386,   387,   388,   389,
      -1,    -1,   392,    -1,   394,   395,   396,   397,   398,    -1,
      -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,
      -1,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
      -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,
     430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
      -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,
     480,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
      -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,   499,
      -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,   509,
      -1,   511,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,   522,   523,   524,    -1,   526,   527,   528,   529,
      -1,   531,   532,   533,    -1,    -1,   536,   537,   538,   539,
     540,    -1,    -1,    -1,   544,    -1,    -1,   547,   548,    -1,
     550,   551,   552,   553,   554,   555,    -1,   557,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,
     570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,
     590,    -1,   592,   593,   594,   595,   596,   597,    -1,    -1,
     600,   601,   602,   603,    -1,   605,   606,    -1,    -1,   609,
     610,   611,   612,    -1,   614,   615,   616,    -1,   618,   619,
     620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,
     630,   631,    -1,    -1,   634,   635,   636,   637,    -1,   639,
     640,   641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,
     650,    -1,    -1,   653,   654,   655,   656,   657,   658,    -1,
      -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,
      -1,    -1,    -1,   673,   674,   675,   676,   677,   678,   679,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,
     690,   691,   692,    -1,     5,   695,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,
      -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,   132,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,
      -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,
     201,   202,   203,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,   237,    -1,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,   313,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,    -1,   364,    -1,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,    -1,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,    -1,   394,   395,   396,   397,   398,    -1,    -1,
      -1,   402,   403,    -1,    -1,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,   565,   566,   567,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,    -1,    -1,   600,
     601,   602,   603,    -1,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,    -1,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,    -1,    -1,   634,   635,   636,   637,   638,   639,   640,
     641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,
      -1,    -1,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,     5,   695,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,
      -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,
     132,    -1,    -1,   135,   136,   137,    -1,   139,    -1,    -1,
      -1,    -1,   144,    -1,   146,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,
      -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,   187,    -1,    -1,   190,   191,
     192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,
     202,   203,    -1,   205,   206,   207,    -1,    -1,    -1,   211,
     212,    -1,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,
     232,   233,   234,    -1,   236,   237,    -1,    -1,   240,   241,
      -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,
      -1,   253,   254,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,
      -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,
     292,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,
     302,   303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,
      -1,   313,    -1,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
     352,   353,   354,   355,   356,   357,    -1,    -1,   360,   361,
     362,    -1,   364,    -1,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,    -1,   380,    -1,
      -1,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,    -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,
     402,   403,    -1,    -1,   406,   407,   408,   409,    -1,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,
      -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,
      -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,    -1,   471,
      -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,   489,    -1,   491,
     492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,
      -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,   511,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
     522,   523,   524,    -1,   526,   527,   528,   529,    -1,   531,
     532,    -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,
      -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,
     552,   553,   554,   555,    -1,   557,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,
     572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,
     592,   593,   594,   595,   596,   597,    -1,    -1,   600,   601,
     602,   603,    -1,   605,   606,    -1,    -1,   609,   610,   611,
     612,    -1,   614,   615,   616,    -1,   618,   619,   620,   621,
     622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,
      -1,    -1,   634,   635,   636,   637,   638,   639,   640,   641,
      -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,
      -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,
      -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,
      -1,   673,   674,   675,   676,   677,   678,   679,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,
     692,    -1,     5,   695,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,
     113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,   132,
      -1,    -1,   135,   136,   137,    -1,   139,    -1,    -1,    -1,
      -1,   144,    -1,   146,   147,   148,   149,   150,    -1,    -1,
      -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,    -1,    -1,   190,   191,   192,
     193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,
     203,    -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,   234,    -1,   236,   237,    -1,    -1,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,
     253,   254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,
      -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,
     303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,
     313,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
     353,   354,   355,   356,   357,    -1,    -1,   360,   361,   362,
      -1,   364,    -1,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,
     383,   384,   385,   386,   387,   388,   389,    -1,    -1,   392,
      -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,   402,
     403,    -1,    -1,   406,   407,   408,   409,    -1,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,
     433,    -1,   435,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,
     473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,   489,    -1,   491,   492,
      -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,
     503,   504,    -1,   506,   507,    -1,   509,    -1,   511,   512,
      -1,    -1,   515,   516,   517,   518,   519,   520,    -1,   522,
     523,   524,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,
      -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,
     593,   594,   595,   596,   597,    -1,    -1,   600,   601,   602,
     603,    -1,   605,   606,    -1,    -1,   609,   610,   611,   612,
      -1,   614,   615,   616,    -1,   618,   619,   620,   621,   622,
      -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,
      -1,   634,   635,   636,   637,   638,   639,   640,   641,    -1,
     643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,
     653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,
      -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,
     673,   674,   675,   676,   677,   678,   679,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,
      -1,     5,   695,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,
      -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,   132,    -1,
      -1,   135,   136,   137,    -1,   139,    -1,    -1,    -1,    -1,
     144,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,
      -1,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,   187,    -1,    -1,   190,   191,   192,   193,
      -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,   203,
      -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,
     234,    -1,   236,   237,    -1,    -1,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,   253,
     254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,
     274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,
      -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,
      -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,
      -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,   313,
      -1,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,
     354,   355,   356,   357,    -1,    -1,   360,   361,   362,    -1,
     364,    -1,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,
     384,   385,   386,   387,   388,   389,    -1,    -1,   392,    -1,
     394,   395,   396,   397,   398,    -1,    -1,    -1,   402,   403,
      -1,    -1,   406,   407,   408,   409,    -1,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,   433,
      -1,   435,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,   473,
      -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,   489,    -1,   491,   492,    -1,
     494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,
     504,    -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,   522,   523,
     524,    -1,   526,   527,   528,   529,    -1,   531,   532,    -1,
      -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,
     544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,
     554,   555,    -1,   557,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,   593,
     594,   595,   596,   597,    -1,    -1,   600,   601,   602,   603,
      -1,   605,   606,    -1,    -1,   609,   610,   611,   612,    -1,
     614,   615,   616,    -1,   618,   619,   620,   621,   622,    -1,
      -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,
     634,   635,   636,   637,   638,   639,   640,   641,    -1,   643,
     644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,
      -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,
      -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,
     674,   675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,
       5,   695,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,
     115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,
     135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,
      -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,
     165,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,    -1,
     185,   186,   187,    -1,    -1,   190,   191,   192,   193,    -1,
      -1,   196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,
     205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,
     245,   246,   247,   248,   249,    -1,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,
     265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,
      -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
     295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,
     305,    -1,   307,    -1,   309,   310,    -1,    -1,   313,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,
     355,   356,   357,    -1,    -1,   360,   361,   362,    -1,   364,
      -1,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,    -1,    -1,   392,    -1,   394,
     395,   396,   397,   398,    -1,    -1,    -1,   402,   403,    -1,
      -1,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,
      -1,    -1,    -1,   428,   429,   430,    -1,   432,   433,    -1,
     435,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,
      -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,   489,    -1,   491,   492,    -1,   494,
     495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,
      -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,    -1,
      -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,   544,
      -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,    -1,    -1,   588,   589,   590,    -1,   592,   593,   594,
     595,   596,   597,    -1,    -1,   600,   601,   602,   603,    -1,
     605,   606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,
     615,   616,    -1,   618,   619,   620,   621,   622,    -1,    -1,
      -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,
     635,   636,   637,   638,   639,   640,   641,    -1,   643,   644,
      -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,
     655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,
     665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,
     675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,     5,
     695,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,
      -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,
      -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,
     206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,
     246,   247,   248,   249,    -1,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,
     286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,
     296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,
      -1,   307,    -1,   309,   310,    -1,    -1,   313,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,    -1,   394,   395,
     396,   397,   398,    -1,    -1,    -1,   402,   403,    -1,    -1,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,   428,   429,   430,    -1,   432,   433,    -1,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,
      -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,   489,    -1,   491,   492,    -1,   494,   495,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,
     506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,
     536,   537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,
      -1,    -1,   548,    -1,   550,   551,   552,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
      -1,    -1,   588,   589,   590,    -1,   592,   593,   594,   595,
     596,   597,    -1,    -1,   600,   601,   602,   603,    -1,   605,
     606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,
      -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,
     636,   637,   638,   639,   640,   641,    -1,   643,   644,    -1,
     646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,
     676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   687,   688,    -1,   690,   691,   692,    -1,     5,   695,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,    -1,   110,   111,   112,   113,    -1,   115,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,
     137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,
     197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,    -1,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,
     287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,    -1,   394,   395,   396,
     397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,
     407,   408,   409,    -1,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,   492,    -1,   494,   495,   496,
      -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,
     507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,    -1,   522,   523,   524,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,
     537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,
      -1,   548,    -1,   550,   551,   552,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,
      -1,   588,   589,   590,    -1,   592,   593,   594,   595,   596,
     597,    -1,    -1,   600,   601,   602,   603,    -1,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,   614,   615,   616,
      -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,   636,
     637,    -1,   639,   640,   641,    -1,   643,   644,    -1,   646,
     647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,
     657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,
      -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,   688,    -1,   690,   691,   692,    -1,     5,   695,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,   131,    -1,    -1,    -1,   135,   136,   137,
      -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,
      -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
      -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,   197,
      -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,   207,
      -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
      -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,
     248,   249,    -1,    -1,    -1,   253,   254,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,
     288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,   357,
      -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,   387,
     388,   389,    -1,    -1,   392,    -1,   394,   395,   396,   397,
     398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,
     408,   409,    -1,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,
     428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,
     478,    -1,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,   489,    -1,   491,   492,    -1,   494,   495,   496,    -1,
      -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,   507,
      -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,   522,   523,   524,    -1,   526,   527,
     528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,
     538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,
     548,    -1,   550,   551,   552,   553,   554,   555,    -1,   557,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,
      -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,
     588,   589,   590,    -1,   592,   593,   594,   595,   596,   597,
      -1,    -1,   600,   601,   602,   603,    -1,   605,   606,    -1,
      -1,   609,   610,   611,   612,    -1,   614,   615,   616,    -1,
     618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,
     628,   629,   630,    -1,    -1,    -1,   634,   635,   636,   637,
      -1,   639,   640,   641,    -1,   643,   644,    -1,   646,   647,
      -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,
     658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,
     668,   669,    -1,    -1,    -1,   673,   674,   675,   676,   677,
     678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,    -1,   690,   691,   692,    -1,     5,   695,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      39,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
      -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,
     139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,    -1,
      -1,   190,   191,   192,   193,    -1,    -1,   196,   197,    -1,
     199,    -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,   234,    -1,   236,   237,   238,
      -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,    -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
      -1,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,    -1,    -1,   392,    -1,   394,   395,   396,   397,   398,
      -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,
     429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
     489,    -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,
     499,    -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,
     509,    -1,   511,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,    -1,   522,   523,   524,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,
      -1,   550,   551,   552,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,
     589,   590,    -1,   592,   593,   594,   595,   596,   597,    -1,
      -1,   600,   601,   602,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,   614,   615,   616,    -1,   618,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,    -1,    -1,    -1,   634,   635,   636,   637,    -1,
     639,   640,   641,    -1,   643,   644,    -1,   646,   647,    -1,
      -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,
      -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,
     669,    -1,    -1,    -1,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,
      -1,   690,   691,   692,    -1,     5,   695,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,
     110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,
      -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,
     160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,   187,    -1,    -1,
     190,   191,   192,   193,    -1,    -1,   196,   197,    -1,   199,
      -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,
      -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,   227,    -1,    -1,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,
     240,   241,    -1,    -1,    -1,   245,   246,   247,   248,   249,
      -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,   271,    -1,   273,   274,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,   289,
      -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,    -1,
      -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,
     310,    -1,    -1,   313,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,   352,   353,   354,   355,   356,   357,    -1,    -1,
     360,   361,   362,    -1,   364,    -1,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,    -1,
     380,    -1,    -1,   383,   384,   385,   386,   387,   388,   389,
      -1,    -1,   392,    -1,   394,   395,   396,   397,   398,    -1,
      -1,    -1,   402,   403,    -1,    -1,   406,   407,   408,   409,
      -1,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
      -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,
     430,    -1,   432,   433,    -1,   435,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
      -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,   489,
      -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,   499,
      -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,   509,
      -1,   511,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,   522,   523,   524,    -1,   526,   527,   528,   529,
      -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,   539,
     540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,
     550,   551,   552,   553,   554,   555,    -1,   557,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,
     570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,
     590,    -1,   592,   593,   594,   595,   596,   597,    -1,    -1,
     600,   601,   602,   603,    -1,   605,   606,    -1,    -1,   609,
     610,   611,   612,    -1,    -1,   615,   616,    -1,   618,   619,
     620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,
     630,    -1,    -1,    -1,   634,   635,   636,   637,   638,   639,
     640,   641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,
     650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,
      -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,
      -1,    -1,    -1,   673,   674,   675,   676,   677,   678,   679,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,
     690,   691,   692,    -1,     5,   695,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,
      -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,   135,   136,   137,    -1,   139,    -1,
      -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,
     201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,    -1,   295,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,    -1,   364,    -1,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,    -1,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,    -1,   394,   395,   396,   397,   398,    -1,    -1,
      -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,    -1,    -1,   600,
     601,   602,   603,    -1,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,   614,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,   640,
     641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,
      -1,    -1,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,     5,   695,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,   111,
      -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,
      -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,
      -1,    -1,   144,    -1,   146,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,
      -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,   187,    -1,    -1,   190,   191,
     192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,
     202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,   211,
     212,    -1,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,   241,
      -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,
      -1,   253,   254,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,
      -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,
     292,    -1,    -1,   295,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
     352,   353,   354,   355,   356,   357,    -1,    -1,   360,   361,
     362,    -1,   364,    -1,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,    -1,   380,    -1,
      -1,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,    -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,
      -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,
      -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,
      -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,    -1,   471,
      -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,   489,    -1,   491,
     492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,
      -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,   511,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
     522,   523,   524,    -1,   526,   527,   528,   529,    -1,   531,
     532,    -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,
      -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,
     552,   553,   554,   555,    -1,   557,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,
     572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,
     592,   593,   594,   595,   596,   597,    -1,    -1,   600,   601,
     602,   603,    -1,   605,   606,    -1,    -1,   609,   610,   611,
     612,    -1,   614,   615,   616,    -1,   618,   619,   620,   621,
     622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,
      -1,    -1,   634,   635,   636,   637,    -1,   639,   640,   641,
      -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,
      -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,
      -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,
      -1,   673,   674,   675,   676,   677,   678,   679,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,
     692,    -1,     5,   695,     7,     8,     9,    10,    11,    12,
      13,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,
     113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,
      -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,
      -1,   144,    -1,   146,   147,   148,   149,   150,    -1,    -1,
      -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,    -1,    -1,   190,   191,   192,
     193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,
      -1,    -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,   234,    -1,   236,    -1,    -1,    -1,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,
     253,   254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,
      -1,    -1,   295,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
     353,   354,   355,   356,   357,    -1,    -1,   360,   361,   362,
      -1,   364,    -1,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,
     383,   384,   385,   386,   387,   388,   389,    -1,    -1,   392,
      -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,    -1,
     403,    -1,    -1,   406,   407,   408,   409,    -1,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,
     433,    -1,   435,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,
     473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,   489,    -1,   491,   492,
      -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,
     503,   504,    -1,   506,   507,    -1,   509,    -1,   511,   512,
      -1,    -1,   515,   516,   517,   518,   519,   520,    -1,   522,
     523,   524,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,
      -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,
     593,   594,   595,   596,   597,    -1,    -1,   600,   601,   602,
     603,    -1,   605,   606,    -1,    -1,   609,   610,   611,   612,
      -1,   614,   615,   616,    -1,   618,   619,   620,   621,   622,
      -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,
      -1,   634,   635,   636,   637,    -1,   639,   640,   641,    -1,
     643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,
     653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,
      -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,
     673,   674,   675,   676,   677,   678,   679,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,
      -1,     5,   695,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,    -1,   110,    -1,   112,   113,
      -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,
      -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,
     144,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,
      -1,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,   187,    -1,    -1,   190,   191,   192,   193,
      -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,    -1,
      -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,    -1,    -1,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,   253,
     254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,
     274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,
      -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,
      -1,   295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
      -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,
     354,   355,   356,   357,    -1,    -1,   360,   361,   362,    -1,
     364,    -1,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,
     384,   385,   386,   387,   388,   389,    -1,    -1,   392,    -1,
     394,   395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,
      -1,    -1,   406,   407,   408,   409,    -1,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,   433,
      -1,   435,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,   473,
      -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,   489,    -1,   491,   492,    -1,
     494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,
     504,    -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,   522,   523,
     524,    -1,   526,   527,   528,   529,    -1,   531,   532,    -1,
      -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,
     544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,
     554,   555,    -1,   557,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,   593,
     594,   595,   596,   597,    -1,    -1,   600,   601,   602,   603,
      -1,   605,   606,    -1,    -1,   609,   610,   611,   612,    -1,
     614,   615,   616,    -1,   618,   619,   620,   621,   622,    -1,
      -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,
     634,   635,   636,   637,    -1,   639,   640,   641,    -1,   643,
     644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,
      -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,
      -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,
     674,   675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,
       5,   695,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,
     115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,
     135,   136,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,
      -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,
     165,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,    -1,
     185,   186,   187,    -1,    -1,   190,   191,   192,   193,    -1,
      -1,   196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,
     205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,
     245,   246,   247,   248,   249,    -1,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,
     265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,
      -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
     295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,    -1,
     305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,
     355,   356,   357,    -1,    -1,   360,   361,   362,    -1,   364,
      -1,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,    -1,    -1,   392,    -1,   394,
     395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,
      -1,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,
      -1,    -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,
     435,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,
      -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,   489,    -1,   491,   492,    -1,   494,
     495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,
      -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,
     515,   516,   517,   518,   519,   520,    -1,   522,   523,   524,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,    -1,
      -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,   544,
      -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,    -1,    -1,   588,   589,   590,    -1,   592,   593,   594,
     595,   596,   597,    -1,    -1,   600,   601,   602,   603,    -1,
     605,   606,    -1,    -1,   609,   610,   611,   612,    -1,   614,
     615,   616,    -1,   618,   619,   620,   621,   622,    -1,    -1,
      -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,
     635,   636,   637,    -1,   639,   640,   641,    -1,   643,   644,
      -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,
     655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,
     665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,
     675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,     5,
     695,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,
      -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,
      -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,
     206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,
     246,   247,   248,   249,    -1,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,
     286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,
      -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,    -1,   394,   395,
     396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,
      -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,   489,    -1,   491,   492,    -1,   494,   495,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,
     506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,   522,   523,   524,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,
     536,   537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,
      -1,    -1,   548,    -1,   550,   551,   552,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
      -1,    -1,   588,   589,   590,    -1,   592,   593,   594,   595,
     596,   597,    -1,    -1,   600,   601,   602,   603,    -1,   605,
     606,    -1,    -1,   609,   610,   611,   612,    -1,   614,   615,
     616,    -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,
      -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,
     636,   637,    -1,   639,   640,   641,    -1,   643,   644,    -1,
     646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,
     676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   687,   688,    -1,   690,   691,   692,    -1,     5,   695,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,
     137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,
     197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,    -1,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,
     287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,    -1,   394,   395,   396,
     397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,
     407,   408,   409,    -1,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,   492,    -1,   494,   495,   496,
      -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,
     507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,    -1,   522,   523,   524,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,
     537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,
      -1,   548,    -1,   550,   551,   552,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,
      -1,   588,   589,   590,    -1,   592,   593,   594,   595,   596,
     597,    -1,    -1,   600,   601,   602,   603,    -1,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,   614,   615,   616,
      -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,   636,
     637,    -1,   639,   640,   641,    -1,   643,   644,    -1,   646,
     647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,
     657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,
      -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,   688,    -1,   690,   691,   692,    -1,     5,   695,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,
      -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,
      -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
      -1,   189,   190,   191,   192,   193,    -1,    -1,   196,   197,
      -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,   207,
      -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
      -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,
     248,   249,    -1,    -1,    -1,   253,   254,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,
     288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,
      -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,   357,
      -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,   387,
     388,   389,    -1,    -1,   392,    -1,   394,   395,   396,   397,
     398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,
     408,   409,    -1,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,
     428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,
     478,    -1,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,   489,    -1,   491,   492,    -1,   494,   495,   496,    -1,
      -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,   507,
      -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,   522,   523,   524,    -1,   526,   527,
     528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,
     538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,
     548,    -1,   550,   551,   552,   553,   554,   555,    -1,   557,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,
      -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,
     588,   589,   590,    -1,   592,   593,   594,   595,   596,   597,
      -1,    -1,   600,   601,   602,   603,    -1,   605,   606,    -1,
      -1,   609,   610,   611,   612,    -1,    -1,   615,   616,    -1,
     618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,
     628,   629,   630,    -1,    -1,    -1,   634,   635,   636,   637,
      -1,   639,   640,   641,    -1,   643,   644,    -1,   646,   647,
      -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,
     658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,
     668,   669,    -1,    -1,    -1,   673,   674,   675,   676,   677,
     678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,    -1,   690,   691,   692,    -1,     5,   695,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    20,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
      -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,
     139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,    -1,
      -1,   190,   191,   192,   193,    -1,    -1,   196,   197,    -1,
     199,    -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,
      -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,    -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
      -1,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,    -1,    -1,   392,    -1,   394,   395,   396,   397,   398,
      -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,
     429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
     489,    -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,
     499,    -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,
     509,    -1,   511,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,    -1,   522,   523,   524,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,
      -1,   550,   551,   552,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,
     589,   590,    -1,   592,   593,   594,   595,   596,   597,    -1,
      -1,   600,   601,   602,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,   614,   615,   616,    -1,   618,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,    -1,    -1,    -1,   634,   635,   636,   637,    -1,
     639,   640,   641,    -1,   643,   644,    -1,   646,   647,    -1,
      -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,
      -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,
     669,    -1,    -1,    -1,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,
      -1,   690,   691,   692,    -1,     5,   695,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,
     110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,
      -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,
     160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,   187,    -1,    -1,
     190,   191,   192,   193,    -1,    -1,   196,   197,    -1,   199,
      -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,
      -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,   227,    -1,    -1,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,
     240,   241,    -1,    -1,    -1,   245,   246,   247,   248,   249,
      -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,   271,    -1,   273,   274,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,   289,
      -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,    -1,
      -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,   352,   353,   354,   355,   356,   357,    -1,    -1,
     360,   361,   362,    -1,   364,    -1,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,    -1,
     380,    -1,    -1,   383,   384,   385,   386,   387,   388,   389,
      -1,    -1,   392,    -1,   394,   395,   396,   397,   398,    -1,
      -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,
      -1,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
      -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,
     430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
      -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,   489,
      -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,   499,
      -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,   509,
      -1,   511,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,   522,   523,   524,    -1,   526,   527,   528,   529,
      -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,   539,
     540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,
     550,   551,   552,   553,   554,   555,    -1,   557,   558,   559,
     560,   561,   562,    -1,    -1,    -1,   566,    -1,    -1,   569,
     570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,
     590,    -1,   592,   593,   594,   595,   596,   597,    -1,    -1,
     600,   601,   602,   603,    -1,   605,   606,    -1,    -1,   609,
     610,   611,   612,    -1,    -1,   615,   616,    -1,   618,   619,
     620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,
     630,    -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,
     640,   641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,
     650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,
      -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,
      -1,    -1,    -1,   673,   674,   675,   676,   677,   678,   679,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,
     690,   691,   692,    -1,     5,   695,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,
      -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,
      -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,
     201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,    -1,   364,    -1,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,    -1,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,    -1,   394,   395,   396,   397,   398,    -1,    -1,
      -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,    -1,    -1,   600,
     601,   602,   603,    -1,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,    -1,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,   640,
     641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,
      -1,    -1,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,     5,   695,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,
      -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,
      -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,
      -1,    -1,   144,    -1,   146,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,
      -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,   187,    -1,    -1,   190,   191,
     192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,
     202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,   241,
      -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,
      -1,   253,   254,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,
      -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,
     292,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,
     302,   303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
     352,   353,   354,   355,   356,   357,    -1,    -1,   360,   361,
     362,    -1,   364,    -1,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,    -1,   380,    -1,
      -1,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,    -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,
      -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,
      -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,
      -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,    -1,   471,
      -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,   489,    -1,   491,
     492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,
      -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,   511,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
     522,   523,   524,    -1,   526,   527,   528,   529,    -1,   531,
     532,    -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,
      -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,
     552,   553,   554,   555,    -1,   557,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,
     572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,
     592,   593,   594,   595,   596,   597,    -1,    -1,   600,   601,
     602,   603,    -1,   605,   606,    -1,    -1,   609,   610,   611,
     612,    -1,    -1,   615,   616,    -1,   618,   619,   620,   621,
     622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,
      -1,    -1,   634,   635,   636,   637,    -1,   639,   640,   641,
      -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,
      -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,
      -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,
      -1,   673,   674,   675,   676,   677,   678,   679,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,
     692,    -1,     5,   695,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,
     113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,
      -1,    -1,   135,   136,   137,    -1,   139,    -1,    -1,    -1,
      -1,   144,    -1,   146,   147,   148,   149,   150,    -1,    -1,
      -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,    -1,    -1,   190,   191,   192,
     193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,
      -1,    -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,   234,    -1,   236,    -1,    -1,    -1,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,
     253,   254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,
      -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,
     303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
     353,   354,   355,   356,   357,    -1,    -1,   360,   361,   362,
      -1,   364,    -1,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,
     383,   384,   385,   386,   387,   388,   389,    -1,    -1,   392,
      -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,    -1,
     403,    -1,    -1,   406,   407,   408,   409,    -1,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,
     433,    -1,   435,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,
     473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,   489,    -1,   491,   492,
      -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,
     503,   504,    -1,   506,   507,    -1,   509,    -1,   511,   512,
      -1,    -1,   515,   516,   517,   518,   519,   520,    -1,   522,
     523,   524,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,
      -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,
     593,   594,   595,   596,   597,    -1,    -1,   600,   601,   602,
     603,    -1,   605,   606,    -1,    -1,   609,   610,   611,   612,
      -1,    -1,   615,   616,    -1,   618,   619,   620,   621,   622,
      -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,
      -1,   634,   635,   636,   637,    -1,   639,   640,   641,    -1,
     643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,
     653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,
      -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,
     673,   674,   675,   676,   677,   678,   679,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,
      -1,     5,   695,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,
      -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,
      -1,   135,   136,   137,    -1,   139,    -1,    -1,    -1,    -1,
     144,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,
      -1,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,   187,    -1,    -1,   190,   191,   192,   193,
      -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,    -1,
      -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,    -1,    -1,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,   253,
     254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,
     274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,
      -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,
      -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,
      -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,
     354,   355,   356,   357,    -1,    -1,   360,   361,   362,    -1,
     364,    -1,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,
     384,   385,   386,   387,   388,   389,    -1,    -1,   392,    -1,
     394,   395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,
      -1,    -1,   406,   407,   408,   409,    -1,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,   433,
      -1,   435,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,   473,
      -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,   489,    -1,   491,   492,    -1,
     494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,
     504,    -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,   522,   523,
     524,    -1,   526,   527,   528,   529,    -1,   531,   532,    -1,
      -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,
     544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,
     554,   555,    -1,   557,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,   593,
     594,   595,   596,   597,    -1,    -1,   600,   601,   602,   603,
      -1,   605,   606,    -1,    -1,   609,   610,   611,   612,    -1,
      -1,   615,   616,    -1,   618,   619,   620,   621,   622,    -1,
      -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,
     634,   635,   636,   637,    -1,   639,   640,   641,    -1,   643,
     644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,
      -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,
      -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,
     674,   675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,
       5,   695,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    98,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,
     115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,
     135,   136,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,
      -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
     155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,
     165,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,   183,    -1,
     185,   186,   187,    -1,    -1,   190,   191,   192,   193,    -1,
      -1,   196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,
     205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,
      -1,   236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,
     245,   246,   247,   248,   249,    -1,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,
     265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,
      -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,
      -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,
     295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,
     305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
      -1,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,
     355,   356,   357,    -1,    -1,   360,   361,   362,    -1,   364,
      -1,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,    -1,    -1,   392,    -1,   394,
     395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,
      -1,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
      -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,
      -1,    -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,
     435,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,    -1,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,
      -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,   489,    -1,   491,   492,    -1,   494,
     495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,
      -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,
     515,   516,   517,   518,   519,   520,    -1,   522,   523,   524,
      -1,   526,   527,   528,   529,    -1,   531,   532,    -1,    -1,
      -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,   544,
      -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,   554,
     555,    -1,   557,   558,   559,   560,   561,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,    -1,    -1,   588,   589,   590,    -1,   592,   593,   594,
     595,   596,   597,    -1,    -1,   600,   601,   602,   603,    -1,
     605,   606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,
     615,   616,    -1,   618,   619,   620,   621,   622,    -1,    -1,
      -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,
     635,   636,   637,    -1,   639,   640,   641,    -1,   643,   644,
      -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,
     655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,
     665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,
     675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,     5,
     695,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,
      -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,
      -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,   183,    -1,   185,
     186,   187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,
     196,   197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,
     206,   207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,
     236,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,
     246,   247,   248,   249,    -1,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,
     266,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,
     286,   287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,
     296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,
      -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,    -1,   394,   395,
     396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,    -1,
     416,   417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,
      -1,    -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,    -1,   452,   453,   454,   455,
     456,   457,    -1,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,
      -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,   489,    -1,   491,   492,    -1,   494,   495,
     496,    -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,
     506,   507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,
     516,   517,   518,   519,   520,    -1,   522,   523,   524,    -1,
     526,   527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,
     536,   537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,
      -1,    -1,   548,    -1,   550,   551,   552,   553,   554,   555,
      -1,   557,   558,   559,   560,   561,   562,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
      -1,    -1,   588,   589,   590,    -1,   592,   593,   594,   595,
     596,   597,    -1,    -1,   600,   601,   602,   603,    -1,   605,
     606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,
      -1,    -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,
     636,   637,    -1,   639,   640,   641,    -1,   643,   644,    -1,
     646,   647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,
      -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,
     676,   677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   687,   688,    -1,   690,   691,   692,    -1,     5,   695,
       7,     8,     9,    10,    11,    12,    13,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,
     137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,   183,    -1,   185,   186,
     187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,
     197,    -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,
     207,    -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,
      -1,    -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,    -1,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,
      -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,
     287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,
      -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,    -1,   394,   395,   396,
     397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,
     407,   408,   409,    -1,   411,   412,   413,   414,    -1,   416,
     417,    -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,
      -1,   428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,   450,    -1,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,   492,    -1,   494,   495,   496,
      -1,    -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,
     507,    -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,
     517,   518,   519,   520,    -1,   522,   523,   524,    -1,   526,
     527,   528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,
     537,   538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,
      -1,   548,    -1,   550,   551,   552,   553,   554,   555,    -1,
     557,   558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,
      -1,   588,   589,   590,    -1,   592,   593,   594,   595,   596,
     597,    -1,    -1,   600,   601,   602,   603,    -1,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,   616,
      -1,   618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,    -1,    -1,   634,   635,   636,
     637,    -1,   639,   640,   641,    -1,   643,   644,    -1,   646,
     647,    -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,
     657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,
      -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     687,   688,    -1,   690,   691,   692,    -1,     5,   695,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      98,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,   131,    -1,    -1,    -1,   135,    -1,   137,
      -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,
      -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,   183,    -1,   185,   186,   187,
      -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,   197,
      -1,   199,    -1,   201,   202,    -1,    -1,   205,   206,   207,
      -1,    -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,
      -1,    -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,
     248,   249,    -1,    -1,    -1,   253,   254,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,
      -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,
     288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,
      -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,   357,
      -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,   387,
     388,   389,    -1,    -1,   392,    -1,   394,   395,   396,   397,
     398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,
     408,   409,    -1,   411,   412,   413,   414,    -1,   416,   417,
      -1,    -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,
     428,   429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,    -1,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,
     478,    -1,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,   489,    -1,   491,   492,    -1,   494,   495,   496,    -1,
      -1,   499,    -1,   501,    -1,   503,   504,    -1,   506,   507,
      -1,   509,    -1,   511,   512,    -1,    -1,   515,   516,   517,
     518,   519,   520,    -1,   522,   523,   524,    -1,   526,   527,
     528,   529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,
     538,   539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,
     548,    -1,   550,   551,   552,   553,   554,   555,    -1,   557,
     558,   559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,
      -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,
     588,   589,   590,    -1,   592,   593,   594,   595,   596,   597,
      -1,    -1,   600,   601,   602,   603,    -1,   605,   606,    -1,
      -1,   609,   610,   611,   612,    -1,   614,   615,   616,    -1,
     618,   619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,
     628,   629,   630,    -1,    -1,    -1,   634,   635,   636,   637,
      -1,   639,   640,   641,    -1,   643,   644,    -1,   646,   647,
      -1,    -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,
     658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,
     668,   669,    -1,    -1,    -1,   673,   674,   675,   676,   677,
     678,   679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,
     688,    -1,   690,   691,   692,    -1,     5,   695,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    98,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
      -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,   131,    -1,    -1,    -1,   135,   136,   137,    -1,
     139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,   183,    -1,   185,   186,   187,    -1,
      -1,   190,   191,   192,   193,    -1,    -1,   196,   197,    -1,
     199,    -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,
      -1,    -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
      -1,    -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,
      -1,   240,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,    -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
      -1,    -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,
     289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
      -1,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,    -1,    -1,   392,    -1,   394,   395,   396,   397,   398,
      -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,   416,   417,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,
     429,   430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,    -1,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
     489,    -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,
     499,    -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,
     509,    -1,   511,   512,    -1,    -1,   515,   516,   517,   518,
     519,   520,    -1,   522,   523,   524,    -1,   526,   527,   528,
     529,    -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,
     539,   540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,
      -1,   550,   551,   552,   553,   554,   555,    -1,   557,   558,
     559,   560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,
     589,   590,    -1,   592,   593,   594,   595,   596,   597,    -1,
      -1,   600,   601,   602,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,    -1,   615,   616,    -1,   618,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,    -1,    -1,    -1,   634,   635,   636,   637,    -1,
     639,   640,   641,    -1,   643,   644,    -1,   646,   647,    -1,
      -1,   650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,
      -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,
     669,    -1,    -1,    -1,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,
      -1,   690,   691,   692,    -1,     5,   695,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    98,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,
     110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,   131,    -1,    -1,    -1,   135,   136,   137,    -1,   139,
      -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,
     160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,   183,    -1,   185,   186,   187,    -1,    -1,
     190,   191,   192,   193,    -1,    -1,   196,   197,    -1,   199,
      -1,   201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,
      -1,   211,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,    -1,   227,    -1,    -1,
      -1,    -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,
     240,   241,    -1,    -1,    -1,   245,   246,   247,   248,   249,
      -1,    -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,
      -1,   271,    -1,   273,   274,    -1,   276,   277,   278,    -1,
      -1,   281,    -1,   283,    -1,    -1,   286,   287,   288,   289,
      -1,    -1,   292,    -1,    -1,   295,   296,    -1,    -1,    -1,
      -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,   352,   353,   354,   355,   356,   357,    -1,    -1,
     360,   361,   362,    -1,   364,    -1,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,    -1,
     380,    -1,    -1,   383,   384,   385,   386,   387,   388,   389,
      -1,    -1,   392,    -1,   394,   395,   396,   397,   398,    -1,
      -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,
      -1,   411,   412,   413,   414,    -1,   416,   417,    -1,    -1,
      -1,    -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,
     430,    -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,    -1,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
      -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,   489,
      -1,   491,   492,    -1,   494,   495,   496,    -1,    -1,   499,
      -1,   501,    -1,   503,   504,    -1,   506,   507,    -1,   509,
      -1,   511,   512,    -1,    -1,   515,   516,   517,   518,   519,
     520,    -1,   522,   523,   524,    -1,   526,   527,   528,   529,
      -1,   531,   532,    -1,    -1,    -1,   536,   537,   538,   539,
     540,    -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,
     550,   551,   552,   553,   554,   555,    -1,   557,   558,   559,
     560,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,
     570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,
     590,    -1,   592,   593,   594,   595,   596,   597,    -1,    -1,
     600,   601,   602,   603,    -1,   605,   606,    -1,    -1,   609,
     610,   611,   612,    -1,    -1,   615,   616,    -1,   618,   619,
     620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,
     630,    -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,
     640,   641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,
     650,    -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,
      -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,
      -1,    -1,    -1,   673,   674,   675,   676,   677,   678,   679,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,
     690,   691,   692,    -1,     5,   695,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    98,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,
      -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
     131,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,
      -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,   183,    -1,   185,   186,   187,    -1,    -1,   190,
     191,   192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,
     201,   202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,
     211,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,   232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,
     281,    -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,
      -1,   292,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,    -1,   364,    -1,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,    -1,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,    -1,   394,   395,   396,   397,   398,    -1,    -1,
      -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,
      -1,    -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,
      -1,    -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
      -1,   452,   453,   454,   455,   456,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,   492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,
     501,    -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,
     511,   512,    -1,    -1,   515,   516,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,   527,   528,   529,    -1,
     531,   532,    -1,    -1,    -1,   536,   537,   538,   539,   540,
      -1,    -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,
     551,   552,   553,   554,   555,    -1,   557,   558,   559,   560,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,
      -1,   592,   593,   594,   595,   596,   597,    -1,    -1,   600,
     601,   602,   603,    -1,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,    -1,   615,   616,    -1,   618,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,    -1,    -1,   634,   635,   636,   637,    -1,   639,   640,
     641,    -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,
      -1,    -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,
      -1,    -1,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,
     691,   692,    -1,     5,   695,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    98,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,
      -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,
      -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,
      -1,    -1,   144,    -1,   146,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,
      -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,   183,    -1,   185,   186,   187,    -1,    -1,   190,   191,
     192,   193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,
     202,    -1,    -1,   205,   206,   207,    -1,    -1,    -1,   211,
     212,    -1,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,
     232,   233,   234,    -1,   236,    -1,    -1,    -1,   240,   241,
      -1,    -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,
      -1,   253,   254,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,    -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,
      -1,   273,   274,    -1,   276,   277,   278,    -1,    -1,   281,
      -1,   283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,
     292,    -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,
     302,   303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
     352,   353,   354,   355,   356,   357,    -1,    -1,   360,   361,
     362,    -1,   364,    -1,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,    -1,   380,    -1,
      -1,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,    -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,
      -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,   411,
     412,   413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,
      -1,   423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,
      -1,   433,    -1,   435,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,    -1,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,    -1,   471,
      -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,   489,    -1,   491,
     492,    -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,
      -1,   503,   504,    -1,   506,   507,    -1,   509,    -1,   511,
     512,    -1,    -1,   515,   516,   517,   518,   519,   520,    -1,
     522,   523,   524,    -1,   526,   527,   528,   529,    -1,   531,
     532,    -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,
      -1,    -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,
     552,   553,   554,   555,    -1,   557,   558,   559,   560,   561,
     562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,
     572,    -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,
     592,   593,   594,   595,   596,   597,    -1,    -1,   600,   601,
     602,   603,    -1,   605,   606,    -1,    -1,   609,   610,   611,
     612,    -1,    -1,   615,   616,    -1,   618,   619,   620,   621,
     622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,
      -1,    -1,   634,   635,   636,   637,    -1,   639,   640,   641,
      -1,   643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,
      -1,   653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,
      -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,
      -1,   673,   674,   675,   676,   677,   678,   679,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,
     692,    -1,     5,   695,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    98,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,
     113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,
      -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,
      -1,   144,    -1,   146,   147,   148,   149,   150,    -1,    -1,
      -1,    -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
     183,    -1,   185,   186,   187,    -1,    -1,   190,   191,   192,
     193,    -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,
      -1,    -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,
     233,   234,    -1,   236,    -1,    -1,    -1,   240,   241,    -1,
      -1,    -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,
     253,   254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
      -1,    -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,
     283,    -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,
      -1,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,
     303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,    -1,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
     353,   354,   355,   356,   357,    -1,    -1,   360,   361,   362,
      -1,   364,    -1,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,
     383,   384,   385,   386,   387,   388,   389,    -1,    -1,   392,
      -1,   394,   395,   396,   397,   398,    -1,    -1,    -1,    -1,
     403,    -1,    -1,   406,   407,   408,   409,    -1,   411,   412,
     413,   414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,
     423,    -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,
     433,    -1,   435,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,    -1,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,
     473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,   489,    -1,   491,   492,
      -1,   494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,
     503,   504,    -1,   506,   507,    -1,   509,    -1,   511,   512,
      -1,    -1,   515,   516,   517,   518,   519,   520,    -1,   522,
     523,   524,    -1,   526,   527,   528,   529,    -1,   531,   532,
      -1,    -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,
      -1,   544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,
     553,   554,   555,    -1,   557,   558,   559,   560,   561,   562,
      -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,
     593,   594,   595,   596,   597,    -1,    -1,   600,   601,   602,
     603,    -1,   605,   606,    -1,    -1,   609,   610,   611,   612,
      -1,    -1,   615,   616,    -1,   618,   619,   620,   621,   622,
      -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,
      -1,   634,   635,   636,   637,    -1,   639,   640,   641,    -1,
     643,   644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,
     653,    -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,
      -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,
     673,   674,   675,   676,   677,   678,   679,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,
      -1,     5,   695,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    98,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,
      -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,    -1,
      -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,
     144,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,   155,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,
      -1,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,   183,
      -1,   185,   186,   187,    -1,    -1,   190,   191,   192,   193,
      -1,    -1,   196,   197,    -1,   199,    -1,   201,   202,    -1,
      -1,   205,   206,   207,    -1,    -1,    -1,   211,   212,    -1,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,    -1,   232,   233,
     234,    -1,   236,    -1,    -1,    -1,   240,   241,    -1,    -1,
      -1,   245,   246,   247,   248,   249,    -1,    -1,    -1,   253,
     254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,
      -1,   265,   266,    -1,    -1,    -1,    -1,   271,    -1,   273,
     274,    -1,   276,   277,   278,    -1,    -1,   281,    -1,   283,
      -1,    -1,   286,   287,   288,   289,    -1,    -1,   292,    -1,
      -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,
      -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,    -1,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,
     354,   355,   356,   357,    -1,    -1,   360,   361,   362,    -1,
     364,    -1,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,
     384,   385,   386,   387,   388,   389,    -1,    -1,   392,    -1,
     394,   395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,
      -1,    -1,   406,   407,   408,   409,    -1,   411,   412,   413,
     414,    -1,   416,   417,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,   428,   429,   430,    -1,    -1,   433,
      -1,   435,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,    -1,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,   473,
      -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,   489,    -1,   491,   492,    -1,
     494,   495,   496,    -1,    -1,   499,    -1,   501,    -1,   503,
     504,    -1,   506,   507,    -1,   509,    -1,   511,   512,    -1,
      -1,   515,   516,   517,   518,   519,   520,    -1,   522,   523,
     524,    -1,   526,   527,   528,   529,    -1,   531,   532,    -1,
      -1,    -1,   536,   537,   538,   539,   540,    -1,    -1,    -1,
     544,    -1,    -1,    -1,   548,    -1,   550,   551,   552,   553,
     554,   555,    -1,   557,   558,   559,   560,   561,   562,    -1,
      -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,    -1,    -1,   588,   589,   590,    -1,   592,   593,
     594,   595,   596,   597,    -1,    -1,   600,   601,   602,   603,
      -1,   605,   606,    -1,    -1,   609,   610,   611,   612,    -1,
      -1,   615,   616,    -1,   618,   619,   620,   621,   622,    -1,
      -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,
     634,   635,   636,   637,    -1,   639,   640,   641,    -1,   643,
     644,    -1,   646,   647,    -1,    -1,   650,    -1,    -1,   653,
      -1,   655,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,
      -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,
     674,   675,   676,   677,   678,   679,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   687,   688,    -1,   690,   691,   692,    -1,
       5,   695,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,
      85,    -1,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    -1,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,
     115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,
      -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   159,   160,   161,    -1,   163,   164,
     165,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,    -1,    -1,
      -1,    -1,   187,    -1,    -1,   190,   191,   192,   193,    -1,
      -1,   196,   197,   198,   199,    -1,   201,   202,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,    -1,   224,
     225,    -1,   227,    -1,    -1,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,    -1,
     245,   246,   247,   248,   249,   250,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,
     265,    -1,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,
      -1,   276,   277,   278,   279,    -1,   281,    -1,   283,    -1,
      -1,    -1,   287,   288,   289,    -1,    -1,   292,   293,    -1,
     295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,
     305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,
     355,   356,   357,    -1,    -1,   360,   361,   362,    -1,   364,
      -1,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,    -1,    -1,   392,    -1,    -1,
     395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,
      -1,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   429,   430,    -1,    -1,    -1,    -1,
     435,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,
      -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,   489,    -1,   491,    -1,    -1,   494,
      -1,   496,   497,    -1,   499,    -1,    -1,    -1,   503,    -1,
      -1,   506,   507,    -1,   509,   510,   511,   512,    -1,    -1,
     515,    -1,   517,   518,   519,   520,    -1,   522,   523,   524,
      -1,   526,    -1,   528,   529,    -1,   531,    -1,    -1,    -1,
      -1,   536,   537,   538,   539,    -1,    -1,    -1,    -1,   544,
      -1,    -1,    -1,    -1,    -1,    -1,   551,    -1,    -1,   554,
     555,    -1,   557,    -1,   559,    -1,   561,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,    -1,   581,    -1,    -1,    -1,
     585,    -1,    -1,    -1,   589,    -1,    -1,   592,   593,   594,
     595,   596,   597,    -1,    -1,   600,   601,   602,   603,    -1,
     605,   606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,
     615,   616,    -1,    -1,   619,   620,   621,   622,    -1,    -1,
      -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,    -1,
     635,   636,   637,    -1,    -1,   640,   641,    -1,   643,   644,
      -1,    -1,    -1,    -1,    -1,   650,    -1,    -1,   653,    -1,
      -1,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,
     665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,
     675,   676,   677,   678,   679,    -1,    -1,    -1,   683,    -1,
      -1,    -1,   687,    -1,    -1,   690,    -1,   692,    -1,     5,
     695,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,
      -1,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    -1,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,
      -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,    -1,    -1,    -1,
      -1,   187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,
     196,   197,   198,   199,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,    -1,   224,   225,
      -1,   227,    -1,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,    -1,   245,
     246,   247,   248,   249,   250,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,
      -1,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,    -1,   283,    -1,    -1,
      -1,   287,   288,   289,    -1,    -1,   292,   293,    -1,   295,
     296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,
      -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,    -1,    -1,   395,
     396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,
      -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,   489,    -1,   491,    -1,    -1,   494,    -1,
     496,   497,    -1,   499,    -1,    -1,    -1,   503,    -1,    -1,
     506,   507,    -1,   509,   510,   511,   512,    -1,    -1,   515,
      -1,   517,   518,   519,   520,    -1,   522,   523,   524,    -1,
     526,    -1,   528,   529,    -1,   531,    -1,    -1,    -1,    -1,
     536,   537,   538,   539,    -1,    -1,    -1,    -1,   544,    -1,
      -1,    -1,    -1,    -1,    -1,   551,    -1,    -1,   554,   555,
      -1,   557,    -1,   559,    -1,   561,   562,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,    -1,   581,    -1,    -1,    -1,   585,
      -1,    -1,    -1,   589,    -1,    -1,   592,   593,   594,   595,
     596,   597,    -1,    -1,   600,   601,   602,   603,    -1,   605,
     606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,    -1,   619,   620,   621,   622,    -1,    -1,    -1,
      -1,    -1,   628,   629,   630,    -1,    -1,    -1,    -1,   635,
     636,   637,    -1,    -1,   640,   641,    -1,   643,   644,    -1,
      -1,    -1,    -1,    -1,   650,    -1,    -1,   653,    -1,    -1,
      -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,
     676,   677,   678,   679,   680,    -1,    -1,   683,    -1,    -1,
      -1,   687,    -1,    -1,   690,    -1,   692,    -1,     5,   695,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    -1,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    -1,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,
     137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,    -1,    -1,    -1,    -1,
     187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,
     197,   198,   199,    -1,   201,   202,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,    -1,   224,   225,    -1,
     227,    -1,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,    -1,    -1,    -1,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,   250,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,    -1,
      -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,    -1,   283,    -1,    -1,    -1,
     287,   288,   289,    -1,    -1,   292,   293,    -1,   295,   296,
      -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,    -1,    -1,   395,   396,
     397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,
     407,   408,   409,    -1,   411,   412,   413,   414,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
      -1,    -1,    -1,    -1,    -1,    -1,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,    -1,    -1,   494,    -1,   496,
     497,    -1,   499,    -1,    -1,    -1,   503,    -1,    -1,   506,
     507,    -1,   509,   510,   511,   512,    -1,    -1,   515,    -1,
     517,   518,   519,   520,    -1,   522,   523,   524,    -1,   526,
      -1,   528,   529,    -1,   531,    -1,    -1,    -1,    -1,   536,
     537,   538,   539,    -1,    -1,    -1,    -1,   544,    -1,    -1,
      -1,    -1,    -1,    -1,   551,    -1,    -1,   554,   555,    -1,
     557,    -1,   559,    -1,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,    -1,   581,    -1,    -1,    -1,   585,    -1,
      -1,    -1,   589,    -1,    -1,   592,   593,   594,   595,   596,
     597,    -1,    -1,   600,   601,   602,   603,    -1,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,   616,
      -1,    -1,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,    -1,    -1,    -1,   635,   636,
     637,    -1,    -1,   640,   641,    -1,   643,   644,    -1,    -1,
      -1,    -1,    -1,   650,    -1,    -1,   653,    -1,    -1,    -1,
     657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,
      -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,   676,
     677,   678,   679,   680,    -1,    -1,   683,    -1,    -1,    -1,
     687,    -1,    -1,   690,    -1,   692,    -1,     5,   695,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    -1,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      -1,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,
      -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,    -1,    -1,    -1,    -1,   187,
      -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,   197,
     198,   199,    -1,   201,   202,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,    -1,   224,   225,    -1,   227,
      -1,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   241,    -1,    -1,    -1,   245,   246,   247,
     248,   249,   250,    -1,    -1,   253,   254,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,    -1,    -1,   265,    -1,    -1,
      -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,
     278,   279,    -1,   281,    -1,   283,    -1,    -1,    -1,   287,
     288,   289,    -1,    -1,   292,   293,    -1,   295,   296,    -1,
      -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,   357,
      -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,   387,
     388,   389,    -1,    -1,   392,    -1,    -1,   395,   396,   397,
     398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,
     408,   409,    -1,   411,   412,   413,   414,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,
     478,    -1,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,   489,    -1,   491,    -1,    -1,   494,    -1,   496,   497,
      -1,   499,    -1,    -1,    -1,   503,    -1,    -1,   506,   507,
      -1,   509,   510,   511,   512,    -1,    -1,   515,    -1,   517,
     518,   519,   520,    -1,   522,   523,   524,    -1,   526,    -1,
     528,   529,    -1,   531,    -1,    -1,    -1,    -1,   536,   537,
     538,   539,    -1,    -1,    -1,    -1,   544,    -1,    -1,    -1,
      -1,    -1,    -1,   551,    -1,    -1,   554,   555,    -1,   557,
      -1,   559,    -1,   561,   562,    -1,    -1,    -1,    -1,    -1,
      -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,
      -1,   579,    -1,   581,    -1,    -1,    -1,   585,    -1,    -1,
      -1,   589,    -1,    -1,   592,   593,   594,   595,   596,   597,
      -1,    -1,   600,   601,   602,   603,    -1,   605,   606,    -1,
      -1,   609,   610,   611,   612,    -1,    -1,   615,   616,    -1,
      -1,   619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,
     628,   629,   630,    -1,    -1,    -1,    -1,   635,   636,   637,
      -1,    -1,   640,   641,    -1,   643,   644,    -1,    -1,    -1,
      -1,    -1,   650,    -1,    -1,   653,    -1,    -1,    -1,   657,
     658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,
     668,   669,    -1,    -1,    -1,   673,   674,   675,   676,   677,
     678,   679,    -1,    -1,    -1,   683,    -1,    -1,    -1,   687,
      -1,    -1,   690,    -1,   692,    -1,     5,   695,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,
      59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    -1,    85,    -1,    87,    88,
      89,    90,    -1,    92,    93,    -1,    95,    96,    97,    -1,
      99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,
      -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,
      -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,
      -1,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,    -1,
     139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,
     149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,   175,   176,    -1,   178,
     179,   180,   181,   182,    -1,    -1,    -1,    -1,   187,    -1,
      -1,   190,   191,   192,   193,    -1,    -1,   196,   197,   198,
     199,    -1,   201,   202,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   212,    -1,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,    -1,   224,   225,    -1,   227,    -1,
      -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,    -1,
      -1,    -1,   241,    -1,    -1,    -1,   245,   246,   247,   248,
     249,   250,    -1,    -1,   253,   254,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,    -1,   265,    -1,    -1,    -1,
      -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,    -1,   283,    -1,    -1,    -1,   287,   288,
     289,    -1,    -1,   292,   293,    -1,   295,   296,    -1,    -1,
      -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,
     309,   310,    -1,    -1,    -1,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,    -1,   335,   336,   337,   338,
      -1,   340,   341,   342,   343,    -1,   345,   346,   347,    -1,
      -1,    -1,    -1,   352,   353,   354,   355,   356,   357,    -1,
      -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
      -1,   380,    -1,    -1,   383,   384,   385,   386,   387,   388,
     389,    -1,    -1,   392,    -1,    -1,   395,   396,   397,   398,
      -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,
     409,    -1,   411,   412,   413,   414,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,    -1,    -1,
      -1,    -1,    -1,    -1,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,   465,   466,   467,   468,
      -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,
      -1,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
     489,    -1,   491,    -1,    -1,   494,    -1,   496,   497,    -1,
     499,    -1,    -1,    -1,   503,    -1,    -1,   506,   507,    -1,
     509,   510,   511,   512,    -1,    -1,   515,    -1,   517,   518,
     519,   520,    -1,   522,   523,   524,    -1,   526,    -1,   528,
     529,    -1,   531,    -1,    -1,    -1,    -1,   536,   537,   538,
     539,    -1,    -1,    -1,    -1,   544,    -1,    -1,    -1,    -1,
      -1,    -1,   551,    -1,    -1,   554,   555,    -1,   557,    -1,
     559,    -1,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,
     569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,
     579,    -1,   581,    -1,    -1,    -1,   585,    -1,    -1,    -1,
     589,    -1,    -1,   592,   593,   594,   595,   596,   597,    -1,
      -1,   600,   601,   602,   603,    -1,   605,   606,    -1,    -1,
     609,   610,   611,   612,    -1,    -1,   615,   616,    -1,    -1,
     619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,
     629,   630,    -1,    -1,    -1,    -1,   635,   636,   637,    -1,
      -1,   640,   641,    -1,   643,   644,    -1,    -1,    -1,    -1,
      -1,   650,    -1,    -1,   653,    -1,    -1,    -1,   657,   658,
      -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,
     669,    -1,    -1,    -1,   673,   674,   675,   676,   677,   678,
     679,    -1,    -1,    -1,   683,    -1,    -1,    -1,   687,    -1,
      -1,   690,    -1,   692,    -1,     5,   695,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    -1,    -1,    -1,
      -1,    -1,    -1,    83,    -1,    85,    -1,    87,    88,    89,
      90,    -1,    92,    93,    -1,    95,    96,    97,    -1,    99,
      -1,   101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,
     110,    -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,
     120,   121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,
     130,    -1,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,
      -1,    -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,
     150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,
     160,   161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,   175,   176,    -1,   178,   179,
     180,   181,   182,    -1,    -1,    -1,    -1,   187,    -1,    -1,
     190,   191,   192,   193,    -1,    -1,   196,   197,   198,   199,
      -1,   201,   202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,    -1,   224,   225,    -1,   227,    -1,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,    -1,    -1,
      -1,   241,    -1,    -1,    -1,   245,   246,   247,   248,   249,
     250,    -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,
      -1,   271,    -1,   273,   274,    -1,   276,   277,   278,   279,
      -1,   281,    -1,   283,    -1,    -1,    -1,   287,   288,   289,
      -1,    -1,   292,   293,    -1,   295,   296,    -1,    -1,    -1,
      -1,    -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,
     310,    -1,    -1,    -1,    -1,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,    -1,   335,   336,   337,   338,    -1,
     340,   341,   342,   343,    -1,   345,   346,   347,    -1,    -1,
      -1,    -1,   352,   353,   354,   355,   356,   357,    -1,    -1,
     360,   361,   362,    -1,   364,    -1,   366,    -1,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,    -1,
     380,    -1,    -1,   383,   384,   385,   386,   387,   388,   389,
      -1,    -1,   392,    -1,    -1,   395,   396,   397,   398,    -1,
      -1,    -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,
      -1,   411,   412,   413,   414,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   429,
     430,    -1,    -1,    -1,    -1,   435,    -1,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,    -1,    -1,    -1,
      -1,    -1,    -1,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,   465,   466,   467,   468,    -1,
      -1,   471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,   489,
      -1,   491,    -1,    -1,   494,    -1,   496,   497,    -1,   499,
      -1,    -1,    -1,   503,    -1,    -1,   506,   507,    -1,   509,
     510,   511,   512,    -1,    -1,   515,    -1,   517,   518,   519,
     520,    -1,   522,   523,   524,    -1,   526,    -1,   528,   529,
      -1,   531,    -1,    -1,    -1,    -1,   536,   537,   538,   539,
      -1,    -1,    -1,    -1,   544,    -1,    -1,    -1,    -1,    -1,
      -1,   551,    -1,    -1,   554,   555,    -1,   557,    -1,   559,
      -1,   561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,
     570,    -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,
      -1,   581,    -1,    -1,    -1,   585,    -1,    -1,    -1,   589,
      -1,    -1,   592,   593,   594,   595,   596,   597,    -1,    -1,
     600,   601,   602,   603,    -1,   605,   606,    -1,    -1,   609,
     610,   611,   612,    -1,    -1,   615,   616,    -1,    -1,   619,
     620,   621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,
     630,    -1,    -1,    -1,    -1,   635,   636,   637,    -1,    -1,
     640,   641,    -1,   643,   644,    -1,    -1,    -1,    -1,    -1,
     650,    -1,    -1,   653,    -1,    -1,    -1,   657,   658,    -1,
      -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,
      -1,    -1,    -1,   673,   674,   675,   676,   677,   678,   679,
      -1,    -1,    -1,   683,    -1,    -1,    -1,   687,    -1,    -1,
     690,    -1,   692,    -1,     5,   695,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    -1,    -1,    -1,    -1,
      -1,    -1,    83,    -1,    85,    -1,    87,    88,    89,    90,
      -1,    92,    93,    -1,    95,    96,    97,    -1,    99,    -1,
     101,    -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,
      -1,    -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,
     121,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,
      -1,    -1,    -1,   144,    -1,   146,   147,   148,   149,   150,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,   160,
     161,    -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,   175,   176,    -1,   178,   179,   180,
     181,   182,    -1,    -1,    -1,    -1,   187,    -1,    -1,   190,
     191,   192,   193,    -1,    -1,   196,   197,   198,   199,    -1,
     201,   202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   212,    -1,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,    -1,   224,   225,    -1,   227,    -1,    -1,    -1,
      -1,    -1,   233,   234,    -1,    -1,    -1,    -1,    -1,    -1,
     241,    -1,    -1,    -1,   245,   246,   247,   248,   249,   250,
      -1,    -1,   253,   254,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,    -1,
     271,    -1,   273,   274,    -1,   276,   277,   278,   279,    -1,
     281,    -1,   283,    -1,    -1,    -1,   287,   288,   289,    -1,
      -1,   292,   293,    -1,   295,   296,    -1,    -1,    -1,    -1,
      -1,   302,   303,    -1,   305,    -1,   307,    -1,   309,   310,
      -1,    -1,    -1,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,    -1,   335,   336,   337,   338,    -1,   340,
     341,   342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,
      -1,   352,   353,   354,   355,   356,   357,    -1,    -1,   360,
     361,   362,    -1,   364,    -1,   366,    -1,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,    -1,    -1,   380,
      -1,    -1,   383,   384,   385,   386,   387,   388,   389,    -1,
      -1,   392,    -1,    -1,   395,   396,   397,   398,    -1,    -1,
      -1,    -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,
     411,   412,   413,   414,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   429,   430,
      -1,    -1,    -1,    -1,   435,    -1,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,
      -1,    -1,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,   465,   466,   467,   468,    -1,    -1,
     471,    -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,   489,    -1,
     491,    -1,    -1,   494,    -1,   496,   497,    -1,   499,    -1,
      -1,    -1,   503,    -1,    -1,   506,   507,    -1,   509,   510,
     511,   512,    -1,    -1,   515,    -1,   517,   518,   519,   520,
      -1,   522,   523,   524,    -1,   526,    -1,   528,   529,    -1,
     531,    -1,    -1,    -1,    -1,   536,   537,   538,   539,    -1,
      -1,    -1,    -1,   544,    -1,    -1,    -1,    -1,    -1,    -1,
     551,    -1,    -1,   554,   555,    -1,   557,    -1,   559,    -1,
     561,   562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,
      -1,   572,    -1,    -1,   575,    -1,    -1,    -1,   579,    -1,
     581,    -1,    -1,    -1,   585,    -1,    -1,    -1,   589,    -1,
      -1,   592,   593,   594,   595,   596,   597,    -1,    -1,   600,
     601,   602,   603,    -1,   605,   606,    -1,    -1,   609,   610,
     611,   612,    -1,    -1,   615,   616,    -1,    -1,   619,   620,
     621,   622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,
      -1,    -1,    -1,    -1,   635,   636,   637,    -1,    -1,   640,
     641,    -1,   643,   644,    -1,    -1,    -1,    -1,    -1,   650,
      -1,    -1,   653,    -1,    -1,    -1,   657,   658,    -1,    -1,
      -1,    -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,
      -1,    -1,   673,   674,   675,   676,   677,   678,   679,    -1,
      -1,    -1,   683,    -1,    -1,    -1,   687,    -1,    -1,   690,
      -1,   692,    -1,     5,   695,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,
      -1,    83,    -1,    85,    -1,    87,    88,    89,    90,    -1,
      92,    93,    -1,    95,    96,    97,    -1,    99,    -1,   101,
      -1,    -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,
      -1,   113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,
     122,    -1,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,
      -1,    -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,
      -1,    -1,   144,    -1,   146,   147,   148,   149,   150,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,   160,   161,
      -1,    -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,   175,   176,    -1,   178,   179,   180,   181,
     182,    -1,    -1,    -1,    -1,   187,    -1,    -1,   190,   191,
     192,   193,    -1,    -1,   196,   197,   198,   199,    -1,   201,
     202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     212,    -1,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,    -1,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,
      -1,   233,   234,    -1,    -1,    -1,    -1,    -1,    -1,   241,
      -1,    -1,    -1,   245,   246,   247,   248,   249,   250,    -1,
      -1,   253,   254,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,    -1,   271,
      -1,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
      -1,   283,    -1,    -1,    -1,   287,   288,   289,    -1,    -1,
     292,   293,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,
     302,   303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,
      -1,    -1,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,    -1,   335,   336,   337,   338,    -1,   340,   341,
     342,   343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,
     352,   353,   354,   355,   356,   357,    -1,    -1,   360,   361,
     362,    -1,   364,    -1,   366,    -1,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,    -1,   380,    -1,
      -1,   383,   384,   385,   386,   387,   388,   389,    -1,    -1,
     392,    -1,    -1,   395,   396,   397,   398,    -1,    -1,    -1,
      -1,   403,    -1,    -1,   406,   407,   408,   409,    -1,   411,
     412,   413,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   429,   430,    -1,
      -1,    -1,    -1,   435,    -1,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,
      -1,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,   465,   466,   467,   468,    -1,    -1,   471,
      -1,   473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,   489,    -1,   491,
      -1,    -1,   494,    -1,   496,   497,    -1,   499,    -1,    -1,
      -1,   503,    -1,    -1,   506,   507,    -1,   509,   510,   511,
     512,    -1,    -1,   515,    -1,   517,   518,   519,   520,    -1,
     522,   523,   524,    -1,   526,    -1,   528,   529,    -1,   531,
      -1,    -1,    -1,    -1,   536,   537,   538,   539,    -1,    -1,
      -1,    -1,   544,    -1,    -1,    -1,    -1,    -1,    -1,   551,
      -1,    -1,   554,   555,    -1,   557,    -1,   559,    -1,   561,
     562,    -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,
     572,    -1,    -1,   575,    -1,    -1,    -1,   579,    -1,   581,
      -1,    -1,    -1,   585,    -1,    -1,    -1,   589,    -1,    -1,
     592,   593,   594,   595,   596,   597,    -1,    -1,   600,   601,
     602,   603,    -1,   605,   606,    -1,    -1,   609,   610,   611,
     612,    -1,    -1,   615,   616,    -1,    -1,   619,   620,   621,
     622,    -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,
      -1,    -1,    -1,   635,   636,   637,    -1,    -1,   640,   641,
      -1,   643,   644,    -1,    -1,    -1,    -1,    -1,   650,    -1,
      -1,   653,    -1,    -1,    -1,   657,   658,    -1,    -1,    -1,
      -1,    -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,
      -1,   673,   674,   675,   676,   677,   678,   679,    -1,    -1,
      -1,   683,    -1,    -1,    -1,   687,    -1,    -1,   690,    -1,
     692,    -1,     5,   695,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    -1,    85,    -1,    87,    88,    89,    90,    -1,    92,
      93,    -1,    95,    96,    97,    -1,    99,    -1,   101,    -1,
      -1,   104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,
     113,    -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,
      -1,    -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,
      -1,   144,    -1,   146,   147,   148,   149,   150,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   159,   160,   161,    -1,
      -1,    -1,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,   175,   176,    -1,   178,   179,   180,   181,   182,
      -1,    -1,    -1,    -1,   187,    -1,    -1,   190,   191,   192,
     193,    -1,    -1,   196,   197,   198,   199,    -1,   201,   202,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,
      -1,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
      -1,   224,   225,    -1,   227,    -1,    -1,    -1,    -1,    -1,
     233,   234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,
      -1,    -1,   245,   246,   247,   248,   249,   250,    -1,    -1,
     253,   254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
      -1,    -1,   265,    -1,    -1,    -1,    -1,    -1,   271,    -1,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,    -1,
     283,    -1,    -1,    -1,   287,   288,   289,    -1,    -1,   292,
     293,    -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,
     303,    -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,
      -1,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,    -1,   335,   336,   337,   338,    -1,   340,   341,   342,
     343,    -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,
     353,   354,   355,   356,   357,    -1,    -1,   360,   361,   362,
      -1,   364,    -1,   366,    -1,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,
     383,   384,   385,   386,   387,   388,   389,    -1,    -1,   392,
      -1,    -1,   395,   396,   397,   398,    -1,    -1,    -1,    -1,
     403,    -1,    -1,   406,   407,   408,   409,    -1,   411,   412,
     413,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   429,   430,    -1,    -1,
      -1,    -1,   435,    -1,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,
     473,    -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,   489,    -1,   491,    -1,
      -1,   494,    -1,   496,   497,    -1,   499,    -1,    -1,    -1,
     503,    -1,    -1,   506,   507,    -1,   509,   510,   511,   512,
      -1,    -1,   515,    -1,   517,   518,   519,   520,    -1,   522,
     523,   524,    -1,   526,    -1,   528,   529,    -1,   531,    -1,
      -1,    -1,    -1,   536,   537,   538,   539,    -1,    -1,    -1,
      -1,   544,    -1,    -1,    -1,    -1,    -1,    -1,   551,    -1,
      -1,   554,   555,    -1,   557,    -1,   559,    -1,   561,   562,
      -1,    -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,
      -1,    -1,   575,    -1,    -1,    -1,   579,    -1,   581,    -1,
      -1,    -1,   585,    -1,    -1,    -1,   589,    -1,    -1,   592,
     593,   594,   595,   596,   597,    -1,    -1,   600,   601,   602,
     603,    -1,   605,   606,    -1,    -1,   609,   610,   611,   612,
      -1,    -1,   615,   616,    -1,    -1,   619,   620,   621,   622,
      -1,    -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,
      -1,    -1,   635,   636,   637,    -1,    -1,   640,   641,    -1,
     643,   644,    -1,    -1,    -1,    -1,    -1,   650,    -1,    -1,
     653,    -1,    -1,    -1,   657,   658,    -1,    -1,    -1,    -1,
      -1,    -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,
     673,   674,   675,   676,   677,   678,   679,    -1,    -1,    -1,
     683,    -1,    -1,    -1,   687,    -1,    -1,   690,    -1,   692,
      -1,     5,   695,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    83,
      -1,    85,    -1,    87,    88,    89,    90,    -1,    92,    93,
      -1,    95,    96,    97,    -1,    99,    -1,   101,    -1,    -1,
     104,    -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,
      -1,   115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,
      -1,   125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,
     144,    -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,
      -1,   165,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,   175,   176,    -1,   178,   179,   180,   181,   182,    -1,
      -1,    -1,    -1,   187,    -1,    -1,   190,   191,   192,   193,
      -1,    -1,   196,   197,   198,   199,    -1,   201,   202,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
     224,   225,    -1,   227,    -1,    -1,    -1,    -1,    -1,   233,
     234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,
      -1,   245,   246,   247,   248,   249,   250,    -1,    -1,   253,
     254,   255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,
      -1,   265,    -1,    -1,    -1,    -1,    -1,   271,    -1,   273,
     274,    -1,   276,   277,   278,   279,    -1,   281,    -1,   283,
      -1,    -1,    -1,   287,   288,   289,    -1,    -1,   292,   293,
      -1,   295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,
      -1,   305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
      -1,   335,   336,   337,   338,    -1,   340,   341,   342,   343,
      -1,   345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,
     354,   355,   356,   357,    -1,    -1,   360,   361,   362,    -1,
     364,    -1,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,
     384,   385,   386,   387,   388,   389,    -1,    -1,   392,    -1,
      -1,   395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,
      -1,    -1,   406,   407,   408,   409,    -1,   411,   412,   413,
     414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   429,   430,    -1,    -1,    -1,
      -1,   435,    -1,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,    -1,    -1,    -1,    -1,    -1,    -1,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,   465,   466,   467,   468,    -1,    -1,   471,    -1,   473,
      -1,    -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,   489,    -1,   491,    -1,    -1,
     494,    -1,   496,   497,    -1,   499,    -1,    -1,    -1,   503,
      -1,    -1,   506,   507,    -1,   509,   510,   511,   512,    -1,
      -1,   515,    -1,   517,   518,   519,   520,    -1,   522,   523,
     524,    -1,   526,    -1,   528,   529,    -1,   531,    -1,    -1,
      -1,    -1,   536,   537,   538,   539,    -1,    -1,    -1,    -1,
     544,    -1,    -1,    -1,    -1,    -1,    -1,   551,    -1,    -1,
     554,   555,    -1,   557,    -1,   559,    -1,   561,   562,    -1,
      -1,    -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,
      -1,   575,    -1,    -1,    -1,   579,    -1,   581,    -1,    -1,
      -1,   585,    -1,    -1,    -1,   589,    -1,    -1,   592,   593,
     594,   595,   596,   597,    -1,    -1,   600,   601,   602,   603,
      -1,   605,   606,    -1,    -1,   609,   610,   611,   612,    -1,
      -1,   615,   616,    -1,    -1,   619,   620,   621,   622,    -1,
      -1,    -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,
      -1,   635,   636,   637,    -1,    -1,   640,   641,    -1,   643,
     644,    -1,    -1,    -1,    -1,    -1,   650,    -1,    -1,   653,
      -1,    -1,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,
      -1,   665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,
     674,   675,   676,   677,   678,   679,    -1,    -1,    -1,   683,
      -1,    -1,    -1,   687,    -1,    -1,   690,    -1,   692,    -1,
       5,   695,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,
      55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,
      85,    -1,    87,    88,    89,    90,    -1,    92,    93,    -1,
      95,    96,    97,    -1,    99,    -1,   101,    -1,    -1,   104,
      -1,    -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,
     115,    -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,
     125,    -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,    -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,
      -1,   146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,
     165,   166,    -1,    -1,   169,    -1,   171,   172,   173,    -1,
     175,   176,    -1,   178,   179,   180,   181,   182,    -1,    -1,
      -1,    -1,   187,    -1,    -1,   190,   191,   192,   193,    -1,
      -1,   196,   197,   198,   199,    -1,   201,   202,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,    -1,   224,
     225,    -1,   227,    -1,    -1,    -1,    -1,    -1,   233,   234,
      -1,    -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,    -1,
     245,   246,   247,   248,   249,   250,    -1,    -1,   253,   254,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,
     265,    -1,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,
      -1,   276,   277,   278,   279,    -1,   281,    -1,   283,    -1,
      -1,    -1,   287,   288,   289,    -1,    -1,   292,   293,    -1,
     295,   296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,
     305,    -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,    -1,
     335,   336,   337,   338,    -1,   340,   341,   342,   343,    -1,
     345,   346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,
     355,   356,   357,    -1,    -1,   360,   361,   362,    -1,   364,
      -1,   366,    -1,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,
     385,   386,   387,   388,   389,    -1,    -1,   392,    -1,    -1,
     395,   396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,
      -1,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   429,   430,    -1,    -1,    -1,    -1,
     435,    -1,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,    -1,    -1,    -1,    -1,    -1,    -1,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
     465,   466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,
      -1,    -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,   489,    -1,   491,    -1,    -1,   494,
      -1,   496,   497,    -1,   499,    -1,    -1,    -1,   503,    -1,
      -1,   506,   507,    -1,   509,   510,   511,   512,    -1,    -1,
     515,    -1,   517,   518,   519,   520,    -1,   522,   523,   524,
      -1,   526,    -1,   528,   529,    -1,   531,    -1,    -1,    -1,
      -1,   536,   537,   538,   539,    -1,    -1,    -1,    -1,   544,
      -1,    -1,    -1,    -1,    -1,    -1,   551,    -1,    -1,   554,
     555,    -1,   557,    -1,   559,    -1,   561,   562,    -1,    -1,
      -1,    -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,
     575,    -1,    -1,    -1,   579,    -1,   581,    -1,    -1,    -1,
     585,    -1,    -1,    -1,   589,    -1,    -1,   592,   593,   594,
     595,   596,   597,    -1,    -1,   600,   601,   602,   603,    -1,
     605,   606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,
     615,   616,    -1,    -1,   619,   620,   621,   622,    -1,    -1,
      -1,    -1,    -1,   628,   629,   630,    -1,    -1,    -1,    -1,
     635,   636,   637,    -1,    -1,   640,   641,    -1,   643,   644,
      -1,    -1,    -1,    -1,    -1,   650,    -1,    -1,   653,    -1,
      -1,    -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,
     665,    -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,
     675,   676,   677,   678,   679,    -1,    -1,    -1,   683,    -1,
      -1,    -1,   687,    -1,    -1,   690,    -1,   692,    -1,     5,
     695,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,
      -1,    87,    88,    89,    90,    -1,    92,    93,    -1,    95,
      96,    97,    -1,    99,    -1,   101,    -1,    -1,   104,    -1,
      -1,   107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,
      -1,   117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,
      -1,    -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,
      -1,   137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,
     146,   147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,
     166,    -1,    -1,   169,    -1,   171,   172,   173,    -1,   175,
     176,    -1,   178,   179,   180,   181,   182,    -1,    -1,    -1,
      -1,   187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,
     196,   197,   198,   199,    -1,   201,   202,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,    -1,   224,   225,
      -1,   227,    -1,    -1,    -1,    -1,    -1,   233,   234,    -1,
      -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,    -1,   245,
     246,   247,   248,   249,   250,    -1,    -1,   253,   254,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,
      -1,    -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,
     276,   277,   278,   279,    -1,   281,    -1,   283,    -1,    -1,
      -1,   287,   288,   289,    -1,    -1,   292,   293,    -1,   295,
     296,    -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,
      -1,   307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,    -1,   335,
     336,   337,   338,    -1,   340,   341,   342,   343,    -1,   345,
     346,   347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,
     356,   357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,
     366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,
     386,   387,   388,   389,    -1,    -1,   392,    -1,    -1,   395,
     396,   397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,
     406,   407,   408,   409,    -1,   411,   412,   413,   414,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   429,   430,    -1,    -1,    -1,    -1,   435,
      -1,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,    -1,    -1,    -1,    -1,    -1,    -1,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,   465,
     466,   467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,
      -1,   477,   478,    -1,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,   489,    -1,   491,    -1,    -1,   494,    -1,
     496,   497,    -1,   499,    -1,    -1,    -1,   503,    -1,    -1,
     506,   507,    -1,   509,   510,   511,   512,    -1,    -1,   515,
      -1,   517,   518,   519,   520,    -1,   522,   523,   524,    -1,
     526,    -1,   528,   529,    -1,   531,    -1,    -1,    -1,    -1,
     536,   537,   538,   539,    -1,    -1,    -1,    -1,   544,    -1,
      -1,    -1,    -1,    -1,    -1,   551,    -1,    -1,   554,   555,
      -1,   557,    -1,   559,    -1,   561,   562,    -1,    -1,    -1,
      -1,    -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,
      -1,    -1,    -1,   579,    -1,   581,    -1,    -1,    -1,   585,
      -1,    -1,    -1,   589,    -1,    -1,   592,   593,   594,   595,
     596,   597,    -1,    -1,   600,   601,   602,   603,    -1,   605,
     606,    -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,
     616,    -1,    -1,   619,   620,   621,   622,    -1,    -1,    -1,
      -1,    -1,   628,   629,   630,    -1,    -1,    -1,    -1,   635,
     636,   637,    -1,    -1,   640,   641,    -1,   643,   644,    -1,
      -1,    -1,    -1,    -1,   650,    -1,    -1,   653,    -1,    -1,
      -1,   657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,
     676,   677,   678,   679,    -1,    -1,    -1,   683,    -1,    -1,
      -1,   687,    -1,    -1,   690,    -1,   692,    -1,     5,   695,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
      -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    71,    72,    73,    -1,    75,    76,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    -1,
      87,    88,    89,    90,    -1,    92,    93,    -1,    95,    96,
      97,    -1,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,
     107,    -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,
     117,    -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,
      -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,
     137,    -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,
     147,   148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,
      -1,    -1,   169,    -1,   171,   172,   173,    -1,   175,   176,
      -1,   178,   179,   180,   181,   182,    -1,    -1,    -1,    -1,
     187,    -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,
     197,    -1,   199,    -1,   201,   202,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   212,    -1,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,    -1,   224,   225,    -1,
     227,    -1,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,
      -1,    -1,    -1,    -1,   241,    -1,    -1,    -1,   245,   246,
     247,   248,   249,   250,    -1,    -1,   253,   254,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,    -1,   265,    -1,
      -1,    -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,
     277,   278,    -1,    -1,   281,    -1,   283,    -1,    -1,    -1,
     287,   288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,
      -1,    -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,
     307,    -1,   309,   310,    -1,    -1,    -1,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,    -1,   335,   336,
     337,   338,    -1,   340,   341,   342,   343,    -1,   345,   346,
     347,    -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,
     357,    -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,
      -1,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,    -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,
     387,   388,   389,    -1,    -1,   392,    -1,    -1,   395,   396,
     397,   398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,
     407,   408,   409,    -1,   411,   412,   413,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
      -1,    -1,    -1,    -1,    -1,    -1,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,   465,   466,
     467,   468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,
     477,   478,    -1,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,   489,    -1,   491,    -1,    -1,   494,    -1,   496,
     497,    -1,   499,    -1,    -1,    -1,   503,    -1,    -1,   506,
     507,    -1,   509,   510,   511,   512,    -1,    -1,   515,    -1,
     517,   518,   519,   520,    -1,   522,   523,   524,    -1,   526,
      -1,   528,   529,    -1,   531,    -1,    -1,    -1,    -1,   536,
     537,   538,   539,    -1,    -1,    -1,    -1,   544,    -1,    -1,
      -1,    -1,    -1,    -1,   551,    -1,    -1,   554,   555,    -1,
     557,    -1,   559,    -1,   561,   562,    -1,    -1,    -1,    -1,
      -1,    -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,
      -1,    -1,   579,    -1,   581,    -1,    -1,    -1,   585,    -1,
      -1,    -1,   589,    -1,    -1,   592,   593,   594,   595,   596,
     597,    -1,    -1,   600,   601,   602,   603,    -1,   605,   606,
      -1,    -1,   609,   610,   611,   612,    -1,    -1,   615,   616,
      -1,    -1,   619,   620,   621,   622,    -1,    -1,    -1,    -1,
      -1,   628,   629,   630,    -1,    -1,    -1,    -1,   635,   636,
     637,    -1,    -1,   640,   641,    -1,   643,   644,    -1,    -1,
      -1,    -1,    -1,   650,    -1,    -1,   653,    -1,    -1,    -1,
     657,   658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,
      -1,   668,   669,    -1,    -1,    -1,   673,   674,   675,   676,
     677,   678,   679,    -1,    -1,    -1,   683,    -1,    -1,    -1,
     687,    -1,    -1,   690,    -1,   692,    -1,     5,   695,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    71,    72,    73,    -1,    75,    76,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    -1,    85,    -1,    87,
      88,    89,    90,    -1,    92,    93,    -1,    95,    96,    97,
      -1,    99,    -1,   101,    -1,    -1,   104,    -1,    -1,   107,
      -1,    -1,   110,    -1,    -1,   113,    -1,   115,    -1,   117,
      -1,    -1,   120,   121,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,   137,
      -1,   139,    -1,    -1,    -1,    -1,   144,    -1,   146,   147,
     148,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   159,   160,   161,    -1,    -1,    -1,   165,   166,    -1,
      -1,   169,    -1,   171,   172,   173,    -1,   175,   176,    -1,
     178,   179,   180,   181,   182,    -1,    -1,    -1,    -1,   187,
      -1,    -1,   190,   191,   192,   193,    -1,    -1,   196,   197,
      -1,   199,    -1,   201,   202,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,    -1,   224,   225,    -1,   227,
      -1,    -1,    -1,    -1,    -1,   233,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   241,    -1,    -1,    -1,   245,   246,   247,
     248,   249,    -1,    -1,    -1,   253,   254,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,    -1,    -1,   265,    -1,    -1,
      -1,    -1,    -1,   271,    -1,   273,   274,    -1,   276,   277,
     278,    -1,    -1,   281,    -1,   283,    -1,    -1,    -1,   287,
     288,   289,    -1,    -1,   292,    -1,    -1,   295,   296,    -1,
      -1,    -1,    -1,    -1,   302,   303,    -1,   305,    -1,   307,
      -1,   309,   310,    -1,    -1,    -1,    -1,    -1,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,    -1,   335,   336,   337,
     338,    -1,   340,   341,   342,   343,    -1,   345,   346,   347,
      -1,    -1,    -1,    -1,   352,   353,   354,   355,   356,   357,
      -1,    -1,   360,   361,   362,    -1,   364,    -1,   366,    -1,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,   387,
     388,   389,    -1,    -1,   392,    -1,    -1,   395,   396,   397,
     398,    -1,    -1,    -1,    -1,   403,    -1,    -1,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   429,   430,    -1,    -1,    -1,    -1,   435,    -1,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,   465,   466,   467,
     468,    -1,    -1,   471,    -1,   473,    -1,    -1,    -1,   477,
     478,    -1,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,   489,    -1,   491,    -1,    -1,   494,    -1,   496,    -1,
      -1,   499,    -1,    -1,    -1,   503,    -1,    -1,   506,   507,
      -1,   509,    -1,   511,   512,    -1,    -1,   515,    -1,   517,
     518,   519,   520,    -1,   522,   523,   524,    -1,   526,    -1,
     528,   529,    -1,   531,    -1,    -1,    -1,    -1,   536,   537,
     538,   539,    -1,    -1,    -1,    -1,   544,    -1,    -1,    -1,
      -1,    -1,    -1,   551,    -1,    -1,   554,   555,    -1,   557,
      -1,   559,    -1,   561,   562,    -1,    -1,    -1,    -1,    -1,
      -1,   569,   570,    -1,   572,    -1,    -1,   575,    -1,    -1,
      -1,   579,    -1,   581,    -1,    -1,    -1,   585,    -1,    -1,
      -1,   589,    -1,    -1,   592,   593,   594,   595,   596,   597,
      -1,    -1,   600,   601,   602,   603,    -1,   605,   606,    -1,
      -1,   609,   610,   611,   612,    -1,    -1,   615,   616,    -1,
      -1,   619,   620,   621,   622,    -1,    -1,    -1,    -1,    -1,
     628,   629,   630,    -1,    -1,    -1,    -1,   635,   636,   637,
      -1,    -1,   640,   641,    -1,   643,   644,    -1,    -1,    -1,
      -1,    -1,   650,    -1,    -1,   653,    -1,    -1,    -1,   657,
     658,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,    -1,
     668,   669,    -1,    -1,    -1,   673,   674,   675,   676,   677,
     678,   679,    -1,    -1,    -1,    36,    37,    -1,    -1,   687,
      -1,    42,   690,    44,   692,    46,    47,   695,    36,    37,
      -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    46,    47,
      -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   122,    -1,    -1,   125,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   122,    -1,    -1,   125,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,
      -1,    -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   153,    -1,    -1,    -1,    -1,
      -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   202,    -1,   204,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   202,    -1,   204,    -1,    -1,   220,
     221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   220,   221,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     311,   312,    -1,   314,   302,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   311,   312,    -1,   314,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,   350,
     351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   349,   350,   351,    -1,    -1,    -1,    -1,   369,   370,
     371,    -1,    -1,    -1,    -1,    -1,   377,    -1,    -1,   380,
      -1,   369,   370,   371,    -1,    -1,    -1,    -1,    -1,   377,
      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   404,    -1,   406,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   404,    -1,   406,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   445,   446,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   445,   446,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   476,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   476,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   538,    -1,    -1,
      -1,   542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   542,   556,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   556,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   615,    -1,    -1,    -1,   619,    -1,
      -1,   622,   623,   624,   625,    -1,    -1,   615,    -1,    -1,
      -1,   619,    -1,    -1,   622,   623,   624,   625,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   666,   667,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   666,   667,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   695,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   695
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    34,    38,    52,    53,    56,    60,    65,
      66,    86,   105,   131,   140,   142,   143,   155,   157,   170,
     186,   205,   223,   226,   232,   236,   250,   264,   266,   285,
     304,   308,   315,   415,   434,   436,   452,   464,   490,   493,
     495,   497,   498,   501,   502,   513,   516,   527,   542,   547,
     548,   549,   580,   588,   634,   647,   651,   654,   659,   683,
     684,   691,   697,   721,   724,   725,   726,   727,   728,   731,
     738,   740,   753,   788,   831,   838,   839,   855,   856,   879,
     899,   911,   974,  1032,  1076,  1162,  1207,  1210,  1220,  1225,
    1231,  1244,  1247,  1253,  1256,  1261,  1268,  1280,  1497,  1499,
    1511,  1514,  1539,  1547,  1560,  1567,  1581,  1585,  1586,  1590,
    1601,  1609,  1613,  1618,  1619,  1620,  1652,  1653,  1686,  1717,
    1724,  1726,  1733,  1736,  1773,  1775,  1781,  1782,  1783,  1784,
    1840,  1848,  1849,  1850,    12,   118,   137,   216,   250,   309,
     458,   540,   606,  1163,  1509,  1809,  1810,  1811,  1812,   211,
     305,   399,  1255,  1588,   390,   391,  1327,  1774,   614,  1674,
     258,     5,     7,     8,     9,    10,    11,    12,    15,    19,
      22,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      34,    38,    42,    45,    46,    47,    49,    51,    52,    55,
      58,    59,    61,    62,    64,    65,    67,    68,    69,    70,
      71,    72,    73,    75,    76,    77,    78,    79,    80,    81,
      83,    84,    85,    86,    87,    88,    89,    90,    92,    93,
      95,    96,    97,    98,    99,   101,   104,   107,   110,   113,
     115,   117,   120,   121,   122,   125,   130,   131,   135,   137,
     139,   144,   146,   147,   148,   149,   150,   155,   159,   160,
     161,   165,   166,   168,   169,   171,   172,   173,   175,   176,
     178,   179,   180,   181,   182,   183,   185,   186,   187,   190,
     191,   192,   193,   196,   197,   199,   201,   202,   205,   206,
     207,   211,   212,   214,   216,   218,   219,   220,   221,   222,
     223,   224,   225,   227,   232,   233,   234,   236,   240,   241,
     245,   246,   247,   248,   249,   253,   254,   255,   256,   257,
     260,   265,   266,   271,   273,   274,   276,   277,   278,   281,
     283,   286,   287,   288,   289,   292,   295,   296,   302,   303,
     305,   307,   309,   310,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   335,   336,   337,   338,   340,   341,   342,   343,   345,
     346,   347,   352,   353,   354,   355,   356,   357,   360,   361,
     362,   364,   366,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   380,   383,   384,   385,   386,   387,   388,
     389,   392,   394,   395,   396,   397,   398,   403,   406,   407,
     408,   409,   411,   412,   413,   414,   416,   417,   423,   428,
     429,   430,   433,   435,   437,   438,   439,   441,   442,   443,
     444,   445,   446,   447,   449,   450,   452,   453,   454,   455,
     457,   459,   460,   461,   462,   463,   465,   466,   467,   468,
     471,   473,   477,   478,   480,   481,   482,   485,   486,   487,
     488,   489,   491,   492,   494,   495,   496,   499,   501,   503,
     504,   506,   507,   509,   511,   512,   515,   516,   517,   518,
     519,   520,   522,   523,   524,   526,   527,   528,   529,   531,
     532,   536,   537,   538,   539,   540,   544,   548,   550,   551,
     552,   553,   554,   555,   557,   558,   559,   560,   561,   562,
     569,   570,   572,   575,   579,   580,   581,   585,   588,   589,
     590,   592,   593,   594,   595,   596,   597,   600,   601,   602,
     603,   605,   606,   609,   610,   611,   612,   615,   616,   618,
     619,   620,   621,   622,   628,   629,   630,   634,   635,   636,
     637,   639,   640,   641,   643,   644,   646,   647,   650,   653,
     655,   657,   658,   665,   668,   669,   673,   674,   675,   676,
     677,   678,   679,   687,   688,   690,   691,   692,   695,   782,
    1673,  1677,  1684,  1685,   880,   335,   605,   608,  1720,  1248,
     687,  1777,   309,   422,   606,  1548,  1498,   118,   180,   216,
     258,   309,   458,   515,   540,   606,   611,   631,   657,   674,
    1510,   254,  1677,  1255,   110,   840,   781,   717,  1670,  1672,
    1677,   739,   857,  1512,   444,   560,  1614,   121,   258,   692,
    1625,  1720,   912,  1255,  1077,   975,  1677,  1610,   527,   657,
    1720,  1255,   914,  1515,  1602,   566,   828,   832,   833,  1677,
     781,  1777,  1677,   581,  1687,  1568,   832,    13,   552,   628,
      13,   552,   608,  1562,   444,   560,  1725,  1540,  1677,   913,
     479,  1655,    34,    86,   168,   452,   478,   516,   580,  1842,
       0,   170,   722,   452,   118,   215,   515,   563,   649,   657,
     760,   761,  1140,  1141,  1142,  1510,   192,   211,   437,  1587,
    1588,  1670,  1677,   533,   710,  1281,   698,  1175,  1677,   698,
     782,   188,   228,   782,   297,  1674,  1677,  1680,   917,   918,
     921,   944,  1677,  1199,  1200,   657,  1169,  1315,  1809,   698,
    1720,  1280,  1511,  1514,  1539,  1547,  1584,    25,  1777,  1262,
     789,   717,   680,   881,   882,   885,   889,   751,   752,  1674,
    1221,   674,  1245,  1720,    18,  1778,   228,   498,   919,   944,
     252,   316,   467,  1558,  1559,     8,    22,    31,    37,    39,
      40,    41,    43,    56,    57,    62,    63,    72,    75,    77,
      78,    79,    80,    81,    98,   102,   103,   108,   109,   111,
     112,   116,   118,   123,   124,   125,   130,   132,   135,   136,
     141,   188,   194,   195,   200,   203,   211,   220,   222,   229,
     230,   231,   237,   238,   245,   250,   264,   268,   288,   289,
     294,   302,   313,   339,   344,   356,   360,   363,   367,   368,
     369,   370,   371,   379,   384,   385,   390,   391,   393,   400,
     401,   402,   405,   409,   432,   439,   440,   445,   446,   448,
     455,   465,   470,   497,   498,   512,   514,   520,   523,   525,
     531,   586,   587,   594,   598,   599,   604,   614,   619,   620,
     621,   622,   632,   633,   634,   638,   642,   657,   661,   662,
     663,   664,   670,   672,   678,   679,   695,   703,   704,   709,
     710,   713,   714,   717,   718,  1321,  1322,  1323,  1324,  1328,
    1339,  1340,  1341,  1342,  1343,  1344,  1345,  1353,  1357,  1358,
    1359,  1361,  1375,  1644,  1647,  1649,  1650,  1651,  1665,  1668,
    1673,  1677,  1509,  1509,  1509,   250,  1508,   228,  1509,  1509,
    1509,   944,  1509,  1509,  1509,   536,  1720,   729,   730,   732,
    1591,   146,    13,    14,   105,   112,   140,   157,   180,   186,
     199,   226,   258,   264,   308,   459,   463,   483,   491,   499,
     533,   547,   548,   600,   631,   654,   656,  1680,  1737,  1741,
    1742,  1744,  1746,  1747,  1677,   414,    70,   474,   717,  1680,
     874,   875,   138,   239,   316,  1517,  1677,  1674,   233,   559,
    1615,   269,  1621,  1718,    34,    70,   198,   279,   293,   414,
     510,   806,   853,   854,   855,   858,   859,   860,   862,   863,
     869,   870,   871,   872,   894,   895,   897,   901,   907,  1673,
    1679,  1685,  1720,  1321,    50,   976,   213,    37,   335,  1573,
    1611,  1677,   781,  1257,  1226,   806,   904,   138,   316,  1518,
    1546,   335,   466,   552,  1603,  1604,   665,   829,   542,   834,
       7,    13,   463,  1734,  1735,  1742,  1744,   626,  1778,  1688,
      62,    63,   136,   224,   305,   375,   439,   515,   539,   628,
     718,  1105,  1677,  1691,  1703,  1707,    13,    26,    38,    62,
      75,   101,   103,   105,   119,   172,   176,   179,   214,   216,
     224,   227,   257,   258,   282,   305,   335,   414,   443,   457,
     458,   461,   462,   486,   539,   552,   589,   608,   677,  1105,
    1139,  1569,  1573,  1574,  1576,  1585,  1673,  1704,   834,   553,
     751,   474,   684,  1211,  1212,  1213,   553,   751,  1561,  1677,
    1674,  1720,  1546,   902,  1321,  1654,    39,   237,   238,   614,
    1645,  1646,  1675,  1841,  1841,  1841,  1841,  1841,   716,  1677,
     250,  1031,  1031,  1031,  1806,  1810,  1811,  1812,   540,   765,
     258,   258,   258,   536,   608,  1583,  1582,  1302,  1303,   710,
    1283,  1284,   354,   612,   641,  1165,   655,   111,  1680,  1681,
    1682,  1741,  1167,   923,   945,  1677,  1166,  1171,     6,    60,
     157,   391,   473,   475,   946,   608,   252,   413,  1201,  1202,
    1203,   781,   574,  1813,  1814,   180,  1168,  1680,  1232,   900,
    1263,  1264,  1265,  1266,  1670,   710,   790,  1677,   890,   163,
     892,  1321,   889,   626,  1503,  1504,  1670,  1246,  1503,    59,
     394,   394,   490,  1779,   922,   945,     6,   213,  1549,  1555,
    1556,  1677,  1558,   710,   710,   710,  1340,   710,   710,   710,
    1321,  1378,   710,   710,   710,   710,   710,   710,   710,   710,
     710,   710,   710,   710,   710,   710,   710,  1320,  1320,  1320,
     710,  1319,   710,   710,   710,   614,   710,   710,   710,   710,
     710,   710,   710,   710,   710,   710,   710,   710,   710,   710,
     710,   710,   710,   710,  1321,   710,   710,   710,   710,   710,
    1376,  1377,  1665,  1677,   710,   710,   710,   710,   710,   710,
     710,   710,   710,   665,   710,  1321,  1319,   710,   710,   710,
     710,   710,   710,   710,   710,   665,   710,   710,   710,   710,
     710,   710,   710,   710,   710,   710,   710,   710,   710,   710,
     710,  1319,   614,   710,   710,   710,   614,   710,   710,   710,
     614,  1646,   710,  1320,  1319,  1319,   710,   710,   710,   710,
     710,   710,  1340,  1340,  1340,  1078,  1321,  1800,  1801,  1677,
    1677,  1362,    17,    18,   419,   422,   693,  1325,  1326,   174,
     217,   275,   290,   381,   698,   699,   700,  1329,    35,   152,
     272,   298,   367,   484,   545,   546,   561,   701,   702,   703,
     704,   705,   706,   707,   708,  1327,  1340,    74,   421,   427,
     712,  1675,   710,   717,  1677,   782,  1677,   188,  1677,   945,
     782,   781,  1680,   955,  1574,   782,   781,  1501,  1509,  1509,
     733,  1321,   660,   734,    37,   144,   172,   175,   218,   241,
     310,   335,   457,   466,   485,   503,   552,   555,   585,  1592,
    1597,  1598,  1673,  1720,    91,   718,   841,   842,   843,   844,
    1677,   457,  1745,   518,   518,   606,   611,   657,   674,  1320,
     417,  1749,   605,   410,  1751,    69,   552,  1748,   119,   674,
    1750,   626,   410,   712,    20,   698,  1434,  1435,  1727,  1677,
     168,  1321,   252,  1198,   560,    92,   466,  1616,    52,    90,
     316,  1627,  1670,  1721,  1722,   898,  1677,   213,   384,  1677,
    1679,  1679,  1677,   861,   168,   854,   716,   725,   873,  1677,
      34,   719,  1254,   977,   729,   310,  1258,  1681,  1683,  1259,
    1260,  1670,   674,  1223,  1720,   653,   269,  1505,  1519,  1520,
    1670,  1606,    52,  1605,   712,  1675,    58,    68,    83,    95,
      96,    97,   115,   355,   374,   529,   593,   610,   835,   837,
     417,  1745,   410,   213,   410,   527,  1780,  1779,   136,  1677,
    1690,  1706,  1708,   542,   515,   717,    37,   136,   543,   698,
    1106,  1107,  1528,  1680,   210,  1528,  1714,  1680,  1693,   718,
    1680,    37,   136,  1109,  1110,  1680,   717,  1528,  1694,  1692,
     553,   179,   298,   681,  1580,   710,   118,   180,   216,   458,
     536,   608,   631,   657,   674,  1580,    13,  1041,  1680,   299,
    1467,  1468,  1469,   213,   272,  1575,  1577,    73,   585,   210,
     585,   605,   560,    73,   585,    13,    45,    99,   104,   274,
     353,   430,   562,   602,  1563,  1564,  1565,   751,   241,   585,
     752,   585,  1467,  1580,  1577,   310,   171,    76,   460,   605,
     630,   210,  1314,   585,   669,  1214,  1215,  1214,   412,   689,
      93,   712,  1214,  1214,  1504,  1198,   155,  1656,  1657,  1661,
    1677,   712,   411,  1844,   601,  1845,   280,   506,  1843,   170,
     723,  1327,  1677,   781,   781,    11,   216,   458,   631,   769,
    1315,  1808,  1814,  1824,  1830,  1831,  1832,  1837,   216,   769,
    1807,  1814,  1824,  1832,  1837,  1809,  1031,  1031,  1031,  1031,
    1031,  1031,  1584,  1589,  1645,  1677,   213,   269,   420,  1291,
    1300,  1301,  1304,  1305,  1306,  1463,  1469,  1493,  1793,    13,
     151,   239,   568,   569,   570,   571,   572,   573,   591,  1308,
    1309,  1310,  1805,  1283,   711,   533,   136,  1028,  1029,  1038,
    1039,  1114,   121,  1320,   718,   783,     6,   924,   783,   416,
     120,   941,   941,   941,     4,  1670,  1203,  1681,  1682,  1683,
    1757,  1761,   532,   674,   782,  1814,  1233,  1234,  1504,   807,
     272,   712,   436,  1274,  1276,  1277,   791,   792,  1321,  1321,
     806,   168,   883,   741,   192,   467,   712,  1222,  1503,    61,
     192,   196,   210,   352,   467,  1249,  1250,  1251,    59,   490,
     924,   941,  1506,  1507,  1670,  1671,  1677,   712,  1552,   717,
    1557,  1321,  1321,    13,   151,  1368,  1436,  1368,  1368,  1368,
     680,  1380,  1321,  1321,  1375,  1375,  1321,  1321,  1321,  1321,
    1337,  1338,  1321,  1321,  1321,  1321,   151,  1368,  1436,   711,
     711,   132,   203,   237,   313,   402,   638,   711,  1476,  1480,
    1481,   711,  1321,  1321,  1321,  1321,  1321,  1665,   711,  1800,
     126,   127,   128,   129,   130,   242,   243,   244,   245,   356,
     358,   359,   360,   368,   465,   530,   531,   678,   694,   695,
    1431,  1432,  1321,  1321,  1375,   122,   125,   619,   622,  1433,
     151,  1364,  1321,  1321,  1321,  1321,  1321,  1321,  1431,  1321,
    1375,  1670,  1321,  1375,  1377,    10,   712,   717,   151,  1368,
    1321,  1321,   151,  1368,  1321,  1321,  1375,  1375,  1375,   210,
    1670,  1321,  1321,  1321,  1321,   711,  1321,  1375,  1324,   210,
    1321,   711,  1321,  1321,  1321,  1321,  1321,   711,   711,  1321,
    1368,  1368,  1321,  1321,   151,  1368,  1321,  1432,  1432,  1321,
      48,   291,   627,  1321,  1321,   711,  1666,  1667,  1668,  1677,
    1368,  1368,  1321,  1321,  1321,   711,   712,  1652,  1321,   717,
     718,  1363,  1680,  1321,  1321,  1321,  1323,   195,   401,   633,
     650,  1327,    13,    19,  1323,  1330,  1324,  1324,   710,  1340,
    1324,  1324,  1324,  1324,   298,  1324,  1324,   268,  1324,   268,
    1324,  1324,  1324,  1324,  1324,    35,   272,   298,   484,  1680,
    1340,   710,  1360,  1448,  1677,  1321,  1346,  1677,   717,   410,
     955,  1740,  1742,   397,   676,   956,   957,   172,  1683,  1756,
    1503,  1502,  1500,   734,   735,   310,   310,   310,   310,    52,
     310,   751,   310,   712,  1314,  1593,   125,   619,   622,   836,
     846,  1361,  1649,  1665,  1680,   712,   698,   605,   710,  1762,
    1683,  1762,  1762,  1762,  1757,   216,   458,   608,  1743,   180,
     186,   199,   459,   491,   499,   548,   600,  1747,  1677,   201,
     384,  1677,  1728,  1729,   250,   617,  1519,  1674,   246,   657,
    1321,  1617,  1269,   305,  1626,  1435,   398,   676,   712,  1719,
     807,  1677,   213,   269,   710,   868,  1321,   315,   716,   712,
     896,   315,   497,   683,  1503,   300,   303,   469,   978,   980,
      33,   626,  1612,   712,   626,   712,  1719,  1224,  1503,   905,
    1520,  1516,   436,  1394,  1395,   626,  1608,   751,  1604,   712,
     698,   210,   712,  1683,  1682,  1758,   216,   458,  1743,  1677,
     717,   717,   712,  1689,  1528,  1742,  1677,    74,  1112,  1321,
    1683,   409,   439,   614,  1715,   276,   474,  1709,  1710,  1711,
    1712,   224,   305,   539,  1705,  1528,  1677,    13,    37,   136,
     410,  1321,  1716,   628,  1695,  1706,   712,  1697,   585,   272,
    1578,  1314,  1314,   705,  1031,   782,   782,   782,  1670,  1670,
     782,  1683,  1670,   310,   372,   585,  1572,  1572,   313,   402,
     521,   638,  1470,  1471,  1647,  1673,  1678,  1684,  1580,  1677,
     782,  1580,  1682,  1575,  1580,  1674,   782,  1580,   273,   603,
     197,   210,  1566,   712,   179,   585,  1575,  1670,  1577,  1575,
    1575,  1321,  1580,  1580,  1580,  1209,   489,   575,  1216,  1217,
    1208,   557,  1213,  1719,   710,   714,  1381,  1382,  1383,  1384,
    1385,  1396,  1397,  1398,  1399,   903,   712,   710,  1659,  1645,
     442,  1846,   188,   759,  1740,  1757,   216,  1831,  1031,  1031,
    1315,   180,  1031,  1814,  1680,  1677,  1677,  1677,  1670,  1670,
     158,  1307,  1382,   159,   425,  1488,  1489,  1494,    50,   210,
     308,  1311,   458,  1483,  1493,  1793,  1311,   681,  1437,  1467,
    1304,  1305,   705,  1312,  1313,  1315,  1310,   711,   184,   267,
     648,  1785,  1787,  1791,  1792,  1302,  1029,    74,  1105,   147,
    1680,    84,    98,   286,   365,   394,   472,   574,   785,   787,
     480,   643,   942,   943,   260,   938,   939,   940,   947,   955,
     957,   710,  1674,    27,   343,   932,   933,   934,   947,   948,
     949,   955,   957,   925,   926,   932,  1719,   248,   500,   712,
    1765,   137,   271,  1031,  1170,   712,   441,  1235,   134,   805,
     808,   136,  1267,  1677,  1265,  1670,   973,  1276,   258,   284,
    1137,  1278,   711,   712,   891,    56,   680,   884,   886,   154,
     251,   253,   317,   318,   320,   321,   322,   323,   324,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   336,   337,
     338,   487,   488,   742,   743,   750,  1504,   210,  1252,   655,
    1250,    84,   388,   481,   644,   935,   936,   937,   947,   951,
     952,   953,   954,   955,   957,   659,   920,   712,  1553,  1394,
     717,  1557,  1556,   213,   705,  1677,   712,   711,  1368,   711,
    1369,   711,   711,   711,  1321,   163,   680,  1379,    20,   711,
     660,   711,   711,   711,   712,   711,   712,   711,   712,   712,
     712,   712,   660,   712,  1354,   711,   705,   711,   712,   712,
     711,   711,   712,   711,   711,   213,   711,   712,   711,   712,
    1356,   711,   712,   711,   712,   711,   712,   712,   712,   704,
     711,   712,   711,   712,   711,   711,   710,  1665,  1677,  1368,
     711,   711,   711,  1368,   711,   712,   711,   711,   711,   711,
    1670,   711,   711,   712,   711,   711,   712,   711,   272,  1670,
     711,   712,   712,   711,   712,   712,   711,   711,   711,   712,
     213,   712,  1368,   711,   711,   712,   712,   712,   711,   213,
    1321,   213,  1321,   213,  1321,   213,   711,   712,   711,   717,
     711,   711,   711,   712,    20,   296,   712,  1128,   711,  1375,
     533,   710,  1796,  1797,  1798,  1799,   715,  1677,  1705,   543,
     195,   401,   633,   650,   710,    18,  1321,  1800,   178,  1441,
    1324,  1321,  1321,  1324,   710,  1340,  1324,  1449,  1315,  1350,
    1351,  1352,   710,   717,  1677,  1670,   956,   712,  1528,  1529,
     712,    54,   505,  1204,  1503,  1503,   136,   252,   736,   737,
    1321,  1536,   751,  1598,  1503,  1599,   844,   847,   848,   843,
     403,   523,   845,  1677,  1763,  1764,   626,   684,  1739,   705,
    1670,  1677,  1755,  1755,  1755,   201,   217,   287,   290,   384,
     454,   698,   699,   700,  1730,  1732,  1437,   876,  1513,  1683,
    1270,  1271,  1272,  1273,  1670,   259,   316,   474,   689,  1723,
     132,   203,   237,   313,   402,   638,  1475,  1722,   805,   269,
    1677,   864,   865,   867,  1677,   807,   908,   910,   909,  1719,
      76,   710,   985,   986,   985,   986,   437,   988,   234,   284,
    1321,  1674,  1683,  1683,  1260,   626,  1503,   192,   467,   658,
    1227,  1228,  1229,  1321,   542,   664,   665,   710,   965,  1521,
    1524,  1652,   710,  1475,    13,  1607,   837,   836,  1742,   226,
     213,   712,  1755,  1755,  1755,  1677,  1677,  1706,   210,  1716,
     210,  1528,   136,  1111,  1113,  1680,  1528,   710,   710,   296,
     412,   689,   712,   712,   717,   717,   717,  1708,  1321,  1528,
    1709,  1696,  1698,  1699,  1674,   213,  1579,  1674,  1321,   711,
    1677,   183,   521,   408,   712,   717,   781,  1580,   466,  1467,
    1565,  1578,  1580,  1575,  1670,  1580,  1580,   712,   653,  1218,
    1413,  1677,   106,   261,   280,   294,   378,   514,   591,  1392,
    1393,   542,   712,  1670,   806,  1657,  1660,  1677,  1658,   712,
     210,  1847,  1027,  1028,   684,  1738,  1765,  1031,   782,  1677,
     782,  1031,  1031,   766,   636,   660,  1150,   410,   410,   755,
     754,   614,  1676,  1676,   718,  1490,  1491,  1492,  1677,  1680,
    1464,   654,   272,  1677,  1483,  1493,  1292,  1438,   228,  1442,
    1462,  1463,   712,  1321,  1663,  1677,    13,   151,  1795,  1793,
    1297,  1300,  1305,  1529,  1529,   376,  1674,   574,   574,   574,
     574,   574,   532,  1674,  1674,  1529,   712,   940,   118,   240,
     428,   439,   447,   558,   657,   767,   768,  1529,  1529,   712,
     934,   927,   928,   947,   948,   949,  1164,    50,   673,   684,
    1759,    67,   278,   389,   577,   595,   690,  1753,  1754,  1761,
     684,  1768,  1670,   410,   777,  1172,  1234,   210,   100,   189,
     815,   816,   817,   824,   850,   851,  1677,   168,   854,   716,
    1275,   710,  1321,   617,   887,   886,   698,   698,   698,   698,
     698,   698,   698,   698,   698,   698,   698,   698,   698,   698,
     698,   698,   698,   698,   698,   698,   698,   698,   698,   698,
     712,   655,  1529,  1529,  1529,  1529,   712,   937,   309,   193,
     929,   930,   931,   947,   948,   949,   950,   953,   954,   955,
     957,  1507,  1677,   660,  1550,  1677,  1382,   717,  1557,   268,
    1321,   711,  1321,   617,  1321,  1321,   168,    37,    63,   122,
     125,   133,   153,   270,   380,   550,   622,   652,  1370,  1372,
    1373,  1106,  1338,  1321,  1337,  1375,  1321,  1321,  1106,  1370,
    1375,   711,   268,   268,  1321,  1321,  1321,  1321,  1375,  1321,
    1321,  1321,  1321,  1321,  1321,  1321,  1321,  1324,   711,   711,
    1321,  1321,  1321,  1321,  1321,  1321,  1321,  1375,   268,  1321,
    1321,  1321,   711,  1321,  1321,  1321,  1321,   213,  1321,   213,
    1321,   213,  1321,  1321,  1677,  1321,    37,    63,  1123,  1124,
    1125,  1126,  1127,  1476,  1475,   711,  1405,  1406,  1407,   710,
    1289,  1290,  1311,  1793,  1404,  1785,  1794,  1802,  1680,  1321,
    1800,  1323,   711,   712,   711,  1340,  1431,  1431,    18,  1321,
    1800,  1441,  1450,  1677,  1321,   711,   712,  1374,  1375,  1677,
    1719,  1742,  1040,  1680,  1683,  1719,   712,   210,   684,  1594,
    1595,   698,   712,   711,   712,  1757,     7,   717,   717,   626,
     626,   626,  1731,  1467,   806,  1521,   712,  1274,  1276,  1676,
     689,   305,    90,   168,   269,   866,   711,   712,   805,   901,
     904,   902,   710,  1315,  1476,   597,   989,   979,    12,   981,
     626,  1670,   213,  1230,  1228,   168,  1522,   710,  1525,  1532,
    1525,   711,  1020,  1523,  1652,  1662,  1663,  1666,  1677,   533,
    1430,  1677,   698,   417,  1756,  1682,   213,   213,   213,   724,
    1683,  1716,   614,   614,   474,   496,   537,  1713,  1711,  1710,
    1528,  1716,  1697,   712,  1701,  1703,  1707,   132,   203,   313,
     402,   638,  1478,  1570,   176,   677,  1471,  1472,   183,  1471,
    1471,  1677,   402,  1579,  1437,  1575,  1217,   319,   750,  1219,
     533,  1400,  1408,  1409,  1413,  1414,  1801,  1381,   280,   280,
     424,  1416,   294,   514,  1392,  1416,  1381,  1542,  1543,  1666,
    1383,  1394,   168,   711,   712,    20,  1475,   357,     7,  1768,
    1677,  1833,   509,  1838,  1825,   782,   209,    49,   234,   526,
    1156,  1156,   410,  1670,  1670,    52,   117,   256,   348,   361,
     386,   387,   394,   395,   396,   580,   762,   763,   764,    28,
      30,    65,    84,    92,   121,   139,   172,   258,   265,   283,
     298,   342,   362,   429,   431,   439,   524,   536,   582,   583,
     584,   589,   606,   609,   629,   648,   710,   959,   963,  1033,
    1035,  1036,  1038,  1039,  1673,  1495,  1680,   712,   717,  1321,
    1465,  1664,  1719,   544,  1484,  1786,  1787,  1321,    50,   235,
    1439,  1467,  1313,  1316,  1316,   717,  1788,  1311,  1113,  1107,
     121,   121,   137,   271,   237,   313,   402,   638,   958,  1479,
    1480,  1673,   940,  1674,  1674,  1674,  1674,  1475,  1674,  1674,
     711,   712,   958,   958,   934,   712,   928,     6,    12,    14,
      16,    60,    66,    72,   102,   148,   149,   157,   166,   182,
     208,   255,   308,   366,   415,   420,   436,   477,   492,   493,
     494,   495,   634,   971,  1034,  1036,  1176,  1180,  1182,  1185,
    1191,  1192,  1193,  1195,  1196,  1459,   439,   614,  1680,   614,
     614,   614,    18,  1752,   340,   341,   345,   346,   347,  1766,
    1767,  1815,    88,   528,   493,  1173,    13,    76,  1236,    36,
      37,    42,    44,    46,    47,    63,   122,   125,   133,   153,
     173,   202,   204,   220,   221,   270,   302,   311,   312,   314,
     349,   350,   351,   369,   370,   371,   377,   380,   404,   406,
     445,   446,   476,   520,   542,   556,   615,   619,   622,   623,
     624,   625,   636,   666,   667,   695,  1082,  1083,  1084,  1085,
    1086,  1087,  1088,  1089,  1104,   232,    91,   114,   712,   716,
     710,   456,  1427,  1428,  1429,  1677,   806,  1321,   710,   710,
     710,  1475,  1475,  1674,  1674,  1478,  1674,  1475,  1674,  1674,
    1674,  1674,  1674,  1674,  1674,  1475,  1475,  1674,   113,   394,
     554,  1650,  1674,  1475,   743,  1674,  1476,   958,   958,   937,
     228,  1529,   712,   931,   717,  1382,  1437,  1557,  1437,  1321,
     711,  1321,   617,   710,  1096,  1097,  1097,  1097,   710,  1091,
    1092,  1096,   710,  1092,  1099,  1097,   270,  1097,   270,   711,
     711,   711,    20,  1331,   711,    20,   711,   711,   711,  1355,
    1321,  1321,   711,   711,   711,   712,   711,   420,  1366,   711,
     711,   712,   712,   711,   712,   711,   711,   272,  1347,  1348,
     711,   711,   711,   711,   711,   712,   711,   711,  1321,   711,
     210,   711,   711,   712,   711,   712,   712,   711,  1321,   711,
    1321,   711,  1321,   711,   711,   711,   710,  1118,  1118,    21,
     142,   512,   703,  1120,  1121,  1122,   712,   712,  1305,  1803,
    1804,  1805,  1289,   711,   533,  1311,  1795,  1402,  1797,  1798,
     717,  1160,   711,  1375,  1323,   711,   712,   711,   436,  1451,
    1316,  1352,   711,  1204,   737,  1596,   474,    58,    68,    83,
      95,    96,    97,   115,   355,   374,   507,   529,   593,   610,
     849,   848,  1764,   684,  1770,   417,   705,   705,  1757,  1757,
    1757,   710,   877,   410,  1537,  1272,  1670,  1276,   252,  1279,
    1622,  1321,   865,   168,   893,   906,  1679,   906,   906,   982,
     983,   984,  1677,   994,  1324,    50,   710,   996,   986,   698,
     710,  1683,   373,   497,  1526,  1527,  1666,  1533,   712,   710,
    1524,   711,   711,   712,   533,   717,  1021,  1022,   711,   712,
     836,   213,  1758,  1758,  1758,   711,   711,    85,   640,   474,
    1716,  1700,  1702,  1467,  1472,  1571,  1580,   698,   712,  1415,
     711,  1791,  1794,  1311,  1793,  1384,  1653,   715,   280,  1416,
    1416,  1396,   280,   410,   660,   712,  1541,  1528,  1435,   683,
    1677,   710,  1682,   710,   801,   133,   270,   476,   592,  1044,
     710,   803,   782,   770,   121,  1670,   757,   758,  1529,    50,
    1529,  1531,  1529,  1529,   348,   361,   684,  1529,  1530,  1033,
     764,  1529,  1529,  1529,  1529,  1529,   147,  1529,  1529,   147,
    1529,  1529,  1670,  1529,  1529,  1529,  1529,  1529,  1529,  1529,
    1529,  1529,  1529,   150,   353,  1677,  1529,  1529,  1529,    94,
     298,   717,  1020,  1045,  1046,  1047,  1048,  1049,  1057,  1060,
    1061,  1062,  1137,  1141,  1142,  1669,  1677,   969,   970,   971,
     712,  1035,  1528,  1105,  1108,  1491,  1677,   712,    21,   142,
    1466,   364,   710,  1443,  1664,  1440,   682,  1445,    20,  1317,
    1674,  1677,   705,  1677,   533,   710,  1282,   768,   928,    82,
      94,   436,  1049,  1057,  1197,  1529,  1197,   436,  1197,   436,
     436,   626,   282,   606,    94,   209,   436,   456,  1137,  1197,
     282,   436,   606,  1529,  1197,   436,    50,   973,   436,   438,
      20,   626,   698,  1206,   436,   436,   436,  1034,   712,   970,
    1180,   710,  1048,   614,    20,   660,  1760,  1753,  1475,  1475,
    1475,  1650,   402,   703,  1474,  1766,   710,  1816,  1327,  1776,
      24,   181,   771,   626,   148,   166,   773,    13,   710,  1237,
    1096,  1098,  1098,  1097,  1097,  1091,   451,   710,  1091,  1091,
      22,    37,    51,   646,  1105,  1115,  1116,    63,   666,  1084,
    1086,  1116,  1116,    63,   667,   667,   671,  1091,   636,   710,
     814,   710,  1097,  1097,  1097,  1116,   407,  1096,  1097,  1112,
    1091,   671,  1098,  1098,  1096,  1096,  1097,  1099,   136,   852,
     210,   210,   819,  1677,    13,  1181,  1189,  1190,  1677,   711,
     712,   888,   746,   747,  1475,   748,   749,  1475,   744,   745,
    1475,  1677,   958,   931,  1677,  1437,  1462,  1431,  1321,   132,
     313,   402,   638,  1371,   402,   402,   122,   125,   133,   153,
     204,   270,   377,   380,   476,   622,   652,  1084,  1085,  1332,
    1333,  1334,  1335,  1370,   711,  1431,  1431,  1321,    50,   535,
    1365,  1321,  1321,  1375,    46,   378,   711,   684,  1349,  1321,
    1431,  1321,  1321,  1321,  1321,   711,   711,   711,  1476,   711,
    1128,  1123,  1121,  1123,  1124,  1475,  1312,  1805,   711,  1791,
    1406,  1403,  1677,   711,  1375,    50,   420,  1452,  1317,   191,
     308,   226,  1765,  1765,  1765,  1535,  1536,   163,   164,   878,
     160,  1279,   292,   252,   498,  1628,   893,   711,   712,  1316,
     980,   436,   997,   998,  1476,   982,   712,  1528,  1534,  1535,
    1532,   967,   968,  1524,  1662,  1021,  1677,  1024,  1304,  1305,
    1793,  1308,   973,  1677,  1758,  1701,  1706,  1467,  1674,   750,
    1410,  1411,  1435,  1401,  1404,  1311,  1799,  1381,  1396,   280,
     280,  1381,  1396,  1386,  1387,  1543,  1437,  1536,  1425,  1426,
    1315,   802,   509,   560,   804,   784,     9,    33,   915,   410,
     688,   756,   710,   710,   313,   402,   703,  1477,  1477,  1477,
    1477,  1477,  1478,  1475,  1475,  1674,  1674,  1529,  1475,  1040,
    1529,   201,   287,   394,  1043,  1475,  1478,  1478,   136,  1475,
     136,  1475,  1482,  1674,    87,    89,   136,   161,   202,   430,
     482,  1042,  1482,   136,  1475,   136,  1475,   136,  1475,  1475,
    1482,  1037,  1159,  1669,  1670,  1677,   711,   711,   712,    66,
     209,   456,   649,  1059,  1136,   483,  1130,  1031,  1137,  1138,
    1138,  1063,   717,   964,  1628,  1035,   136,  1479,  1674,  1677,
    1107,  1496,  1664,  1719,  1315,  1485,  1486,  1487,   685,   686,
     712,  1444,  1466,  1321,  1360,  1446,  1447,  1674,  1677,   717,
    1302,   710,  1285,  1286,   250,  1031,   250,  1030,   136,  1677,
    1669,  1255,  1508,  1181,  1255,  1105,  1508,   284,  1509,   284,
    1508,  1508,  1190,   136,  1677,  1508,  1255,  1460,  1461,  1666,
     972,  1255,  1670,  1255,  1255,  1181,     6,   157,  1193,  1045,
       9,   201,  1205,  1674,   402,  1677,  1817,    20,   453,  1321,
    1321,   410,   777,   782,   410,    84,   778,  1238,   257,   550,
     652,   696,  1093,  1094,  1095,  1161,  1645,  1093,  1093,  1115,
    1106,    37,  1117,  1116,   671,  1093,   407,   811,   812,   813,
    1677,   852,  1161,  1116,   810,   850,  1093,   576,  1090,  1116,
    1117,  1116,  1117,  1093,  1093,  1321,   818,   827,   828,  1475,
     710,   820,   711,   712,  1428,   617,   711,   712,   711,   712,
     711,   712,   299,  1473,   711,   711,   711,   711,   711,  1116,
     712,  1097,  1091,    63,  1097,   270,  1336,   711,   711,   711,
     711,  1367,  1664,  1645,   711,   711,   712,   711,   364,   286,
     466,   711,   711,   711,   711,   711,   711,  1119,   711,   712,
    1305,  1404,   711,  1443,    50,   469,   521,  1453,  1454,    18,
    1600,   417,   684,  1769,  1769,  1769,   711,   712,   806,   874,
    1538,   269,   984,   711,   234,   284,   999,   711,   712,   711,
    1527,  1536,   711,  1787,  1791,  1023,  1024,  1305,  1025,  1311,
    1793,  1025,  1312,  1308,  1402,  1802,   410,  1389,  1396,  1396,
     410,  1391,  1321,   710,  1462,  1423,  1424,  1800,   793,   794,
     795,   796,  1677,  1834,  1674,   262,   272,   426,   797,   798,
     799,   800,   785,   786,  1776,  1839,   140,   264,   654,   916,
     528,  1680,   710,  1157,  1158,  1677,  1157,   313,   402,  1674,
    1674,   710,   711,   961,   962,   960,  1047,   710,   284,   284,
    1138,  1031,  1670,  1159,  1677,  1031,  1031,   538,  1064,  1082,
    1677,    20,  1026,    76,  1629,  1466,  1321,   711,   712,  1664,
      20,   712,   705,  1293,  1301,  1304,  1305,  1285,   711,   533,
    1327,  1255,  1327,   157,   542,  1181,  1669,  1178,  1476,  1107,
    1669,  1508,  1189,  1669,  1669,   684,  1062,  1181,   712,  1466,
     976,  1181,  1186,  1181,   711,  1677,   711,   712,  1818,  1819,
    1431,   552,  1674,   155,  1174,  1241,  1677,    13,   710,  1239,
    1095,   711,   712,   810,  1104,   711,   712,   711,   852,   717,
     698,   565,   567,   825,   826,   827,   830,  1327,  1677,   794,
     210,  1190,   806,   747,   749,   745,   521,  1471,  1551,   402,
    1116,   712,  1466,  1321,   364,   190,   711,  1475,  1462,  1465,
     711,    35,   110,   125,   619,   622,   639,  1455,  1456,  1649,
     148,   226,  1766,  1771,  1772,  1536,   284,   608,   710,   987,
     981,  1000,  1677,   998,  1025,   966,  1312,   711,  1388,   660,
    1390,   660,  1430,  1473,   208,   252,   659,  1418,  1419,  1422,
    1316,   711,   712,   520,   636,  1104,  1104,   711,   712,   796,
     145,   854,   410,   771,   416,  1157,   711,   712,  1466,   710,
     711,  1599,  1787,  1791,  1033,  1321,  1031,  1159,  1677,   710,
    1131,   660,  1149,   636,  1159,  1159,  1066,  1058,  1059,  1065,
     717,   965,   167,   177,   418,   613,  1630,  1631,   301,  1632,
    1316,  1487,  1466,  1448,  1447,  1311,  1793,  1311,   711,  1787,
    1791,  1302,   188,  1183,   188,   136,   136,  1062,  1249,  1112,
    1669,  1204,   608,  1205,  1177,  1461,  1187,  1189,  1179,  1677,
    1652,   772,   779,   780,   711,   712,  1240,  1116,  1645,   852,
     812,  1116,  1677,   402,   712,   854,   212,   711,   821,   822,
     183,   521,   508,  1554,   711,  1664,   711,   711,  1467,   639,
    1456,  1457,  1649,   520,   450,   185,  1458,   450,    64,   417,
    1772,   654,  1670,  1315,   990,   710,   136,   664,  1001,  1786,
    1412,  1435,  1321,   710,  1321,   710,   711,  1137,  1137,  1419,
     711,   796,   814,   407,  1835,   799,  1315,   776,   777,   710,
     711,  1719,  1158,   402,  1719,   711,   969,   711,  1159,  1149,
     636,  1132,  1677,   339,  1133,  1156,  1050,  1156,  1052,  1053,
      84,   456,   649,  1067,  1068,  1103,  1129,  1327,  1673,    28,
      74,   136,   219,   401,   410,   538,  1069,  1071,  1100,  1101,
    1102,  1103,  1677,    50,    50,   167,    50,  1631,   578,   613,
    1633,  1634,  1294,  1298,  1301,  1305,  1669,   437,   710,  1184,
     268,   703,   704,   710,  1079,  1080,  1081,  1339,  1648,  1205,
    1670,  1255,  1188,  1227,   533,   710,  1820,   579,   774,   854,
    1677,   456,  1242,  1243,  1677,   717,   826,   823,   183,  1312,
    1466,  1311,   207,    18,   207,   110,   228,   394,   618,  1544,
    1545,  1666,  1394,   994,   596,   995,   992,   993,  1677,   272,
     295,    84,    92,   121,   258,   342,   362,   388,   606,  1017,
    1018,  1019,  1574,  1305,  1430,  1430,   210,  1417,  1417,   809,
     850,   784,  1826,   773,   767,  1719,    84,   283,   684,  1144,
    1148,  1152,  1155,  1673,  1466,   711,  1145,  1147,  1152,  1154,
     964,  1056,  1054,  1156,   711,   712,   214,   435,   551,   410,
    1134,   710,  1051,   710,   710,  1674,   284,  1103,   284,   401,
    1528,  1111,  1081,    15,   654,   136,    20,  1102,  1645,  1645,
      50,  1645,    50,    50,  1634,  1786,  1311,  1059,  1476,   997,
     710,  1650,  1650,  1078,   973,   269,  1302,   710,  1287,  1288,
     684,  1821,  1321,   169,   775,   711,   712,  1677,  1280,  1457,
     520,   423,   712,  1528,  1623,  1316,  1476,   711,   712,  1003,
     616,  1529,  1529,   147,   147,  1529,  1529,  1529,  1529,   710,
    1012,  1019,   172,   711,   711,   228,   280,   420,  1421,  1420,
     717,  1836,  1670,   778,   711,   636,   660,  1143,  1146,  1151,
    1152,  1153,  1674,  1529,   433,  1194,  1195,  1196,  1155,  1528,
    1194,  1154,   710,   710,  1055,  1677,   140,   654,  1157,   710,
    1157,  1157,   136,  1479,  1674,  1677,   393,   665,  1079,  1645,
    1645,  1645,   711,  1321,   711,   710,  1295,  1304,  1305,  1793,
    1287,   711,   533,    55,    66,   305,  1321,  1243,  1545,  1536,
    1108,   711,   991,   993,   710,  1005,  1007,  1002,  1674,  1674,
    1529,  1529,  1479,  1479,  1476,  1680,   597,  1013,  1014,  1529,
      50,    50,   710,   710,  1677,   853,   210,   155,  1156,  1156,
    1194,  1153,  1475,  1673,  1196,  1195,   136,  1479,  1674,  1677,
    1157,  1157,   710,    54,   394,   505,   542,  1135,  1135,   711,
    1157,   711,   711,   710,  1318,  1070,   712,   997,  1793,  1311,
    1311,   711,  1785,  1789,  1791,  1302,    66,   417,    66,  1624,
     995,   710,  1006,  1007,  1008,   348,  1004,  1007,  1674,  1674,
    1015,   711,   712,  1040,  1427,  1429,   717,  1315,   779,   711,
     711,  1157,     5,   136,   401,   410,   410,  1143,   711,  1144,
    1145,   711,  1476,   441,   590,   675,  1072,  1321,   711,  1311,
    1296,  1795,  1299,  1304,  1305,  1793,   417,   417,   521,  1635,
     711,   712,   348,  1010,  1011,  1324,  1016,  1680,  1014,   711,
     711,  1677,  1827,  1130,  1143,   711,   654,   140,  1143,   711,
      84,   649,  1073,  1074,  1075,  1789,  1790,  1311,  1793,   248,
    1629,  1007,   712,  1009,  1017,   162,  1143,  1135,  1135,  1674,
     284,  1075,  1820,    50,  1632,  1011,   711,   520,  1645,   252,
    1636,  1828,   402,   710,  1638,   206,   449,  1822,  1823,   301,
     521,  1637,   711,   718,  1639,  1640,  1666,   542,  1641,  1680,
    1829,  1680,   711,   712,  1642,  1643,  1666,   854,  1640,   712,
    1528,  1643,  1315,  1536,  1316
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, thd)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (thd);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, thd)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    THD *thd;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, THD *thd)
#else
static void
yy_reduce_print (yyvsp, yyrule, thd)
    YYSTYPE *yyvsp;
    int yyrule;
    THD *thd;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, thd); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, thd)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    THD *thd;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (thd);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (THD *thd);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (THD *thd)
#else
int
yyparse (thd)
    THD *thd;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1985 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
              my_yyabort_error((ER_EMPTY_QUERY, MYF(0)));

            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1994 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 2019 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 2098 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_string_with_pos);
          }
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 2112 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "PREPARE..FROM"));
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_string_with_pos);
          }
    break;

  case 71:

/* Line 1455 of yacc.c  */
#line 2123 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->expr_allows_subselect= false; }
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 2125 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->prepared_stmt_code= (yyvsp[(2) - (2)].item);
            Lex->expr_allows_subselect= true;
          }
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 2133 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_string_with_pos);
          }
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 2139 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 2141 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "EXECUTE IMMEDIATE"));
            Lex->sql_command= SQLCOM_EXECUTE_IMMEDIATE;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 2148 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 2153 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->expr_allows_subselect= false; }
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 2155 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0),
                               "EXECUTE..USING"));
            Lex->expr_allows_subselect= true;
          }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 2170 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->prepared_stmt_params.push_back((yyvsp[(1) - (1)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 2180 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HELP"));
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 2185 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 2196 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 2200 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 2210 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 2214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 2218 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 2222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 2226 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 2230 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].ulong_num) > MASTER_DELAY_MAX)
            {
              my_error(ER_MASTER_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
                       (yyvsp[(3) - (3)].ulong_num), MASTER_DELAY_MAX);
            }
            else
              Lex->mi.sql_delay = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 2240 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 2245 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 2249 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 2253 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 2257 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 2261 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 2265 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 2270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 2274 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 2279 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
               my_yyabort_error((ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0),
                                 SLAVE_MAX_HEARTBEAT_PERIOD));

            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 2306 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 2310 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_do_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 2314 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 2329 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 2342 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_do_domain_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 2355 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_domain_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 2362 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 2366 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitly specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitly specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, (yyvsp[(3) - (3)].ulonglong_number));
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 2381 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 2385 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 2391 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 2397 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 2403 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 2412 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
          }
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 2421 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
              my_yyabort_error((ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME"));
#endif
         }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 2434 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->create_info.init();
            if (lex->set_command_with_check(SQLCOM_CREATE_TABLE, (yyvsp[(2) - (5)].num), (yyvsp[(1) - (5)].object_ddl_options) | (yyvsp[(4) - (5)].object_ddl_options)))
               MYSQL_YYABORT;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.default_table_charset= NULL;
            lex->name= null_lex_str;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 2454 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.use_default_db_type(thd);
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER_THD(thd, ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 2470 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           LEX *lex= thd->lex;
           lex->create_info.init();
           if (lex->set_command_with_check(SQLCOM_CREATE_SEQUENCE, (yyvsp[(2) - (5)].num), (yyvsp[(1) - (5)].object_ddl_options) | (yyvsp[(4) - (5)].object_ddl_options)))
              MYSQL_YYABORT;

           if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                  TL_OPTION_UPDATING,
                                                  TL_WRITE, MDL_EXCLUSIVE))
             MYSQL_YYABORT;

               /*
                 For CREATE TABLE, an non-existing table is not an error.
                 Instruct open_tables() to just take an MDL lock if the
                 table does not exist.
               */
             lex->alter_info.reset();
             lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
             lex->name= null_lex_str;
             lex->create_last_non_select_table= lex->last_table();
             if (!(lex->create_info.seq_create_info= new (thd->mem_root)
                                                     sequence_definition()))
               MYSQL_YYABORT;
         }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 2495 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            if (lex->create_info.seq_create_info->check_and_adjust())
            {
              my_error(ER_SEQUENCE_INVALID_DATA, MYF(0),
                       lex->select_lex.table_list.first->db,
                       lex->select_lex.table_list.first->table_name);
              MYSQL_YYABORT;
            }

            /* No fields specified, generate them */
            if (prepare_sequence_fields(thd, &lex->alter_info.create_list))
               MYSQL_YYABORT;

            /* CREATE SEQUENCE always creates a sequence */
	    Lex->create_info.used_fields|= HA_CREATE_USED_SEQUENCE;
            Lex->create_info.sequence= 1;

            lex->current_select= &lex->select_lex;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.use_default_db_type(thd);
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER_THD(thd, ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (8)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 2530 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_index_prepare((yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[(2) - (8)].key_type), (yyvsp[(5) - (8)].lex_string_with_pos), (yyvsp[(6) - (8)].key_alg), (yyvsp[(1) - (8)].object_ddl_options) | (yyvsp[(4) - (8)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 2537 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 2540 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_index_prepare((yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[(2) - (7)].key_type), (yyvsp[(5) - (7)].lex_string_with_pos), HA_KEY_ALG_UNDEF, (yyvsp[(1) - (7)].object_ddl_options) | (yyvsp[(4) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 2547 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 2550 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_index_prepare((yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[(2) - (7)].key_type), (yyvsp[(5) - (7)].lex_string_with_pos), HA_KEY_ALG_UNDEF, (yyvsp[(1) - (7)].object_ddl_options) | (yyvsp[(4) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 140:

/* Line 1455 of yacc.c  */
#line 2557 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 141:

/* Line 1455 of yacc.c  */
#line 2559 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 142:

/* Line 1455 of yacc.c  */
#line 2564 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->set_command_with_check(SQLCOM_CREATE_DB, 0, (yyvsp[(1) - (6)].object_ddl_options) | (yyvsp[(3) - (6)].object_ddl_options)))
               MYSQL_YYABORT;
            lex->name= (yyvsp[(4) - (6)].lex_string_with_pos);
          }
    break;

  case 143:

/* Line 1455 of yacc.c  */
#line 2571 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.set((yyvsp[(1) - (1)].object_ddl_options));
            Lex->create_view_mode= ((yyvsp[(1) - (1)].object_ddl_options).or_replace() ? VIEW_CREATE_OR_REPLACE :
                                                      VIEW_CREATE_NEW);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 144:

/* Line 1455 of yacc.c  */
#line 2578 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 2581 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_USER, (yyvsp[(1) - (7)].object_ddl_options) | (yyvsp[(3) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 2587 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_ROLE, (yyvsp[(1) - (6)].object_ddl_options) | (yyvsp[(3) - (6)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 2592 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 2596 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 2599 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->set_command(SQLCOM_CREATE_SERVER, (yyvsp[(1) - (1)].object_ddl_options)); }
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 2601 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 2605 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2616 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.seq_create_info->min_value= (yyvsp[(3) - (3)].longlong_number);
            Lex->create_info.seq_create_info->used_fields|= seq_field_used_min_value;
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2621 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->create_info.seq_create_info->used_fields & seq_field_used_min_value)
              MYSQL_YYABORT;
          }
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2626 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->create_info.seq_create_info->used_fields & seq_field_used_min_value)
              MYSQL_YYABORT;
          }
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2632 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.seq_create_info->max_value= (yyvsp[(3) - (3)].longlong_number);
            Lex->create_info.seq_create_info->used_fields|= seq_field_used_max_value;
          }
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2637 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->create_info.seq_create_info->used_fields & seq_field_used_max_value)
              MYSQL_YYABORT;
          }
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2642 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->create_info.seq_create_info->used_fields & seq_field_used_max_value)
              MYSQL_YYABORT;
          }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2647 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.seq_create_info->start= (yyvsp[(3) - (3)].longlong_number);
            Lex->create_info.seq_create_info->used_fields|= seq_field_used_start;
          }
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2652 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.seq_create_info->increment= (yyvsp[(3) - (3)].longlong_number);
          }
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 2656 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.seq_create_info->cache= (yyvsp[(3) - (3)].longlong_number);
          }
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2660 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.seq_create_info->cache= 0;
          }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2664 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.seq_create_info->cycle= 1;
          }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2668 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.seq_create_info->cycle= 0;
          }
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 2675 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_options_with_check((yyvsp[(2) - (3)].object_ddl_options)))
              MYSQL_YYABORT;
            Lex->server_options.reset((yyvsp[(3) - (3)].lex_str));
          }
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 2682 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->server_options.scheme= (yyvsp[(8) - (12)].lex_str); }
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2692 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.username.str == 0);
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2697 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.host.str == 0);
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str);
            my_casedn_str(system_charset_info, Lex->server_options.host.str);
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2703 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.db.str == 0);
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 2708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.owner.str == 0);
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 2713 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.password.str == 0);
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 2718 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.socket.str == 0);
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 2723 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2730 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            if (lex->add_create_options_with_check((yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2750 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 2761 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 2768 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 2774 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2782 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 2788 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 2797 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, 0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 2804 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2812 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2818 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion= (yyvsp[(3) - (4)].num)
                                    ? Event_parse_data::ON_COMPLETION_DROP
                                    : Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2833 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2835 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 2842 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
              my_yyabort_error((ER_EVENT_RECURSION_FORBIDDEN, MYF(0)));
              
            if (!lex->make_sp_head(thd, lex->event_parse_data->identifier,
                                        TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2874 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 2887 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2902 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.spname)= Lex->make_sp_name(thd, (yyvsp[(1) - (3)].lex_string_with_pos), (yyvsp[(3) - (3)].lex_string_with_pos))))
              MYSQL_YYABORT;
          }
    break;

  case 200:

/* Line 1455 of yacc.c  */
#line 2907 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.spname)= Lex->make_sp_name(thd, (yyvsp[(1) - (1)].lex_string_with_pos))))
              MYSQL_YYABORT;
          }
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 2914 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 2915 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 2919 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2920 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2926 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 2928 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 2930 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 2932 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2934 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2936 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2938 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2943 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2944 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= ! (yyvsp[(1) - (2)].num); }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2949 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2953 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2960 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2968 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2984 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root);
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2988 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 3006 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.spvar)= Lex->sp_param_init((yyvsp[(1) - (1)].lex_string_with_pos))))
              MYSQL_YYABORT;
          }
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 3014 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_param_fill_definition((yyval.spvar)= (yyvsp[(1) - (2)].spvar)))
              MYSQL_YYABORT;
          }
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 3019 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->fill_spvar_using_type_reference((yyval.spvar)= (yyvsp[(1) - (4)].spvar), (yyvsp[(4) - (4)].qualified_column_ident));
          }
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 3023 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spvar)= (yyvsp[(1) - (3)].spvar);
            (yyval.spvar)->field_def.field_name= (yyval.spvar)->name.str;
            Lex->sphead->fill_spvar_definition(thd, &(yyval.spvar)->field_def);
            Lex->sphead->row_fill_field_definitions(thd, (yyvsp[(3) - (3)].spvar_definition_list));
            (yyval.spvar)->field_def.set_row_field_definitions((yyvsp[(3) - (3)].spvar_definition_list));
          }
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 3044 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyvsp[(2) - (2)].spvar)->mode=(yyvsp[(1) - (2)].spvar_mode); }
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 3048 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 3049 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 3050 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_OUT; }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 3051 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_mode)= sp_variable::MODE_INOUT; }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 3056 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->m_param_begin= YYLIP->get_cpp_tok_start() + 1;
          }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 3061 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 3068 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->m_param_begin= YYLIP->get_cpp_tok_start() + 1;
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 3073 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 3079 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 3084 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 3090 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spblock).init();
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 3094 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (Lex->sp_declarations_join(&(yyval.spblock), (yyvsp[(1) - (3)].spblock), (yyvsp[(2) - (3)].spblock)))
              MYSQL_YYABORT;
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 3105 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spblock)= (yyvsp[(2) - (2)].spblock); }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 3111 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.qualified_column_ident)= new (thd->mem_root) Qualified_column_ident((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_string_with_pos))))
              MYSQL_YYABORT;
          }
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 3116 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.qualified_column_ident)= new (thd->mem_root) Qualified_column_ident(thd,
                                                                 (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].lex_string_with_pos), (yyvsp[(5) - (5)].lex_string_with_pos))))
              MYSQL_YYABORT;
          }
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 3125 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.qualified_column_ident)= new (thd->mem_root) Qualified_column_ident((yyvsp[(1) - (1)].lex_str))))
              MYSQL_YYABORT;
          }
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 3130 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.qualified_column_ident)= new (thd->mem_root) Qualified_column_ident((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_string_with_pos))))
              MYSQL_YYABORT;
          }
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 3135 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.qualified_column_ident)= new (thd->mem_root) Qualified_column_ident(thd,
                                                                 (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].lex_string_with_pos), (yyvsp[(5) - (5)].lex_string_with_pos))))
              MYSQL_YYABORT;
          }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 3144 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_string_char_length(&(yyvsp[(1) - (1)].lex_string_with_pos), 0, NAME_CHAR_LEN,
                                         system_charset_info, 1))
              my_yyabort_error((ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(1) - (1)].lex_string_with_pos).str));
            if (!((yyval.spvar_definition)= new (thd->mem_root) Spvar_definition()))
              MYSQL_YYABORT;
            Lex->init_last_field((yyval.spvar_definition), (yyvsp[(1) - (1)].lex_string_with_pos).str, thd->variables.collation_database);
          }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 3160 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.spvar_definition_list)= new (thd->mem_root) Row_definition_list()))
              MYSQL_YYABORT;
            (yyval.spvar_definition_list)->push_back((yyvsp[(1) - (1)].spvar_definition), thd->mem_root);
          }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 3166 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            uint unused;
            if ((yyvsp[(1) - (3)].spvar_definition_list)->find_row_field_by_name((yyvsp[(3) - (3)].spvar_definition)->field_name, &unused))
              my_yyabort_error((ER_DUP_FIELDNAME, MYF(0), (yyvsp[(3) - (3)].spvar_definition)->field_name));
            (yyval.spvar_definition_list)= (yyvsp[(1) - (3)].spvar_definition_list);
            (yyval.spvar_definition_list)->push_back((yyvsp[(3) - (3)].spvar_definition), thd->mem_root);
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 3176 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spvar_definition_list)= (yyvsp[(2) - (3)].spvar_definition_list); }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 3181 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_variable_declarations_init(thd, (yyvsp[(1) - (1)].num));
          }
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 3190 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_variable_declarations_finalize(thd, (yyvsp[(1) - (3)].num),
                                                       &Lex->last_field[0], (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
            (yyval.spblock).init_using_vars((yyvsp[(1) - (3)].num));
          }
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 3199 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_variable_declarations_with_ref_finalize(thd, (yyvsp[(1) - (5)].num), (yyvsp[(4) - (5)].qualified_column_ident), (yyvsp[(5) - (5)].item)))
              MYSQL_YYABORT;
            (yyval.spblock).init_using_vars((yyvsp[(1) - (5)].num));
          }
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 3207 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_variable_declarations_rowtype_finalize(thd, (yyvsp[(1) - (6)].num), (yyvsp[(5) - (6)].qualified_column_ident), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
            (yyval.spblock).init_using_vars((yyvsp[(1) - (6)].num));
          }
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 3215 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_variable_declarations_row_finalize(thd, (yyvsp[(1) - (4)].num), (yyvsp[(3) - (4)].spvar_definition_list), (yyvsp[(4) - (4)].item)))
              MYSQL_YYABORT;
            (yyval.spblock).init_using_vars((yyvsp[(1) - (4)].num));
          }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 3225 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->spcont->declare_condition(thd, (yyvsp[(1) - (4)].lex_str), (yyvsp[(4) - (4)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 3232 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_handler_declaration_init(thd, (yyvsp[(1) - (3)].num)))
              MYSQL_YYABORT;
          }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 3237 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_handler_declaration_finalize(thd, (yyvsp[(1) - (6)].num)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 3244 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_block_init(thd);
          }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3249 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_pcontext *param_ctx= Lex->spcont;
            if (Lex->sp_block_finalize(thd))
              MYSQL_YYABORT;
            if (Lex->sp_declare_cursor(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(6) - (6)].sp_cursor_stmt), param_ctx, true))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 3267 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(thd->lex->sphead);
            if (!((yyval.sp_cursor_stmt)= new (thd->mem_root) sp_lex_cursor(thd, thd->lex)))
              MYSQL_YYABORT;
          }
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 3276 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(thd->free_list == NULL);
            Lex->sphead->reset_lex(thd, (yyvsp[(1) - (1)].sp_cursor_stmt));
          }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3281 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex == (yyvsp[(1) - (3)].sp_cursor_stmt));
            if ((yyvsp[(1) - (3)].sp_cursor_stmt)->stmt_finalize(thd) ||
                (yyvsp[(1) - (3)].sp_cursor_stmt)->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.sp_cursor_stmt)= (yyvsp[(1) - (3)].sp_cursor_stmt);
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3291 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3292 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3298 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3300 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3305 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
              my_yyabort_error((ER_SP_DUP_HANDLER, MYF(0)));

            sp_instr_hpush_jump *i= (sp_instr_hpush_jump *)sp->last_instruction();
            i->add_condition((yyvsp[(1) - (1)].spcondvalue));
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3320 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
              my_yyabort_error((ER_WRONG_VALUE, MYF(0), "CONDITION", "0"));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3332 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
              my_yyabort_error((ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3350 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3351 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3356 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3360 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[(1) - (1)].lex_string_with_pos), false);
            if ((yyval.spcondvalue) == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_string_with_pos).str));
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3366 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3372 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3378 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3387 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_signal_statement(thd, (yyvsp[(2) - (3)].spcondvalue)))
              MYSQL_YYABORT;
          }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3395 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_condition_value *cond;

            /* SIGNAL foo cannot be used outside of stored programs */
            if (lex->spcont == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_string_with_pos).str));
            cond= lex->spcont->find_condition((yyvsp[(1) - (1)].lex_string_with_pos), false);
            if (cond == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_string_with_pos).str));
            if (cond->type != sp_condition_value::SQLSTATE)
              my_yyabort_error((ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0)));
            (yyval.spcondvalue)= cond;
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3410 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3415 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3417 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3422 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3430 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3439 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
              my_yyabort_error((ER_DUP_SIGNAL_SET, MYF(0),
                                Diag_condition_item_names[index].str));
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3455 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                thd->parse_error();
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3475 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3481 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 3483 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 3485 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 308:

/* Line 1455 of yacc.c  */
#line 3487 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 309:

/* Line 1455 of yacc.c  */
#line 3489 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 310:

/* Line 1455 of yacc.c  */
#line 3491 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 311:

/* Line 1455 of yacc.c  */
#line 3493 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 312:

/* Line 1455 of yacc.c  */
#line 3495 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 313:

/* Line 1455 of yacc.c  */
#line 3497 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 314:

/* Line 1455 of yacc.c  */
#line 3499 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 3501 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 3503 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3508 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_resignal_statement(thd, (yyvsp[(2) - (3)].spcondvalue)))
              MYSQL_YYABORT;
          }
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 3516 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 3531 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 3533 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 3538 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 3544 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 3553 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 3559 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 3568 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 3576 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= thd->lex->create_item_for_sp_var((yyvsp[(1) - (1)].lex_string_with_pos), NULL,
                                                 lip->get_tok_start(),
                                                 lip->get_ptr());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 3585 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 3594 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 3596 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 3605 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 3610 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 3616 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 3625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 3633 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 3635 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 3637 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 3639 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 3641 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 3643 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 3645 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 3647 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 3649 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 3651 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 3653 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 3655 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 3657 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 3661 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_string_with_pos); }
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 3666 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            spc->add_variable(thd, (yyvsp[(1) - (1)].lex_str));
            (yyval.num)= 1;
          }
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 3678 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (3)].lex_string_with_pos), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_string_with_pos).str));
            spc->add_variable(thd, (yyvsp[(3) - (3)].lex_string_with_pos));
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 3692 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 351:

/* Line 1455 of yacc.c  */
#line 3693 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 3732 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->sphead->new_cont_backpatch(NULL);
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 3738 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 3742 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 3750 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            /* "USE db" doesn't work in a procedure */
            if (lex->sql_command == SQLCOM_CHANGE_DB)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "USE"));
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new (thd->mem_root)
                sp_instr_stmt(sp->instructions(), lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_start() - sp->m_tmp_query;;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 3795 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 3797 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
              my_yyabort_error((ER_SP_BADRETURN, MYF(0)));

            sp_instr_freturn *i;

            i= new (thd->mem_root)
                 sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                  sp->m_return_field_def.sql_type, lex);
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;
            sp->m_flags|= sp_head::HAS_RETURN;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 3820 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_leave_statement(thd, (yyvsp[(2) - (2)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 3828 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_iterate_statement(thd, (yyvsp[(2) - (2)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 3835 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->sphead);
            if (!((yyval.assignment_lex)= new (thd->mem_root) sp_assignment_lex(thd, thd->lex)))
              MYSQL_YYABORT;
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 3844 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(thd->free_list == NULL);
            Lex->sphead->reset_lex(thd, (yyvsp[(1) - (1)].assignment_lex));
          }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 3849 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT((yyvsp[(1) - (3)].assignment_lex) == thd->lex);
            (yyval.assignment_lex)= (yyvsp[(1) - (3)].assignment_lex);
            (yyval.assignment_lex)->sp_lex_in_use= true;
            (yyval.assignment_lex)->set_item_and_free_list((yyvsp[(3) - (3)].item), thd->free_list);
            thd->free_list= NULL;
            if ((yyval.assignment_lex)->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 3862 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.sp_assignment_lex_list)= new (thd->mem_root) List<sp_assignment_lex>))
              MYSQL_YYABORT;
            (yyval.sp_assignment_lex_list)->push_back((yyvsp[(1) - (1)].assignment_lex), thd->mem_root);
          }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 3868 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.sp_assignment_lex_list)= (yyvsp[(1) - (3)].sp_assignment_lex_list);
            (yyval.sp_assignment_lex_list)->push_back((yyvsp[(3) - (3)].assignment_lex), thd->mem_root);
          }
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 3875 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.sp_assignment_lex_list)= NULL; }
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 3876 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.sp_assignment_lex_list)= (yyvsp[(2) - (3)].sp_assignment_lex_list); }
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 3881 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_open_cursor(thd, (yyvsp[(2) - (3)].lex_string_with_pos), (yyvsp[(3) - (3)].sp_assignment_lex_list)))
              MYSQL_YYABORT;
          }
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 3889 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_add_cfetch(thd, (yyvsp[(2) - (3)].lex_string_with_pos)))
              MYSQL_YYABORT;
          }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 3894 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_add_cfetch(thd, (yyvsp[(3) - (4)].lex_string_with_pos)))
              MYSQL_YYABORT;
          }
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 3899 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_add_cfetch(thd, (yyvsp[(4) - (5)].lex_string_with_pos)))
              MYSQL_YYABORT;
          }
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 3906 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 3911 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_string_with_pos), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_string_with_pos).str));
            i= new (thd->mem_root)
              sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 3929 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_string_with_pos), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_string_with_pos).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 3943 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(3) - (3)].lex_string_with_pos), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_string_with_pos).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 3959 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 3961 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, ctx, (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 3977 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(thd, i, ctx->push_label(thd, empty_lex_str, 0));
          }
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 3989 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 4004 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->maybe_start_compound_statement(thd))
              MYSQL_YYABORT;

            /**
              An example of the CASE statement in use is
            <pre>
            CREATE PROCEDURE proc_19194_simple(i int)
            BEGIN
              DECLARE str CHAR(10);

              CASE i
                WHEN 1 THEN SET str="1";
                WHEN 2 THEN SET str="2";
                WHEN 3 THEN SET str="3";
                ELSE SET str="unknown";
              END CASE;

              SELECT str;
            END
            </pre>
              The actions are used to generate the following code:
            <pre>
            SHOW PROCEDURE CODE proc_19194_simple;
            Pos     Instruction
            0       set str@1 NULL
            1       set_case_expr (12) 0 i@0
            2       jump_if_not 5(12) (case_expr@0 = 1)
            3       set str@1 _latin1'1'
            4       jump 12
            5       jump_if_not 8(12) (case_expr@0 = 2)
            6       set str@1 _latin1'2'
            7       jump 12
            8       jump_if_not 11(12) (case_expr@0 = 3)
            9       set str@1 _latin1'3'
            10      jump 12
            11      set str@1 _latin1'unknown'
            12      stmt 0 "SELECT str"
            </pre>
            */

            Lex->sphead->new_cont_backpatch(NULL);

            /*
              BACKPATCH: Creating target label for the jump to after END CASE
              (instruction 12 in the example)
            */
            Lex->spcont->push_label(thd, empty_lex_str, Lex->sphead->instructions());
          }
    break;

  case 399:

/* Line 1455 of yacc.c  */
#line 4057 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              BACKPATCH: Resolving forward jump from
              "case_stmt_action_then" to after END CASE
              (jump from instruction 4 to 12, 7 to 12 ... in the example)
            */
            Lex->sphead->backpatch(Lex->spcont->pop_label());

            if ((yyvsp[(3) - (6)].num))
              Lex->spcont->pop_case_expr_id();

            Lex->sphead->do_cont_backpatch();
          }
    break;

  case 400:

/* Line 1455 of yacc.c  */
#line 4073 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); /* For expr $2 */ }
    break;

  case 401:

/* Line 1455 of yacc.c  */
#line 4075 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->case_stmt_action_expr((yyvsp[(2) - (2)].item)))
              MYSQL_YYABORT;

            if (Lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 402:

/* Line 1455 of yacc.c  */
#line 4083 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 4085 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 4100 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 4104 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (lex->case_stmt_action_when((yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 4116 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->case_stmt_action_then())
              MYSQL_YYABORT;
          }
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 4124 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 4128 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->case_stmt_action_when((yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 4138 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->case_stmt_action_then())
              MYSQL_YYABORT;
          }
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 4146 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new (thd->mem_root)
              sp_instr_error(ip, lex->spcont, ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 4160 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 4161 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 4166 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->spcont->block_label_declare((yyvsp[(1) - (2)].lex_str)))
              MYSQL_YYABORT;
            (yyval.lex_str)= (yyvsp[(1) - (2)].lex_str);
          }
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 4176 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_block_init(thd, (yyvsp[(1) - (2)].lex_str));
          }
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 4183 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_block_finalize(thd, (yyvsp[(4) - (7)].spblock), (yyvsp[(7) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 4191 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_block_init(thd);
          }
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 4197 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_block_finalize(thd, (yyvsp[(3) - (5)].spblock)))
              MYSQL_YYABORT;
          }
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 4205 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->sp_block_init(thd);
          }
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 4213 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_block_finalize(thd, (yyvsp[(5) - (7)].spblock)))
              MYSQL_YYABORT;
          }
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 4221 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 4235 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sp_while_loop_expression(thd, (yyvsp[(1) - (2)].item)))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 4243 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_while_loop_finalize(thd))
              MYSQL_YYABORT;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 4251 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(thd); }
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 4253 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[(4) - (6)].item), lab->ip, lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 4271 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_pop_loop_label(thd, (yyvsp[(1) - (1)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 4279 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_push_loop_label(thd, (yyvsp[(1) - (3)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 4284 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 4286 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_push_loop_label(thd, (yyvsp[(1) - (3)].lex_str)))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 4292 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 4294 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_push_loop_label(thd, (yyvsp[(1) - (3)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 4299 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 4304 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_push_loop_empty_label(thd))
              MYSQL_YYABORT;
          }
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 4309 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_pop_loop_empty_label(thd);
          }
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 4313 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_push_loop_empty_label(thd))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 4319 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_pop_loop_empty_label(thd);
          }
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4323 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->sp_push_loop_empty_label(thd))
              MYSQL_YYABORT;
          }
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 4328 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sp_pop_loop_empty_label(thd);
          }
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4335 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4337 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4342 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4344 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 4346 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4380 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4382 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_string_with_pos).str;
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4392 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4398 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4421 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4515 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4523 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4531 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4539 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_string_with_pos).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_string_with_pos).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4565 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4570 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 4575 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 4583 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4591 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4599 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4607 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 4615 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 4623 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 4631 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP"));
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 4641 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT"));
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 4651 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE, MYF(0),
                                "STORAGE ENGINE"));
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 4667 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 4672 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT"));
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 4681 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulonglong_number);}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 4683 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                  my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
              }
              if (prefix_number >> 31)
                my_yyabort_error((ER_SIZE_OVERFLOW_ERROR, MYF(0)));
              number= prefix_number << text_shift_number;
            }
            else
              my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
            (yyval.ulonglong_number)= number;
          }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 4725 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 4726 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 4727 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 4735 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 4735 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 4737 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 4737 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 4739 "/home/buildbot/git/sql/sql_yacc.yy"
    {

            Lex->create_info.add(DDL_options_st::OPT_LIKE);
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= TABLE_TYPE_NORMAL;
          }
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 4752 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 4753 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 4757 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 4764 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Select->set_braces(0);
            Select->set_with_clause((yyvsp[(1) - (5)].with_clause));
          }
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 4771 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_with_clause((yyvsp[(1) - (5)].with_clause));
          }
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 4776 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 4776 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 4778 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 4778 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 4783 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 4819 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 4825 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 4843 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
              my_yyabort_error((ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                                "--skip-partition"));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), "partitioning",
                              "--with-plugin-partition"));
#endif
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 4858 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              thd->parse_error(ER_PARTITION_ENTRY_ERROR);
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 4870 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 4875 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->safe_to_cache_query= 1; }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 4881 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 4888 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 4889 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 4891 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 4893 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 4895 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 4897 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 4901 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 4903 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 4908 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 4910 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch ((yyvsp[(3) - (3)].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              thd->parse_error();
              MYSQL_YYABORT;
            }
          }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 4926 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 4927 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 4931 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 4932 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 4937 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_string_with_pos).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of partition fields"));
          }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 4953 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 4963 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr(thd, (yyvsp[(2) - (5)].simple_string) + 1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 4974 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr(thd, (yyvsp[(2) - (5)].simple_string) + 1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 4982 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 4984 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "partitions"));

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 4996 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 4998 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 4999 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 5002 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 5007 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 5011 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 5012 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 5017 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_string_with_pos).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of subpartition fields"));
          }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 5032 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Lex->safe_to_cache_query)
            {
              thd->parse_error(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 5043 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 5045 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "subpartitions"));
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 5057 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "RANGE"));
            if (part_info->part_type == LIST_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "LIST"));
          }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 5067 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                thd->parse_error(ER_PARTITION_WRONG_NO_PART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 5088 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 5089 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 5094 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new (thd->mem_root) partition_element();

            if (!p_elem ||
                 part_info->partitions.push_back(p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 5114 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 5119 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            if (check_ident_length(&(yyvsp[(1) - (1)].lex_string_with_pos)))
              MYSQL_YYABORT;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_string_with_pos).str;
          }
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 5130 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
                my_yyabort_error((ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                                  "RANGE", "LESS THAN"));
              if (part_info->part_type == LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                                  "LIST", "IN"));
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 5146 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "RANGE", "LESS THAN"));
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 5158 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 5160 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "IN"));
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 5172 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 5174 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "DEFAULT"));
            }
            else
              part_info->part_type= LIST_PARTITION;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
         }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 5198 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              thd->parse_error(ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 5219 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 5224 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                thd->parse_error(ER_PARTITION_COLUMN_LIST_ERROR);
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val(thd))
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 5253 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              thd->parse_error(ER_ROW_SINGLE_PARTITION_FIELD_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 5264 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 5265 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 5270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 5281 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 5283 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              thd->parse_error(ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 5306 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 5307 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 5312 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              thd->parse_error(ER_MAXVALUE_IN_VALUES_IN);
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 5325 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              thd->parse_error(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 5345 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              thd->parse_error(ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
          }
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 5359 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                thd->parse_error(ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                thd->parse_error(ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 5384 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 5385 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 5390 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new (thd->mem_root)
                                           partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              thd->parse_error(ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 5423 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 5428 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_ident_length(&(yyvsp[(1) - (1)].lex_str)))
              MYSQL_YYABORT;
            Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 5436 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 5437 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 5441 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 5442 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 5447 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 5449 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 5455 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5461 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5463 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5465 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5467 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5469 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5471 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5481 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_with_clause((yyvsp[(1) - (5)].with_clause));
          }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5487 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5502 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5519 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5529 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5530 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5534 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5535 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 5539 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5540 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5544 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5545 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5550 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5554 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
          }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5561 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).init();
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5565 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_NOT_EXISTS);
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5572 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).init();
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5576 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_OR_REPLACE);
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5599 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5604 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5614 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5619 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5624 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5629 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5634 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                thd->parse_error();
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5649 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5655 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                thd->parse_error();
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5670 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5675 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                thd->parse_error();
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5690 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5696 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5714 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5719 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5724 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5729 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5734 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5739 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5744 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5748 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5772 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5777 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5782 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5787 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_string_with_pos).str;}
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 5789 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 5791 "/home/buildbot/git/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5793 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5799 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5804 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5809 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 5817 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_string_with_pos).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_string_with_pos), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 5825 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5831 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5837 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_SEQUENCE;
            Lex->create_info.sequence= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5845 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->create_info.add_table_option_default_charset((yyvsp[(4) - (4)].charset)))
              MYSQL_YYABORT;
          }
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5853 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5870 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str),
                                            thd->lex->create_info.tmp_table());

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
                my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER_THD(thd, ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5891 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[(1) - (1)].lex_str), false)))
              (yyval.db_type)= plugin_hton(plugin);
            else
              my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5901 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5902 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5903 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 5904 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 5905 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 5906 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 5907 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 5911 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 5912 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 5913 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 5917 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 5918 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 5919 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 5920 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 5926 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 5937 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 5944 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.create_field)= (yyvsp[(1) - (1)].create_field); }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 5946 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.create_field)= (yyvsp[(1) - (2)].create_field); }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 5951 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].key_alg), (yyvsp[(2) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 5956 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 5958 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[(3) - (5)].lex_string_with_pos), (yyvsp[(5) - (5)].key_alg), (yyvsp[(2) - (5)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 5963 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 735:

/* Line 1455 of yacc.c  */
#line 5965 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(1) - (4)].key_type), (yyvsp[(4) - (4)].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 5970 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 5972 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(1) - (4)].key_type), (yyvsp[(4) - (4)].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 738:

/* Line 1455 of yacc.c  */
#line 5977 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 739:

/* Line 1455 of yacc.c  */
#line 5981 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(2) - (5)].key_type), (yyvsp[(4) - (5)].lex_str).str ? (yyvsp[(4) - (5)].lex_str) : (yyvsp[(1) - (5)].lex_str), (yyvsp[(5) - (5)].key_alg), (yyvsp[(3) - (5)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 5986 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 5989 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[(2) - (6)].key_type), (yyvsp[(4) - (6)].lex_string_with_pos).str ? (yyvsp[(4) - (6)].lex_string_with_pos) : (yyvsp[(1) - (6)].lex_str), (yyvsp[(6) - (6)].key_alg), (yyvsp[(3) - (6)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 742:

/* Line 1455 of yacc.c  */
#line 5994 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 5996 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->check_add_key((yyvsp[(4) - (5)].object_ddl_options)) ||
               !(Lex->last_key= (new (thd->mem_root)
                                 Key(Key::MULTIPLE, (yyvsp[(1) - (5)].lex_str).str ? (yyvsp[(1) - (5)].lex_str) : (yyvsp[(5) - (5)].lex_str),
                                     HA_KEY_ALG_UNDEF, true, (yyvsp[(4) - (5)].object_ddl_options)))))
              MYSQL_YYABORT;
            Lex->option_list= NULL;
          }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 6005 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= (new (thd->mem_root)
                       Foreign_key((yyvsp[(5) - (10)].lex_str).str ? (yyvsp[(5) - (10)].lex_str) : (yyvsp[(1) - (10)].lex_str),
                                   lex->last_key->columns,
                                   (yyvsp[(10) - (10)].table)->db,
                                   (yyvsp[(10) - (10)].table)->table,
                                   lex->ref_list,
                                   lex->fk_delete_opt,
                                   lex->fk_update_opt,
                                   lex->fk_match_option,
                                    (yyvsp[(4) - (10)].object_ddl_options)));
            if (key == NULL)
              MYSQL_YYABORT;
            /*
              handle_if_exists_options() expectes the two keys in this order:
              the Foreign_key, followed by its auto-generated Key.
            */
            lex->alter_info.key_list.push_back(key, thd->mem_root);
            lex->alter_info.key_list.push_back(Lex->last_key, thd->mem_root);
            lex->option_list= NULL;

            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 6034 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->add_constraint(&(yyvsp[(1) - (2)].lex_str), (yyvsp[(2) - (2)].virtual_column), FALSE);
         }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 6040 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.virtual_column)= (Virtual_column_info*) 0; }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 6041 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.virtual_column)= (yyvsp[(1) - (1)].virtual_column);}
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 6046 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Virtual_column_info *v=
              add_virtual_expression(thd, (yyvsp[(3) - (4)].item));
            if (!v)
            {
              MYSQL_YYABORT;
            }
            (yyval.virtual_column)= v;
          }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 6058 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 6059 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 6063 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 6068 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Create_field *f= new (thd->mem_root) Create_field();

            if (check_string_char_length(&(yyvsp[(1) - (1)].lex_str), 0, NAME_CHAR_LEN,
                                         system_charset_info, 1))
              my_yyabort_error((ER_TOO_LONG_IDENT, MYF(0), (yyvsp[(1) - (1)].lex_str).str));

            if (!f)
              MYSQL_YYABORT;

            lex->init_last_field(f, (yyvsp[(1) - (1)].lex_str).str, NULL);
            (yyval.create_field)= f;
          }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 6083 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            (yyval.create_field)= (yyvsp[(2) - (4)].create_field);

            (yyval.create_field)->check_constraint= (yyvsp[(4) - (4)].virtual_column);

            if ((yyval.create_field)->check(thd))
              MYSQL_YYABORT;

            lex->alter_info.create_list.push_back((yyval.create_field), thd->mem_root);

            (yyval.create_field)->create_if_not_exists= Lex->check_exists;
            if ((yyval.create_field)->flags & PRI_KEY_FLAG)
              lex->add_key_to_list(&(yyvsp[(1) - (4)].lex_str), Key::PRIMARY, lex->check_exists);
            else if ((yyval.create_field)->flags & UNIQUE_KEY_FLAG)
              lex->add_key_to_list(&(yyvsp[(1) - (4)].lex_str), Key::UNIQUE, lex->check_exists);
          }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 6103 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->set_attributes((yyvsp[(1) - (1)].Lex_field_type), Lex->charset); }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 6106 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->sql_type= MYSQL_TYPE_LONGLONG;
            Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG
                                     | UNSIGNED_FLAG | UNIQUE_KEY_FLAG;
          }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 6115 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 6116 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 6120 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 6128 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->last_field->vcol_info= (yyvsp[(3) - (3)].virtual_column);
           Lex->last_field->flags&= ~NOT_NULL_FLAG; // undo automatic NOT NULL for timestamps
         }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 6136 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 6137 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 6142 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 6146 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 6150 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 6154 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 6160 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 6161 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 6165 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 6171 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 6177 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 6182 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 6187 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            MYSQL_YYABORT_UNLESS(Lex->parse_vcol_expr);
          }
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 6196 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Virtual_column_info *v= add_virtual_expression(thd, (yyvsp[(3) - (3)].item));
            if (!v)
              MYSQL_YYABORT;
            Lex->last_field->vcol_info= v;
          }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 6206 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect(thd, (yyvsp[(1) - (1)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 6213 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (3)].item_list)->push_front((yyvsp[(1) - (3)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[(3) - (3)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 6223 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Virtual_column_info *v=
              add_virtual_expression(thd, (yyvsp[(2) - (3)].item));
            if (!v)
            {
              MYSQL_YYABORT;
            }
            (yyval.virtual_column)= v;
          }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 6239 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.virtual_column)= add_virtual_expression(thd, (yyvsp[(1) - (1)].item))))
              MYSQL_YYABORT;
          }
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 6246 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set((yyvsp[(1) - (3)].field_type), (yyvsp[(2) - (3)].simple_string)); }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 6247 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set((yyvsp[(1) - (3)].field_type), (yyvsp[(2) - (3)].Lex_length_and_dec)); }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 6249 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_FLOAT, (yyvsp[(2) - (3)].Lex_length_and_dec));
            if ((yyvsp[(2) - (3)].Lex_length_and_dec).length() && !(yyvsp[(2) - (3)].Lex_length_and_dec).dec())
            {
              int err;
              ulonglong tmp_length= my_strtoll10((yyvsp[(2) - (3)].Lex_length_and_dec).length(), NULL, &err);
              if (err || tmp_length > PRECISION_FOR_DOUBLE)
                my_yyabort_error((ER_WRONG_FIELD_SPEC, MYF(0),
                                  Lex->last_field->field_name));
              if (tmp_length > PRECISION_FOR_FLOAT)
                (yyval.Lex_field_type).set(MYSQL_TYPE_DOUBLE);
              else
                (yyval.Lex_field_type).set(MYSQL_TYPE_FLOAT);
            }
          }
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 6265 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_BIT, (yyvsp[(2) - (2)].simple_string));
          }
    break;

  case 792:

/* Line 1455 of yacc.c  */
#line 6269 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY, "1");
          }
    break;

  case 793:

/* Line 1455 of yacc.c  */
#line 6273 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY, "1");
          }
    break;

  case 794:

/* Line 1455 of yacc.c  */
#line 6277 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[(2) - (3)].simple_string));
          }
    break;

  case 795:

/* Line 1455 of yacc.c  */
#line 6281 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[(2) - (3)].simple_string));
            bincmp_collation(national_charset_info, (yyvsp[(3) - (3)].num));
          }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 6286 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_STRING, (yyvsp[(2) - (2)].simple_string));
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 6291 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[(2) - (3)].simple_string));
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 6295 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[(2) - (3)].simple_string));
            bincmp_collation(national_charset_info, (yyvsp[(3) - (3)].num));
          }
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 6300 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_VARCHAR, (yyvsp[(2) - (2)].simple_string));
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 6305 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(2) - (3)].simple_string))
            {
              errno= 0;
              ulong length= strtoul((yyvsp[(2) - (3)].simple_string), NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER_THD(thd, ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.Lex_field_type).set(MYSQL_TYPE_YEAR, (yyvsp[(2) - (3)].simple_string));
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 6323 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_DATE); }
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 6325 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                   MYSQL_TYPE_TIME2 : MYSQL_TYPE_TIME, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 6328 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                     MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME, (yyvsp[(2) - (2)].simple_string));
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                Unless --explicit-defaults-for-timestamp is given.
              */
              if (!opt_explicit_defaults_for_timestamp)
                Lex->last_field->flags|= NOT_NULL_FLAG;
              (yyval.Lex_field_type).set(opt_mysql56_temporal_format ? MYSQL_TYPE_TIMESTAMP2
                                                 : MYSQL_TYPE_TIMESTAMP, (yyvsp[(2) - (2)].simple_string));
            }
          }
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 6345 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(opt_mysql56_temporal_format ?
                   MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 6348 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_TINY_BLOB);
          }
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 6353 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_BLOB, (yyvsp[(2) - (2)].simple_string));
          }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 6358 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->last_field->geom_type= (yyvsp[(1) - (3)].geom_type);
            (yyval.Lex_field_type).set(MYSQL_TYPE_GEOMETRY, (yyvsp[(2) - (3)].Lex_length_and_dec));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 6369 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB);
          }
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 6374 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_LONG_BLOB);
          }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 6379 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB);
          }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 6384 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 6386 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_TINY_BLOB); }
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 6388 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_BLOB, (yyvsp[(2) - (3)].simple_string)); }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 6390 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 6392 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_LONG_BLOB); }
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 6394 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[(2) - (3)].Lex_length_and_dec));}
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 6396 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[(2) - (3)].Lex_length_and_dec));}
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 6398 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_NEWDECIMAL, (yyvsp[(2) - (3)].Lex_length_and_dec));}
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 6400 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_ENUM); }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 6402 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_SET); }
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 6404 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_field_type).set(MYSQL_TYPE_MEDIUM_BLOB); }
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 6408 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_GEOMETRY; }
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 6409 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 6410 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_POINT; }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 6411 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_MULTIPOINT; }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 6412 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_LINESTRING; }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 6413 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_MULTILINESTRING; }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 6414 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_POLYGON; }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 6415 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.geom_type)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 6419 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 6423 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 6424 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 6428 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 6429 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 6433 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 6434 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 6435 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 6436 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 6437 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 6441 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_LONG; }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 6442 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_TINY; }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 6443 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_SHORT; }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 6444 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_INT24; }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 6445 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_LONGLONG; }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 6450 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.field_type)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 6455 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 6457 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 6462 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->srid= 0; }
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 6465 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_field->srid=atoi((yyvsp[(3) - (3)].lex_str).str);
          }
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 6471 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec).set(0, 0);  }
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 6472 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec).set((yyvsp[(1) - (1)].simple_string), 0); }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 6473 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec)= (yyvsp[(1) - (1)].Lex_length_and_dec); }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6477 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec).set((yyvsp[(2) - (5)].lex_str).str, (yyvsp[(4) - (5)].lex_str).str); }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6481 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6482 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6486 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6487 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6491 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6492 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= UNSIGNED_FLAG;}
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6493 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6497 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6498 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6499 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6500 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6503 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (char*) 0; /* use default length */ }
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6504 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6507 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (char*) "1"; }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6508 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6511 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec).set(0, 0); }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6512 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_length_and_dec)= (yyvsp[(1) - (1)].Lex_length_and_dec); }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6516 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 6517 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 6521 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6526 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags&= ~ NOT_NULL_FLAG; }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6527 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->default_value= (yyvsp[(2) - (2)].virtual_column); }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6529 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->last_field->on_update= item;
          }
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6535 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 6537 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 6543 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname));
            Lex->last_field->charset= (yyvsp[(2) - (2)].charset);
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6553 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->flags|= NOT_NULL_FLAG; }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6555 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6561 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6567 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6572 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6574 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6582 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_string_with_pos).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_string_with_pos), false, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6590 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->last_field->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6596 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->last_field->option_list, &Lex->option_list_last);
          }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6605 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.Lex_field_type)= (yyvsp[(1) - (2)].Lex_field_type);

          if ((yyvsp[(2) - (2)].charset))
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          Lex->last_field->set_attributes((yyvsp[(1) - (2)].Lex_field_type), Lex->charset);
        }
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6618 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6619 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6624 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 6628 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6632 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 6633 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 6637 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 6638 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6643 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
          }
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6648 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6652 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 6653 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6658 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[(1) - (1)].lex_str).str)))
              MYSQL_YYABORT;
          }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6665 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6666 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6670 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6671 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6675 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6676 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6680 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6681 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_latin1; }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6683 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)= get_charset_by_csname("ucs2", MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2"));
          }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6690 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation(NULL, false); }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6691 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation(&my_charset_bin, false); }
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6692 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation((yyvsp[(1) - (2)].charset), (yyvsp[(2) - (2)].num)); }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6693 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation(NULL, true); }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6694 "/home/buildbot/git/sql/sql_yacc.yy"
    { bincmp_collation((yyvsp[(2) - (2)].charset), true); }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6698 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6699 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6704 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          if ((yyvsp[(2) - (2)].ulong_num) == 0)
          {
            thd->parse_error();
            MYSQL_YYABORT;
          }
        }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6712 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (4)].ulong_num); }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6716 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 924:

/* Line 1455 of yacc.c  */
#line 6717 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
    break;

  case 925:

/* Line 1455 of yacc.c  */
#line 6721 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6724 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6725 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 928:

/* Line 1455 of yacc.c  */
#line 6726 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (2)].ulong_num) | (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 929:

/* Line 1455 of yacc.c  */
#line 6727 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) ; }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6732 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num) < 1 ? 1 : ((yyvsp[(1) - (1)].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[(1) - (1)].ulong_num));
          (yyval.ulong_num)--;
        }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 6740 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.ulong_num)= (1 | (yyvsp[(2) - (2)].ulong_num)) << (yyvsp[(1) - (2)].ulong_num);
        }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 6746 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 6747 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)|= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 6752 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          uint start= (yyvsp[(1) - (3)].ulong_num);
          uint end= (yyvsp[(3) - (3)].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
    break;

  case 935:

/* Line 1455 of yacc.c  */
#line 6761 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 936:

/* Line 1455 of yacc.c  */
#line 6762 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(1) - (1)].ulong_num); }
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 6766 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= 0; }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 6767 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (yyvsp[(2) - (2)].ulong_num); }
    break;

  case 941:

/* Line 1455 of yacc.c  */
#line 6781 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 6788 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 6794 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[(3) - (3)].lex_string_with_pos), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key, thd->mem_root);
          }
    break;

  case 945:

/* Line 1455 of yacc.c  */
#line 6801 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[(1) - (1)].lex_string_with_pos), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key, thd->mem_root);
          }
    break;

  case 946:

/* Line 1455 of yacc.c  */
#line 6813 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 6815 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 948:

/* Line 1455 of yacc.c  */
#line 6817 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 6819 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 950:

/* Line 1455 of yacc.c  */
#line 6824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= FK_OPTION_UNDEF;
            lex->fk_delete_opt= FK_OPTION_UNDEF;
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 6830 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= FK_OPTION_UNDEF;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 6836 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 953:

/* Line 1455 of yacc.c  */
#line 6843 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 6850 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 955:

/* Line 1455 of yacc.c  */
#line 6858 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= FK_OPTION_RESTRICT; }
    break;

  case 956:

/* Line 1455 of yacc.c  */
#line 6859 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= FK_OPTION_CASCADE; }
    break;

  case 957:

/* Line 1455 of yacc.c  */
#line 6860 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= FK_OPTION_SET_NULL; }
    break;

  case 958:

/* Line 1455 of yacc.c  */
#line 6861 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= FK_OPTION_NO_ACTION; }
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 6862 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= FK_OPTION_SET_DEFAULT; }
    break;

  case 960:

/* Line 1455 of yacc.c  */
#line 6866 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 961:

/* Line 1455 of yacc.c  */
#line 6867 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 6871 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 963:

/* Line 1455 of yacc.c  */
#line 6872 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 964:

/* Line 1455 of yacc.c  */
#line 6876 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 6881 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 6882 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 6883 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 6887 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 6888 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 6892 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 6897 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 6908 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 6909 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->option_list= Lex->option_list; }
    break;

  case 975:

/* Line 1455 of yacc.c  */
#line 6913 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 6914 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->option_list= Lex->option_list; }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 6918 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 978:

/* Line 1455 of yacc.c  */
#line 6919 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->option_list= Lex->option_list; }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 6938 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 6939 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 6943 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 6944 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 6945 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 6949 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 6951 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 6956 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 6958 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_key->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 6960 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 6968 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (3)].lex_string_with_pos).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[(1) - (3)].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_string_with_pos), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 6976 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 6982 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 7000 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->last_key->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
              my_yyabort_error((ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
          }
    break;

  case 1003:

/* Line 1455 of yacc.c  */
#line 7009 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 7010 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 7011 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 7016 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_key->columns.push_back((yyvsp[(3) - (4)].key_part), thd->mem_root);
          }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 7020 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->last_key->columns.push_back((yyvsp[(1) - (2)].key_part), thd->mem_root);
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 7027 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[(1) - (1)].lex_string_with_pos), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1009:

/* Line 1455 of yacc.c  */
#line 7033 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
              my_yyabort_error((ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_string_with_pos).str));
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[(1) - (4)].lex_string_with_pos), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 7044 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 7045 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 7049 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 7050 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_string_with_pos); }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 7055 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->interval_list.push_back((yyvsp[(1) - (1)].string), thd->mem_root); }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 7057 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->last_field->interval_list.push_back((yyvsp[(3) - (3)].string), thd->mem_root); }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 7065 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->name= null_lex_str;
            Lex->table_type= TABLE_TYPE_UNKNOWN;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->select_lex.init_order();
            Lex->create_info.init();
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 7079 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (6)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 7089 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 7099 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 7104 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 7113 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "DATABASE"));
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_string_with_pos);
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 7121 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 1023:

/* Line 1455 of yacc.c  */
#line 7129 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 7136 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 7144 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 7151 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 7159 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 7166 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_algorithm= VIEW_ALGORITHM_INHERIT;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 7175 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 7177 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(5) - (5)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_begin= (yyvsp[(3) - (5)].simple_string);
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 7198 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(7) - (11)].num) || (yyvsp[(8) - (11)].num) || (yyvsp[(9) - (11)].num) || (yyvsp[(10) - (11)].num) || (yyvsp[(11) - (11)].num)))
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_end= (char*)YYLIP->get_cpp_ptr();
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 7212 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 7217 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 7222 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 7227 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7232 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.reset((yyvsp[(3) - (3)].lex_str));
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7236 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1038:

/* Line 1455 of yacc.c  */
#line 7240 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_info.set((yyvsp[(2) - (7)].object_ddl_options));
            Lex->sql_command= SQLCOM_ALTER_USER;
          }
    break;

  case 1039:

/* Line 1455 of yacc.c  */
#line 7247 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 1040:

/* Line 1455 of yacc.c  */
#line 7248 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1041:

/* Line 1455 of yacc.c  */
#line 7249 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1042:

/* Line 1455 of yacc.c  */
#line 7250 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1043:

/* Line 1455 of yacc.c  */
#line 7254 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 1044:

/* Line 1455 of yacc.c  */
#line 7256 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 1045:

/* Line 1455 of yacc.c  */
#line 7267 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 1046:

/* Line 1455 of yacc.c  */
#line 7268 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7272 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7273 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_string_with_pos); }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7279 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7287 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1057:

/* Line 1455 of yacc.c  */
#line 7309 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
            DBUG_ASSERT(!Lex->if_exists());
            Lex->create_info.add((yyvsp[(3) - (4)].object_ddl_options));
          }
    break;

  case 1058:

/* Line 1455 of yacc.c  */
#line 7316 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 1059:

/* Line 1455 of yacc.c  */
#line 7323 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1061:

/* Line 1455 of yacc.c  */
#line 7336 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
    break;

  case 1062:

/* Line 1455 of yacc.c  */
#line 7347 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1064:

/* Line 1455 of yacc.c  */
#line 7359 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7371 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7378 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7390 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7416 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7423 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7432 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            DBUG_ASSERT(!Lex->create_info.if_not_exists());
            lex->create_info.set((yyvsp[(3) - (4)].object_ddl_options));
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7446 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 7452 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7457 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 7464 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 7479 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7483 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7487 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7494 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7495 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7500 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_string_with_pos).str,
                                                          thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7521 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7529 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[(2) - (3)].create_field)->after= (yyvsp[(3) - (3)].const_simple_string);
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7534 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7539 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7544 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_CHECK_CONSTRAINT;
	  }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7548 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           Lex->alter_info.flags|= Alter_info::ALTER_ADD_CHECK_CONSTRAINT;
           Lex->add_constraint(&(yyvsp[(6) - (7)].lex_str), (yyvsp[(7) - (7)].virtual_column), TRUE);
         }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7554 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[(5) - (6)].create_field)->change= (yyvsp[(4) - (6)].lex_str).str;
            (yyvsp[(5) - (6)].create_field)->after= (yyvsp[(6) - (6)].const_simple_string);
          }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7562 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            (yyvsp[(4) - (5)].create_field)->change= (yyvsp[(4) - (5)].create_field)->field_name;
            (yyvsp[(4) - (5)].create_field)->after= (yyvsp[(5) - (5)].const_simple_string);
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7569 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7579 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::CHECK_CONSTRAINT,
                                        (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_CHECK_CONSTRAINT;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7590 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(5) - (5)].lex_str).str, (yyvsp[(4) - (5)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7600 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, primary_key_name,
                                        FALSE));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7611 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7621 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7627 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7633 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new (thd->mem_root) Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].virtual_column));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7642 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= (new (thd->mem_root)
                               Alter_column((yyvsp[(3) - (5)].lex_str).str, (Virtual_column_info*) 0));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7652 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str));
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7668 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname));
            if (Lex->create_info.add_alter_list_item_convert_to_charset((yyvsp[(5) - (5)].charset)))
              MYSQL_YYABORT;
            Lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7682 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7692 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7696 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7713 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 7718 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_string_with_pos)))
              my_yyabort_error((ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_string_with_pos).str));
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 7726 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7731 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_string_with_pos)))
              my_yyabort_error((ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_string_with_pos).str));
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 7738 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 7739 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 7743 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7744 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 7748 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 7762 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 7764 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 7771 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 7772 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 7773 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 7777 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.const_simple_string)= NULL; }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 7779 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.const_simple_string)= (yyvsp[(2) - (2)].lex_string_with_pos).str;
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 7784 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.const_simple_string)= first_keyword;
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 7791 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 7792 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 7793 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 7794 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 7799 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 7806 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 7808 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
            /* If you change this code don't forget to update STOP SLAVE too */
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 7814 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 7816 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 7823 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 7833 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 7849 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 7853 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 7860 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 7864 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 7871 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 7875 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 7879 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 7885 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 7887 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 7896 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 7897 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 7898 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 7902 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 7904 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
               my_yyabort_error((ER_BAD_SLAVE_UNTIL_COND, MYF(0)));
          }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 7913 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->mi.gtid_pos_str = (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 7925 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 7932 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 7936 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 7937 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 7938 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 7944 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->table_type= TABLE_TYPE_VIEW; }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 7950 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 7960 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 7970 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 7971 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 7975 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 7976 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 7980 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 7981 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 7982 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 7986 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 7987 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FROM_MYSQL; }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 7992 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8002 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8022 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8024 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8031 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 8033 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 8036 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8038 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->column_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 8049 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8051 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX* lex= thd->lex;
            lex->index_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8063 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8065 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[(1) - (1)].lex_string_with_pos), sizeof(LEX_STRING)), thd->mem_root);
          }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8070 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[(3) - (3)].lex_string_with_pos), sizeof(LEX_STRING)), thd->mem_root);
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8078 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8085 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[(1) - (1)].lex_string_with_pos), sizeof(LEX_STRING)),
                                       thd->mem_root);
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8092 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back((LEX_STRING*)
                                        thd->memdup(&str, sizeof(LEX_STRING)),
                                        thd->mem_root);
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8102 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8111 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->table_type= TABLE_TYPE_VIEW; }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8116 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8126 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "CHECK"));
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8138 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8139 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8143 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8144 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8148 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8149 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8150 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8151 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8152 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8153 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8157 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8158 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8163 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overridden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8173 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8183 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8184 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8185 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8190 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8194 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8196 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8203 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8209 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8223 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(thd, (yyvsp[(1) - (4)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL, TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8236 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8240 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8259 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8269 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8278 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_string_with_pos); }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8279 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8284 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8290 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8305 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8315 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8325 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8332 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8341 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8347 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8348 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8358 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
            lex->current_select->set_with_clause((yyvsp[(1) - (2)].with_clause));
          }
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8380 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8389 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8396 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8405 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 8412 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 8421 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->current_select->braces);
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 8429 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(true);
          }
    break;

  case 1287:

/* Line 1455 of yacc.c  */
#line 8437 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->current_select->braces);
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 1288:

/* Line 1455 of yacc.c  */
#line 8441 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex); }
    break;

  case 1289:

/* Line 1455 of yacc.c  */
#line 8447 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 8454 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
    break;

  case 1292:

/* Line 1455 of yacc.c  */
#line 8464 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
    break;

  case 1294:

/* Line 1455 of yacc.c  */
#line 8471 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Parentheses carry no meaning here */
            Lex->current_select->set_braces(false);
          }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 8480 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(false);
          }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 8484 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(false);
          }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 8489 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(false);
          }
    break;

  case 1299:

/* Line 1455 of yacc.c  */
#line 8493 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->current_select->set_braces(false);
          }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 8533 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 8541 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 8569 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 8584 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT"));
          }
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 8598 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE"));

            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 8615 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE"));

            Lex->safe_to_cache_query=1;
            Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
          }
    break;

  case 1331:

/* Line 1455 of yacc.c  */
#line 8636 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_WRITE;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1332:

/* Line 1455 of yacc.c  */
#line 8643 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_READ_WITH_SHARED_LOCKS;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1335:

/* Line 1455 of yacc.c  */
#line 8656 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root)
                          Item_field(thd, &thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1336:

/* Line 1455 of yacc.c  */
#line 8670 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 8675 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
                my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str));
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name(thd, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name(thd, (yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 8696 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_tok_start();
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 8702 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1340:

/* Line 1455 of yacc.c  */
#line 8708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end_rtrim();
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 8714 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 8715 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_string_with_pos); }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 8716 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 8717 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_string_with_pos); }
    break;

  case 1345:

/* Line 1455 of yacc.c  */
#line 8718 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1346:

/* Line 1455 of yacc.c  */
#line 8722 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 8723 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 8724 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 8728 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 8729 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 8730 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1352:

/* Line 1455 of yacc.c  */
#line 8734 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1353:

/* Line 1455 of yacc.c  */
#line 8735 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1354:

/* Line 1455 of yacc.c  */
#line 8741 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item), thd->mem_root);
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item), thd->mem_root);
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item)= new (thd->mem_root) Item_cond_or(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 8792 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item)= new (thd->mem_root) Item_func_xor(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1356:

/* Line 1455 of yacc.c  */
#line 8799 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item), thd->mem_root);
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item), thd->mem_root);
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item)= new (thd->mem_root) Item_cond_and(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1357:

/* Line 1455 of yacc.c  */
#line 8842 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 8848 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1359:

/* Line 1455 of yacc.c  */
#line 8854 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 8860 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 8866 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 8872 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 8878 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 8888 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 8894 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 8900 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 8906 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 8912 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator(thd, (yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 8922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 8928 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 8937 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 8943 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item), thd->mem_root);
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_in(thd, *(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 8951 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 8957 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item), thd->mem_root);
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item), thd->mem_root);
            Item_func_in *item= new (thd->mem_root) Item_func_in(thd, *(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 8966 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_between(thd, (yyvsp[(1) - (5)].item), (yyvsp[(3) - (5)].item), (yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 8972 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between(thd, (yyvsp[(1) - (6)].item), (yyvsp[(4) - (6)].item), (yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 8980 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item1= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[(1) - (4)].item));
            Item *item4= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(thd, item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 8990 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_like(thd, (yyvsp[(1) - (4)].item), (yyvsp[(3) - (4)].item), (yyvsp[(4) - (4)].item),
                                                   Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 8997 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_like(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].item), (yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= item->neg_transformer(thd);
          }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9005 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9011 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_func_regex(thd, (yyvsp[(1) - (4)].item), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9024 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9030 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9036 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9042 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9048 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9054 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9060 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].item), (yyvsp[(5) - (5)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9066 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].item), (yyvsp[(5) - (5)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9072 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9078 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_div(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9084 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9090 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9096 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9102 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1408:

/* Line 1455 of yacc.c  */
#line 9131 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9132 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9133 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9134 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1412:

/* Line 1455 of yacc.c  */
#line 9135 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9136 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9140 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9141 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9146 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_NULL); /* automatic type */
            Lex->charset= NULL;
	  }
    break;

  case 1417:

/* Line 1455 of yacc.c  */
#line 9150 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type)= (yyvsp[(2) - (2)].Lex_dyncol_type); }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9154 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type)= (yyvsp[(1) - (1)].Lex_dyncol_type); Lex->charset= NULL; }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9155 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type)= (yyvsp[(1) - (1)].Lex_dyncol_type); Lex->charset= NULL; }
    break;

  case 1420:

/* Line 1455 of yacc.c  */
#line 9156 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type)= (yyvsp[(1) - (1)].Lex_dyncol_type); }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9160 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_INT); }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9161 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_UINT);  }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9162 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE);  }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 9163 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE); }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 9164 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DOUBLE); }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 9165 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DECIMAL, (yyvsp[(2) - (2)].Lex_length_and_dec)); }
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 9169 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DATE); }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 9170 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_TIME, 0, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 9171 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_dyncol_type).set(DYN_COL_DATETIME, 0, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 9176 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= thd->variables.collation_connection; }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 9178 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_STRING);
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 9182 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.Lex_dyncol_type).set(DYN_COL_STRING);
            Lex->charset= national_charset_info;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 9190 "/home/buildbot/git/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].Lex_dyncol_type).dyncol_type();
     (yyval.dyncol_def)->cs= lex->charset;
     if ((yyvsp[(4) - (4)].Lex_dyncol_type).length())
       (yyval.dyncol_def)->len= strtoul((yyvsp[(4) - (4)].Lex_dyncol_type).length(), NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if ((yyvsp[(4) - (4)].Lex_dyncol_type).dec())
       (yyval.dyncol_def)->frac= strtoul((yyvsp[(4) - (4)].Lex_dyncol_type).dec(), NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 9212 "/home/buildbot/git/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def), thd->mem_root);
       }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 9219 "/home/buildbot/git/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def), thd->mem_root);
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1442:

/* Line 1455 of yacc.c  */
#line 9260 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item_param); }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 9265 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 9272 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect(thd, (yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 9278 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM)
            {
              Item_string *item= (Item_string *) (yyvsp[(3) - (4)].item);
              enum_field_types type= item->odbc_temporal_literal_type(&(yyvsp[(2) - (4)].lex_string_with_pos));
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd, item->val_str(NULL),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 9302 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item), thd->mem_root);
            Item_func_match *i1= new (thd->mem_root) Item_func_match(thd, *(yyvsp[(2) - (7)].item_list),
                                                                     (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(thd, i1);
            (yyval.item)= i1;
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 9312 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].Lex_cast_type).type(), (yyvsp[(5) - (6)].Lex_cast_type).length(), (yyvsp[(5) - (6)].Lex_cast_type).dec(),
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 9320 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(thd, *(yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 9326 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].Lex_cast_type).type(), (yyvsp[(5) - (6)].Lex_cast_type).length(), (yyvsp[(5) - (6)].Lex_cast_type).dec(),
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 9333 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 9339 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_splocal *il= (yyvsp[(3) - (4)].item)->get_item_splocal();
            if (il)
              my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str));
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 9349 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(thd, Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 9356 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table;
            if (!(table= Select->add_table_to_list(thd, (yyvsp[(4) - (4)].table), 0,
                                           TL_OPTION_SEQUENCE,
                                           TL_WRITE_ALLOW_WRITE,
                                           MDL_SHARED_WRITE)))
              MYSQL_YYABORT;
            if (!((yyval.item)= new (thd->mem_root) Item_func_nextval(thd, table)))
              MYSQL_YYABORT;
          }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 9367 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table;
            if (!(table= Select->add_table_to_list(thd, (yyvsp[(3) - (4)].table), 0,
                                                TL_OPTION_SEQUENCE,
                                                TL_WRITE_ALLOW_WRITE,
                                                MDL_SHARED_WRITE)))
              MYSQL_YYABORT;
            if (!((yyval.item)= new (thd->mem_root) Item_func_nextval(thd, table)))
              MYSQL_YYABORT;
          }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 9378 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table;
            if (!(table= Select->add_table_to_list(thd, (yyvsp[(4) - (4)].table), 0,
                                                TL_OPTION_SEQUENCE,
                                                TL_READ,
                                                MDL_SHARED_READ)))
              MYSQL_YYABORT;
            if (!((yyval.item)= new (thd->mem_root) Item_func_lastval(thd, table)))
              MYSQL_YYABORT;
          }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 9389 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table;
            if (!(table= Select->add_table_to_list(thd, (yyvsp[(3) - (4)].table), 0,
                                                TL_OPTION_SEQUENCE,
                                                TL_READ,
                                                MDL_SHARED_WRITE)))
              MYSQL_YYABORT;
            if (!((yyval.item)= new (thd->mem_root) Item_func_lastval(thd, table)))
              MYSQL_YYABORT;
          }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 9404 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *i1= new (thd->mem_root) Item_string(thd, (yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation(thd, (yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 9414 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 9416 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 9423 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat(thd, (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 9429 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 9433 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item)->neg(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 9439 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1468:

/* Line 1455 of yacc.c  */
#line 9445 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(thd, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 9452 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(5) - (5)].item), (yyvsp[(2) - (5)].item), (yyvsp[(3) - (5)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 9467 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 9473 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 9479 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 9488 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 9497 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 9503 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 9509 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1477:

/* Line 1455 of yacc.c  */
#line 9515 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert(thd, (yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].item), (yyvsp[(7) - (10)].item), (yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1478:

/* Line 1455 of yacc.c  */
#line 9521 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item), thd->mem_root);
            list->push_front((yyvsp[(3) - (6)].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1479:

/* Line 1455 of yacc.c  */
#line 9535 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item), thd->mem_root);
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1480:

/* Line 1455 of yacc.c  */
#line 9546 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_left(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 9552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 9558 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_month(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 9564 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_right(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 9570 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_second(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 9576 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast(thd, (yyvsp[(3) - (4)].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 9583 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast(thd, (yyvsp[(3) - (4)].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 9590 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 9596 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1489:

/* Line 1455 of yacc.c  */
#line 9602 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[(6) - (7)].item), (yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 9608 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[(6) - (7)].item), (yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 9614 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(6) - (7)].item), (yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 9620 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 9626 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1494:

/* Line 1455 of yacc.c  */
#line 9632 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 9638 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[(5) - (6)].item), (yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1496:

/* Line 1455 of yacc.c  */
#line 9644 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_user(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 9652 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_year(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 9673 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 9680 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1500:

/* Line 1455 of yacc.c  */
#line 9686 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1501:

/* Line 1455 of yacc.c  */
#line 9693 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 9701 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1503:

/* Line 1455 of yacc.c  */
#line 9708 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1504:

/* Line 1455 of yacc.c  */
#line 9714 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_decode(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 9720 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_extract(thd, (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 9726 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format(thd, (yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 9732 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 9739 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_locate(thd, (yyvsp[(5) - (6)].item), (yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 9745 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 9752 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 9758 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 9764 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 9770 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 9776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 9782 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local(thd, (yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 9800 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[(7) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(3) - (8)].interval_time_st), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 9806 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff(thd, (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item), (yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 9812 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 9819 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 9826 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc(thd, (yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 9834 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 9841 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 9848 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 9855 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 9862 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].Lex_cast_type).type(),
                                        (yyvsp[(7) - (8)].Lex_cast_type).length(), (yyvsp[(7) - (8)].Lex_cast_type).dec(),
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 9879 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 9885 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1528:

/* Line 1455 of yacc.c  */
#line 9891 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(thd, *(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1529:

/* Line 1455 of yacc.c  */
#line 9897 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1530:

/* Line 1455 of yacc.c  */
#line 9903 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_database(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1531:

/* Line 1455 of yacc.c  */
#line 9910 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_if(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1532:

/* Line 1455 of yacc.c  */
#line 9916 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1533:

/* Line 1455 of yacc.c  */
#line 9922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 9931 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_back((yyvsp[(3) - (4)].item), thd->mem_root);

            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *list);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 9942 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].item_list)->push_back((yyvsp[(5) - (6)].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *(yyvsp[(3) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 9949 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 9955 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 9961 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (thd->mem_root)
              Item_func_password(thd, (yyvsp[(3) - (4)].item), Item_func_password::OLD);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 9968 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item* i1;
            i1= new (thd->mem_root) Item_func_password(thd, (yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 9976 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_quarter(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 9982 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 9988 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace(thd, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 9994 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 10000 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 10008 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_round(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 10014 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 10020 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 10026 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[(3) - (5)].item), 0, 0, (yyvsp[(4) - (5)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 10032 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, (yyvsp[(3) - (8)].item), 0, (yyvsp[(6) - (8)].ulong_num),
                                        (yyvsp[(7) - (8)].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 10040 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_char_typecast(thd, (yyvsp[(3) - (7)].item), (yyvsp[(6) - (7)].ulong_num),
                                                               &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, item, 0, (yyvsp[(6) - (7)].ulong_num),
                                        MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 10052 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[(3) - (10)].item), (yyvsp[(5) - (10)].ulong_num), (yyvsp[(7) - (10)].ulong_num),
                                                            (yyvsp[(9) - (10)].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 10059 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 10074 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_precise_rel(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                 Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 10080 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 10087 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 10094 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 10101 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 10108 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 10115 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item)));
          }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 10119 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 10138 "/home/buildbot/git/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                thd->parse_error();
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1562:

/* Line 1455 of yacc.c  */
#line 10157 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 10210 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_string_with_pos).str || check_db_name(&(yyvsp[(1) - (6)].lex_string_with_pos)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_string_with_pos).str));
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_string_with_pos)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_string_with_pos), (yyvsp[(3) - (6)].lex_string_with_pos), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 10248 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 10250 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 10254 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 10255 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 10259 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 10260 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 10264 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 10265 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 10270 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10277 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10285 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name(thd, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[(2) - (4)].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[(2) - (4)].item)->set_name(thd, (yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10312 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10318 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 10324 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10330 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10336 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10342 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *item= new (thd->mem_root) Item_int(thd, (int32) 0L, 1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 10351 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10357 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10359 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10361 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, *(yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10367 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 10378 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10384 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10390 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 10396 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10402 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10408 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10414 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10420 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10426 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 10432 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 10436 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(thd, Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 10451 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_window_func(thd, (Item_sum *) (yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].lex_str_ptr));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            if (Select->add_window_func((Item_window_func *) (yyval.item)))
              MYSQL_YYABORT;
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10460 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (Select->add_window_spec(thd, lex->win_ref,
                                        Select->group_list,
                                        Select->order_list,
                                        lex->win_frame))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_window_func(thd, (Item_sum *) (yyvsp[(1) - (3)].item),
                                                      thd->lex->win_spec); 
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            if (Select->add_window_func((Item_window_func *) (yyval.item)))
              MYSQL_YYABORT;
          }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 10480 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            ((Item_sum *) (yyvsp[(1) - (1)].item))->mark_as_window_func_sum_expr();
          }
    break;

  case 1601:

/* Line 1455 of yacc.c  */
#line 10487 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_row_number(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1602:

/* Line 1455 of yacc.c  */
#line 10494 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1603:

/* Line 1455 of yacc.c  */
#line 10501 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_dense_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1604:

/* Line 1455 of yacc.c  */
#line 10508 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_percent_rank(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10515 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_cume_dist(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10522 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_ntile(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 10529 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_first_value(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10536 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_last_value(thd, (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1609:

/* Line 1455 of yacc.c  */
#line 10543 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_nth_value(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1610:

/* Line 1455 of yacc.c  */
#line 10550 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* No second argument defaults to 1. */
            Item* item_offset= new (thd->mem_root) Item_uint(thd, 1);
            if (item_offset == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_lead(thd, (yyvsp[(3) - (4)].item), item_offset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 10561 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_lead(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 10568 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* No second argument defaults to 1. */
            Item* item_offset= new (thd->mem_root) Item_uint(thd, 1);
            if (item_offset == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_lag(thd, (yyvsp[(3) - (4)].item), item_offset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 10579 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_sum_lag(thd, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 10588 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING *) thd->memdup(&(yyvsp[(1) - (1)].lex_string_with_pos), sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1615:

/* Line 1455 of yacc.c  */
#line 10597 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
          }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 10602 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 10609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item, thd->mem_root);
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 10619 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 10627 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 10642 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 10643 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1622:

/* Line 1455 of yacc.c  */
#line 10648 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1623:

/* Line 1455 of yacc.c  */
#line 10653 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 10663 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 10665 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_gorder_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 10670 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
          }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 10679 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 10687 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[(2) - (2)].simple_string)); Lex->charset= &my_charset_bin; }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 10689 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->charset= thd->variables.collation_connection; }
    break;

  case 1632:

/* Line 1455 of yacc.c  */
#line 10691 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[(2) - (4)].simple_string)); }
    break;

  case 1633:

/* Line 1455 of yacc.c  */
#line 10693 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->charset= national_charset_info;
            (yyval.Lex_cast_type).set(ITEM_CAST_CHAR, (yyvsp[(2) - (2)].simple_string), 0);
          }
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 10697 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type)= (yyvsp[(1) - (1)].Lex_cast_type); Lex->charset= NULL; }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 10698 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type)= (yyvsp[(1) - (1)].Lex_cast_type); Lex->charset= NULL; }
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 10702 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 10703 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 10704 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_SIGNED_INT); }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 10705 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_UNSIGNED_INT); }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 10706 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_UNSIGNED_INT); }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 10707 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_DECIMAL, (yyvsp[(2) - (2)].Lex_length_and_dec)); }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 10708 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_DOUBLE, (yyvsp[(2) - (2)].Lex_length_and_dec));  }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 10712 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_DATE); }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 10713 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_TIME, 0, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 10714 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.Lex_cast_type).set(ITEM_CAST_DATETIME, 0, (yyvsp[(2) - (2)].simple_string)); }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 10718 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 10719 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 10724 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 10731 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1650:

/* Line 1455 of yacc.c  */
#line 10738 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1651:

/* Line 1455 of yacc.c  */
#line 10739 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 10744 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item), thd->mem_root);
          }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 10751 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 10758 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 10759 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 10763 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1657:

/* Line 1455 of yacc.c  */
#line 10764 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 10769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item), thd->mem_root);
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item), thd->mem_root);
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 10777 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item), thd->mem_root);
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 10787 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)= (yyvsp[(1) - (1)].table_list); }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 10789 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(thd)))
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
          }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 10800 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 10811 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 10812 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 10818 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 10820 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 10840 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 10843 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 10851 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on(thd, (yyvsp[(3) - (6)].table_list), (yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 10859 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 10863 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 10869 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 10878 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 10886 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            add_join_on(thd, (yyvsp[(5) - (8)].table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 10894 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 10898 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 10904 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 10914 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 10922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on(thd, (yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 10931 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 10935 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1682:

/* Line 1455 of yacc.c  */
#line 10942 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1683:

/* Line 1455 of yacc.c  */
#line 10953 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1684:

/* Line 1455 of yacc.c  */
#line 10954 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1685:

/* Line 1455 of yacc.c  */
#line 10955 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 10959 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 10960 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 10968 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1690:

/* Line 1455 of yacc.c  */
#line 10974 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1693:

/* Line 1455 of yacc.c  */
#line 10993 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 10998 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 11030 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              lex->check_automatic_up(UNSPECIFIED_TYPE);
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new (thd->mem_root) Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              thd->parse_error();
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
            /*
              Fields in derived table can be used in upper select in
              case of merge. We do not add HAVING fields because we do
              not merge such derived. We do not add union because
              also do not merge them
            */
            if ((yyval.table_list) && (yyval.table_list)->derived &&
                !(yyval.table_list)->derived->first_select()->next_select())
              (yyval.table_list)->select_lex->add_where_field((yyval.table_list)->derived->first_select());
          }
    break;

  case 1696:

/* Line 1455 of yacc.c  */
#line 11093 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= (yyvsp[(2) - (8)].select_lex);
            SELECT_LEX_UNIT *unit= (yyvsp[(5) - (8)].select_lex)->master_unit();
            Table_ident *ti= new (thd->mem_root) Table_ident(unit);
            if (ti == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].select_lex)->set_with_clause((yyvsp[(4) - (8)].with_clause));
            lex->current_select= sel;
            if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                             ti, (yyvsp[(8) - (8)].lex_str_ptr), 0,
                                             TL_READ, MDL_SHARED_READ)))
              MYSQL_YYABORT;
            sel->add_joined_table((yyval.table_list));
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 11132 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list))
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
          }
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 11140 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list))
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
          }
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 11154 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->pop_context(); }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 11155 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->pop_context(); }
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 11156 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->pop_context(); }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 11167 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_braces(0);
          }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 11174 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 11182 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 11190 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $2 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (2)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(2) - (2)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (2)].table_list) && (yyval.table_list))
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
          }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 11212 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if ((yyvsp[(2) - (3)].num))
              Select->set_braces(1);
            (yyval.table_list)= NULL;
          }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 11220 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1, NULL))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 11237 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 11244 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 11249 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 11257 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            TABLE_LIST *embedding= lex->current_select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 11268 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 11269 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 11274 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 11277 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 11278 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 11279 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 11283 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 11284 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 11289 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 11294 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 11307 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->alloc_index_hints(thd); }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 11311 "/home/buildbot/git/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 11316 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, NULL, 0); }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 11317 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 11322 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (yyvsp[(1) - (1)].lex_string_with_pos).str, (yyvsp[(1) - (1)].lex_string_with_pos).length); }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 11324 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11334 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new (thd->mem_root) List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_string_with_pos).str,
                                                    (yyvsp[(1) - (1)].lex_string_with_pos).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s, thd->mem_root);
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11345 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_string_with_pos).str,
                                                    (yyvsp[(3) - (3)].lex_string_with_pos).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s, thd->mem_root);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11357 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11358 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11359 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11360 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11361 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11362 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11363 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11364 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11365 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11366 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11367 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11368 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11372 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11373 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11374 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11375 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11376 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11377 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11378 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11379 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11380 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11384 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11385 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11386 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 11387 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 11397 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 11399 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) thd->memdup(&(yyvsp[(2) - (2)].lex_string_with_pos),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11412 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11414 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 11418 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond(thd, (yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11430 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11434 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond(thd, (yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11445 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11450 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string_ascii(thd, "", 0) :
                 new (thd->mem_root) Item_string_ascii(thd, "\\", 1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11471 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11473 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_group_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11477 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 11479 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                                "global union parameters"));
            lex->current_select->olap= CUBE_TYPE;

            my_yyabort_error((ER_NOT_SUPPORTED_YET, MYF(0), "CUBE"));
          }
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11496 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                                "global union parameters"));
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 11518 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 11521 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11531 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (Select->add_window_def(thd, (yyvsp[(1) - (3)].lex_str_ptr), lex->win_ref,
                                       Select->group_list,
                                       Select->order_list,
                                       lex->win_frame ))
              MYSQL_YYABORT;
          }
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 11543 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->prepare_add_window_spec(thd); }
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11550 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 11552 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->lex->win_ref= (LEX_STRING *) thd->memdup(&(yyvsp[(1) - (1)].lex_string_with_pos), sizeof(LEX_STRING));
            if (thd->lex->win_ref == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 11559 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 11564 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 11569 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 11571 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->win_frame=
              new (thd->mem_root) Window_frame((yyvsp[(1) - (3)].frame_units),
                                               lex->frame_top_bound,
                                               lex->frame_bottom_bound,
                                               (yyvsp[(3) - (3)].frame_exclusion));
            if (lex->win_frame == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 11584 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_units)= Window_frame::UNITS_ROWS; }
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 11585 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_units)= Window_frame::UNITS_RANGE; }
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 11590 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->frame_top_bound= (yyvsp[(1) - (1)].window_frame_bound);
            lex->frame_bottom_bound=
              new (thd->mem_root)
                Window_frame_bound(Window_frame_bound::CURRENT, NULL);
            if (lex->frame_bottom_bound == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 11600 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->frame_top_bound= (yyvsp[(2) - (4)].window_frame_bound);
            lex->frame_bottom_bound= (yyvsp[(4) - (4)].window_frame_bound);
          }
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 11609 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.window_frame_bound)= new (thd->mem_root) 
                  Window_frame_bound(Window_frame_bound::PRECEDING, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 11616 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::CURRENT, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 11623 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::PRECEDING, (yyvsp[(1) - (2)].item)); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 11632 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.window_frame_bound)= (yyvsp[(1) - (1)].window_frame_bound); }
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 11634 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::FOLLOWING, NULL); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 11641 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.window_frame_bound)= new (thd->mem_root)
                  Window_frame_bound(Window_frame_bound::FOLLOWING, (yyvsp[(1) - (2)].item)); 
            if ((yyval.window_frame_bound) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 11650 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_exclusion)= Window_frame::EXCL_NONE; }
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 11652 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_exclusion)= Window_frame::EXCL_CURRENT_ROW; }
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 11654 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_exclusion)= Window_frame::EXCL_GROUP; }
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 11656 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_exclusion)= Window_frame::EXCL_TIES; }
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 11658 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.frame_exclusion)= Window_frame::EXCL_NONE; }
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 11676 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 11694 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE &&
                !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_unit_op() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(thd))
                MYSQL_YYABORT;
            }
            if (sel->master_unit()->is_unit_op() && !sel->braces)
            {
               /*
                 At this point we don't know yet whether this is the last
                 select in union or not, but we move ORDER BY to
                 fake_select_lex anyway. If there would be one more select
                 in union mysql_new_select will correctly throw error.
               */
               DBUG_ASSERT(sel->master_unit()->fake_select_lex);
               lex->current_select= sel->master_unit()->fake_select_lex;
             }
          }
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 11737 "/home/buildbot/git/sql/sql_yacc.yy"
    {

          }
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 11744 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 11746 "/home/buildbot/git/sql/sql_yacc.yy"
    { if (add_order_to_list(thd, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 11750 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 11751 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 11752 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 11756 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 11757 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 11762 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            if (sel->master_unit()->is_unit_op() && !sel->braces)
            {
              /* Move LIMIT that belongs to UNION to fake_select_lex */
              Lex->current_select= sel->master_unit()->fake_select_lex;
              DBUG_ASSERT(Select);
            }
          }
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 11775 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            if (!sel->select_limit->basic_const_item() ||
                sel->select_limit->val_int() > 0)
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 11783 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 11787 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 11794 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 11801 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 11808 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 11818 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          if (!((yyval.item)= lex->create_item_limit(thd, (yyvsp[(1) - (1)].lex_string_with_pos),
                                           (yyvsp[(1) - (1)].lex_string_with_pos).m_pos -
                                           lex->substatement_query(thd),
                                           lip->get_tok_end() - (yyvsp[(1) - (1)].lex_string_with_pos).m_pos)))
            MYSQL_YYABORT;
        }
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 11828 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          if (!((yyval.item)= lex->create_item_limit(thd, (yyvsp[(1) - (3)].lex_string_with_pos), (yyvsp[(3) - (3)].lex_string_with_pos),
                                           (yyvsp[(1) - (3)].lex_string_with_pos).m_pos -
                                           lex->substatement_query(thd),
                                           lip->get_ptr() - (yyvsp[(1) - (3)].lex_string_with_pos).m_pos)))
            MYSQL_YYABORT;
        }
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 11838 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyvsp[(1) - (1)].item_param)->limit_clause_param= TRUE;
        }
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 11842 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 11848 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 11854 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 11863 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 11870 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 11875 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 11881 "/home/buildbot/git/sql/sql_yacc.yy"
    { thd->parse_error(); MYSQL_YYABORT; }
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 11882 "/home/buildbot/git/sql/sql_yacc.yy"
    { thd->parse_error(); MYSQL_YYABORT; }
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 11886 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 11887 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 11890 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 11891 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 11892 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 11893 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 11894 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 11895 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 11899 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 11900 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 11901 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 11902 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 11903 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 11907 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.longlong_number)= (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 11908 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.longlong_number)= (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 11909 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.longlong_number)= -(longlong) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 11910 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.longlong_number)= -(longlong) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 11914 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 11915 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 11916 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 11917 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 11918 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 11922 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 11923 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 11924 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 11925 "/home/buildbot/git/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 11926 "/home/buildbot/git/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 11931 "/home/buildbot/git/sql/sql_yacc.yy"
    { thd->parse_error(ER_ONLY_INTEGERS_ALLOWED); }
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 11940 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 11941 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 11946 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            DBUG_ASSERT(&lex->select_lex == lex->current_select);

            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(thd, &lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_string_with_pos).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);

            /*
              PROCEDURE CLAUSE cannot handle subquery as one of its parameter,
              so set expr_allows_subselect as false to disallow any subqueries
              further. Reset expr_allows_subselect back to true once the
              parameters are reduced.
            */
            Lex->expr_allows_subselect= false;
          }
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 11972 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* Subqueries are allowed from now.*/
            Lex->expr_allows_subselect= true;
          }
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 11979 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 11980 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 11990 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name(thd, (yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 11999 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe &&
                (!(lex->result= new (thd->mem_root) select_dumpvar(thd))))
              MYSQL_YYABORT;
          }
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 12006 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 12011 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 12015 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->result)
            {
              if ((yyvsp[(1) - (1)].myvar) == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)Lex->result)->var_list.push_back((yyvsp[(1) - (1)].myvar), thd->mem_root);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(Lex->describe);
            }
          }
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 12035 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.myvar) = Lex->result ? new (thd->mem_root) my_var_user((yyvsp[(2) - (2)].lex_str)) : NULL;
          }
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 12039 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_variable *t;

            if (!Lex->spcont || !(t= Lex->spcont->find_variable((yyvsp[(1) - (1)].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str));
            (yyval.myvar) = Lex->result ? (new (thd->mem_root)
                                my_var_sp((yyvsp[(1) - (1)].lex_str), t->offset, t->type_handler(),
                                          Lex->sphead)) :
                                NULL;
          }
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 12050 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.myvar)= Lex->create_outvar(thd, (yyvsp[(1) - (3)].lex_string_with_pos), (yyvsp[(3) - (3)].lex_string_with_pos))))
              MYSQL_YYABORT;
          }
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 12062 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange=
                    new (thd->mem_root) sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result=
                    new (thd->mem_root) select_export(thd, lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 12072 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 12075 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result=
                      new (thd->mem_root) select_dump(thd, lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 12088 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 12099 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 12105 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 12116 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_TABLE, (yyvsp[(2) - (4)].num), (yyvsp[(4) - (4)].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 12123 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 12125 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_string_with_pos).str, (yyvsp[(3) - (7)].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 12142 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_DB, (yyvsp[(3) - (4)].object_ddl_options));
            lex->name= (yyvsp[(4) - (4)].lex_string_with_pos);
          }
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 12148 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_string_with_pos).str && check_db_name(&(yyvsp[(4) - (6)].lex_string_with_pos)))
               my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_string_with_pos).str));
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[(3) - (6)].object_ddl_options));
            spname= new (thd->mem_root) sp_name((yyvsp[(4) - (6)].lex_string_with_pos), (yyvsp[(6) - (6)].lex_string_with_pos), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            lex->spname= spname;
          }
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 12162 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[(3) - (4)].object_ddl_options));
            spname= new (thd->mem_root) sp_name(db, (yyvsp[(4) - (4)].lex_string_with_pos), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            lex->spname= spname;
          }
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 12177 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            lex->set_command(SQLCOM_DROP_PROCEDURE, (yyvsp[(3) - (4)].object_ddl_options));
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 12185 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_DROP_USER, (yyvsp[(3) - (5)].object_ddl_options));
          }
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 12189 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_DROP_ROLE, (yyvsp[(3) - (5)].object_ddl_options));
          }
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 12193 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_VIEW, (yyvsp[(3) - (3)].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 12200 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 12202 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->set_command(SQLCOM_DROP_EVENT, (yyvsp[(3) - (4)].object_ddl_options));
          }
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 12207 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_TRIGGER, (yyvsp[(3) - (4)].object_ddl_options));
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 12213 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 12218 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 12223 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_DROP_SERVER, (yyvsp[(3) - (4)].object_ddl_options));
            Lex->server_options.reset((yyvsp[(4) - (4)].lex_str));
          }
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 12229 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->set_command(SQLCOM_DROP_SEQUENCE, (yyvsp[(2) - (4)].num), (yyvsp[(4) - (4)].object_ddl_options));
           lex->table_type= TABLE_TYPE_SEQUENCE;
           YYPS->m_lock_type= TL_UNLOCK;
           YYPS->m_mdl_type= MDL_EXCLUSIVE;
         }
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 12237 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 12247 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 12258 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 12276 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 12287 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 12292 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 12300 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_NONE);
        }
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 12304 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_EXISTS);
        }
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 12310 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 12311 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 12319 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 12327 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 12332 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 12337 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 12344 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 12349 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 12354 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 12362 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 12364 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 12371 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 12375 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 12377 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 12387 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 12388 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 12393 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 12401 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 12402 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 12403 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 12405 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list= new (thd->mem_root) List_item) ||
                lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 12416 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root); }
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 12417 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item), thd->mem_root); }
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 12421 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 12422 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 12423 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 12438 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item), thd->mem_root) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 12447 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 12448 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 12452 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 12453 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 12457 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 12458 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 12462 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 12463 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 12468 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list= new (thd->mem_root) List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 12473 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 12481 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 12487 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 12492 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 12499 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 12501 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 12507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_ignore_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 12516 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 12524 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 12532 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 12550 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 12560 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (add_item_to_list(thd, (yyvsp[(1) - (3)].item)) || add_value_to_list(thd, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 12573 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item), thd->mem_root) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 12582 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 12583 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 12590 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 12605 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 12616 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 12617 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 12619 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 12625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 12630 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 12636 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 12654 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Table_ident *ti= new (thd->mem_root) Table_ident((yyvsp[(1) - (2)].lex_string_with_pos));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 12667 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Table_ident *ti= new (thd->mem_root) Table_ident(thd, (yyvsp[(1) - (4)].lex_string_with_pos), (yyvsp[(3) - (4)].lex_string_with_pos), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 12682 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 12683 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 12687 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 12688 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 12692 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 12693 "/home/buildbot/git/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 12694 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 12699 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 12710 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 12734 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 12738 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 12742 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 12746 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 12750 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 12754 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 12758 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 12762 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 12766 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 12773 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 12777 "/home/buildbot/git/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 12786 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->create_info.init();
          }
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 12795 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 12802 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 12809 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 12817 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 12825 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 12833 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 12841 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 12849 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 12856 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 12863 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 12869 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 12871 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 12873 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 12882 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 12886 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 12890 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 12896 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 12901 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 12910 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 12917 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 12922 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 12927 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 12932 "/home/buildbot/git/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 12934 "/home/buildbot/git/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 12936 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 12938 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 12940 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 12942 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              MYSQL_YYABORT;
          }
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 12949 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 12957 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 12959 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 12967 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 12974 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 12981 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 12988 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (4)].lex_user);
          }
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 12994 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_command(SQLCOM_SHOW_CREATE_DB, (yyvsp[(3) - (4)].object_ddl_options));
            Lex->name= (yyvsp[(4) - (4)].lex_string_with_pos);
          }
    break;

  case 2084:

/* Line 1455 of yacc.c  */
#line 12999 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 2085:

/* Line 1455 of yacc.c  */
#line 13007 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->table_type= TABLE_TYPE_VIEW;
          }
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 13015 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->table_type= TABLE_TYPE_SEQUENCE;
          }
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 13023 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 13027 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 13032 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 13039 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 13044 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 13051 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 13058 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 13064 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_CREATE_USER;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user;
          }
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 13071 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->sql_command= SQLCOM_SHOW_CREATE_USER;
             Lex->grant_user= (yyvsp[(3) - (3)].lex_user);
          }
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 13076 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 13083 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 13090 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 13095 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 13100 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 13105 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 2102:

/* Line 1455 of yacc.c  */
#line 13112 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             bool in_plugin;
             lex->sql_command= SQLCOM_SHOW_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[(1) - (3)].lex_str).str, &in_plugin);
             if (!table || !table->old_format || !in_plugin)
             {
               thd->parse_error(ER_SYNTAX_ERROR, (yyvsp[(2) - (3)].simple_string));
               MYSQL_YYABORT;
             }
             if (lex->wild && table->idx_field1 < 0)
             {
               thd->parse_error(ER_SYNTAX_ERROR, (yyvsp[(3) - (3)].simple_string));
               MYSQL_YYABORT;
             }
             if (make_schema_select(thd, Lex->current_select, table))
               MYSQL_YYABORT;
           }
    break;

  case 2103:

/* Line 1455 of yacc.c  */
#line 13134 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 13136 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 13138 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 13152 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 13153 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_string_with_pos).str; }
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 13157 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 13158 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 13167 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 13168 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 13172 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 13173 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 13177 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 13179 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
            (yyval.simple_string)= (yyvsp[(2) - (3)].simple_string);
          }
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 13187 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond(thd, (yyvsp[(3) - (3)].item));
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
            (yyval.simple_string)= (yyvsp[(2) - (3)].simple_string);
          }
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 13198 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 13209 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 13213 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 13215 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 13236 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->analyze_stmt= true;
          }
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 13242 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 13243 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 13244 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 13248 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 13250 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "JSON"))
              Lex->explain_json= true;
            else if (!my_strcasecmp(system_charset_info, (yyvsp[(3) - (3)].lex_str).str, "TRADITIONAL"))
              DBUG_ASSERT(Lex->explain_json==false);
            else
              my_yyabort_error((ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[(3) - (3)].lex_str).str));
          }
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 13261 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 13262 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 13264 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_string_with_pos).str,
                                                    (yyvsp[(1) - (1)].lex_string_with_pos).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 13278 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 13285 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 13290 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 13300 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 13305 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 13307 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            /* Don't try to flush views. */
            tables->required_type= TABLE_TYPE_NORMAL;
            /* Ignore temporary tables. */
            tables->open_type= OT_BASE_ONLY;
          }
        }
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 13322 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num); }
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 13324 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              thd->parse_error(ER_NO_TABLES_USED);
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 13331 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 13337 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 13342 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 13344 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 13346 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 13348 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 13350 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 13352 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS"));
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 13360 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 13362 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 13364 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 13366 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name= empty_lex_str;
          }
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 13371 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 13373 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE"));
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 13381 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 13383 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 2169:

/* Line 1455 of yacc.c  */
#line 13385 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 2170:

/* Line 1455 of yacc.c  */
#line 13387 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->type|= REFRESH_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[(1) - (2)].lex_str).str);
             if (!table || !table->reset_table)
             {
               thd->parse_error(ER_SYNTAX_ERROR, (yyvsp[(2) - (2)].simple_string));
               MYSQL_YYABORT;
             }
             Lex->view_list.push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[(1) - (2)].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
           }
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 13402 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 13403 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1455 of yacc.c  */
#line 13407 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 2174:

/* Line 1455 of yacc.c  */
#line 13408 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 2175:

/* Line 1455 of yacc.c  */
#line 13412 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 2176:

/* Line 1455 of yacc.c  */
#line 13417 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 13426 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 13428 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 13430 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             Lex->type|= REFRESH_MASTER;
             Lex->next_binlog_file_number= 0;
          }
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 13435 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 13439 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 13440 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 13444 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 13446 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->next_binlog_file_number = (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 13453 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 13459 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 13468 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 13472 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item), thd->mem_root);
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 13484 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 13492 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 13498 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 13499 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 13500 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 13503 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 13504 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 13505 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 13507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 13515 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item), thd->mem_root);
         }
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 13519 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user), thd->mem_root);
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 13527 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 13534 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_string_with_pos).str;
          }
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 13545 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 13556 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 13566 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 13576 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 13580 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 13584 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 2212:

/* Line 1455 of yacc.c  */
#line 13585 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 2213:

/* Line 1455 of yacc.c  */
#line 13589 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 13590 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 13594 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 13596 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 13603 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 13607 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 13608 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 13609 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 13624 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 13629 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 13636 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 13641 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2233:

/* Line 1455 of yacc.c  */
#line 13659 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 13664 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 13671 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 13673 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 13678 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 2239:

/* Line 1455 of yacc.c  */
#line 13685 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 13686 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 13690 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 13691 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 13692 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 13697 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item), thd->mem_root); }
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 13699 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item), thd->mem_root); }
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 13703 "/home/buildbot/git/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 13705 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param(thd, (yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 13713 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 13714 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 13724 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item), thd->mem_root) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item), thd->mem_root))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate(thd, (yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), thd->charset());
          }
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 13737 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= (yyvsp[(1) - (1)].lex_string_with_metadata).repertoire(cs_cli);
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_string_with_metadata);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_string_with_metadata).str, (yyvsp[(1) - (1)].lex_string_with_metadata).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(thd, tmp.str, tmp.length,
                                                cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 13759 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string(thd, (yyvsp[(1) - (1)].lex_string_with_metadata).str, (yyvsp[(1) - (1)].lex_string_with_metadata).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  (yyvsp[(1) - (1)].lex_string_with_metadata).repertoire());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 13769 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_string_with_introducer(thd, (yyvsp[(2) - (2)].lex_string_with_metadata).str,
                                                                (yyvsp[(2) - (2)].lex_string_with_metadata).length, (yyvsp[(1) - (2)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 13776 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 13795 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 13802 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.string)= (yyvsp[(1) - (1)].string); }
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 13808 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[(1) - (1)].lex_str).str,
                                                           (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 13821 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_hex_string(thd, (yyvsp[(1) - (1)].lex_str).str,
                                                           (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 13830 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item *tmp= new (thd->mem_root) Item_bin_string(thd, (yyvsp[(1) - (1)].lex_str).str,
                                                           (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 13846 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item_param)= Lex->add_placeholder(thd, (char *) "?",
                                           YYLIP->get_tok_start(),
                                           YYLIP->get_tok_start() + 1)))
              MYSQL_YYABORT;
          }
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 13855 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 13857 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg(thd);
          }
    break;

  case 2265:

/* Line 1455 of yacc.c  */
#line 13864 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 13865 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 13866 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 13868 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            YYLIP->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item)= new (thd->mem_root) Item_null(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 13882 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bool(thd, (char*) "FALSE",0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 13888 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bool(thd, (char*) "TRUE",1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 13894 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 13900 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_hex_string(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2273:

/* Line 1455 of yacc.c  */
#line 13906 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2274:

/* Line 1455 of yacc.c  */
#line 13912 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_string_with_introducer *item_str;
            /*
              Pass NULL as name. Name will be set in the "select_item" rule and
              will include the introducer and the original hex/bin notation.
            */
            item_str= new (thd->mem_root)
               Item_string_with_introducer(thd, NULL, (yyvsp[(2) - (2)].string)->ptr(), (yyvsp[(2) - (2)].string)->length(),
                                           (yyvsp[(1) - (2)].charset));
            if (!item_str || !item_str->check_well_formed_result(true))
              MYSQL_YYABORT;

            (yyval.item)= item_str;
          }
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 13930 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 13940 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 13950 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 13956 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 13965 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (thd->mem_root) Item_float(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 13977 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_string_with_metadata).str, (yyvsp[(2) - (2)].lex_string_with_metadata).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 13983 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_string_with_metadata).str, (yyvsp[(2) - (2)].lex_string_with_metadata).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 13989 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[(2) - (2)].lex_string_with_metadata).str, (yyvsp[(2) - (2)].lex_string_with_metadata).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 13998 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.with_clause)= 0; }
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 14000 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.with_clause)= (yyvsp[(1) - (1)].with_clause);
          }
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 14008 "/home/buildbot/git/sql/sql_yacc.yy"
    {
             With_clause *with_clause=
             new With_clause((yyvsp[(2) - (2)].num), Lex->curr_with_clause);
             if (with_clause == NULL)
               MYSQL_YYABORT;
             Lex->derived_tables|= DERIVED_WITH;
             Lex->curr_with_clause= with_clause;
             with_clause->add_to_list(Lex->with_clauses_list_last_next);
          }
    break;

  case 2286:

/* Line 1455 of yacc.c  */
#line 14018 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.with_clause)= Lex->curr_with_clause;
            Lex->curr_with_clause= Lex->curr_with_clause->pop();
          }
    break;

  case 2287:

/* Line 1455 of yacc.c  */
#line 14026 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2288:

/* Line 1455 of yacc.c  */
#line 14027 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2291:

/* Line 1455 of yacc.c  */
#line 14040 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].lex_str_list)= new List<LEX_STRING> (Lex->with_column_list);
            if ((yyvsp[(2) - (2)].lex_str_list) == NULL)
              MYSQL_YYABORT;
            Lex->with_column_list.empty();
          }
    break;

  case 2292:

/* Line 1455 of yacc.c  */
#line 14047 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            With_element *elem= new With_element((yyvsp[(1) - (9)].lex_str_ptr), *(yyvsp[(2) - (9)].lex_str_list), (yyvsp[(7) - (9)].select_lex)->master_unit());
	    if (elem == NULL || Lex->curr_with_clause->add_with_element(elem))
	      MYSQL_YYABORT;
	    if (elem->set_unparsed_spec(thd, (yyvsp[(6) - (9)].simple_string)+1, (yyvsp[(8) - (9)].simple_string)))
              MYSQL_YYABORT;
	  }
    break;

  case 2293:

/* Line 1455 of yacc.c  */
#line 14059 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str_list)= NULL; }
    break;

  case 2294:

/* Line 1455 of yacc.c  */
#line 14061 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str_list)= NULL; }
    break;

  case 2295:

/* Line 1455 of yacc.c  */
#line 14067 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->with_column_list.push_back((LEX_STRING*)
                    thd->memdup(&(yyvsp[(1) - (1)].lex_string_with_pos), sizeof(LEX_STRING)));
	  }
    break;

  case 2296:

/* Line 1455 of yacc.c  */
#line 14072 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->with_column_list.push_back((LEX_STRING*)
                    thd->memdup(&(yyvsp[(3) - (3)].lex_string_with_pos), sizeof(LEX_STRING)));
          }
    break;

  case 2297:

/* Line 1455 of yacc.c  */
#line 14081 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING *) thd->memdup(&(yyvsp[(1) - (1)].lex_string_with_pos), sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2298:

/* Line 1455 of yacc.c  */
#line 14095 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 14096 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 14101 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_string_with_pos).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 14110 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_string_with_pos).str;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_string_with_pos).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 14124 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 14129 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= YYLIP;
            if (!((yyval.item)= Lex->create_item_ident(thd, (yyvsp[(1) - (1)].lex_string_with_pos),
                                             lip->get_tok_start_prev(),
                                             lip->get_tok_end())))
              MYSQL_YYABORT;
          }
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 14136 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 14138 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (!((yyval.item)= lex->create_item_ident(thd, (yyvsp[(1) - (3)].lex_string_with_pos), (yyvsp[(3) - (3)].lex_string_with_pos),
                                             (yyvsp[(1) - (3)].lex_string_with_pos).m_pos -
                                             lex->substatement_query(thd),
                                             YYLIP->get_tok_end() - (yyvsp[(1) - (3)].lex_string_with_pos).m_pos)))
              MYSQL_YYABORT;
          }
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 14150 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= Lex->create_item_ident_nosp(thd, (yyvsp[(1) - (1)].lex_string_with_pos))))
              MYSQL_YYABORT;
          }
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 14154 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 14159 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= Lex->create_item_ident_nospvar(thd, (yyvsp[(1) - (3)].lex_string_with_pos), (yyvsp[(3) - (3)].lex_string_with_pos))))
              MYSQL_YYABORT;
          }
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 14168 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_string_with_pos).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_string_with_pos).str, (yyvsp[(4) - (4)].lex_string_with_pos).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_string_with_pos).str, (yyvsp[(4) - (4)].lex_string_with_pos).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 14192 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_string_with_pos).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_string_with_pos).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_string_with_pos).str, (yyvsp[(5) - (5)].lex_string_with_pos).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_string_with_pos).str, (yyvsp[(5) - (5)].lex_string_with_pos).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2312:

/* Line 1455 of yacc.c  */
#line 14221 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_string_with_pos);}
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 14223 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_string_with_pos).str, table->db))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_string_with_pos).str));
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_string_with_pos).str,
                              table->table_name))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_string_with_pos).str));
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_string_with_pos);
          }
    break;

  case 2314:

/* Line 1455 of yacc.c  */
#line 14233 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_string_with_pos).str, table->alias))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_string_with_pos).str));
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_string_with_pos);
          }
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 14239 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_string_with_pos);}
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 14244 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[(1) - (1)].lex_string_with_pos));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 14250 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[(1) - (3)].lex_string_with_pos), (yyvsp[(3) - (3)].lex_string_with_pos), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 14256 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[(2) - (2)].lex_string_with_pos));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2319:

/* Line 1455 of yacc.c  */
#line 14266 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[(1) - (2)].lex_string_with_pos));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2320:

/* Line 1455 of yacc.c  */
#line 14272 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[(1) - (4)].lex_string_with_pos), (yyvsp[(3) - (4)].lex_string_with_pos), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 14281 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new (thd->mem_root) Table_ident(thd, db, (yyvsp[(1) - (1)].lex_string_with_pos), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 14290 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 14292 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              uint wlen= Well_formed_prefix(cs, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length).length();
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_with_error(system_charset_info, &(yyval.lex_str),
                                          thd->charset(), (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 14317 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_string_with_metadata);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_string_with_metadata).str, (yyvsp[(1) - (1)].lex_string_with_metadata).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 14331 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_string_with_metadata);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_string_with_metadata).str, (yyvsp[(1) - (1)].lex_string_with_metadata).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 14345 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_string_with_metadata);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_string_with_metadata).str, (yyvsp[(1) - (1)].lex_string_with_metadata).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 14360 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (LEX_STRING &)(yyval.lex_string_with_pos)= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_string_with_pos).m_pos= (char *) YYLIP->get_tok_start_prev();
          }
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 14365 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_string_with_pos).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_string_with_pos).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_string_with_pos).length= (yyvsp[(1) - (1)].symbol).length;
            (yyval.lex_string_with_pos).m_pos= (char *) YYLIP->get_tok_start_prev();
          }
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 14376 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (LEX_STRING &)(yyval.lex_string_with_pos)= (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_string_with_pos).m_pos= (char *) YYLIP->get_tok_start();
          }
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 14381 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_string_with_pos).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length)))
              MYSQL_YYABORT;
            (yyval.lex_string_with_pos).length= (yyvsp[(1) - (1)].symbol).length;
            (yyval.lex_string_with_pos).m_pos= (char *) YYLIP->get_tok_start();
          }
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 14390 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 14392 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 14401 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_string_with_pos);}
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 14402 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 14403 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 14408 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 14421 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 14451 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 14463 "/home/buildbot/git/sql/sql_yacc.yy"
    {
           if ((yyvsp[(1) - (1)].lex_user)->user.str != current_user.str && (yyvsp[(1) - (1)].lex_user)->host.str == 0)
             (yyvsp[(1) - (1)].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user);
         }
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 14472 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 14473 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 14474 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 14475 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 14476 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 14477 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 14478 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 14479 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 14480 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 14481 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 14482 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 14483 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 14484 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 14485 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 14486 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 14487 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 14488 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 14489 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1455 of yacc.c  */
#line 14490 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 14491 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 14492 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 14493 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 14494 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2365:

/* Line 1455 of yacc.c  */
#line 14495 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2366:

/* Line 1455 of yacc.c  */
#line 14496 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1455 of yacc.c  */
#line 14497 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2368:

/* Line 1455 of yacc.c  */
#line 14498 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2369:

/* Line 1455 of yacc.c  */
#line 14499 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2370:

/* Line 1455 of yacc.c  */
#line 14500 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2371:

/* Line 1455 of yacc.c  */
#line 14501 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2372:

/* Line 1455 of yacc.c  */
#line 14502 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2373:

/* Line 1455 of yacc.c  */
#line 14503 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2374:

/* Line 1455 of yacc.c  */
#line 14504 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2375:

/* Line 1455 of yacc.c  */
#line 14505 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2376:

/* Line 1455 of yacc.c  */
#line 14506 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2377:

/* Line 1455 of yacc.c  */
#line 14507 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2378:

/* Line 1455 of yacc.c  */
#line 14508 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2379:

/* Line 1455 of yacc.c  */
#line 14509 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2380:

/* Line 1455 of yacc.c  */
#line 14510 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2381:

/* Line 1455 of yacc.c  */
#line 14511 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2382:

/* Line 1455 of yacc.c  */
#line 14512 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2383:

/* Line 1455 of yacc.c  */
#line 14513 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2384:

/* Line 1455 of yacc.c  */
#line 14514 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2385:

/* Line 1455 of yacc.c  */
#line 14515 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2386:

/* Line 1455 of yacc.c  */
#line 14516 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2387:

/* Line 1455 of yacc.c  */
#line 14517 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2388:

/* Line 1455 of yacc.c  */
#line 14518 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2389:

/* Line 1455 of yacc.c  */
#line 14519 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2390:

/* Line 1455 of yacc.c  */
#line 14520 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2391:

/* Line 1455 of yacc.c  */
#line 14521 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2392:

/* Line 1455 of yacc.c  */
#line 14522 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2393:

/* Line 1455 of yacc.c  */
#line 14523 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2394:

/* Line 1455 of yacc.c  */
#line 14524 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2395:

/* Line 1455 of yacc.c  */
#line 14525 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2396:

/* Line 1455 of yacc.c  */
#line 14526 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2397:

/* Line 1455 of yacc.c  */
#line 14527 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2398:

/* Line 1455 of yacc.c  */
#line 14528 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2399:

/* Line 1455 of yacc.c  */
#line 14529 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2400:

/* Line 1455 of yacc.c  */
#line 14530 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2401:

/* Line 1455 of yacc.c  */
#line 14531 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2402:

/* Line 1455 of yacc.c  */
#line 14532 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2403:

/* Line 1455 of yacc.c  */
#line 14533 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2404:

/* Line 1455 of yacc.c  */
#line 14534 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2405:

/* Line 1455 of yacc.c  */
#line 14535 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2406:

/* Line 1455 of yacc.c  */
#line 14536 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2407:

/* Line 1455 of yacc.c  */
#line 14537 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2408:

/* Line 1455 of yacc.c  */
#line 14538 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2409:

/* Line 1455 of yacc.c  */
#line 14539 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2410:

/* Line 1455 of yacc.c  */
#line 14540 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2411:

/* Line 1455 of yacc.c  */
#line 14541 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2412:

/* Line 1455 of yacc.c  */
#line 14542 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2413:

/* Line 1455 of yacc.c  */
#line 14552 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2414:

/* Line 1455 of yacc.c  */
#line 14553 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2415:

/* Line 1455 of yacc.c  */
#line 14554 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2416:

/* Line 1455 of yacc.c  */
#line 14555 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2417:

/* Line 1455 of yacc.c  */
#line 14556 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2418:

/* Line 1455 of yacc.c  */
#line 14557 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2419:

/* Line 1455 of yacc.c  */
#line 14558 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2420:

/* Line 1455 of yacc.c  */
#line 14559 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2421:

/* Line 1455 of yacc.c  */
#line 14560 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2422:

/* Line 1455 of yacc.c  */
#line 14561 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2423:

/* Line 1455 of yacc.c  */
#line 14562 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2424:

/* Line 1455 of yacc.c  */
#line 14563 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2425:

/* Line 1455 of yacc.c  */
#line 14564 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2426:

/* Line 1455 of yacc.c  */
#line 14565 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2427:

/* Line 1455 of yacc.c  */
#line 14566 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2428:

/* Line 1455 of yacc.c  */
#line 14567 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1455 of yacc.c  */
#line 14568 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2430:

/* Line 1455 of yacc.c  */
#line 14569 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2431:

/* Line 1455 of yacc.c  */
#line 14570 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2432:

/* Line 1455 of yacc.c  */
#line 14571 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2433:

/* Line 1455 of yacc.c  */
#line 14572 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2434:

/* Line 1455 of yacc.c  */
#line 14573 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2435:

/* Line 1455 of yacc.c  */
#line 14574 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2436:

/* Line 1455 of yacc.c  */
#line 14575 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2437:

/* Line 1455 of yacc.c  */
#line 14576 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2438:

/* Line 1455 of yacc.c  */
#line 14577 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2439:

/* Line 1455 of yacc.c  */
#line 14578 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2440:

/* Line 1455 of yacc.c  */
#line 14579 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1455 of yacc.c  */
#line 14580 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2442:

/* Line 1455 of yacc.c  */
#line 14581 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2443:

/* Line 1455 of yacc.c  */
#line 14582 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2444:

/* Line 1455 of yacc.c  */
#line 14583 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2445:

/* Line 1455 of yacc.c  */
#line 14584 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2446:

/* Line 1455 of yacc.c  */
#line 14585 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2447:

/* Line 1455 of yacc.c  */
#line 14586 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2448:

/* Line 1455 of yacc.c  */
#line 14587 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2449:

/* Line 1455 of yacc.c  */
#line 14588 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2450:

/* Line 1455 of yacc.c  */
#line 14589 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2451:

/* Line 1455 of yacc.c  */
#line 14590 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2452:

/* Line 1455 of yacc.c  */
#line 14591 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2453:

/* Line 1455 of yacc.c  */
#line 14592 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2454:

/* Line 1455 of yacc.c  */
#line 14593 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2455:

/* Line 1455 of yacc.c  */
#line 14594 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2456:

/* Line 1455 of yacc.c  */
#line 14595 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2457:

/* Line 1455 of yacc.c  */
#line 14596 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2458:

/* Line 1455 of yacc.c  */
#line 14597 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2459:

/* Line 1455 of yacc.c  */
#line 14598 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2460:

/* Line 1455 of yacc.c  */
#line 14599 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2461:

/* Line 1455 of yacc.c  */
#line 14600 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2462:

/* Line 1455 of yacc.c  */
#line 14601 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2463:

/* Line 1455 of yacc.c  */
#line 14606 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2464:

/* Line 1455 of yacc.c  */
#line 14607 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2465:

/* Line 1455 of yacc.c  */
#line 14608 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2466:

/* Line 1455 of yacc.c  */
#line 14609 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2467:

/* Line 1455 of yacc.c  */
#line 14610 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2468:

/* Line 1455 of yacc.c  */
#line 14611 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2469:

/* Line 1455 of yacc.c  */
#line 14612 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2470:

/* Line 1455 of yacc.c  */
#line 14613 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2471:

/* Line 1455 of yacc.c  */
#line 14614 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2472:

/* Line 1455 of yacc.c  */
#line 14615 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2473:

/* Line 1455 of yacc.c  */
#line 14616 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2474:

/* Line 1455 of yacc.c  */
#line 14617 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2475:

/* Line 1455 of yacc.c  */
#line 14618 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2476:

/* Line 1455 of yacc.c  */
#line 14619 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2477:

/* Line 1455 of yacc.c  */
#line 14620 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2478:

/* Line 1455 of yacc.c  */
#line 14621 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2479:

/* Line 1455 of yacc.c  */
#line 14622 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2480:

/* Line 1455 of yacc.c  */
#line 14623 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2481:

/* Line 1455 of yacc.c  */
#line 14624 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2482:

/* Line 1455 of yacc.c  */
#line 14625 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2483:

/* Line 1455 of yacc.c  */
#line 14626 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2484:

/* Line 1455 of yacc.c  */
#line 14627 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2485:

/* Line 1455 of yacc.c  */
#line 14628 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2486:

/* Line 1455 of yacc.c  */
#line 14629 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2487:

/* Line 1455 of yacc.c  */
#line 14630 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2488:

/* Line 1455 of yacc.c  */
#line 14631 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2489:

/* Line 1455 of yacc.c  */
#line 14632 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2490:

/* Line 1455 of yacc.c  */
#line 14633 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2491:

/* Line 1455 of yacc.c  */
#line 14634 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2492:

/* Line 1455 of yacc.c  */
#line 14635 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2493:

/* Line 1455 of yacc.c  */
#line 14636 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2494:

/* Line 1455 of yacc.c  */
#line 14637 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2495:

/* Line 1455 of yacc.c  */
#line 14638 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2496:

/* Line 1455 of yacc.c  */
#line 14639 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2497:

/* Line 1455 of yacc.c  */
#line 14640 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2498:

/* Line 1455 of yacc.c  */
#line 14641 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2499:

/* Line 1455 of yacc.c  */
#line 14642 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2500:

/* Line 1455 of yacc.c  */
#line 14643 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2501:

/* Line 1455 of yacc.c  */
#line 14644 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2502:

/* Line 1455 of yacc.c  */
#line 14645 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2503:

/* Line 1455 of yacc.c  */
#line 14646 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2504:

/* Line 1455 of yacc.c  */
#line 14647 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2505:

/* Line 1455 of yacc.c  */
#line 14648 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2506:

/* Line 1455 of yacc.c  */
#line 14649 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2507:

/* Line 1455 of yacc.c  */
#line 14650 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2508:

/* Line 1455 of yacc.c  */
#line 14651 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2509:

/* Line 1455 of yacc.c  */
#line 14652 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2510:

/* Line 1455 of yacc.c  */
#line 14653 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2511:

/* Line 1455 of yacc.c  */
#line 14654 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2512:

/* Line 1455 of yacc.c  */
#line 14655 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2513:

/* Line 1455 of yacc.c  */
#line 14656 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2514:

/* Line 1455 of yacc.c  */
#line 14657 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2515:

/* Line 1455 of yacc.c  */
#line 14658 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2516:

/* Line 1455 of yacc.c  */
#line 14659 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2517:

/* Line 1455 of yacc.c  */
#line 14660 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2518:

/* Line 1455 of yacc.c  */
#line 14661 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2519:

/* Line 1455 of yacc.c  */
#line 14662 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2520:

/* Line 1455 of yacc.c  */
#line 14663 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2521:

/* Line 1455 of yacc.c  */
#line 14664 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2522:

/* Line 1455 of yacc.c  */
#line 14665 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2523:

/* Line 1455 of yacc.c  */
#line 14666 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2524:

/* Line 1455 of yacc.c  */
#line 14667 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2525:

/* Line 1455 of yacc.c  */
#line 14668 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2526:

/* Line 1455 of yacc.c  */
#line 14669 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2527:

/* Line 1455 of yacc.c  */
#line 14670 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2528:

/* Line 1455 of yacc.c  */
#line 14671 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2529:

/* Line 1455 of yacc.c  */
#line 14672 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2530:

/* Line 1455 of yacc.c  */
#line 14673 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2531:

/* Line 1455 of yacc.c  */
#line 14674 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2532:

/* Line 1455 of yacc.c  */
#line 14675 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2533:

/* Line 1455 of yacc.c  */
#line 14676 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2534:

/* Line 1455 of yacc.c  */
#line 14677 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2535:

/* Line 1455 of yacc.c  */
#line 14678 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2536:

/* Line 1455 of yacc.c  */
#line 14679 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2537:

/* Line 1455 of yacc.c  */
#line 14680 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2538:

/* Line 1455 of yacc.c  */
#line 14681 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2539:

/* Line 1455 of yacc.c  */
#line 14682 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2540:

/* Line 1455 of yacc.c  */
#line 14683 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2541:

/* Line 1455 of yacc.c  */
#line 14684 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2542:

/* Line 1455 of yacc.c  */
#line 14685 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2543:

/* Line 1455 of yacc.c  */
#line 14686 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2544:

/* Line 1455 of yacc.c  */
#line 14687 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2545:

/* Line 1455 of yacc.c  */
#line 14688 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2546:

/* Line 1455 of yacc.c  */
#line 14689 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2547:

/* Line 1455 of yacc.c  */
#line 14690 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2548:

/* Line 1455 of yacc.c  */
#line 14691 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2549:

/* Line 1455 of yacc.c  */
#line 14692 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2550:

/* Line 1455 of yacc.c  */
#line 14693 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2551:

/* Line 1455 of yacc.c  */
#line 14694 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2552:

/* Line 1455 of yacc.c  */
#line 14695 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2553:

/* Line 1455 of yacc.c  */
#line 14696 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2554:

/* Line 1455 of yacc.c  */
#line 14697 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2555:

/* Line 1455 of yacc.c  */
#line 14698 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2556:

/* Line 1455 of yacc.c  */
#line 14699 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2557:

/* Line 1455 of yacc.c  */
#line 14700 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2558:

/* Line 1455 of yacc.c  */
#line 14701 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2559:

/* Line 1455 of yacc.c  */
#line 14702 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2560:

/* Line 1455 of yacc.c  */
#line 14703 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2561:

/* Line 1455 of yacc.c  */
#line 14704 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2562:

/* Line 1455 of yacc.c  */
#line 14705 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2563:

/* Line 1455 of yacc.c  */
#line 14706 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2564:

/* Line 1455 of yacc.c  */
#line 14707 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2565:

/* Line 1455 of yacc.c  */
#line 14708 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2566:

/* Line 1455 of yacc.c  */
#line 14709 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2567:

/* Line 1455 of yacc.c  */
#line 14710 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2568:

/* Line 1455 of yacc.c  */
#line 14711 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2569:

/* Line 1455 of yacc.c  */
#line 14712 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2570:

/* Line 1455 of yacc.c  */
#line 14713 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2571:

/* Line 1455 of yacc.c  */
#line 14714 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2572:

/* Line 1455 of yacc.c  */
#line 14715 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2573:

/* Line 1455 of yacc.c  */
#line 14716 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2574:

/* Line 1455 of yacc.c  */
#line 14717 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2575:

/* Line 1455 of yacc.c  */
#line 14718 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2576:

/* Line 1455 of yacc.c  */
#line 14719 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2577:

/* Line 1455 of yacc.c  */
#line 14720 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2578:

/* Line 1455 of yacc.c  */
#line 14721 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2579:

/* Line 1455 of yacc.c  */
#line 14722 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2580:

/* Line 1455 of yacc.c  */
#line 14723 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2581:

/* Line 1455 of yacc.c  */
#line 14724 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2582:

/* Line 1455 of yacc.c  */
#line 14725 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2583:

/* Line 1455 of yacc.c  */
#line 14726 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2584:

/* Line 1455 of yacc.c  */
#line 14727 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2585:

/* Line 1455 of yacc.c  */
#line 14728 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2586:

/* Line 1455 of yacc.c  */
#line 14729 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2587:

/* Line 1455 of yacc.c  */
#line 14730 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2588:

/* Line 1455 of yacc.c  */
#line 14731 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2589:

/* Line 1455 of yacc.c  */
#line 14732 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2590:

/* Line 1455 of yacc.c  */
#line 14733 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2591:

/* Line 1455 of yacc.c  */
#line 14734 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2592:

/* Line 1455 of yacc.c  */
#line 14735 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2593:

/* Line 1455 of yacc.c  */
#line 14736 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2594:

/* Line 1455 of yacc.c  */
#line 14737 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2595:

/* Line 1455 of yacc.c  */
#line 14738 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2596:

/* Line 1455 of yacc.c  */
#line 14739 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2597:

/* Line 1455 of yacc.c  */
#line 14740 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2598:

/* Line 1455 of yacc.c  */
#line 14741 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2599:

/* Line 1455 of yacc.c  */
#line 14742 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2600:

/* Line 1455 of yacc.c  */
#line 14743 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2601:

/* Line 1455 of yacc.c  */
#line 14744 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2602:

/* Line 1455 of yacc.c  */
#line 14745 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2603:

/* Line 1455 of yacc.c  */
#line 14746 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2604:

/* Line 1455 of yacc.c  */
#line 14747 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2605:

/* Line 1455 of yacc.c  */
#line 14748 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2606:

/* Line 1455 of yacc.c  */
#line 14749 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2607:

/* Line 1455 of yacc.c  */
#line 14750 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2608:

/* Line 1455 of yacc.c  */
#line 14751 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2609:

/* Line 1455 of yacc.c  */
#line 14752 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2610:

/* Line 1455 of yacc.c  */
#line 14753 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2611:

/* Line 1455 of yacc.c  */
#line 14754 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2612:

/* Line 1455 of yacc.c  */
#line 14755 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2613:

/* Line 1455 of yacc.c  */
#line 14756 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2614:

/* Line 1455 of yacc.c  */
#line 14757 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2615:

/* Line 1455 of yacc.c  */
#line 14758 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2616:

/* Line 1455 of yacc.c  */
#line 14759 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2617:

/* Line 1455 of yacc.c  */
#line 14760 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2618:

/* Line 1455 of yacc.c  */
#line 14761 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2619:

/* Line 1455 of yacc.c  */
#line 14762 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2620:

/* Line 1455 of yacc.c  */
#line 14763 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2621:

/* Line 1455 of yacc.c  */
#line 14764 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2622:

/* Line 1455 of yacc.c  */
#line 14765 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2623:

/* Line 1455 of yacc.c  */
#line 14766 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2624:

/* Line 1455 of yacc.c  */
#line 14767 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2625:

/* Line 1455 of yacc.c  */
#line 14768 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2626:

/* Line 1455 of yacc.c  */
#line 14769 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2627:

/* Line 1455 of yacc.c  */
#line 14770 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2628:

/* Line 1455 of yacc.c  */
#line 14771 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2629:

/* Line 1455 of yacc.c  */
#line 14772 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2630:

/* Line 1455 of yacc.c  */
#line 14773 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2631:

/* Line 1455 of yacc.c  */
#line 14774 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2632:

/* Line 1455 of yacc.c  */
#line 14775 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2633:

/* Line 1455 of yacc.c  */
#line 14776 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2634:

/* Line 1455 of yacc.c  */
#line 14777 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2635:

/* Line 1455 of yacc.c  */
#line 14778 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2636:

/* Line 1455 of yacc.c  */
#line 14779 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2637:

/* Line 1455 of yacc.c  */
#line 14780 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2638:

/* Line 1455 of yacc.c  */
#line 14781 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2639:

/* Line 1455 of yacc.c  */
#line 14782 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2640:

/* Line 1455 of yacc.c  */
#line 14783 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2641:

/* Line 1455 of yacc.c  */
#line 14784 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2642:

/* Line 1455 of yacc.c  */
#line 14785 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2643:

/* Line 1455 of yacc.c  */
#line 14786 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2644:

/* Line 1455 of yacc.c  */
#line 14787 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2645:

/* Line 1455 of yacc.c  */
#line 14788 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2646:

/* Line 1455 of yacc.c  */
#line 14789 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2647:

/* Line 1455 of yacc.c  */
#line 14790 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2648:

/* Line 1455 of yacc.c  */
#line 14791 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2649:

/* Line 1455 of yacc.c  */
#line 14792 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2650:

/* Line 1455 of yacc.c  */
#line 14793 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2651:

/* Line 1455 of yacc.c  */
#line 14794 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2652:

/* Line 1455 of yacc.c  */
#line 14795 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2653:

/* Line 1455 of yacc.c  */
#line 14796 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2654:

/* Line 1455 of yacc.c  */
#line 14797 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2655:

/* Line 1455 of yacc.c  */
#line 14798 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2656:

/* Line 1455 of yacc.c  */
#line 14799 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2657:

/* Line 1455 of yacc.c  */
#line 14800 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2658:

/* Line 1455 of yacc.c  */
#line 14801 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2659:

/* Line 1455 of yacc.c  */
#line 14802 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2660:

/* Line 1455 of yacc.c  */
#line 14803 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2661:

/* Line 1455 of yacc.c  */
#line 14804 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2662:

/* Line 1455 of yacc.c  */
#line 14805 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2663:

/* Line 1455 of yacc.c  */
#line 14806 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2664:

/* Line 1455 of yacc.c  */
#line 14807 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2665:

/* Line 1455 of yacc.c  */
#line 14808 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2666:

/* Line 1455 of yacc.c  */
#line 14809 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2667:

/* Line 1455 of yacc.c  */
#line 14810 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2668:

/* Line 1455 of yacc.c  */
#line 14811 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2669:

/* Line 1455 of yacc.c  */
#line 14812 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2670:

/* Line 1455 of yacc.c  */
#line 14813 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2671:

/* Line 1455 of yacc.c  */
#line 14814 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2672:

/* Line 1455 of yacc.c  */
#line 14815 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2673:

/* Line 1455 of yacc.c  */
#line 14816 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2674:

/* Line 1455 of yacc.c  */
#line 14817 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2675:

/* Line 1455 of yacc.c  */
#line 14818 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2676:

/* Line 1455 of yacc.c  */
#line 14819 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2677:

/* Line 1455 of yacc.c  */
#line 14820 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2678:

/* Line 1455 of yacc.c  */
#line 14821 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2679:

/* Line 1455 of yacc.c  */
#line 14822 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2680:

/* Line 1455 of yacc.c  */
#line 14823 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2681:

/* Line 1455 of yacc.c  */
#line 14824 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2682:

/* Line 1455 of yacc.c  */
#line 14825 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2683:

/* Line 1455 of yacc.c  */
#line 14826 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2684:

/* Line 1455 of yacc.c  */
#line 14827 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2685:

/* Line 1455 of yacc.c  */
#line 14828 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2686:

/* Line 1455 of yacc.c  */
#line 14829 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2687:

/* Line 1455 of yacc.c  */
#line 14830 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2688:

/* Line 1455 of yacc.c  */
#line 14831 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2689:

/* Line 1455 of yacc.c  */
#line 14832 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2690:

/* Line 1455 of yacc.c  */
#line 14833 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2691:

/* Line 1455 of yacc.c  */
#line 14834 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2692:

/* Line 1455 of yacc.c  */
#line 14835 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2693:

/* Line 1455 of yacc.c  */
#line 14836 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2694:

/* Line 1455 of yacc.c  */
#line 14837 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2695:

/* Line 1455 of yacc.c  */
#line 14838 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2696:

/* Line 1455 of yacc.c  */
#line 14839 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2697:

/* Line 1455 of yacc.c  */
#line 14840 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2698:

/* Line 1455 of yacc.c  */
#line 14841 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2699:

/* Line 1455 of yacc.c  */
#line 14842 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2700:

/* Line 1455 of yacc.c  */
#line 14843 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2701:

/* Line 1455 of yacc.c  */
#line 14844 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2702:

/* Line 1455 of yacc.c  */
#line 14845 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2703:

/* Line 1455 of yacc.c  */
#line 14846 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2704:

/* Line 1455 of yacc.c  */
#line 14847 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2705:

/* Line 1455 of yacc.c  */
#line 14848 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2706:

/* Line 1455 of yacc.c  */
#line 14849 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2707:

/* Line 1455 of yacc.c  */
#line 14850 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2708:

/* Line 1455 of yacc.c  */
#line 14851 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2709:

/* Line 1455 of yacc.c  */
#line 14852 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2710:

/* Line 1455 of yacc.c  */
#line 14853 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2711:

/* Line 1455 of yacc.c  */
#line 14854 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2712:

/* Line 1455 of yacc.c  */
#line 14855 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2713:

/* Line 1455 of yacc.c  */
#line 14856 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2714:

/* Line 1455 of yacc.c  */
#line 14857 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2715:

/* Line 1455 of yacc.c  */
#line 14858 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2716:

/* Line 1455 of yacc.c  */
#line 14859 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2717:

/* Line 1455 of yacc.c  */
#line 14860 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2718:

/* Line 1455 of yacc.c  */
#line 14861 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2719:

/* Line 1455 of yacc.c  */
#line 14862 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2720:

/* Line 1455 of yacc.c  */
#line 14863 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2721:

/* Line 1455 of yacc.c  */
#line 14864 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2722:

/* Line 1455 of yacc.c  */
#line 14865 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2723:

/* Line 1455 of yacc.c  */
#line 14866 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2724:

/* Line 1455 of yacc.c  */
#line 14867 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2725:

/* Line 1455 of yacc.c  */
#line 14868 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2726:

/* Line 1455 of yacc.c  */
#line 14869 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2727:

/* Line 1455 of yacc.c  */
#line 14870 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2728:

/* Line 1455 of yacc.c  */
#line 14871 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2729:

/* Line 1455 of yacc.c  */
#line 14872 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2730:

/* Line 1455 of yacc.c  */
#line 14873 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2731:

/* Line 1455 of yacc.c  */
#line 14874 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2732:

/* Line 1455 of yacc.c  */
#line 14875 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2733:

/* Line 1455 of yacc.c  */
#line 14876 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2734:

/* Line 1455 of yacc.c  */
#line 14877 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2735:

/* Line 1455 of yacc.c  */
#line 14878 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2736:

/* Line 1455 of yacc.c  */
#line 14879 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2737:

/* Line 1455 of yacc.c  */
#line 14880 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2738:

/* Line 1455 of yacc.c  */
#line 14881 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2739:

/* Line 1455 of yacc.c  */
#line 14882 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2740:

/* Line 1455 of yacc.c  */
#line 14883 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2741:

/* Line 1455 of yacc.c  */
#line 14884 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2742:

/* Line 1455 of yacc.c  */
#line 14885 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2743:

/* Line 1455 of yacc.c  */
#line 14886 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2744:

/* Line 1455 of yacc.c  */
#line 14887 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2745:

/* Line 1455 of yacc.c  */
#line 14888 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2746:

/* Line 1455 of yacc.c  */
#line 14889 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2747:

/* Line 1455 of yacc.c  */
#line 14890 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2748:

/* Line 1455 of yacc.c  */
#line 14891 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2749:

/* Line 1455 of yacc.c  */
#line 14903 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->set_stmt_init();
            lex->var_list.empty();
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2750:

/* Line 1455 of yacc.c  */
#line 14910 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2751:

/* Line 1455 of yacc.c  */
#line 14912 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->set_stmt_init();
          }
    break;

  case 2752:

/* Line 1455 of yacc.c  */
#line 14916 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0), "SET STATEMENT"));
            lex->stmt_var_list= lex->var_list;
            lex->var_list.empty();
          }
    break;

  case 2753:

/* Line 1455 of yacc.c  */
#line 14924 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2756:

/* Line 1455 of yacc.c  */
#line 14939 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2758:

/* Line 1455 of yacc.c  */
#line 14945 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2759:

/* Line 1455 of yacc.c  */
#line 14949 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2760:

/* Line 1455 of yacc.c  */
#line 14954 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2762:

/* Line 1455 of yacc.c  */
#line 14964 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2764:

/* Line 1455 of yacc.c  */
#line 14970 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2767:

/* Line 1455 of yacc.c  */
#line 14984 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2768:

/* Line 1455 of yacc.c  */
#line 14988 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2769:

/* Line 1455 of yacc.c  */
#line 14993 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
    break;

  case 2770:

/* Line 1455 of yacc.c  */
#line 14997 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2771:

/* Line 1455 of yacc.c  */
#line 15006 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2774:

/* Line 1455 of yacc.c  */
#line 15014 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2775:

/* Line 1455 of yacc.c  */
#line 15015 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2776:

/* Line 1455 of yacc.c  */
#line 15016 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2777:

/* Line 1455 of yacc.c  */
#line 15020 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2778:

/* Line 1455 of yacc.c  */
#line 15021 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2779:

/* Line 1455 of yacc.c  */
#line 15022 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2780:

/* Line 1455 of yacc.c  */
#line 15023 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2781:

/* Line 1455 of yacc.c  */
#line 15027 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2782:

/* Line 1455 of yacc.c  */
#line 15028 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2783:

/* Line 1455 of yacc.c  */
#line 15029 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2784:

/* Line 1455 of yacc.c  */
#line 15030 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2785:

/* Line 1455 of yacc.c  */
#line 15036 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (lex->set_system_variable(&(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceding local variable is illegal.
              */
              thd->parse_error();
              MYSQL_YYABORT;
            }
          }
    break;

  case 2786:

/* Line 1455 of yacc.c  */
#line 15060 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            struct sys_var_with_base var;
            if (Lex->init_internal_variable(&var, (yyvsp[(1) - (3)].lex_string_with_pos)) ||
                Lex->set_variable(&var, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2787:

/* Line 1455 of yacc.c  */
#line 15067 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->var_list.is_empty());
            if (Lex->set_variable((yyvsp[(1) - (5)].lex_string_with_pos), (yyvsp[(3) - (5)].lex_string_with_pos), (yyvsp[(5) - (5)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2788:

/* Line 1455 of yacc.c  */
#line 15073 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            struct sys_var_with_base var;
            if (Lex->init_default_internal_variable(&var, (yyvsp[(3) - (5)].lex_string_with_pos)) ||
                Lex->set_variable(&var, (yyvsp[(5) - (5)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2789:

/* Line 1455 of yacc.c  */
#line 15080 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new (thd->mem_root) set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2790:

/* Line 1455 of yacc.c  */
#line 15091 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (Lex->set_system_variable(&tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2791:

/* Line 1455 of yacc.c  */
#line 15103 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= (new (thd->mem_root)
                  set_var_collation_client(cs2,
                                           thd->variables.collation_database,
                                            cs2));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2792:

/* Line 1455 of yacc.c  */
#line 15117 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              thd->parse_error();

            MYSQL_YYABORT;
          }
    break;

  case 2793:

/* Line 1455 of yacc.c  */
#line 15132 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new (thd->mem_root) set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2794:

/* Line 1455 of yacc.c  */
#line 15151 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            LEX_USER *user;
            if (!(user=(LEX_USER *) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role(user,
                                                             (yyvsp[(3) - (3)].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2795:

/* Line 1455 of yacc.c  */
#line 15168 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role((yyvsp[(5) - (5)].lex_user), (yyvsp[(3) - (5)].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2796:

/* Line 1455 of yacc.c  */
#line 15180 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_role *var= new (thd->mem_root) set_var_role((yyvsp[(2) - (2)].lex_str));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2797:

/* Line 1455 of yacc.c  */
#line 15188 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            set_var_password *var= (new (thd->mem_root)
                                    set_var_password(lex->definer));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2798:

/* Line 1455 of yacc.c  */
#line 15204 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->init_internal_variable(&(yyval.variable), (yyvsp[(1) - (1)].lex_string_with_pos)))
              MYSQL_YYABORT;
          }
    break;

  case 2799:

/* Line 1455 of yacc.c  */
#line 15209 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->init_internal_variable(&(yyval.variable), (yyvsp[(1) - (3)].lex_string_with_pos), (yyvsp[(3) - (3)].lex_string_with_pos)))
              MYSQL_YYABORT;
          }
    break;

  case 2800:

/* Line 1455 of yacc.c  */
#line 15214 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->init_default_internal_variable(&(yyval.variable), (yyvsp[(3) - (3)].lex_string_with_pos)))
              MYSQL_YYABORT;
          }
    break;

  case 2805:

/* Line 1455 of yacc.c  */
#line 15229 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_read_only"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2806:

/* Line 1455 of yacc.c  */
#line 15247 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_isolation"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
    break;

  case 2807:

/* Line 1455 of yacc.c  */
#line 15264 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2808:

/* Line 1455 of yacc.c  */
#line 15265 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2809:

/* Line 1455 of yacc.c  */
#line 15269 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2810:

/* Line 1455 of yacc.c  */
#line 15270 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2811:

/* Line 1455 of yacc.c  */
#line 15271 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2812:

/* Line 1455 of yacc.c  */
#line 15272 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2813:

/* Line 1455 of yacc.c  */
#line 15277 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (spc && spc->find_variable(pw, false))
              my_yyabort_error((ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str));
            if (!(lex->definer= (LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            lex->definer->user= current_user;
            lex->definer->plugin= empty_lex_str;
            lex->definer->auth= empty_lex_str;
          }
    break;

  case 2814:

/* Line 1455 of yacc.c  */
#line 15290 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer= (yyvsp[(2) - (3)].lex_user); }
    break;

  case 2815:

/* Line 1455 of yacc.c  */
#line 15294 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer->pwhash= (yyvsp[(1) - (1)].lex_string_with_metadata);}
    break;

  case 2816:

/* Line 1455 of yacc.c  */
#line 15295 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer->pwtext= (yyvsp[(3) - (4)].lex_string_with_metadata); }
    break;

  case 2817:

/* Line 1455 of yacc.c  */
#line 15297 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->definer->pwtext= (yyvsp[(3) - (4)].lex_string_with_metadata);
            Lex->definer->pwhash.str= Item_func_password::alloc(thd,
                                   (yyvsp[(3) - (4)].lex_string_with_metadata).str, (yyvsp[(3) - (4)].lex_string_with_metadata).length, Item_func_password::OLD);
            Lex->definer->pwhash.length=  SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
          }
    break;

  case 2818:

/* Line 1455 of yacc.c  */
#line 15306 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2819:

/* Line 1455 of yacc.c  */
#line 15307 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2820:

/* Line 1455 of yacc.c  */
#line 15309 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ON",  2);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2821:

/* Line 1455 of yacc.c  */
#line 15315 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ALL", 3);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2822:

/* Line 1455 of yacc.c  */
#line 15321 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "binary", 6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2823:

/* Line 1455 of yacc.c  */
#line 15332 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "LOCK"));
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2824:

/* Line 1455 of yacc.c  */
#line 15340 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2825:

/* Line 1455 of yacc.c  */
#line 15345 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2826:

/* Line 1455 of yacc.c  */
#line 15347 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          if (set_statement_var_if_exists(thd, C_STRING_WITH_LEN("lock_wait_timeout"), (yyvsp[(2) - (2)].ulong_num)) ||
              set_statement_var_if_exists(thd, C_STRING_WITH_LEN("innodb_lock_wait_timeout"), (yyvsp[(2) - (2)].ulong_num)))
            MYSQL_YYABORT;
        }
    break;

  case 2827:

/* Line 1455 of yacc.c  */
#line 15353 "/home/buildbot/git/sql/sql_yacc.yy"
    {
          if (set_statement_var_if_exists(thd, C_STRING_WITH_LEN("lock_wait_timeout"), 0) ||
              set_statement_var_if_exists(thd, C_STRING_WITH_LEN("innodb_lock_wait_timeout"), 0))
            MYSQL_YYABORT;
        }
    break;

  case 2828:

/* Line 1455 of yacc.c  */
#line 15361 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2829:

/* Line 1455 of yacc.c  */
#line 15362 "/home/buildbot/git/sql/sql_yacc.yy"
    { }
    break;

  case 2832:

/* Line 1455 of yacc.c  */
#line 15372 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2833:

/* Line 1455 of yacc.c  */
#line 15386 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2834:

/* Line 1455 of yacc.c  */
#line 15387 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2835:

/* Line 1455 of yacc.c  */
#line 15389 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2836:

/* Line 1455 of yacc.c  */
#line 15393 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2837:

/* Line 1455 of yacc.c  */
#line 15394 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2838:

/* Line 1455 of yacc.c  */
#line 15399 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "UNLOCK"));
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2839:

/* Line 1455 of yacc.c  */
#line 15407 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2840:

/* Line 1455 of yacc.c  */
#line 15416 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2841:

/* Line 1455 of yacc.c  */
#line 15425 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2842:

/* Line 1455 of yacc.c  */
#line 15434 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int(thd, (int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2843:

/* Line 1455 of yacc.c  */
#line 15451 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2844:

/* Line 1455 of yacc.c  */
#line 15464 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2845:

/* Line 1455 of yacc.c  */
#line 15465 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_string_with_pos); }
    break;

  case 2846:

/* Line 1455 of yacc.c  */
#line 15469 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2847:

/* Line 1455 of yacc.c  */
#line 15470 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2848:

/* Line 1455 of yacc.c  */
#line 15474 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2849:

/* Line 1455 of yacc.c  */
#line 15475 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2850:

/* Line 1455 of yacc.c  */
#line 15476 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2851:

/* Line 1455 of yacc.c  */
#line 15477 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2852:

/* Line 1455 of yacc.c  */
#line 15479 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list= new (thd->mem_root) List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2853:

/* Line 1455 of yacc.c  */
#line 15487 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2854:

/* Line 1455 of yacc.c  */
#line 15491 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2855:

/* Line 1455 of yacc.c  */
#line 15492 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2856:

/* Line 1455 of yacc.c  */
#line 15493 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2857:

/* Line 1455 of yacc.c  */
#line 15494 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2858:

/* Line 1455 of yacc.c  */
#line 15495 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2859:

/* Line 1455 of yacc.c  */
#line 15502 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2860:

/* Line 1455 of yacc.c  */
#line 15507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2861:

/* Line 1455 of yacc.c  */
#line 15513 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2862:

/* Line 1455 of yacc.c  */
#line 15524 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2863:

/* Line 1455 of yacc.c  */
#line 15535 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2864:

/* Line 1455 of yacc.c  */
#line 15539 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2865:

/* Line 1455 of yacc.c  */
#line 15546 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[(1) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2866:

/* Line 1455 of yacc.c  */
#line 15555 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[(4) - (4)].lex_user); }
    break;

  case 2867:

/* Line 1455 of yacc.c  */
#line 15557 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); }
    break;

  case 2868:

/* Line 1455 of yacc.c  */
#line 15562 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2869:

/* Line 1455 of yacc.c  */
#line 15568 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2870:

/* Line 1455 of yacc.c  */
#line 15575 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2871:

/* Line 1455 of yacc.c  */
#line 15587 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2872:

/* Line 1455 of yacc.c  */
#line 15598 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2873:

/* Line 1455 of yacc.c  */
#line 15605 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[(1) - (4)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2874:

/* Line 1455 of yacc.c  */
#line 15616 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer = 0; }
    break;

  case 2875:

/* Line 1455 of yacc.c  */
#line 15617 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->definer = (yyvsp[(3) - (3)].lex_user); }
    break;

  case 2876:

/* Line 1455 of yacc.c  */
#line 15620 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= false; }
    break;

  case 2877:

/* Line 1455 of yacc.c  */
#line 15621 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->with_admin_option= true; }
    break;

  case 2878:

/* Line 1455 of yacc.c  */
#line 15625 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2879:

/* Line 1455 of yacc.c  */
#line 15630 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2880:

/* Line 1455 of yacc.c  */
#line 15638 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->reset_auth();
          }
    break;

  case 2881:

/* Line 1455 of yacc.c  */
#line 15648 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            CHARSET_INFO *cs= system_charset_info;
            /* trim end spaces (as they'll be lost in mysql.user anyway) */
            (yyvsp[(1) - (1)].lex_str).length= cs->cset->lengthsp(cs, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            (yyvsp[(1) - (1)].lex_str).str[(yyvsp[(1) - (1)].lex_str).length] = '\0';
            if ((yyvsp[(1) - (1)].lex_str).length == 0)
              my_yyabort_error((ER_INVALID_ROLE, MYF(0), ""));
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         cs, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2885:

/* Line 1455 of yacc.c  */
#line 15675 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2886:

/* Line 1455 of yacc.c  */
#line 15677 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2891:

/* Line 1455 of yacc.c  */
#line 15695 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2892:

/* Line 1455 of yacc.c  */
#line 15696 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2893:

/* Line 1455 of yacc.c  */
#line 15698 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2894:

/* Line 1455 of yacc.c  */
#line 15699 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2895:

/* Line 1455 of yacc.c  */
#line 15701 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2896:

/* Line 1455 of yacc.c  */
#line 15702 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2897:

/* Line 1455 of yacc.c  */
#line 15704 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2898:

/* Line 1455 of yacc.c  */
#line 15705 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2899:

/* Line 1455 of yacc.c  */
#line 15706 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2900:

/* Line 1455 of yacc.c  */
#line 15707 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2901:

/* Line 1455 of yacc.c  */
#line 15708 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2902:

/* Line 1455 of yacc.c  */
#line 15709 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2903:

/* Line 1455 of yacc.c  */
#line 15710 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2904:

/* Line 1455 of yacc.c  */
#line 15711 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2905:

/* Line 1455 of yacc.c  */
#line 15712 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2906:

/* Line 1455 of yacc.c  */
#line 15713 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2907:

/* Line 1455 of yacc.c  */
#line 15714 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2908:

/* Line 1455 of yacc.c  */
#line 15715 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2909:

/* Line 1455 of yacc.c  */
#line 15716 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2910:

/* Line 1455 of yacc.c  */
#line 15717 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2911:

/* Line 1455 of yacc.c  */
#line 15718 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2912:

/* Line 1455 of yacc.c  */
#line 15719 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2913:

/* Line 1455 of yacc.c  */
#line 15720 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2914:

/* Line 1455 of yacc.c  */
#line 15721 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2915:

/* Line 1455 of yacc.c  */
#line 15722 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2916:

/* Line 1455 of yacc.c  */
#line 15723 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2917:

/* Line 1455 of yacc.c  */
#line 15724 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2918:

/* Line 1455 of yacc.c  */
#line 15725 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2919:

/* Line 1455 of yacc.c  */
#line 15726 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2920:

/* Line 1455 of yacc.c  */
#line 15727 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2921:

/* Line 1455 of yacc.c  */
#line 15728 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2922:

/* Line 1455 of yacc.c  */
#line 15729 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2923:

/* Line 1455 of yacc.c  */
#line 15730 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2924:

/* Line 1455 of yacc.c  */
#line 15731 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2925:

/* Line 1455 of yacc.c  */
#line 15735 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2926:

/* Line 1455 of yacc.c  */
#line 15736 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2929:

/* Line 1455 of yacc.c  */
#line 15746 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SUBJECT"));
            lex->x509_subject=(yyvsp[(2) - (2)].lex_string_with_metadata).str;
          }
    break;

  case 2930:

/* Line 1455 of yacc.c  */
#line 15753 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "ISSUER"));
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_string_with_metadata).str;
          }
    break;

  case 2931:

/* Line 1455 of yacc.c  */
#line 15760 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "CIPHER"));
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_string_with_metadata).str;
          }
    break;

  case 2932:

/* Line 1455 of yacc.c  */
#line 15770 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
    break;

  case 2933:

/* Line 1455 of yacc.c  */
#line 15781 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_string_with_pos).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
    break;

  case 2934:

/* Line 1455 of yacc.c  */
#line 15790 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
    break;

  case 2935:

/* Line 1455 of yacc.c  */
#line 15799 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2936:

/* Line 1455 of yacc.c  */
#line 15811 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2937:

/* Line 1455 of yacc.c  */
#line 15816 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2938:

/* Line 1455 of yacc.c  */
#line 15824 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2939:

/* Line 1455 of yacc.c  */
#line 15829 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2940:

/* Line 1455 of yacc.c  */
#line 15837 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2941:

/* Line 1455 of yacc.c  */
#line 15842 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
    break;

  case 2946:

/* Line 1455 of yacc.c  */
#line 15853 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->pwtext= (yyvsp[(4) - (4)].lex_string_with_metadata);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
          }
    break;

  case 2947:

/* Line 1455 of yacc.c  */
#line 15860 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->pwhash= (yyvsp[(5) - (5)].lex_string_with_metadata);
          }
    break;

  case 2948:

/* Line 1455 of yacc.c  */
#line 15865 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2949:

/* Line 1455 of yacc.c  */
#line 15871 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2950:

/* Line 1455 of yacc.c  */
#line 15877 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); }
    break;

  case 2951:

/* Line 1455 of yacc.c  */
#line 15882 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2955:

/* Line 1455 of yacc.c  */
#line 15896 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            String *new_str= new (thd->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_string_with_pos).str,(yyvsp[(1) - (1)].lex_string_with_pos).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= (new (thd->mem_root)
                                LEX_COLUMN(*new_str,lex->which_columns));
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col, thd->mem_root);
            }
          }
    break;

  case 2957:

/* Line 1455 of yacc.c  */
#line 15926 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2958:

/* Line 1455 of yacc.c  */
#line 15930 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2959:

/* Line 1455 of yacc.c  */
#line 15934 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2960:

/* Line 1455 of yacc.c  */
#line 15938 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2961:

/* Line 1455 of yacc.c  */
#line 15945 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2962:

/* Line 1455 of yacc.c  */
#line 15951 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2963:

/* Line 1455 of yacc.c  */
#line 15957 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2964:

/* Line 1455 of yacc.c  */
#line 15963 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2965:

/* Line 1455 of yacc.c  */
#line 15969 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.max_statement_time= (yyvsp[(2) - (2)].item_num)->val_real();
            lex->mqh.specified_limits|= USER_RESOURCES::MAX_STATEMENT_TIME;
          }
    break;

  case 2966:

/* Line 1455 of yacc.c  */
#line 15977 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2967:

/* Line 1455 of yacc.c  */
#line 15978 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2968:

/* Line 1455 of yacc.c  */
#line 15982 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2970:

/* Line 1455 of yacc.c  */
#line 15988 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2971:

/* Line 1455 of yacc.c  */
#line 15989 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2972:

/* Line 1455 of yacc.c  */
#line 15993 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2973:

/* Line 1455 of yacc.c  */
#line 15994 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2974:

/* Line 1455 of yacc.c  */
#line 15998 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2975:

/* Line 1455 of yacc.c  */
#line 15999 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2976:

/* Line 1455 of yacc.c  */
#line 16003 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2977:

/* Line 1455 of yacc.c  */
#line 16004 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2978:

/* Line 1455 of yacc.c  */
#line 16009 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2979:

/* Line 1455 of yacc.c  */
#line 16014 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2980:

/* Line 1455 of yacc.c  */
#line 16019 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_COMPOUND;
            Lex->sphead->set_stmt_end(thd);
            Lex->sphead->restore_thd_mem_root(thd);
          }
    break;

  case 2981:

/* Line 1455 of yacc.c  */
#line 16027 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2982:

/* Line 1455 of yacc.c  */
#line 16028 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2983:

/* Line 1455 of yacc.c  */
#line 16032 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2984:

/* Line 1455 of yacc.c  */
#line 16033 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2985:

/* Line 1455 of yacc.c  */
#line 16038 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2986:

/* Line 1455 of yacc.c  */
#line 16039 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2987:

/* Line 1455 of yacc.c  */
#line 16040 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2988:

/* Line 1455 of yacc.c  */
#line 16045 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2989:

/* Line 1455 of yacc.c  */
#line 16046 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2990:

/* Line 1455 of yacc.c  */
#line 16047 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2991:

/* Line 1455 of yacc.c  */
#line 16051 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2992:

/* Line 1455 of yacc.c  */
#line 16052 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 2993:

/* Line 1455 of yacc.c  */
#line 16057 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2994:

/* Line 1455 of yacc.c  */
#line 16069 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2995:

/* Line 1455 of yacc.c  */
#line 16079 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_string_with_pos);
          }
    break;

  case 2996:

/* Line 1455 of yacc.c  */
#line 16088 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_string_with_pos);
          }
    break;

  case 2997:

/* Line 1455 of yacc.c  */
#line 16097 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_string_with_pos);
          }
    break;

  case 2998:

/* Line 1455 of yacc.c  */
#line 16110 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.unit_type)= UNION_TYPE; }
    break;

  case 2999:

/* Line 1455 of yacc.c  */
#line 16112 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.unit_type)= INTERSECT_TYPE; }
    break;

  case 3000:

/* Line 1455 of yacc.c  */
#line 16114 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.unit_type)= EXCEPT_TYPE; }
    break;

  case 3001:

/* Line 1455 of yacc.c  */
#line 16118 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3003:

/* Line 1455 of yacc.c  */
#line 16124 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_select_to_union_list((bool)(yyvsp[(2) - (2)].num), (yyvsp[(1) - (2)].unit_type), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 3004:

/* Line 1455 of yacc.c  */
#line 16129 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 3005:

/* Line 1455 of yacc.c  */
#line 16140 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_select_to_union_list((bool)(yyvsp[(2) - (2)].num), (yyvsp[(1) - (2)].unit_type), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 3006:

/* Line 1455 of yacc.c  */
#line 16145 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->pop_context();
          }
    break;

  case 3007:

/* Line 1455 of yacc.c  */
#line 16151 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 3008:

/* Line 1455 of yacc.c  */
#line 16165 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 3011:

/* Line 1455 of yacc.c  */
#line 16181 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_select_to_union_list((bool)(yyvsp[(2) - (2)].num), (yyvsp[(1) - (2)].unit_type), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 3012:

/* Line 1455 of yacc.c  */
#line 16188 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 3013:

/* Line 1455 of yacc.c  */
#line 16189 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 3014:

/* Line 1455 of yacc.c  */
#line 16190 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 3015:

/* Line 1455 of yacc.c  */
#line 16204 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 3016:

/* Line 1455 of yacc.c  */
#line 16210 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(1) - (3)].select_lex); }
    break;

  case 3017:

/* Line 1455 of yacc.c  */
#line 16211 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(2) - (4)].select_lex); }
    break;

  case 3018:

/* Line 1455 of yacc.c  */
#line 16215 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(1) - (2)].select_lex); }
    break;

  case 3019:

/* Line 1455 of yacc.c  */
#line 16216 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex); }
    break;

  case 3020:

/* Line 1455 of yacc.c  */
#line 16220 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(1) - (1)].select_lex); }
    break;

  case 3021:

/* Line 1455 of yacc.c  */
#line 16221 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(1) - (1)].select_lex); }
    break;

  case 3022:

/* Line 1455 of yacc.c  */
#line 16222 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.select_lex)= (yyvsp[(1) - (2)].select_lex); }
    break;

  case 3023:

/* Line 1455 of yacc.c  */
#line 16228 "/home/buildbot/git/sql/sql_yacc.yy"
    { 
            (yyvsp[(3) - (4)].select_lex)->set_with_clause((yyvsp[(2) - (4)].with_clause));
            (yyval.select_lex)= (yyvsp[(3) - (4)].select_lex);
          }
    break;

  case 3024:

/* Line 1455 of yacc.c  */
#line 16235 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              thd->parse_error();
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1, NULL))
              MYSQL_YYABORT;
          }
    break;

  case 3025:

/* Line 1455 of yacc.c  */
#line 16256 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->check_automatic_up(UNSPECIFIED_TYPE);
            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
    break;

  case 3030:

/* Line 1455 of yacc.c  */
#line 16292 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 3031:

/* Line 1455 of yacc.c  */
#line 16294 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 3032:

/* Line 1455 of yacc.c  */
#line 16301 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 3033:

/* Line 1455 of yacc.c  */
#line 16302 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 3034:

/* Line 1455 of yacc.c  */
#line 16303 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 3035:

/* Line 1455 of yacc.c  */
#line 16305 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 3036:

/* Line 1455 of yacc.c  */
#line 16311 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 3037:

/* Line 1455 of yacc.c  */
#line 16316 "/home/buildbot/git/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 3038:

/* Line 1455 of yacc.c  */
#line 16327 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3039:

/* Line 1455 of yacc.c  */
#line 16329 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3040:

/* Line 1455 of yacc.c  */
#line 16331 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3054:

/* Line 1455 of yacc.c  */
#line 16364 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
    break;

  case 3055:

/* Line 1455 of yacc.c  */
#line 16378 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->definer= (yyvsp[(3) - (3)].lex_user);
            Lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
            Lex->ssl_cipher= Lex->x509_subject= Lex->x509_issuer= 0;
            bzero(&(Lex->mqh), sizeof(Lex->mqh));
          }
    break;

  case 3056:

/* Line 1455 of yacc.c  */
#line 16394 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 3057:

/* Line 1455 of yacc.c  */
#line 16396 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 3058:

/* Line 1455 of yacc.c  */
#line 16398 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 3059:

/* Line 1455 of yacc.c  */
#line 16403 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 3060:

/* Line 1455 of yacc.c  */
#line 16405 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 3061:

/* Line 1455 of yacc.c  */
#line 16407 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 3062:

/* Line 1455 of yacc.c  */
#line 16412 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[(3) - (4)].object_ddl_options)))
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 3064:

/* Line 1455 of yacc.c  */
#line 16430 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3066:

/* Line 1455 of yacc.c  */
#line 16436 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[(1) - (1)].lex_string_with_pos), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
    break;

  case 3067:

/* Line 1455 of yacc.c  */
#line 16442 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[(3) - (3)].lex_string_with_pos), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
    break;

  case 3068:

/* Line 1455 of yacc.c  */
#line 16450 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 3069:

/* Line 1455 of yacc.c  */
#line 16456 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            uint not_used;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select,
                            &not_used);
            lex->parsing_options.allows_variable= TRUE;
            lex->current_select->set_with_clause((yyvsp[(2) - (4)].with_clause));
          }
    break;

  case 3074:

/* Line 1455 of yacc.c  */
#line 16483 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 3075:

/* Line 1455 of yacc.c  */
#line 16485 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 3076:

/* Line 1455 of yacc.c  */
#line 16487 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 3077:

/* Line 1455 of yacc.c  */
#line 16489 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 3078:

/* Line 1455 of yacc.c  */
#line 16500 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.trigger_action_order_type)= TRG_ORDER_FOLLOWS; }
    break;

  case 3079:

/* Line 1455 of yacc.c  */
#line 16502 "/home/buildbot/git/sql/sql_yacc.yy"
    { (yyval.trigger_action_order_type)= TRG_ORDER_PRECEDES; }
    break;

  case 3080:

/* Line 1455 of yacc.c  */
#line 16507 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              (yyval.trg_execution_order).ordering_clause= TRG_ORDER_NONE;
              (yyval.trg_execution_order).anchor_trigger_name.str= NULL;
              (yyval.trg_execution_order).anchor_trigger_name.length= 0;
            }
    break;

  case 3081:

/* Line 1455 of yacc.c  */
#line 16514 "/home/buildbot/git/sql/sql_yacc.yy"
    {
              (yyval.trg_execution_order).ordering_clause= (yyvsp[(1) - (2)].trigger_action_order_type);
              (yyval.trg_execution_order).anchor_trigger_name= (yyvsp[(2) - (2)].lex_str);
            }
    break;

  case 3082:

/* Line 1455 of yacc.c  */
#line 16524 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (Lex->add_create_options_with_check((yyvsp[(3) - (3)].object_ddl_options)))
              MYSQL_YYABORT;
          }
    break;

  case 3083:

/* Line 1455 of yacc.c  */
#line 16533 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $10 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 3084:

/* Line 1455 of yacc.c  */
#line 16539 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $14 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 3085:

/* Line 1455 of yacc.c  */
#line 16544 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->trg_chistics.ordering_clause_begin= YYLIP->get_cpp_ptr();
          }
    break;

  case 3086:

/* Line 1455 of yacc.c  */
#line 16548 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $19 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER"));

            lex->stmt_definition_begin= (yyvsp[(2) - (18)].simple_string);
            lex->ident.str= (yyvsp[(9) - (18)].simple_string);
            lex->ident.length= (yyvsp[(13) - (18)].simple_string) - (yyvsp[(9) - (18)].simple_string);
            lex->spname= (yyvsp[(5) - (18)].spname);
            (*static_cast<st_trg_execution_order*>(&lex->trg_chistics))= ((yyvsp[(18) - (18)].trg_execution_order));
            lex->trg_chistics.ordering_clause_end= lip->get_cpp_ptr();

            if (!lex->make_sp_head(thd, (yyvsp[(5) - (18)].spname), TYPE_ENUM_TRIGGER))
              MYSQL_YYABORT;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 3087:

/* Line 1455 of yacc.c  */
#line 16568 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $21 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(11) - (20)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 3088:

/* Line 1455 of yacc.c  */
#line 16600 "/home/buildbot/git/sql/sql_yacc.yy"
    { thd->lex->udf.type= UDFTYPE_AGGREGATE; }
    break;

  case 3089:

/* Line 1455 of yacc.c  */
#line 16601 "/home/buildbot/git/sql/sql_yacc.yy"
    { thd->lex->udf.type= UDFTYPE_FUNCTION;  }
    break;

  case 3090:

/* Line 1455 of yacc.c  */
#line 16607 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[(2) - (7)].object_ddl_options)))
              MYSQL_YYABORT;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_string_with_pos)))
              my_yyabort_error((ER_NATIVE_FCT_NAME_COLLISION, MYF(0), (yyvsp[(3) - (7)].lex_string_with_pos).str));
            lex->sql_command= SQLCOM_CREATE_FUNCTION;
            lex->udf.name= (yyvsp[(3) - (7)].lex_string_with_pos);
            lex->udf.returns= (Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl= (yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 3091:

/* Line 1455 of yacc.c  */
#line 16624 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $4 */
            if (!Lex->make_sp_head_no_recursive(thd, (yyvsp[(2) - (3)].object_ddl_options), (yyvsp[(3) - (3)].spname),
                                                TYPE_ENUM_FUNCTION))
              MYSQL_YYABORT;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 3092:

/* Line 1455 of yacc.c  */
#line 16632 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $7 */
            LEX *lex= Lex;
            lex->init_last_field(&lex->sphead->m_return_field_def, NULL,
                                 thd->variables.collation_database);
          }
    break;

  case 3093:

/* Line 1455 of yacc.c  */
#line 16638 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $9 */
            if (Lex->sphead->fill_field_definition(thd, Lex->last_field))
              MYSQL_YYABORT;
          }
    break;

  case 3094:

/* Line 1455 of yacc.c  */
#line 16643 "/home/buildbot/git/sql/sql_yacc.yy"
    { /* $11 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 3095:

/* Line 1455 of yacc.c  */
#line 16650 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
              my_yyabort_error((ER_SP_NORETURN, MYF(0),
                                ErrConvDQName(sp).ptr()));
            (void) is_native_function_with_warn(thd, &sp->m_name);
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 3096:

/* Line 1455 of yacc.c  */
#line 16669 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            if (!Lex->make_sp_head_no_recursive(thd, (yyvsp[(2) - (3)].object_ddl_options), (yyvsp[(3) - (3)].spname),
                                                TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 3097:

/* Line 1455 of yacc.c  */
#line 16677 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 3098:

/* Line 1455 of yacc.c  */
#line 16681 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 3099:

/* Line 1455 of yacc.c  */
#line 16695 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 3100:

/* Line 1455 of yacc.c  */
#line 16699 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 3101:

/* Line 1455 of yacc.c  */
#line 16703 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 3102:

/* Line 1455 of yacc.c  */
#line 16707 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 3103:

/* Line 1455 of yacc.c  */
#line 16711 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 3104:

/* Line 1455 of yacc.c  */
#line 16715 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 3105:

/* Line 1455 of yacc.c  */
#line 16722 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 3106:

/* Line 1455 of yacc.c  */
#line 16729 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 3107:

/* Line 1455 of yacc.c  */
#line 16736 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 3108:

/* Line 1455 of yacc.c  */
#line 16745 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3109:

/* Line 1455 of yacc.c  */
#line 16746 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3110:

/* Line 1455 of yacc.c  */
#line 16750 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 3111:

/* Line 1455 of yacc.c  */
#line 16751 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 3112:

/* Line 1455 of yacc.c  */
#line 16752 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 3113:

/* Line 1455 of yacc.c  */
#line 16756 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 3114:

/* Line 1455 of yacc.c  */
#line 16757 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 3115:

/* Line 1455 of yacc.c  */
#line 16762 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 3116:

/* Line 1455 of yacc.c  */
#line 16764 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 3118:

/* Line 1455 of yacc.c  */
#line 16769 "/home/buildbot/git/sql/sql_yacc.yy"
    {}
    break;

  case 3119:

/* Line 1455 of yacc.c  */
#line 16770 "/home/buildbot/git/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 3120:

/* Line 1455 of yacc.c  */
#line 16775 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_string_with_pos);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 3121:

/* Line 1455 of yacc.c  */
#line 16782 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 3122:

/* Line 1455 of yacc.c  */
#line 16792 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_string_with_pos);
          }
    break;

  case 3123:

/* Line 1455 of yacc.c  */
#line 16798 "/home/buildbot/git/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 3124:

/* Line 1455 of yacc.c  */
#line 16809 "/home/buildbot/git/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;



/* Line 1455 of yacc.c  */
#line 48925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (thd, yymsg);
	  }
	else
	  {
	    yyerror (thd, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, thd);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, thd);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



